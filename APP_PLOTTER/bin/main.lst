
./bin/main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000200 <OSStartHighRdy>:
@              e) Enable interrupts (tasks will run with interrupts enabled).
@********************************************************************************************************

.thumb_func
OSStartHighRdy:
    CPSID   I                                                   @ Prevent interruption during context switch
 8000200:	b672      	cpsid	i
    MOVW    R0, #:lower16:NVIC_SYSPRI14                         @ Set the PendSV exception priority
 8000202:	f64e 5022 	movw	r0, #60706	; 0xed22
    MOVT    R0, #:upper16:NVIC_SYSPRI14
 8000206:	f2ce 0000 	movt	r0, #57344	; 0xe000

    MOVW    R1, #:lower16:NVIC_PENDSV_PRI
 800020a:	f240 01ff 	movw	r1, #255	; 0xff
    MOVT    R1, #:upper16:NVIC_PENDSV_PRI
 800020e:	f2c0 0100 	movt	r1, #0
    STRB    R1, [R0]
 8000212:	7001      	strb	r1, [r0, #0]

    MOVW    R0, #:lower16:OS_CPU_ExceptStkBase                  @ Initialize the MSP to the OS_CPU_ExceptStkBase
 8000214:	f243 3010 	movw	r0, #13072	; 0x3310
    MOVT    R0, #:upper16:OS_CPU_ExceptStkBase
 8000218:	f2c2 0000 	movt	r0, #8192	; 0x2000
    LDR     R1, [R0]
 800021c:	6801      	ldr	r1, [r0, #0]
    MSR     MSP, R1
 800021e:	f381 8808 	msr	MSP, r1

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 8000222:	f242 00a8 	movw	r0, #8360	; 0x20a8
    MOVT    R0, #:upper16:OSPrioCur
 8000226:	f2c2 0000 	movt	r0, #8192	; 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 800022a:	f242 019c 	movw	r1, #8348	; 0x209c
    MOVT    R1, #:upper16:OSPrioHighRdy
 800022e:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDRB    R2, [R1]
 8000232:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 8000234:	7002      	strb	r2, [r0, #0]

    MOVW    R5, #:lower16:OSTCBCurPtr
 8000236:	f242 1574 	movw	r5, #8564	; 0x2174
    MOVT    R5, #:upper16:OSTCBCurPtr
 800023a:	f2c2 0500 	movt	r5, #8192	; 0x2000
    MOVW    R1, #:lower16:OSTCBHighRdyPtr                       @ OSTCBCurPtr = OSTCBHighRdyPtr;
 800023e:	f242 1180 	movw	r1, #8576	; 0x2180
    MOVT    R1, #:upper16:OSTCBHighRdyPtr
 8000242:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDR     R2, [R1]
 8000246:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R5]
 8000248:	602a      	str	r2, [r5, #0]

    LDR     R0, [R2]                                            @ R0 is new process SP; SP = OSTCBHighRdyPtr->StkPtr;
 800024a:	6810      	ldr	r0, [r2, #0]
    MSR     PSP, R0                                             @ Load PSP with new process SP
 800024c:	f380 8809 	msr	PSP, r0

    MRS     R0, CONTROL
 8000250:	f3ef 8014 	mrs	r0, CONTROL
    ORR     R0, R0, #2
 8000254:	f040 0002 	orr.w	r0, r0, #2
    MSR     CONTROL, R0
 8000258:	f380 8814 	msr	CONTROL, r0
    ISB                                                         @ Sync instruction stream
 800025c:	f3bf 8f6f 	isb	sy

    LDMFD    SP!, {R4-R11}                                      @ Restore r4-11 from new process stack
 8000260:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    LDMFD    SP!, {R0-R3}                                       @ Restore r0, r3
 8000264:	bc0f      	pop	{r0, r1, r2, r3}
    LDMFD    SP!, {R12, LR}                                     @ Load R12 and LR
 8000266:	e8bd 5000 	ldmia.w	sp!, {ip, lr}
    LDMFD    SP!, {R1, R2}                                      @ Load PC and discard xPSR
 800026a:	bc06      	pop	{r1, r2}
    CPSIE    I
 800026c:	b662      	cpsie	i
    BX       R1
 800026e:	4708      	bx	r1

08000270 <OSCtxSw>:
@              triggers the PendSV exception which is where the real work is done.
@********************************************************************************************************

.thumb_func
OSCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 8000270:	4818      	ldr	r0, [pc, #96]	; (80002d4 <OS_CPU_PendSVHandler+0x50>)
    LDR     R1, =NVIC_PENDSVSET
 8000272:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    STR     R1, [R0]
 8000276:	6001      	str	r1, [r0, #0]
    BX      LR
 8000278:	4770      	bx	lr

0800027a <OSIntCtxSw>:
@              be handled when there are no more interrupts active and interrupts are enabled.
@********************************************************************************************************

.thumb_func
OSIntCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 800027a:	4816      	ldr	r0, [pc, #88]	; (80002d4 <OS_CPU_PendSVHandler+0x50>)
    LDR     R1, =NVIC_PENDSVSET
 800027c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    STR     R1, [R0]
 8000280:	6001      	str	r1, [r0, #0]
    BX      LR
 8000282:	4770      	bx	lr

08000284 <OS_CPU_PendSVHandler>:
@              therefore safe to assume that context being switched out was using the process stack (PSP).
@********************************************************************************************************

.thumb_func
OS_CPU_PendSVHandler:
    CPSID   I                                                   @ Prevent interruption during context switch
 8000284:	b672      	cpsid	i
    MRS     R0, PSP                                             @ PSP is process stack pointer
 8000286:	f3ef 8009 	mrs	r0, PSP
    STMFD   R0!, {R4-R11}                                       @ Save remaining regs r4-11 on process stack
 800028a:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

    MOVW    R5, #:lower16:OSTCBCurPtr                           @ OSTCBCurPtr->OSTCBStkPtr = SP;
 800028e:	f242 1574 	movw	r5, #8564	; 0x2174
    MOVT    R5, #:upper16:OSTCBCurPtr
 8000292:	f2c2 0500 	movt	r5, #8192	; 0x2000
    LDR     R6, [R5]
 8000296:	682e      	ldr	r6, [r5, #0]
    STR     R0, [R6]                                            @ R0 is SP of process being switched out
 8000298:	6030      	str	r0, [r6, #0]

                                                                @ At this point, entire context of process has been saved
    MOV     R4, LR                                              @ Save LR exc_return value
 800029a:	4674      	mov	r4, lr
    BL      OSTaskSwHook                                        @ OSTaskSwHook();
 800029c:	f005 fe94 	bl	8005fc8 <OSTaskSwHook>

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 80002a0:	f242 00a8 	movw	r0, #8360	; 0x20a8
    MOVT    R0, #:upper16:OSPrioCur
 80002a4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 80002a8:	f242 019c 	movw	r1, #8348	; 0x209c
    MOVT    R1, #:upper16:OSPrioHighRdy
 80002ac:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDRB    R2, [R1]
 80002b0:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 80002b2:	7002      	strb	r2, [r0, #0]

    MOVW    R1, #:lower16:OSTCBHighRdyPtr                      @ OSTCBCurPtr = OSTCBHighRdyPtr;
 80002b4:	f242 1180 	movw	r1, #8576	; 0x2180
    MOVT    R1, #:upper16:OSTCBHighRdyPtr
 80002b8:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDR     R2, [R1]
 80002bc:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R5]
 80002be:	602a      	str	r2, [r5, #0]

    ORR     LR, R4, #0xF4                                       @ Ensure exception return uses process stack
 80002c0:	f044 0ef4 	orr.w	lr, r4, #244	; 0xf4
    LDR     R0, [R2]                                            @ R0 is new process SP; SP = OSTCBHighRdyPtr->StkPtr;
 80002c4:	6810      	ldr	r0, [r2, #0]
    LDMFD   R0!, {R4-R11}                                       @ Restore r4-11 from new process stack
 80002c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, R0                                             @ Load PSP with new process SP
 80002ca:	f380 8809 	msr	PSP, r0
    CPSIE   I
 80002ce:	b662      	cpsie	i
    BX      LR                                                  @ Exception return will restore remaining context
 80002d0:	4770      	bx	lr
 80002d2:	0000      	.short	0x0000
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 80002d4:	e000ed04 	.word	0xe000ed04

080002d8 <CPU_IntDis>:
@              void  CPU_IntEn (void);
@********************************************************************************************************

.thumb_func
CPU_IntDis:
        CPSID   I
 80002d8:	b672      	cpsid	i
        BX      LR
 80002da:	4770      	bx	lr

080002dc <CPU_IntEn>:

.thumb_func
CPU_IntEn:
        CPSIE   I
 80002dc:	b662      	cpsie	i
        BX      LR
 80002de:	4770      	bx	lr

080002e0 <CPU_SR_Save>:
@                       }
@********************************************************************************************************

.thumb_func
CPU_SR_Save:
        MRS     R0, PRIMASK                     @ Set prio int mask to mask all (except faults)
 80002e0:	f3ef 8010 	mrs	r0, PRIMASK
        CPSID   I
 80002e4:	b672      	cpsid	i
        BX      LR
 80002e6:	4770      	bx	lr

080002e8 <CPU_SR_Restore>:

.thumb_func
CPU_SR_Restore:                                  @ See Note #2.
        MSR     PRIMASK, R0
 80002e8:	f380 8810 	msr	PRIMASK, r0
        BX      LR
 80002ec:	4770      	bx	lr

080002ee <CPU_WaitForInt>:
@ Argument(s) : none.
@********************************************************************************************************

.thumb_func
CPU_WaitForInt:
        WFI                                     @ Wait for interrupt
 80002ee:	bf30      	wfi
        BX      LR
 80002f0:	4770      	bx	lr

080002f2 <CPU_WaitForExcept>:
@ Argument(s) : none.
@********************************************************************************************************

.thumb_func
CPU_WaitForExcept:
        WFE                                     @ Wait for exception
 80002f2:	bf20      	wfe
        BX      LR
 80002f4:	4770      	bx	lr

080002f6 <CPU_CntLeadZeros>:
@                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
@********************************************************************************************************

.thumb_func
CPU_CntLeadZeros:
        CLZ     R0, R0                          @ Count leading zeros
 80002f6:	fab0 f080 	clz	r0, r0
        BX      LR
 80002fa:	4770      	bx	lr

080002fc <CPU_CntTrailZeros>:
@                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
@********************************************************************************************************

.thumb_func
CPU_CntTrailZeros:
        RBIT    R0, R0                          @ Reverse bits
 80002fc:	fa90 f0a0 	rbit	r0, r0
        CLZ     R0, R0                          @ Count trailing zeros
 8000300:	fab0 f080 	clz	r0, r0
        BX      LR
 8000304:	4770      	bx	lr

08000306 <CPU_RevBits>:
@                       'val's final bit  N       =  'val's original bit  0
@********************************************************************************************************

.thumb_func
CPU_RevBits:
        RBIT    R0, R0                          @ Reverse bits
 8000306:	fa90 f0a0 	rbit	r0, r0
        BX      LR
 800030a:	4770      	bx	lr

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800031c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000320:	f000 b972 	b.w	8000608 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9e08      	ldr	r6, [sp, #32]
 8000342:	4604      	mov	r4, r0
 8000344:	4688      	mov	r8, r1
 8000346:	2b00      	cmp	r3, #0
 8000348:	d14b      	bne.n	80003e2 <__udivmoddi4+0xa6>
 800034a:	428a      	cmp	r2, r1
 800034c:	4615      	mov	r5, r2
 800034e:	d967      	bls.n	8000420 <__udivmoddi4+0xe4>
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0720 	rsb	r7, r2, #32
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	fa20 f707 	lsr.w	r7, r0, r7
 8000362:	4095      	lsls	r5, r2
 8000364:	ea47 0803 	orr.w	r8, r7, r3
 8000368:	4094      	lsls	r4, r2
 800036a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800036e:	0c23      	lsrs	r3, r4, #16
 8000370:	fbb8 f7fe 	udiv	r7, r8, lr
 8000374:	fa1f fc85 	uxth.w	ip, r5
 8000378:	fb0e 8817 	mls	r8, lr, r7, r8
 800037c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000380:	fb07 f10c 	mul.w	r1, r7, ip
 8000384:	4299      	cmp	r1, r3
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x60>
 8000388:	18eb      	adds	r3, r5, r3
 800038a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800038e:	f080 811b 	bcs.w	80005c8 <__udivmoddi4+0x28c>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 8118 	bls.w	80005c8 <__udivmoddi4+0x28c>
 8000398:	3f02      	subs	r7, #2
 800039a:	442b      	add	r3, r5
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003ac:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d909      	bls.n	80003c8 <__udivmoddi4+0x8c>
 80003b4:	192c      	adds	r4, r5, r4
 80003b6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003ba:	f080 8107 	bcs.w	80005cc <__udivmoddi4+0x290>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	f240 8104 	bls.w	80005cc <__udivmoddi4+0x290>
 80003c4:	3802      	subs	r0, #2
 80003c6:	442c      	add	r4, r5
 80003c8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003cc:	eba4 040c 	sub.w	r4, r4, ip
 80003d0:	2700      	movs	r7, #0
 80003d2:	b11e      	cbz	r6, 80003dc <__udivmoddi4+0xa0>
 80003d4:	40d4      	lsrs	r4, r2
 80003d6:	2300      	movs	r3, #0
 80003d8:	e9c6 4300 	strd	r4, r3, [r6]
 80003dc:	4639      	mov	r1, r7
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d909      	bls.n	80003fa <__udivmoddi4+0xbe>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	f000 80eb 	beq.w	80005c2 <__udivmoddi4+0x286>
 80003ec:	2700      	movs	r7, #0
 80003ee:	e9c6 0100 	strd	r0, r1, [r6]
 80003f2:	4638      	mov	r0, r7
 80003f4:	4639      	mov	r1, r7
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	fab3 f783 	clz	r7, r3
 80003fe:	2f00      	cmp	r7, #0
 8000400:	d147      	bne.n	8000492 <__udivmoddi4+0x156>
 8000402:	428b      	cmp	r3, r1
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xd0>
 8000406:	4282      	cmp	r2, r0
 8000408:	f200 80fa 	bhi.w	8000600 <__udivmoddi4+0x2c4>
 800040c:	1a84      	subs	r4, r0, r2
 800040e:	eb61 0303 	sbc.w	r3, r1, r3
 8000412:	2001      	movs	r0, #1
 8000414:	4698      	mov	r8, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d0e0      	beq.n	80003dc <__udivmoddi4+0xa0>
 800041a:	e9c6 4800 	strd	r4, r8, [r6]
 800041e:	e7dd      	b.n	80003dc <__udivmoddi4+0xa0>
 8000420:	b902      	cbnz	r2, 8000424 <__udivmoddi4+0xe8>
 8000422:	deff      	udf	#255	; 0xff
 8000424:	fab2 f282 	clz	r2, r2
 8000428:	2a00      	cmp	r2, #0
 800042a:	f040 808f 	bne.w	800054c <__udivmoddi4+0x210>
 800042e:	1b49      	subs	r1, r1, r5
 8000430:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000434:	fa1f f885 	uxth.w	r8, r5
 8000438:	2701      	movs	r7, #1
 800043a:	fbb1 fcfe 	udiv	ip, r1, lr
 800043e:	0c23      	lsrs	r3, r4, #16
 8000440:	fb0e 111c 	mls	r1, lr, ip, r1
 8000444:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000448:	fb08 f10c 	mul.w	r1, r8, ip
 800044c:	4299      	cmp	r1, r3
 800044e:	d907      	bls.n	8000460 <__udivmoddi4+0x124>
 8000450:	18eb      	adds	r3, r5, r3
 8000452:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000456:	d202      	bcs.n	800045e <__udivmoddi4+0x122>
 8000458:	4299      	cmp	r1, r3
 800045a:	f200 80cd 	bhi.w	80005f8 <__udivmoddi4+0x2bc>
 800045e:	4684      	mov	ip, r0
 8000460:	1a59      	subs	r1, r3, r1
 8000462:	b2a3      	uxth	r3, r4
 8000464:	fbb1 f0fe 	udiv	r0, r1, lr
 8000468:	fb0e 1410 	mls	r4, lr, r0, r1
 800046c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000470:	fb08 f800 	mul.w	r8, r8, r0
 8000474:	45a0      	cmp	r8, r4
 8000476:	d907      	bls.n	8000488 <__udivmoddi4+0x14c>
 8000478:	192c      	adds	r4, r5, r4
 800047a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800047e:	d202      	bcs.n	8000486 <__udivmoddi4+0x14a>
 8000480:	45a0      	cmp	r8, r4
 8000482:	f200 80b6 	bhi.w	80005f2 <__udivmoddi4+0x2b6>
 8000486:	4618      	mov	r0, r3
 8000488:	eba4 0408 	sub.w	r4, r4, r8
 800048c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000490:	e79f      	b.n	80003d2 <__udivmoddi4+0x96>
 8000492:	f1c7 0c20 	rsb	ip, r7, #32
 8000496:	40bb      	lsls	r3, r7
 8000498:	fa22 fe0c 	lsr.w	lr, r2, ip
 800049c:	ea4e 0e03 	orr.w	lr, lr, r3
 80004a0:	fa01 f407 	lsl.w	r4, r1, r7
 80004a4:	fa20 f50c 	lsr.w	r5, r0, ip
 80004a8:	fa21 f30c 	lsr.w	r3, r1, ip
 80004ac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004b0:	4325      	orrs	r5, r4
 80004b2:	fbb3 f9f8 	udiv	r9, r3, r8
 80004b6:	0c2c      	lsrs	r4, r5, #16
 80004b8:	fb08 3319 	mls	r3, r8, r9, r3
 80004bc:	fa1f fa8e 	uxth.w	sl, lr
 80004c0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004c4:	fb09 f40a 	mul.w	r4, r9, sl
 80004c8:	429c      	cmp	r4, r3
 80004ca:	fa02 f207 	lsl.w	r2, r2, r7
 80004ce:	fa00 f107 	lsl.w	r1, r0, r7
 80004d2:	d90b      	bls.n	80004ec <__udivmoddi4+0x1b0>
 80004d4:	eb1e 0303 	adds.w	r3, lr, r3
 80004d8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004dc:	f080 8087 	bcs.w	80005ee <__udivmoddi4+0x2b2>
 80004e0:	429c      	cmp	r4, r3
 80004e2:	f240 8084 	bls.w	80005ee <__udivmoddi4+0x2b2>
 80004e6:	f1a9 0902 	sub.w	r9, r9, #2
 80004ea:	4473      	add	r3, lr
 80004ec:	1b1b      	subs	r3, r3, r4
 80004ee:	b2ad      	uxth	r5, r5
 80004f0:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f4:	fb08 3310 	mls	r3, r8, r0, r3
 80004f8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004fc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000500:	45a2      	cmp	sl, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x1da>
 8000504:	eb1e 0404 	adds.w	r4, lr, r4
 8000508:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800050c:	d26b      	bcs.n	80005e6 <__udivmoddi4+0x2aa>
 800050e:	45a2      	cmp	sl, r4
 8000510:	d969      	bls.n	80005e6 <__udivmoddi4+0x2aa>
 8000512:	3802      	subs	r0, #2
 8000514:	4474      	add	r4, lr
 8000516:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051a:	fba0 8902 	umull	r8, r9, r0, r2
 800051e:	eba4 040a 	sub.w	r4, r4, sl
 8000522:	454c      	cmp	r4, r9
 8000524:	46c2      	mov	sl, r8
 8000526:	464b      	mov	r3, r9
 8000528:	d354      	bcc.n	80005d4 <__udivmoddi4+0x298>
 800052a:	d051      	beq.n	80005d0 <__udivmoddi4+0x294>
 800052c:	2e00      	cmp	r6, #0
 800052e:	d069      	beq.n	8000604 <__udivmoddi4+0x2c8>
 8000530:	ebb1 050a 	subs.w	r5, r1, sl
 8000534:	eb64 0403 	sbc.w	r4, r4, r3
 8000538:	fa04 fc0c 	lsl.w	ip, r4, ip
 800053c:	40fd      	lsrs	r5, r7
 800053e:	40fc      	lsrs	r4, r7
 8000540:	ea4c 0505 	orr.w	r5, ip, r5
 8000544:	e9c6 5400 	strd	r5, r4, [r6]
 8000548:	2700      	movs	r7, #0
 800054a:	e747      	b.n	80003dc <__udivmoddi4+0xa0>
 800054c:	f1c2 0320 	rsb	r3, r2, #32
 8000550:	fa20 f703 	lsr.w	r7, r0, r3
 8000554:	4095      	lsls	r5, r2
 8000556:	fa01 f002 	lsl.w	r0, r1, r2
 800055a:	fa21 f303 	lsr.w	r3, r1, r3
 800055e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000562:	4338      	orrs	r0, r7
 8000564:	0c01      	lsrs	r1, r0, #16
 8000566:	fbb3 f7fe 	udiv	r7, r3, lr
 800056a:	fa1f f885 	uxth.w	r8, r5
 800056e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb07 f308 	mul.w	r3, r7, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	fa04 f402 	lsl.w	r4, r4, r2
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x256>
 8000582:	1869      	adds	r1, r5, r1
 8000584:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000588:	d22f      	bcs.n	80005ea <__udivmoddi4+0x2ae>
 800058a:	428b      	cmp	r3, r1
 800058c:	d92d      	bls.n	80005ea <__udivmoddi4+0x2ae>
 800058e:	3f02      	subs	r7, #2
 8000590:	4429      	add	r1, r5
 8000592:	1acb      	subs	r3, r1, r3
 8000594:	b281      	uxth	r1, r0
 8000596:	fbb3 f0fe 	udiv	r0, r3, lr
 800059a:	fb0e 3310 	mls	r3, lr, r0, r3
 800059e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a2:	fb00 f308 	mul.w	r3, r0, r8
 80005a6:	428b      	cmp	r3, r1
 80005a8:	d907      	bls.n	80005ba <__udivmoddi4+0x27e>
 80005aa:	1869      	adds	r1, r5, r1
 80005ac:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80005b0:	d217      	bcs.n	80005e2 <__udivmoddi4+0x2a6>
 80005b2:	428b      	cmp	r3, r1
 80005b4:	d915      	bls.n	80005e2 <__udivmoddi4+0x2a6>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4429      	add	r1, r5
 80005ba:	1ac9      	subs	r1, r1, r3
 80005bc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005c0:	e73b      	b.n	800043a <__udivmoddi4+0xfe>
 80005c2:	4637      	mov	r7, r6
 80005c4:	4630      	mov	r0, r6
 80005c6:	e709      	b.n	80003dc <__udivmoddi4+0xa0>
 80005c8:	4607      	mov	r7, r0
 80005ca:	e6e7      	b.n	800039c <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fb      	b.n	80003c8 <__udivmoddi4+0x8c>
 80005d0:	4541      	cmp	r1, r8
 80005d2:	d2ab      	bcs.n	800052c <__udivmoddi4+0x1f0>
 80005d4:	ebb8 0a02 	subs.w	sl, r8, r2
 80005d8:	eb69 020e 	sbc.w	r2, r9, lr
 80005dc:	3801      	subs	r0, #1
 80005de:	4613      	mov	r3, r2
 80005e0:	e7a4      	b.n	800052c <__udivmoddi4+0x1f0>
 80005e2:	4660      	mov	r0, ip
 80005e4:	e7e9      	b.n	80005ba <__udivmoddi4+0x27e>
 80005e6:	4618      	mov	r0, r3
 80005e8:	e795      	b.n	8000516 <__udivmoddi4+0x1da>
 80005ea:	4667      	mov	r7, ip
 80005ec:	e7d1      	b.n	8000592 <__udivmoddi4+0x256>
 80005ee:	4681      	mov	r9, r0
 80005f0:	e77c      	b.n	80004ec <__udivmoddi4+0x1b0>
 80005f2:	3802      	subs	r0, #2
 80005f4:	442c      	add	r4, r5
 80005f6:	e747      	b.n	8000488 <__udivmoddi4+0x14c>
 80005f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80005fc:	442b      	add	r3, r5
 80005fe:	e72f      	b.n	8000460 <__udivmoddi4+0x124>
 8000600:	4638      	mov	r0, r7
 8000602:	e708      	b.n	8000416 <__udivmoddi4+0xda>
 8000604:	4637      	mov	r7, r6
 8000606:	e6e9      	b.n	80003dc <__udivmoddi4+0xa0>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <memcpy>:
 800060c:	4684      	mov	ip, r0
 800060e:	ea41 0300 	orr.w	r3, r1, r0
 8000612:	f013 0303 	ands.w	r3, r3, #3
 8000616:	d16d      	bne.n	80006f4 <memcpy+0xe8>
 8000618:	3a40      	subs	r2, #64	; 0x40
 800061a:	d341      	bcc.n	80006a0 <memcpy+0x94>
 800061c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000620:	f840 3b04 	str.w	r3, [r0], #4
 8000624:	f851 3b04 	ldr.w	r3, [r1], #4
 8000628:	f840 3b04 	str.w	r3, [r0], #4
 800062c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000630:	f840 3b04 	str.w	r3, [r0], #4
 8000634:	f851 3b04 	ldr.w	r3, [r1], #4
 8000638:	f840 3b04 	str.w	r3, [r0], #4
 800063c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000640:	f840 3b04 	str.w	r3, [r0], #4
 8000644:	f851 3b04 	ldr.w	r3, [r1], #4
 8000648:	f840 3b04 	str.w	r3, [r0], #4
 800064c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000650:	f840 3b04 	str.w	r3, [r0], #4
 8000654:	f851 3b04 	ldr.w	r3, [r1], #4
 8000658:	f840 3b04 	str.w	r3, [r0], #4
 800065c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000660:	f840 3b04 	str.w	r3, [r0], #4
 8000664:	f851 3b04 	ldr.w	r3, [r1], #4
 8000668:	f840 3b04 	str.w	r3, [r0], #4
 800066c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000670:	f840 3b04 	str.w	r3, [r0], #4
 8000674:	f851 3b04 	ldr.w	r3, [r1], #4
 8000678:	f840 3b04 	str.w	r3, [r0], #4
 800067c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000680:	f840 3b04 	str.w	r3, [r0], #4
 8000684:	f851 3b04 	ldr.w	r3, [r1], #4
 8000688:	f840 3b04 	str.w	r3, [r0], #4
 800068c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000690:	f840 3b04 	str.w	r3, [r0], #4
 8000694:	f851 3b04 	ldr.w	r3, [r1], #4
 8000698:	f840 3b04 	str.w	r3, [r0], #4
 800069c:	3a40      	subs	r2, #64	; 0x40
 800069e:	d2bd      	bcs.n	800061c <memcpy+0x10>
 80006a0:	3230      	adds	r2, #48	; 0x30
 80006a2:	d311      	bcc.n	80006c8 <memcpy+0xbc>
 80006a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80006a8:	f840 3b04 	str.w	r3, [r0], #4
 80006ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80006b0:	f840 3b04 	str.w	r3, [r0], #4
 80006b4:	f851 3b04 	ldr.w	r3, [r1], #4
 80006b8:	f840 3b04 	str.w	r3, [r0], #4
 80006bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80006c0:	f840 3b04 	str.w	r3, [r0], #4
 80006c4:	3a10      	subs	r2, #16
 80006c6:	d2ed      	bcs.n	80006a4 <memcpy+0x98>
 80006c8:	320c      	adds	r2, #12
 80006ca:	d305      	bcc.n	80006d8 <memcpy+0xcc>
 80006cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80006d0:	f840 3b04 	str.w	r3, [r0], #4
 80006d4:	3a04      	subs	r2, #4
 80006d6:	d2f9      	bcs.n	80006cc <memcpy+0xc0>
 80006d8:	3204      	adds	r2, #4
 80006da:	d008      	beq.n	80006ee <memcpy+0xe2>
 80006dc:	07d2      	lsls	r2, r2, #31
 80006de:	bf1c      	itt	ne
 80006e0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80006e4:	f800 3b01 	strbne.w	r3, [r0], #1
 80006e8:	d301      	bcc.n	80006ee <memcpy+0xe2>
 80006ea:	880b      	ldrh	r3, [r1, #0]
 80006ec:	8003      	strh	r3, [r0, #0]
 80006ee:	4660      	mov	r0, ip
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	2a08      	cmp	r2, #8
 80006f6:	d313      	bcc.n	8000720 <memcpy+0x114>
 80006f8:	078b      	lsls	r3, r1, #30
 80006fa:	d08d      	beq.n	8000618 <memcpy+0xc>
 80006fc:	f010 0303 	ands.w	r3, r0, #3
 8000700:	d08a      	beq.n	8000618 <memcpy+0xc>
 8000702:	f1c3 0304 	rsb	r3, r3, #4
 8000706:	1ad2      	subs	r2, r2, r3
 8000708:	07db      	lsls	r3, r3, #31
 800070a:	bf1c      	itt	ne
 800070c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000710:	f800 3b01 	strbne.w	r3, [r0], #1
 8000714:	d380      	bcc.n	8000618 <memcpy+0xc>
 8000716:	f831 3b02 	ldrh.w	r3, [r1], #2
 800071a:	f820 3b02 	strh.w	r3, [r0], #2
 800071e:	e77b      	b.n	8000618 <memcpy+0xc>
 8000720:	3a04      	subs	r2, #4
 8000722:	d3d9      	bcc.n	80006d8 <memcpy+0xcc>
 8000724:	3a01      	subs	r2, #1
 8000726:	f811 3b01 	ldrb.w	r3, [r1], #1
 800072a:	f800 3b01 	strb.w	r3, [r0], #1
 800072e:	d2f9      	bcs.n	8000724 <memcpy+0x118>
 8000730:	780b      	ldrb	r3, [r1, #0]
 8000732:	7003      	strb	r3, [r0, #0]
 8000734:	784b      	ldrb	r3, [r1, #1]
 8000736:	7043      	strb	r3, [r0, #1]
 8000738:	788b      	ldrb	r3, [r1, #2]
 800073a:	7083      	strb	r3, [r0, #2]
 800073c:	4660      	mov	r0, ip
 800073e:	4770      	bx	lr

08000740 <strlen>:
 8000740:	f890 f000 	pld	[r0]
 8000744:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8000748:	f020 0107 	bic.w	r1, r0, #7
 800074c:	f06f 0c00 	mvn.w	ip, #0
 8000750:	f010 0407 	ands.w	r4, r0, #7
 8000754:	f891 f020 	pld	[r1, #32]
 8000758:	f040 8049 	bne.w	80007ee <strlen+0xae>
 800075c:	f04f 0400 	mov.w	r4, #0
 8000760:	f06f 0007 	mvn.w	r0, #7
 8000764:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000768:	f891 f040 	pld	[r1, #64]	; 0x40
 800076c:	f100 0008 	add.w	r0, r0, #8
 8000770:	fa82 f24c 	uadd8	r2, r2, ip
 8000774:	faa4 f28c 	sel	r2, r4, ip
 8000778:	fa83 f34c 	uadd8	r3, r3, ip
 800077c:	faa2 f38c 	sel	r3, r2, ip
 8000780:	bb4b      	cbnz	r3, 80007d6 <strlen+0x96>
 8000782:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8000786:	fa82 f24c 	uadd8	r2, r2, ip
 800078a:	f100 0008 	add.w	r0, r0, #8
 800078e:	faa4 f28c 	sel	r2, r4, ip
 8000792:	fa83 f34c 	uadd8	r3, r3, ip
 8000796:	faa2 f38c 	sel	r3, r2, ip
 800079a:	b9e3      	cbnz	r3, 80007d6 <strlen+0x96>
 800079c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 80007a0:	fa82 f24c 	uadd8	r2, r2, ip
 80007a4:	f100 0008 	add.w	r0, r0, #8
 80007a8:	faa4 f28c 	sel	r2, r4, ip
 80007ac:	fa83 f34c 	uadd8	r3, r3, ip
 80007b0:	faa2 f38c 	sel	r3, r2, ip
 80007b4:	b97b      	cbnz	r3, 80007d6 <strlen+0x96>
 80007b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80007ba:	f101 0120 	add.w	r1, r1, #32
 80007be:	fa82 f24c 	uadd8	r2, r2, ip
 80007c2:	f100 0008 	add.w	r0, r0, #8
 80007c6:	faa4 f28c 	sel	r2, r4, ip
 80007ca:	fa83 f34c 	uadd8	r3, r3, ip
 80007ce:	faa2 f38c 	sel	r3, r2, ip
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d0c6      	beq.n	8000764 <strlen+0x24>
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	bf04      	itt	eq
 80007da:	3004      	addeq	r0, #4
 80007dc:	461a      	moveq	r2, r3
 80007de:	ba12      	rev	r2, r2
 80007e0:	fab2 f282 	clz	r2, r2
 80007e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 80007e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80007ec:	4770      	bx	lr
 80007ee:	e9d1 2300 	ldrd	r2, r3, [r1]
 80007f2:	f004 0503 	and.w	r5, r4, #3
 80007f6:	f1c4 0000 	rsb	r0, r4, #0
 80007fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80007fe:	f014 0f04 	tst.w	r4, #4
 8000802:	f891 f040 	pld	[r1, #64]	; 0x40
 8000806:	fa0c f505 	lsl.w	r5, ip, r5
 800080a:	ea62 0205 	orn	r2, r2, r5
 800080e:	bf1c      	itt	ne
 8000810:	ea63 0305 	ornne	r3, r3, r5
 8000814:	4662      	movne	r2, ip
 8000816:	f04f 0400 	mov.w	r4, #0
 800081a:	e7a9      	b.n	8000770 <strlen+0x30>
 800081c:	0000      	movs	r0, r0
	...

08000820 <memchr>:
 8000820:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000824:	2a10      	cmp	r2, #16
 8000826:	db2b      	blt.n	8000880 <memchr+0x60>
 8000828:	f010 0f07 	tst.w	r0, #7
 800082c:	d008      	beq.n	8000840 <memchr+0x20>
 800082e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000832:	3a01      	subs	r2, #1
 8000834:	428b      	cmp	r3, r1
 8000836:	d02d      	beq.n	8000894 <memchr+0x74>
 8000838:	f010 0f07 	tst.w	r0, #7
 800083c:	b342      	cbz	r2, 8000890 <memchr+0x70>
 800083e:	d1f6      	bne.n	800082e <memchr+0xe>
 8000840:	b4f0      	push	{r4, r5, r6, r7}
 8000842:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000846:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800084a:	f022 0407 	bic.w	r4, r2, #7
 800084e:	f07f 0700 	mvns.w	r7, #0
 8000852:	2300      	movs	r3, #0
 8000854:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000858:	3c08      	subs	r4, #8
 800085a:	ea85 0501 	eor.w	r5, r5, r1
 800085e:	ea86 0601 	eor.w	r6, r6, r1
 8000862:	fa85 f547 	uadd8	r5, r5, r7
 8000866:	faa3 f587 	sel	r5, r3, r7
 800086a:	fa86 f647 	uadd8	r6, r6, r7
 800086e:	faa5 f687 	sel	r6, r5, r7
 8000872:	b98e      	cbnz	r6, 8000898 <memchr+0x78>
 8000874:	d1ee      	bne.n	8000854 <memchr+0x34>
 8000876:	bcf0      	pop	{r4, r5, r6, r7}
 8000878:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800087c:	f002 0207 	and.w	r2, r2, #7
 8000880:	b132      	cbz	r2, 8000890 <memchr+0x70>
 8000882:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000886:	3a01      	subs	r2, #1
 8000888:	ea83 0301 	eor.w	r3, r3, r1
 800088c:	b113      	cbz	r3, 8000894 <memchr+0x74>
 800088e:	d1f8      	bne.n	8000882 <memchr+0x62>
 8000890:	2000      	movs	r0, #0
 8000892:	4770      	bx	lr
 8000894:	3801      	subs	r0, #1
 8000896:	4770      	bx	lr
 8000898:	2d00      	cmp	r5, #0
 800089a:	bf06      	itte	eq
 800089c:	4635      	moveq	r5, r6
 800089e:	3803      	subeq	r0, #3
 80008a0:	3807      	subne	r0, #7
 80008a2:	f015 0f01 	tst.w	r5, #1
 80008a6:	d107      	bne.n	80008b8 <memchr+0x98>
 80008a8:	3001      	adds	r0, #1
 80008aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80008ae:	bf02      	ittt	eq
 80008b0:	3001      	addeq	r0, #1
 80008b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80008b6:	3001      	addeq	r0, #1
 80008b8:	bcf0      	pop	{r4, r5, r6, r7}
 80008ba:	3801      	subs	r0, #1
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop

080008c0 <__aeabi_drsub>:
 80008c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80008c4:	e002      	b.n	80008cc <__adddf3>
 80008c6:	bf00      	nop

080008c8 <__aeabi_dsub>:
 80008c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080008cc <__adddf3>:
 80008cc:	b530      	push	{r4, r5, lr}
 80008ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80008d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80008d6:	ea94 0f05 	teq	r4, r5
 80008da:	bf08      	it	eq
 80008dc:	ea90 0f02 	teqeq	r0, r2
 80008e0:	bf1f      	itttt	ne
 80008e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80008e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80008ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80008ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80008f2:	f000 80e2 	beq.w	8000aba <__adddf3+0x1ee>
 80008f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80008fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80008fe:	bfb8      	it	lt
 8000900:	426d      	neglt	r5, r5
 8000902:	dd0c      	ble.n	800091e <__adddf3+0x52>
 8000904:	442c      	add	r4, r5
 8000906:	ea80 0202 	eor.w	r2, r0, r2
 800090a:	ea81 0303 	eor.w	r3, r1, r3
 800090e:	ea82 0000 	eor.w	r0, r2, r0
 8000912:	ea83 0101 	eor.w	r1, r3, r1
 8000916:	ea80 0202 	eor.w	r2, r0, r2
 800091a:	ea81 0303 	eor.w	r3, r1, r3
 800091e:	2d36      	cmp	r5, #54	; 0x36
 8000920:	bf88      	it	hi
 8000922:	bd30      	pophi	{r4, r5, pc}
 8000924:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000928:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800092c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000930:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000934:	d002      	beq.n	800093c <__adddf3+0x70>
 8000936:	4240      	negs	r0, r0
 8000938:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800093c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000940:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000944:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000948:	d002      	beq.n	8000950 <__adddf3+0x84>
 800094a:	4252      	negs	r2, r2
 800094c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000950:	ea94 0f05 	teq	r4, r5
 8000954:	f000 80a7 	beq.w	8000aa6 <__adddf3+0x1da>
 8000958:	f1a4 0401 	sub.w	r4, r4, #1
 800095c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000960:	db0d      	blt.n	800097e <__adddf3+0xb2>
 8000962:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000966:	fa22 f205 	lsr.w	r2, r2, r5
 800096a:	1880      	adds	r0, r0, r2
 800096c:	f141 0100 	adc.w	r1, r1, #0
 8000970:	fa03 f20e 	lsl.w	r2, r3, lr
 8000974:	1880      	adds	r0, r0, r2
 8000976:	fa43 f305 	asr.w	r3, r3, r5
 800097a:	4159      	adcs	r1, r3
 800097c:	e00e      	b.n	800099c <__adddf3+0xd0>
 800097e:	f1a5 0520 	sub.w	r5, r5, #32
 8000982:	f10e 0e20 	add.w	lr, lr, #32
 8000986:	2a01      	cmp	r2, #1
 8000988:	fa03 fc0e 	lsl.w	ip, r3, lr
 800098c:	bf28      	it	cs
 800098e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000992:	fa43 f305 	asr.w	r3, r3, r5
 8000996:	18c0      	adds	r0, r0, r3
 8000998:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800099c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80009a0:	d507      	bpl.n	80009b2 <__adddf3+0xe6>
 80009a2:	f04f 0e00 	mov.w	lr, #0
 80009a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80009aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80009ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80009b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80009b6:	d31b      	bcc.n	80009f0 <__adddf3+0x124>
 80009b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80009bc:	d30c      	bcc.n	80009d8 <__adddf3+0x10c>
 80009be:	0849      	lsrs	r1, r1, #1
 80009c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80009c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80009c8:	f104 0401 	add.w	r4, r4, #1
 80009cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80009d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80009d4:	f080 809a 	bcs.w	8000b0c <__adddf3+0x240>
 80009d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80009dc:	bf08      	it	eq
 80009de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e2:	f150 0000 	adcs.w	r0, r0, #0
 80009e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ea:	ea41 0105 	orr.w	r1, r1, r5
 80009ee:	bd30      	pop	{r4, r5, pc}
 80009f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80009f4:	4140      	adcs	r0, r0
 80009f6:	eb41 0101 	adc.w	r1, r1, r1
 80009fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000a02:	d1e9      	bne.n	80009d8 <__adddf3+0x10c>
 8000a04:	f091 0f00 	teq	r1, #0
 8000a08:	bf04      	itt	eq
 8000a0a:	4601      	moveq	r1, r0
 8000a0c:	2000      	moveq	r0, #0
 8000a0e:	fab1 f381 	clz	r3, r1
 8000a12:	bf08      	it	eq
 8000a14:	3320      	addeq	r3, #32
 8000a16:	f1a3 030b 	sub.w	r3, r3, #11
 8000a1a:	f1b3 0220 	subs.w	r2, r3, #32
 8000a1e:	da0c      	bge.n	8000a3a <__adddf3+0x16e>
 8000a20:	320c      	adds	r2, #12
 8000a22:	dd08      	ble.n	8000a36 <__adddf3+0x16a>
 8000a24:	f102 0c14 	add.w	ip, r2, #20
 8000a28:	f1c2 020c 	rsb	r2, r2, #12
 8000a2c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000a30:	fa21 f102 	lsr.w	r1, r1, r2
 8000a34:	e00c      	b.n	8000a50 <__adddf3+0x184>
 8000a36:	f102 0214 	add.w	r2, r2, #20
 8000a3a:	bfd8      	it	le
 8000a3c:	f1c2 0c20 	rsble	ip, r2, #32
 8000a40:	fa01 f102 	lsl.w	r1, r1, r2
 8000a44:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000a48:	bfdc      	itt	le
 8000a4a:	ea41 010c 	orrle.w	r1, r1, ip
 8000a4e:	4090      	lslle	r0, r2
 8000a50:	1ae4      	subs	r4, r4, r3
 8000a52:	bfa2      	ittt	ge
 8000a54:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000a58:	4329      	orrge	r1, r5
 8000a5a:	bd30      	popge	{r4, r5, pc}
 8000a5c:	ea6f 0404 	mvn.w	r4, r4
 8000a60:	3c1f      	subs	r4, #31
 8000a62:	da1c      	bge.n	8000a9e <__adddf3+0x1d2>
 8000a64:	340c      	adds	r4, #12
 8000a66:	dc0e      	bgt.n	8000a86 <__adddf3+0x1ba>
 8000a68:	f104 0414 	add.w	r4, r4, #20
 8000a6c:	f1c4 0220 	rsb	r2, r4, #32
 8000a70:	fa20 f004 	lsr.w	r0, r0, r4
 8000a74:	fa01 f302 	lsl.w	r3, r1, r2
 8000a78:	ea40 0003 	orr.w	r0, r0, r3
 8000a7c:	fa21 f304 	lsr.w	r3, r1, r4
 8000a80:	ea45 0103 	orr.w	r1, r5, r3
 8000a84:	bd30      	pop	{r4, r5, pc}
 8000a86:	f1c4 040c 	rsb	r4, r4, #12
 8000a8a:	f1c4 0220 	rsb	r2, r4, #32
 8000a8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a92:	fa01 f304 	lsl.w	r3, r1, r4
 8000a96:	ea40 0003 	orr.w	r0, r0, r3
 8000a9a:	4629      	mov	r1, r5
 8000a9c:	bd30      	pop	{r4, r5, pc}
 8000a9e:	fa21 f004 	lsr.w	r0, r1, r4
 8000aa2:	4629      	mov	r1, r5
 8000aa4:	bd30      	pop	{r4, r5, pc}
 8000aa6:	f094 0f00 	teq	r4, #0
 8000aaa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000aae:	bf06      	itte	eq
 8000ab0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000ab4:	3401      	addeq	r4, #1
 8000ab6:	3d01      	subne	r5, #1
 8000ab8:	e74e      	b.n	8000958 <__adddf3+0x8c>
 8000aba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000abe:	bf18      	it	ne
 8000ac0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000ac4:	d029      	beq.n	8000b1a <__adddf3+0x24e>
 8000ac6:	ea94 0f05 	teq	r4, r5
 8000aca:	bf08      	it	eq
 8000acc:	ea90 0f02 	teqeq	r0, r2
 8000ad0:	d005      	beq.n	8000ade <__adddf3+0x212>
 8000ad2:	ea54 0c00 	orrs.w	ip, r4, r0
 8000ad6:	bf04      	itt	eq
 8000ad8:	4619      	moveq	r1, r3
 8000ada:	4610      	moveq	r0, r2
 8000adc:	bd30      	pop	{r4, r5, pc}
 8000ade:	ea91 0f03 	teq	r1, r3
 8000ae2:	bf1e      	ittt	ne
 8000ae4:	2100      	movne	r1, #0
 8000ae6:	2000      	movne	r0, #0
 8000ae8:	bd30      	popne	{r4, r5, pc}
 8000aea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000aee:	d105      	bne.n	8000afc <__adddf3+0x230>
 8000af0:	0040      	lsls	r0, r0, #1
 8000af2:	4149      	adcs	r1, r1
 8000af4:	bf28      	it	cs
 8000af6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000afa:	bd30      	pop	{r4, r5, pc}
 8000afc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000b00:	bf3c      	itt	cc
 8000b02:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000b06:	bd30      	popcc	{r4, r5, pc}
 8000b08:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000b0c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000b10:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	bd30      	pop	{r4, r5, pc}
 8000b1a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000b1e:	bf1a      	itte	ne
 8000b20:	4619      	movne	r1, r3
 8000b22:	4610      	movne	r0, r2
 8000b24:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000b28:	bf1c      	itt	ne
 8000b2a:	460b      	movne	r3, r1
 8000b2c:	4602      	movne	r2, r0
 8000b2e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000b32:	bf06      	itte	eq
 8000b34:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000b38:	ea91 0f03 	teqeq	r1, r3
 8000b3c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000b40:	bd30      	pop	{r4, r5, pc}
 8000b42:	bf00      	nop

08000b44 <__aeabi_ui2d>:
 8000b44:	f090 0f00 	teq	r0, #0
 8000b48:	bf04      	itt	eq
 8000b4a:	2100      	moveq	r1, #0
 8000b4c:	4770      	bxeq	lr
 8000b4e:	b530      	push	{r4, r5, lr}
 8000b50:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000b54:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000b58:	f04f 0500 	mov.w	r5, #0
 8000b5c:	f04f 0100 	mov.w	r1, #0
 8000b60:	e750      	b.n	8000a04 <__adddf3+0x138>
 8000b62:	bf00      	nop

08000b64 <__aeabi_i2d>:
 8000b64:	f090 0f00 	teq	r0, #0
 8000b68:	bf04      	itt	eq
 8000b6a:	2100      	moveq	r1, #0
 8000b6c:	4770      	bxeq	lr
 8000b6e:	b530      	push	{r4, r5, lr}
 8000b70:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000b74:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000b78:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000b7c:	bf48      	it	mi
 8000b7e:	4240      	negmi	r0, r0
 8000b80:	f04f 0100 	mov.w	r1, #0
 8000b84:	e73e      	b.n	8000a04 <__adddf3+0x138>
 8000b86:	bf00      	nop

08000b88 <__aeabi_f2d>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000b8e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b92:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000b96:	bf1f      	itttt	ne
 8000b98:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000b9c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000ba0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000ba4:	4770      	bxne	lr
 8000ba6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000baa:	bf08      	it	eq
 8000bac:	4770      	bxeq	lr
 8000bae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000bb2:	bf04      	itt	eq
 8000bb4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000bb8:	4770      	bxeq	lr
 8000bba:	b530      	push	{r4, r5, lr}
 8000bbc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000bc0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000bc4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000bc8:	e71c      	b.n	8000a04 <__adddf3+0x138>
 8000bca:	bf00      	nop

08000bcc <__aeabi_ul2d>:
 8000bcc:	ea50 0201 	orrs.w	r2, r0, r1
 8000bd0:	bf08      	it	eq
 8000bd2:	4770      	bxeq	lr
 8000bd4:	b530      	push	{r4, r5, lr}
 8000bd6:	f04f 0500 	mov.w	r5, #0
 8000bda:	e00a      	b.n	8000bf2 <__aeabi_l2d+0x16>

08000bdc <__aeabi_l2d>:
 8000bdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000be0:	bf08      	it	eq
 8000be2:	4770      	bxeq	lr
 8000be4:	b530      	push	{r4, r5, lr}
 8000be6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000bea:	d502      	bpl.n	8000bf2 <__aeabi_l2d+0x16>
 8000bec:	4240      	negs	r0, r0
 8000bee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000bf6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000bfa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000bfe:	f43f aed8 	beq.w	80009b2 <__adddf3+0xe6>
 8000c02:	f04f 0203 	mov.w	r2, #3
 8000c06:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000c0a:	bf18      	it	ne
 8000c0c:	3203      	addne	r2, #3
 8000c0e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000c12:	bf18      	it	ne
 8000c14:	3203      	addne	r2, #3
 8000c16:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000c1a:	f1c2 0320 	rsb	r3, r2, #32
 8000c1e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000c22:	fa20 f002 	lsr.w	r0, r0, r2
 8000c26:	fa01 fe03 	lsl.w	lr, r1, r3
 8000c2a:	ea40 000e 	orr.w	r0, r0, lr
 8000c2e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c32:	4414      	add	r4, r2
 8000c34:	e6bd      	b.n	80009b2 <__adddf3+0xe6>
 8000c36:	bf00      	nop

08000c38 <__aeabi_dmul>:
 8000c38:	b570      	push	{r4, r5, r6, lr}
 8000c3a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c3e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000c42:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000c46:	bf1d      	ittte	ne
 8000c48:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000c4c:	ea94 0f0c 	teqne	r4, ip
 8000c50:	ea95 0f0c 	teqne	r5, ip
 8000c54:	f000 f8de 	bleq	8000e14 <__aeabi_dmul+0x1dc>
 8000c58:	442c      	add	r4, r5
 8000c5a:	ea81 0603 	eor.w	r6, r1, r3
 8000c5e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000c62:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000c66:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000c6a:	bf18      	it	ne
 8000c6c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000c70:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000c78:	d038      	beq.n	8000cec <__aeabi_dmul+0xb4>
 8000c7a:	fba0 ce02 	umull	ip, lr, r0, r2
 8000c7e:	f04f 0500 	mov.w	r5, #0
 8000c82:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000c86:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000c8a:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000c8e:	f04f 0600 	mov.w	r6, #0
 8000c92:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000c96:	f09c 0f00 	teq	ip, #0
 8000c9a:	bf18      	it	ne
 8000c9c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000ca0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000ca4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000ca8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000cac:	d204      	bcs.n	8000cb8 <__aeabi_dmul+0x80>
 8000cae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000cb2:	416d      	adcs	r5, r5
 8000cb4:	eb46 0606 	adc.w	r6, r6, r6
 8000cb8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000cbc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000cc0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000cc4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000cc8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000ccc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000cd0:	bf88      	it	hi
 8000cd2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000cd6:	d81e      	bhi.n	8000d16 <__aeabi_dmul+0xde>
 8000cd8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000cdc:	bf08      	it	eq
 8000cde:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000ce2:	f150 0000 	adcs.w	r0, r0, #0
 8000ce6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000cea:	bd70      	pop	{r4, r5, r6, pc}
 8000cec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000cf0:	ea46 0101 	orr.w	r1, r6, r1
 8000cf4:	ea40 0002 	orr.w	r0, r0, r2
 8000cf8:	ea81 0103 	eor.w	r1, r1, r3
 8000cfc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000d00:	bfc2      	ittt	gt
 8000d02:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000d06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000d0a:	bd70      	popgt	{r4, r5, r6, pc}
 8000d0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d10:	f04f 0e00 	mov.w	lr, #0
 8000d14:	3c01      	subs	r4, #1
 8000d16:	f300 80ab 	bgt.w	8000e70 <__aeabi_dmul+0x238>
 8000d1a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000d1e:	bfde      	ittt	le
 8000d20:	2000      	movle	r0, #0
 8000d22:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000d26:	bd70      	pople	{r4, r5, r6, pc}
 8000d28:	f1c4 0400 	rsb	r4, r4, #0
 8000d2c:	3c20      	subs	r4, #32
 8000d2e:	da35      	bge.n	8000d9c <__aeabi_dmul+0x164>
 8000d30:	340c      	adds	r4, #12
 8000d32:	dc1b      	bgt.n	8000d6c <__aeabi_dmul+0x134>
 8000d34:	f104 0414 	add.w	r4, r4, #20
 8000d38:	f1c4 0520 	rsb	r5, r4, #32
 8000d3c:	fa00 f305 	lsl.w	r3, r0, r5
 8000d40:	fa20 f004 	lsr.w	r0, r0, r4
 8000d44:	fa01 f205 	lsl.w	r2, r1, r5
 8000d48:	ea40 0002 	orr.w	r0, r0, r2
 8000d4c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000d50:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000d54:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000d58:	fa21 f604 	lsr.w	r6, r1, r4
 8000d5c:	eb42 0106 	adc.w	r1, r2, r6
 8000d60:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000d64:	bf08      	it	eq
 8000d66:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000d6a:	bd70      	pop	{r4, r5, r6, pc}
 8000d6c:	f1c4 040c 	rsb	r4, r4, #12
 8000d70:	f1c4 0520 	rsb	r5, r4, #32
 8000d74:	fa00 f304 	lsl.w	r3, r0, r4
 8000d78:	fa20 f005 	lsr.w	r0, r0, r5
 8000d7c:	fa01 f204 	lsl.w	r2, r1, r4
 8000d80:	ea40 0002 	orr.w	r0, r0, r2
 8000d84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000d88:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000d8c:	f141 0100 	adc.w	r1, r1, #0
 8000d90:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000d94:	bf08      	it	eq
 8000d96:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000d9a:	bd70      	pop	{r4, r5, r6, pc}
 8000d9c:	f1c4 0520 	rsb	r5, r4, #32
 8000da0:	fa00 f205 	lsl.w	r2, r0, r5
 8000da4:	ea4e 0e02 	orr.w	lr, lr, r2
 8000da8:	fa20 f304 	lsr.w	r3, r0, r4
 8000dac:	fa01 f205 	lsl.w	r2, r1, r5
 8000db0:	ea43 0302 	orr.w	r3, r3, r2
 8000db4:	fa21 f004 	lsr.w	r0, r1, r4
 8000db8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000dbc:	fa21 f204 	lsr.w	r2, r1, r4
 8000dc0:	ea20 0002 	bic.w	r0, r0, r2
 8000dc4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000dc8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000dcc:	bf08      	it	eq
 8000dce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000dd2:	bd70      	pop	{r4, r5, r6, pc}
 8000dd4:	f094 0f00 	teq	r4, #0
 8000dd8:	d10f      	bne.n	8000dfa <__aeabi_dmul+0x1c2>
 8000dda:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000dde:	0040      	lsls	r0, r0, #1
 8000de0:	eb41 0101 	adc.w	r1, r1, r1
 8000de4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000de8:	bf08      	it	eq
 8000dea:	3c01      	subeq	r4, #1
 8000dec:	d0f7      	beq.n	8000dde <__aeabi_dmul+0x1a6>
 8000dee:	ea41 0106 	orr.w	r1, r1, r6
 8000df2:	f095 0f00 	teq	r5, #0
 8000df6:	bf18      	it	ne
 8000df8:	4770      	bxne	lr
 8000dfa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000dfe:	0052      	lsls	r2, r2, #1
 8000e00:	eb43 0303 	adc.w	r3, r3, r3
 8000e04:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000e08:	bf08      	it	eq
 8000e0a:	3d01      	subeq	r5, #1
 8000e0c:	d0f7      	beq.n	8000dfe <__aeabi_dmul+0x1c6>
 8000e0e:	ea43 0306 	orr.w	r3, r3, r6
 8000e12:	4770      	bx	lr
 8000e14:	ea94 0f0c 	teq	r4, ip
 8000e18:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000e1c:	bf18      	it	ne
 8000e1e:	ea95 0f0c 	teqne	r5, ip
 8000e22:	d00c      	beq.n	8000e3e <__aeabi_dmul+0x206>
 8000e24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000e28:	bf18      	it	ne
 8000e2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000e2e:	d1d1      	bne.n	8000dd4 <__aeabi_dmul+0x19c>
 8000e30:	ea81 0103 	eor.w	r1, r1, r3
 8000e34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000e38:	f04f 0000 	mov.w	r0, #0
 8000e3c:	bd70      	pop	{r4, r5, r6, pc}
 8000e3e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000e42:	bf06      	itte	eq
 8000e44:	4610      	moveq	r0, r2
 8000e46:	4619      	moveq	r1, r3
 8000e48:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000e4c:	d019      	beq.n	8000e82 <__aeabi_dmul+0x24a>
 8000e4e:	ea94 0f0c 	teq	r4, ip
 8000e52:	d102      	bne.n	8000e5a <__aeabi_dmul+0x222>
 8000e54:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000e58:	d113      	bne.n	8000e82 <__aeabi_dmul+0x24a>
 8000e5a:	ea95 0f0c 	teq	r5, ip
 8000e5e:	d105      	bne.n	8000e6c <__aeabi_dmul+0x234>
 8000e60:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000e64:	bf1c      	itt	ne
 8000e66:	4610      	movne	r0, r2
 8000e68:	4619      	movne	r1, r3
 8000e6a:	d10a      	bne.n	8000e82 <__aeabi_dmul+0x24a>
 8000e6c:	ea81 0103 	eor.w	r1, r1, r3
 8000e70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000e74:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000e78:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000e7c:	f04f 0000 	mov.w	r0, #0
 8000e80:	bd70      	pop	{r4, r5, r6, pc}
 8000e82:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000e86:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000e8a:	bd70      	pop	{r4, r5, r6, pc}

08000e8c <__aeabi_ddiv>:
 8000e8c:	b570      	push	{r4, r5, r6, lr}
 8000e8e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e92:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000e96:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000e9a:	bf1d      	ittte	ne
 8000e9c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000ea0:	ea94 0f0c 	teqne	r4, ip
 8000ea4:	ea95 0f0c 	teqne	r5, ip
 8000ea8:	f000 f8a7 	bleq	8000ffa <__aeabi_ddiv+0x16e>
 8000eac:	eba4 0405 	sub.w	r4, r4, r5
 8000eb0:	ea81 0e03 	eor.w	lr, r1, r3
 8000eb4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000eb8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000ebc:	f000 8088 	beq.w	8000fd0 <__aeabi_ddiv+0x144>
 8000ec0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000ec4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000ec8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000ecc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000ed0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000ed4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000ed8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000edc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000ee0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000ee4:	429d      	cmp	r5, r3
 8000ee6:	bf08      	it	eq
 8000ee8:	4296      	cmpeq	r6, r2
 8000eea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000eee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000ef2:	d202      	bcs.n	8000efa <__aeabi_ddiv+0x6e>
 8000ef4:	085b      	lsrs	r3, r3, #1
 8000ef6:	ea4f 0232 	mov.w	r2, r2, rrx
 8000efa:	1ab6      	subs	r6, r6, r2
 8000efc:	eb65 0503 	sbc.w	r5, r5, r3
 8000f00:	085b      	lsrs	r3, r3, #1
 8000f02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000f06:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000f0a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000f0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000f12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000f16:	bf22      	ittt	cs
 8000f18:	1ab6      	subcs	r6, r6, r2
 8000f1a:	4675      	movcs	r5, lr
 8000f1c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f20:	085b      	lsrs	r3, r3, #1
 8000f22:	ea4f 0232 	mov.w	r2, r2, rrx
 8000f26:	ebb6 0e02 	subs.w	lr, r6, r2
 8000f2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000f2e:	bf22      	ittt	cs
 8000f30:	1ab6      	subcs	r6, r6, r2
 8000f32:	4675      	movcs	r5, lr
 8000f34:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f38:	085b      	lsrs	r3, r3, #1
 8000f3a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000f3e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000f42:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000f46:	bf22      	ittt	cs
 8000f48:	1ab6      	subcs	r6, r6, r2
 8000f4a:	4675      	movcs	r5, lr
 8000f4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f50:	085b      	lsrs	r3, r3, #1
 8000f52:	ea4f 0232 	mov.w	r2, r2, rrx
 8000f56:	ebb6 0e02 	subs.w	lr, r6, r2
 8000f5a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000f5e:	bf22      	ittt	cs
 8000f60:	1ab6      	subcs	r6, r6, r2
 8000f62:	4675      	movcs	r5, lr
 8000f64:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f68:	ea55 0e06 	orrs.w	lr, r5, r6
 8000f6c:	d018      	beq.n	8000fa0 <__aeabi_ddiv+0x114>
 8000f6e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000f72:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000f76:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000f7a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000f7e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000f82:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000f86:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000f8a:	d1c0      	bne.n	8000f0e <__aeabi_ddiv+0x82>
 8000f8c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000f90:	d10b      	bne.n	8000faa <__aeabi_ddiv+0x11e>
 8000f92:	ea41 0100 	orr.w	r1, r1, r0
 8000f96:	f04f 0000 	mov.w	r0, #0
 8000f9a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000f9e:	e7b6      	b.n	8000f0e <__aeabi_ddiv+0x82>
 8000fa0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000fa4:	bf04      	itt	eq
 8000fa6:	4301      	orreq	r1, r0
 8000fa8:	2000      	moveq	r0, #0
 8000faa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000fae:	bf88      	it	hi
 8000fb0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000fb4:	f63f aeaf 	bhi.w	8000d16 <__aeabi_dmul+0xde>
 8000fb8:	ebb5 0c03 	subs.w	ip, r5, r3
 8000fbc:	bf04      	itt	eq
 8000fbe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000fc2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000fc6:	f150 0000 	adcs.w	r0, r0, #0
 8000fca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000fce:	bd70      	pop	{r4, r5, r6, pc}
 8000fd0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000fd4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000fd8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000fdc:	bfc2      	ittt	gt
 8000fde:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000fe2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000fe6:	bd70      	popgt	{r4, r5, r6, pc}
 8000fe8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000fec:	f04f 0e00 	mov.w	lr, #0
 8000ff0:	3c01      	subs	r4, #1
 8000ff2:	e690      	b.n	8000d16 <__aeabi_dmul+0xde>
 8000ff4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ff8:	e68d      	b.n	8000d16 <__aeabi_dmul+0xde>
 8000ffa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ffe:	ea94 0f0c 	teq	r4, ip
 8001002:	bf08      	it	eq
 8001004:	ea95 0f0c 	teqeq	r5, ip
 8001008:	f43f af3b 	beq.w	8000e82 <__aeabi_dmul+0x24a>
 800100c:	ea94 0f0c 	teq	r4, ip
 8001010:	d10a      	bne.n	8001028 <__aeabi_ddiv+0x19c>
 8001012:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8001016:	f47f af34 	bne.w	8000e82 <__aeabi_dmul+0x24a>
 800101a:	ea95 0f0c 	teq	r5, ip
 800101e:	f47f af25 	bne.w	8000e6c <__aeabi_dmul+0x234>
 8001022:	4610      	mov	r0, r2
 8001024:	4619      	mov	r1, r3
 8001026:	e72c      	b.n	8000e82 <__aeabi_dmul+0x24a>
 8001028:	ea95 0f0c 	teq	r5, ip
 800102c:	d106      	bne.n	800103c <__aeabi_ddiv+0x1b0>
 800102e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8001032:	f43f aefd 	beq.w	8000e30 <__aeabi_dmul+0x1f8>
 8001036:	4610      	mov	r0, r2
 8001038:	4619      	mov	r1, r3
 800103a:	e722      	b.n	8000e82 <__aeabi_dmul+0x24a>
 800103c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001040:	bf18      	it	ne
 8001042:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8001046:	f47f aec5 	bne.w	8000dd4 <__aeabi_dmul+0x19c>
 800104a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800104e:	f47f af0d 	bne.w	8000e6c <__aeabi_dmul+0x234>
 8001052:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8001056:	f47f aeeb 	bne.w	8000e30 <__aeabi_dmul+0x1f8>
 800105a:	e712      	b.n	8000e82 <__aeabi_dmul+0x24a>

0800105c <__gedf2>:
 800105c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001060:	e006      	b.n	8001070 <__cmpdf2+0x4>
 8001062:	bf00      	nop

08001064 <__ledf2>:
 8001064:	f04f 0c01 	mov.w	ip, #1
 8001068:	e002      	b.n	8001070 <__cmpdf2+0x4>
 800106a:	bf00      	nop

0800106c <__cmpdf2>:
 800106c:	f04f 0c01 	mov.w	ip, #1
 8001070:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001074:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8001078:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800107c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001080:	bf18      	it	ne
 8001082:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8001086:	d01b      	beq.n	80010c0 <__cmpdf2+0x54>
 8001088:	b001      	add	sp, #4
 800108a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800108e:	bf0c      	ite	eq
 8001090:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8001094:	ea91 0f03 	teqne	r1, r3
 8001098:	bf02      	ittt	eq
 800109a:	ea90 0f02 	teqeq	r0, r2
 800109e:	2000      	moveq	r0, #0
 80010a0:	4770      	bxeq	lr
 80010a2:	f110 0f00 	cmn.w	r0, #0
 80010a6:	ea91 0f03 	teq	r1, r3
 80010aa:	bf58      	it	pl
 80010ac:	4299      	cmppl	r1, r3
 80010ae:	bf08      	it	eq
 80010b0:	4290      	cmpeq	r0, r2
 80010b2:	bf2c      	ite	cs
 80010b4:	17d8      	asrcs	r0, r3, #31
 80010b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80010ba:	f040 0001 	orr.w	r0, r0, #1
 80010be:	4770      	bx	lr
 80010c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80010c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80010c8:	d102      	bne.n	80010d0 <__cmpdf2+0x64>
 80010ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80010ce:	d107      	bne.n	80010e0 <__cmpdf2+0x74>
 80010d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80010d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80010d8:	d1d6      	bne.n	8001088 <__cmpdf2+0x1c>
 80010da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80010de:	d0d3      	beq.n	8001088 <__cmpdf2+0x1c>
 80010e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop

080010e8 <__aeabi_cdrcmple>:
 80010e8:	4684      	mov	ip, r0
 80010ea:	4610      	mov	r0, r2
 80010ec:	4662      	mov	r2, ip
 80010ee:	468c      	mov	ip, r1
 80010f0:	4619      	mov	r1, r3
 80010f2:	4663      	mov	r3, ip
 80010f4:	e000      	b.n	80010f8 <__aeabi_cdcmpeq>
 80010f6:	bf00      	nop

080010f8 <__aeabi_cdcmpeq>:
 80010f8:	b501      	push	{r0, lr}
 80010fa:	f7ff ffb7 	bl	800106c <__cmpdf2>
 80010fe:	2800      	cmp	r0, #0
 8001100:	bf48      	it	mi
 8001102:	f110 0f00 	cmnmi.w	r0, #0
 8001106:	bd01      	pop	{r0, pc}

08001108 <__aeabi_dcmpeq>:
 8001108:	f84d ed08 	str.w	lr, [sp, #-8]!
 800110c:	f7ff fff4 	bl	80010f8 <__aeabi_cdcmpeq>
 8001110:	bf0c      	ite	eq
 8001112:	2001      	moveq	r0, #1
 8001114:	2000      	movne	r0, #0
 8001116:	f85d fb08 	ldr.w	pc, [sp], #8
 800111a:	bf00      	nop

0800111c <__aeabi_dcmplt>:
 800111c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001120:	f7ff ffea 	bl	80010f8 <__aeabi_cdcmpeq>
 8001124:	bf34      	ite	cc
 8001126:	2001      	movcc	r0, #1
 8001128:	2000      	movcs	r0, #0
 800112a:	f85d fb08 	ldr.w	pc, [sp], #8
 800112e:	bf00      	nop

08001130 <__aeabi_dcmple>:
 8001130:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001134:	f7ff ffe0 	bl	80010f8 <__aeabi_cdcmpeq>
 8001138:	bf94      	ite	ls
 800113a:	2001      	movls	r0, #1
 800113c:	2000      	movhi	r0, #0
 800113e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001142:	bf00      	nop

08001144 <__aeabi_dcmpge>:
 8001144:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001148:	f7ff ffce 	bl	80010e8 <__aeabi_cdrcmple>
 800114c:	bf94      	ite	ls
 800114e:	2001      	movls	r0, #1
 8001150:	2000      	movhi	r0, #0
 8001152:	f85d fb08 	ldr.w	pc, [sp], #8
 8001156:	bf00      	nop

08001158 <__aeabi_dcmpgt>:
 8001158:	f84d ed08 	str.w	lr, [sp, #-8]!
 800115c:	f7ff ffc4 	bl	80010e8 <__aeabi_cdrcmple>
 8001160:	bf34      	ite	cc
 8001162:	2001      	movcc	r0, #1
 8001164:	2000      	movcs	r0, #0
 8001166:	f85d fb08 	ldr.w	pc, [sp], #8
 800116a:	bf00      	nop

0800116c <__aeabi_dcmpun>:
 800116c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8001170:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001174:	d102      	bne.n	800117c <__aeabi_dcmpun+0x10>
 8001176:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800117a:	d10a      	bne.n	8001192 <__aeabi_dcmpun+0x26>
 800117c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001180:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001184:	d102      	bne.n	800118c <__aeabi_dcmpun+0x20>
 8001186:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800118a:	d102      	bne.n	8001192 <__aeabi_dcmpun+0x26>
 800118c:	f04f 0000 	mov.w	r0, #0
 8001190:	4770      	bx	lr
 8001192:	f04f 0001 	mov.w	r0, #1
 8001196:	4770      	bx	lr

08001198 <__aeabi_d2iz>:
 8001198:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800119c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80011a0:	d215      	bcs.n	80011ce <__aeabi_d2iz+0x36>
 80011a2:	d511      	bpl.n	80011c8 <__aeabi_d2iz+0x30>
 80011a4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80011a8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80011ac:	d912      	bls.n	80011d4 <__aeabi_d2iz+0x3c>
 80011ae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80011b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011b6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80011ba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80011be:	fa23 f002 	lsr.w	r0, r3, r2
 80011c2:	bf18      	it	ne
 80011c4:	4240      	negne	r0, r0
 80011c6:	4770      	bx	lr
 80011c8:	f04f 0000 	mov.w	r0, #0
 80011cc:	4770      	bx	lr
 80011ce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80011d2:	d105      	bne.n	80011e0 <__aeabi_d2iz+0x48>
 80011d4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80011d8:	bf08      	it	eq
 80011da:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80011de:	4770      	bx	lr
 80011e0:	f04f 0000 	mov.w	r0, #0
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop

080011e8 <main>:
 *
 * \brief This is the standard entry point for C code.
 */

int main (void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08c      	sub	sp, #48	; 0x30
 80011ec:	af0a      	add	r7, sp, #40	; 0x28
  OS_ERR  err;

  // Disable all interrupts                                               // <3>
  BSP_IntDisAll();
 80011ee:	f005 fd56 	bl	8006c9e <BSP_IntDisAll>
  // Enable Interrupt UART
  BSP_IntEn (BSP_INT_ID_USIC1_01); //**
 80011f2:	205b      	movs	r0, #91	; 0x5b
 80011f4:	f005 fd59 	bl	8006caa <BSP_IntEn>
  BSP_IntEn (BSP_INT_ID_USIC1_00); //**
 80011f8:	205a      	movs	r0, #90	; 0x5a
 80011fa:	f005 fd56 	bl	8006caa <BSP_IntEn>
  BSP_IntEn (BSP_INT_ID_CCU40_00); //** PORT 1.3
 80011fe:	202c      	movs	r0, #44	; 0x2c
 8001200:	f005 fd53 	bl	8006caa <BSP_IntEn>
// init SEMI Hosting DEBUG Support                                        // <4>
#if SEMI_HOSTING
  initRetargetSwo();
 8001204:	f005 fcea 	bl	8006bdc <initRetargetSwo>
  SEGGER_RTT_ConfigUpBuffer (0, NULL, NULL, 0,
           SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL);
#endif

  // Init uC/OS-III
  OSInit (&err);                                                          // <5>
 8001208:	1dbb      	adds	r3, r7, #6
 800120a:	4618      	mov	r0, r3
 800120c:	f002 fcd8 	bl	8003bc0 <OSInit>
  if (err != OS_ERR_NONE)
 8001210:	88fb      	ldrh	r3, [r7, #6]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d002      	beq.n	800121c <main+0x34>
    APP_TRACE_DBG ("Error OSInit: main\n");
 8001216:	4815      	ldr	r0, [pc, #84]	; (800126c <main+0x84>)
 8001218:	f007 fa94 	bl	8008744 <puts>

  /* Create the start task */                                             // <6>
  OSTaskCreate ( (OS_TCB     *) &AppStartTaskTCB,
 800121c:	1dbb      	adds	r3, r7, #6
 800121e:	9308      	str	r3, [sp, #32]
 8001220:	2303      	movs	r3, #3
 8001222:	9307      	str	r3, [sp, #28]
 8001224:	2300      	movs	r3, #0
 8001226:	9306      	str	r3, [sp, #24]
 8001228:	2300      	movs	r3, #0
 800122a:	9305      	str	r3, [sp, #20]
 800122c:	2300      	movs	r3, #0
 800122e:	9304      	str	r3, [sp, #16]
 8001230:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001234:	9303      	str	r3, [sp, #12]
 8001236:	2319      	movs	r3, #25
 8001238:	9302      	str	r3, [sp, #8]
 800123a:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <main+0x88>)
 800123c:	9301      	str	r3, [sp, #4]
 800123e:	2302      	movs	r3, #2
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	2300      	movs	r3, #0
 8001244:	4a0b      	ldr	r2, [pc, #44]	; (8001274 <main+0x8c>)
 8001246:	490c      	ldr	r1, [pc, #48]	; (8001278 <main+0x90>)
 8001248:	480c      	ldr	r0, [pc, #48]	; (800127c <main+0x94>)
 800124a:	f003 fd41 	bl	8004cd0 <OSTaskCreate>
           (OS_OPT) (OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
           (OS_ERR     *) &err);

  // Start multitasking (i.e., give control to uC/OS-III)

  OSStart (&err);                                                         // <7>
 800124e:	1dbb      	adds	r3, r7, #6
 8001250:	4618      	mov	r0, r3
 8001252:	f002 ff09 	bl	8004068 <OSStart>
  if (err != OS_ERR_NONE)
 8001256:	88fb      	ldrh	r3, [r7, #6]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d002      	beq.n	8001262 <main+0x7a>
    APP_TRACE_DBG ("Error OSStart: main\n");
 800125c:	4808      	ldr	r0, [pc, #32]	; (8001280 <main+0x98>)
 800125e:	f007 fa71 	bl	8008744 <puts>

  while (1) {                                                             // <8>
    APP_TRACE_DBG ("Should never be output! Bug?\n");
 8001262:	4808      	ldr	r0, [pc, #32]	; (8001284 <main+0x9c>)
 8001264:	f007 fa6e 	bl	8008744 <puts>
 8001268:	e7fb      	b.n	8001262 <main+0x7a>
 800126a:	bf00      	nop
 800126c:	0800e3c0 	.word	0x0800e3c0
 8001270:	200009e4 	.word	0x200009e4
 8001274:	08001289 	.word	0x08001289
 8001278:	0800e3d4 	.word	0x0800e3d4
 800127c:	20000de4 	.word	0x20000de4
 8001280:	0800e3e4 	.word	0x0800e3e4
 8001284:	0800e3f8 	.word	0x0800e3f8

08001288 <AppTaskStart>:
 * \brief Startup (init) task that loads board support functions,
 *        initializes CPU services, the memory, the systick timer,
 *        etc. and finally invokes other application tasks.
 */
static void AppTaskStart (void *p_arg)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  CPU_INT32U  cnts;
  OS_ERR      err;

  (void) p_arg;
  // initialize BSP functions
  BSP_Init();                                                             // <9>
 8001290:	f005 fc58 	bl	8006b44 <BSP_Init>
  // initialize the uC/CPU services
  CPU_Init();
 8001294:	f000 fbae 	bl	80019f4 <CPU_Init>
  // determine SysTick reference frequency
  cpu_clk_freq = BSP_SysClkFreqGet();
 8001298:	f005 f934 	bl	8006504 <BSP_SysClkFreqGet>
 800129c:	6178      	str	r0, [r7, #20]
  // determine nbr SysTick increments
  cnts = cpu_clk_freq / (CPU_INT32U) OSCfg_TickRate_Hz;
 800129e:	4b17      	ldr	r3, [pc, #92]	; (80012fc <AppTaskStart+0x74>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	697a      	ldr	r2, [r7, #20]
 80012a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a8:	613b      	str	r3, [r7, #16]
  // init uCOS-III periodic time src (SysTick)
  OS_CPU_SysTickInit (cnts);
 80012aa:	6938      	ldr	r0, [r7, #16]
 80012ac:	f004 ff02 	bl	80060b4 <OS_CPU_SysTickInit>
  // initialize memory management module
  Mem_Init();
 80012b0:	f000 fca0 	bl	8001bf4 <Mem_Init>
  // initialize mathematical module
  Math_Init();
 80012b4:	f000 fc80 	bl	8001bb8 <Math_Init>

// compute CPU capacity with no task running
#if (OS_CFG_STAT_TASK_EN > 0u)                                           // <10>
  OSStatTaskCPUUsageInit (&err);
 80012b8:	f107 030e 	add.w	r3, r7, #14
 80012bc:	4618      	mov	r0, r3
 80012be:	f002 f9f7 	bl	80036b0 <OSStatTaskCPUUsageInit>
  if (err != OS_ERR_NONE)
 80012c2:	89fb      	ldrh	r3, [r7, #14]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d002      	beq.n	80012ce <AppTaskStart+0x46>
    APP_TRACE_DBG ("Error OSStatTaskCPUUsageInit: AppTaskStart\n");
 80012c8:	480d      	ldr	r0, [pc, #52]	; (8001300 <AppTaskStart+0x78>)
 80012ca:	f007 fa3b 	bl	8008744 <puts>
#endif

  APP_TRACE_INFO ("Creating Application Objects...\n");                  // <11>
 80012ce:	480d      	ldr	r0, [pc, #52]	; (8001304 <AppTaskStart+0x7c>)
 80012d0:	f007 fa38 	bl	8008744 <puts>
  // create application objects
  AppObjCreate();
 80012d4:	f000 f81c 	bl	8001310 <AppObjCreate>

  APP_TRACE_INFO ("Creating Application Tasks...\n");                    // <12>
 80012d8:	480b      	ldr	r0, [pc, #44]	; (8001308 <AppTaskStart+0x80>)
 80012da:	f007 fa33 	bl	8008744 <puts>
  // create application tasks
  AppTaskCreate();
 80012de:	f000 f85b 	bl	8001398 <AppTaskCreate>

  while (DEF_TRUE) {                                                     // <13>
    // Suspend current task
    OSTaskSuspend ( (OS_TCB *) 0, &err);
 80012e2:	f107 030e 	add.w	r3, r7, #14
 80012e6:	4619      	mov	r1, r3
 80012e8:	2000      	movs	r0, #0
 80012ea:	f003 ffad 	bl	8005248 <OSTaskSuspend>
    if (err != OS_ERR_NONE)
 80012ee:	89fb      	ldrh	r3, [r7, #14]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d0f6      	beq.n	80012e2 <AppTaskStart+0x5a>
      APP_TRACE_DBG ("Error OSTaskSuspend: AppTaskStart\n");
 80012f4:	4805      	ldr	r0, [pc, #20]	; (800130c <AppTaskStart+0x84>)
 80012f6:	f007 fa25 	bl	8008744 <puts>
    OSTaskSuspend ( (OS_TCB *) 0, &err);
 80012fa:	e7f2      	b.n	80012e2 <AppTaskStart+0x5a>
 80012fc:	0800ea00 	.word	0x0800ea00
 8001300:	0800e418 	.word	0x0800e418
 8001304:	0800e444 	.word	0x0800e444
 8001308:	0800e464 	.word	0x0800e464
 800130c:	0800e484 	.word	0x0800e484

08001310 <AppObjCreate>:
 * \brief Creates application objects.
 * \params none
 * \returns none
 */
static void AppObjCreate (void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af02      	add	r7, sp, #8
  OS_ERR      err;

  // Create Shared Memory
  OSMemCreate ( (OS_MEM    *) &Mem_Partition,
 8001316:	1dbb      	adds	r3, r7, #6
 8001318:	9301      	str	r3, [sp, #4]
 800131a:	2314      	movs	r3, #20
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	2303      	movs	r3, #3
 8001320:	4a13      	ldr	r2, [pc, #76]	; (8001370 <AppObjCreate+0x60>)
 8001322:	4914      	ldr	r1, [pc, #80]	; (8001374 <AppObjCreate+0x64>)
 8001324:	4814      	ldr	r0, [pc, #80]	; (8001378 <AppObjCreate+0x68>)
 8001326:	f000 fea1 	bl	800206c <OSMemCreate>
          (CPU_CHAR  *) "Mem Partition",
          (void      *) &MyPartitionStorage[0][0],
          (OS_MEM_QTY)  NUM_MSG,
          (OS_MEM_SIZE) MAX_MSG_LENGTH * sizeof (CPU_CHAR),
          (OS_ERR    *) &err);
  if (err != OS_ERR_NONE)
 800132a:	88fb      	ldrh	r3, [r7, #6]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d002      	beq.n	8001336 <AppObjCreate+0x26>
    APP_TRACE_DBG ("Error OSMemCreate: AppObjCreate\n");
 8001330:	4812      	ldr	r0, [pc, #72]	; (800137c <AppObjCreate+0x6c>)
 8001332:	f007 fa07 	bl	8008744 <puts>

  // Create Message Queue
  // You may re-use code fragments of the bare-bone IO flat exa
  OSQCreate ( (OS_Q *)     &UART_ISR,
 8001336:	1dbb      	adds	r3, r7, #6
 8001338:	2203      	movs	r2, #3
 800133a:	4911      	ldr	r1, [pc, #68]	; (8001380 <AppObjCreate+0x70>)
 800133c:	4811      	ldr	r0, [pc, #68]	; (8001384 <AppObjCreate+0x74>)
 800133e:	f004 fb1f 	bl	8005980 <OSQCreate>
        (CPU_CHAR *) "ISR Queue",
        (OS_MSG_QTY) NUM_MSG,
        (OS_ERR   *) &err);
  if (err != OS_ERR_NONE)
 8001342:	88fb      	ldrh	r3, [r7, #6]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d002      	beq.n	800134e <AppObjCreate+0x3e>
    APP_TRACE_DBG ("ErroBSP_PWM_SetDutyCycler OSQCreate: AppObjCreate\n");
 8001348:	480f      	ldr	r0, [pc, #60]	; (8001388 <AppObjCreate+0x78>)
 800134a:	f007 f9fb 	bl	8008744 <puts>

  OSQCreate ( (OS_Q *)     &DUTY_QUEUE,
 800134e:	1dbb      	adds	r3, r7, #6
 8001350:	2203      	movs	r2, #3
 8001352:	490e      	ldr	r1, [pc, #56]	; (800138c <AppObjCreate+0x7c>)
 8001354:	480e      	ldr	r0, [pc, #56]	; (8001390 <AppObjCreate+0x80>)
 8001356:	f004 fb13 	bl	8005980 <OSQCreate>
        (CPU_CHAR *) "DUTY Queue",
        (OS_MSG_QTY) NUM_MSG,
        (OS_ERR   *) &err);
  if (err != OS_ERR_NONE)
 800135a:	88fb      	ldrh	r3, [r7, #6]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d002      	beq.n	8001366 <AppObjCreate+0x56>
    APP_TRACE_DBG ("Error OSQCreate: AppObjCreate\n");
 8001360:	480c      	ldr	r0, [pc, #48]	; (8001394 <AppObjCreate+0x84>)
 8001362:	f007 f9ef 	bl	8008744 <puts>
  //   APP_TRACE_DBG ("Error OSQCreate: AppObjCreate\n");

  // OSSemCreate(&XYTEST_SEM, "XYTest_sem", 0, &err);
  // if (err != OS_ERR_NONE)
  //     APP_TRACE_DBG ("Error OSQCreate: AppObjCreate\n");
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20001a30 	.word	0x20001a30
 8001374:	0800e4a8 	.word	0x0800e4a8
 8001378:	20001ab8 	.word	0x20001ab8
 800137c:	0800e4b8 	.word	0x0800e4b8
 8001380:	0800e4d8 	.word	0x0800e4d8
 8001384:	20001a88 	.word	0x20001a88
 8001388:	0800e4e4 	.word	0x0800e4e4
 800138c:	0800e518 	.word	0x0800e518
 8001390:	20001a58 	.word	0x20001a58
 8001394:	0800e524 	.word	0x0800e524

08001398 <AppTaskCreate>:
 * \brief Creates one application task.
 * \params none
 * \returns none
 */
static void  AppTaskCreate (void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08c      	sub	sp, #48	; 0x30
 800139c:	af0a      	add	r7, sp, #40	; 0x28
  OS_ERR      err;

  // create AppTask_COM
  OSTaskCreate ( (OS_TCB     *) &AppTaskComTCB,
 800139e:	1dbb      	adds	r3, r7, #6
 80013a0:	9308      	str	r3, [sp, #32]
 80013a2:	2303      	movs	r3, #3
 80013a4:	9307      	str	r3, [sp, #28]
 80013a6:	2300      	movs	r3, #0
 80013a8:	9306      	str	r3, [sp, #24]
 80013aa:	2300      	movs	r3, #0
 80013ac:	9305      	str	r3, [sp, #20]
 80013ae:	2300      	movs	r3, #0
 80013b0:	9304      	str	r3, [sp, #16]
 80013b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013b6:	9303      	str	r3, [sp, #12]
 80013b8:	2319      	movs	r3, #25
 80013ba:	9302      	str	r3, [sp, #8]
 80013bc:	4b19      	ldr	r3, [pc, #100]	; (8001424 <AppTaskCreate+0x8c>)
 80013be:	9301      	str	r3, [sp, #4]
 80013c0:	230a      	movs	r3, #10
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	2300      	movs	r3, #0
 80013c6:	4a18      	ldr	r2, [pc, #96]	; (8001428 <AppTaskCreate+0x90>)
 80013c8:	4918      	ldr	r1, [pc, #96]	; (800142c <AppTaskCreate+0x94>)
 80013ca:	4819      	ldr	r0, [pc, #100]	; (8001430 <AppTaskCreate+0x98>)
 80013cc:	f003 fc80 	bl	8004cd0 <OSTaskCreate>
           (OS_MSG_QTY) 0u,
           (OS_TICK) 0u,
           (void       *) 0,
           (OS_OPT) (OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
           (OS_ERR     *) &err);
  if (err != OS_ERR_NONE)
 80013d0:	88fb      	ldrh	r3, [r7, #6]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d002      	beq.n	80013dc <AppTaskCreate+0x44>
  {
    APP_TRACE_DBG ("Error OSTaskCreate: AppTaskCreate\n");
 80013d6:	4817      	ldr	r0, [pc, #92]	; (8001434 <AppTaskCreate+0x9c>)
 80013d8:	f007 f9b4 	bl	8008744 <puts>
  }

  OSTaskCreate ( (OS_TCB     *) &AppTaskPlotTCB,
 80013dc:	1dbb      	adds	r3, r7, #6
 80013de:	9308      	str	r3, [sp, #32]
 80013e0:	2303      	movs	r3, #3
 80013e2:	9307      	str	r3, [sp, #28]
 80013e4:	2300      	movs	r3, #0
 80013e6:	9306      	str	r3, [sp, #24]
 80013e8:	2300      	movs	r3, #0
 80013ea:	9305      	str	r3, [sp, #20]
 80013ec:	2300      	movs	r3, #0
 80013ee:	9304      	str	r3, [sp, #16]
 80013f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013f4:	9303      	str	r3, [sp, #12]
 80013f6:	2319      	movs	r3, #25
 80013f8:	9302      	str	r3, [sp, #8]
 80013fa:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <AppTaskCreate+0xa0>)
 80013fc:	9301      	str	r3, [sp, #4]
 80013fe:	230b      	movs	r3, #11
 8001400:	9300      	str	r3, [sp, #0]
 8001402:	2300      	movs	r3, #0
 8001404:	4a0d      	ldr	r2, [pc, #52]	; (800143c <AppTaskCreate+0xa4>)
 8001406:	490e      	ldr	r1, [pc, #56]	; (8001440 <AppTaskCreate+0xa8>)
 8001408:	480e      	ldr	r0, [pc, #56]	; (8001444 <AppTaskCreate+0xac>)
 800140a:	f003 fc61 	bl	8004cd0 <OSTaskCreate>
           (OS_MSG_QTY) 0u,
           (OS_TICK) 0u,
           (void       *) 0,
           (OS_OPT) (OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
           (OS_ERR     *) &err);
  if (err != OS_ERR_NONE)
 800140e:	88fb      	ldrh	r3, [r7, #6]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d002      	beq.n	800141a <AppTaskCreate+0x82>
    APP_TRACE_DBG ("Error OSTaskCreate: AppTaskCreate(LED)\n");
 8001414:	480c      	ldr	r0, [pc, #48]	; (8001448 <AppTaskCreate+0xb0>)
 8001416:	f007 f995 	bl	8008744 <puts>
               (OS_OPT) (OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
               (OS_ERR     *) &err);
      if (err != OS_ERR_NONE)
        APP_TRACE_DBG ("Error OSTaskCreate: AppTaskCreate(LED)\n");
*/
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20001364 	.word	0x20001364
 8001428:	08001869 	.word	0x08001869
 800142c:	0800e544 	.word	0x0800e544
 8001430:	20001764 	.word	0x20001764
 8001434:	0800e54c 	.word	0x0800e54c
 8001438:	20000ea4 	.word	0x20000ea4
 800143c:	080014d5 	.word	0x080014d5
 8001440:	0800e570 	.word	0x0800e570
 8001444:	200012a4 	.word	0x200012a4
 8001448:	0800e57c 	.word	0x0800e57c

0800144c <SendAcknowledge>:
    }
  }
*/

void SendAcknowledge(uint8_t cmd)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	71fb      	strb	r3, [r7, #7]
  if(cmd == 0)
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d10f      	bne.n	800147c <SendAcknowledge+0x30>
  {
    XMC_UART_CH_Transmit (XMC_UART1_CH1, 'G');
 800145c:	2147      	movs	r1, #71	; 0x47
 800145e:	481c      	ldr	r0, [pc, #112]	; (80014d0 <SendAcknowledge+0x84>)
 8001460:	f006 fdcb 	bl	8007ffa <XMC_UART_CH_Transmit>
    XMC_UART_CH_Transmit (XMC_UART1_CH1, '0');
 8001464:	2130      	movs	r1, #48	; 0x30
 8001466:	481a      	ldr	r0, [pc, #104]	; (80014d0 <SendAcknowledge+0x84>)
 8001468:	f006 fdc7 	bl	8007ffa <XMC_UART_CH_Transmit>
    XMC_UART_CH_Transmit (XMC_UART1_CH1, '0');
 800146c:	2130      	movs	r1, #48	; 0x30
 800146e:	4818      	ldr	r0, [pc, #96]	; (80014d0 <SendAcknowledge+0x84>)
 8001470:	f006 fdc3 	bl	8007ffa <XMC_UART_CH_Transmit>
    XMC_UART_CH_Transmit (XMC_UART1_CH1, '\n');
 8001474:	210a      	movs	r1, #10
 8001476:	4816      	ldr	r0, [pc, #88]	; (80014d0 <SendAcknowledge+0x84>)
 8001478:	f006 fdbf 	bl	8007ffa <XMC_UART_CH_Transmit>
  }
  if(cmd == 1)
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d10f      	bne.n	80014a2 <SendAcknowledge+0x56>
  {
    XMC_UART_CH_Transmit (XMC_UART1_CH1, 'G');
 8001482:	2147      	movs	r1, #71	; 0x47
 8001484:	4812      	ldr	r0, [pc, #72]	; (80014d0 <SendAcknowledge+0x84>)
 8001486:	f006 fdb8 	bl	8007ffa <XMC_UART_CH_Transmit>
    XMC_UART_CH_Transmit (XMC_UART1_CH1, '0');
 800148a:	2130      	movs	r1, #48	; 0x30
 800148c:	4810      	ldr	r0, [pc, #64]	; (80014d0 <SendAcknowledge+0x84>)
 800148e:	f006 fdb4 	bl	8007ffa <XMC_UART_CH_Transmit>
    XMC_UART_CH_Transmit (XMC_UART1_CH1, '1');
 8001492:	2131      	movs	r1, #49	; 0x31
 8001494:	480e      	ldr	r0, [pc, #56]	; (80014d0 <SendAcknowledge+0x84>)
 8001496:	f006 fdb0 	bl	8007ffa <XMC_UART_CH_Transmit>
    XMC_UART_CH_Transmit (XMC_UART1_CH1, '\n');
 800149a:	210a      	movs	r1, #10
 800149c:	480c      	ldr	r0, [pc, #48]	; (80014d0 <SendAcknowledge+0x84>)
 800149e:	f006 fdac 	bl	8007ffa <XMC_UART_CH_Transmit>
  }
  if(cmd == 2)
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d10f      	bne.n	80014c8 <SendAcknowledge+0x7c>
  {
    XMC_UART_CH_Transmit (XMC_UART1_CH1, 'E');
 80014a8:	2145      	movs	r1, #69	; 0x45
 80014aa:	4809      	ldr	r0, [pc, #36]	; (80014d0 <SendAcknowledge+0x84>)
 80014ac:	f006 fda5 	bl	8007ffa <XMC_UART_CH_Transmit>
    XMC_UART_CH_Transmit (XMC_UART1_CH1, 'r');
 80014b0:	2172      	movs	r1, #114	; 0x72
 80014b2:	4807      	ldr	r0, [pc, #28]	; (80014d0 <SendAcknowledge+0x84>)
 80014b4:	f006 fda1 	bl	8007ffa <XMC_UART_CH_Transmit>
    XMC_UART_CH_Transmit (XMC_UART1_CH1, 'r');
 80014b8:	2172      	movs	r1, #114	; 0x72
 80014ba:	4805      	ldr	r0, [pc, #20]	; (80014d0 <SendAcknowledge+0x84>)
 80014bc:	f006 fd9d 	bl	8007ffa <XMC_UART_CH_Transmit>
    XMC_UART_CH_Transmit (XMC_UART1_CH1, '\n');
 80014c0:	210a      	movs	r1, #10
 80014c2:	4803      	ldr	r0, [pc, #12]	; (80014d0 <SendAcknowledge+0x84>)
 80014c4:	f006 fd99 	bl	8007ffa <XMC_UART_CH_Transmit>
  }
}
 80014c8:	bf00      	nop
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	48020200 	.word	0x48020200

080014d4 <AppTaskPlot>:

void AppTaskPlot(void *p_arg)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b09c      	sub	sp, #112	; 0x70
 80014d8:	af02      	add	r7, sp, #8
 80014da:	6078      	str	r0, [r7, #4]
  void        *errmem = NULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	667b      	str	r3, [r7, #100]	; 0x64
  void        *p_msg;
  OS_MSG_SIZE msg_size;
  uint16_t    dutycycle;
  char        data[MAX_MSG_LENGTH];
  char        *pEnd;
  _Bool       ret = false;
 80014e0:	2300      	movs	r3, #0
 80014e2:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
  uint8_t reg_val = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  char  compG00[] = "G00";
 80014ec:	4bba      	ldr	r3, [pc, #744]	; (80017d8 <AppTaskPlot+0x304>)
 80014ee:	613b      	str	r3, [r7, #16]
  char  compG01[] = "G01";
 80014f0:	4bba      	ldr	r3, [pc, #744]	; (80017dc <AppTaskPlot+0x308>)
 80014f2:	60fb      	str	r3, [r7, #12]
  uint8_t   ack = 2;
 80014f4:	2302      	movs	r3, #2
 80014f6:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
  uint8_t   countsteps = 255;
 80014fa:	23ff      	movs	r3, #255	; 0xff
 80014fc:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
  uint8_t   dir_x = 0x00;
 8001500:	2300      	movs	r3, #0
 8001502:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
  uint8_t   dir_y = 0x00;
 8001506:	2300      	movs	r3, #0
 8001508:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint8_t   dir_xy = 0x00;
 800150c:	2300      	movs	r3, #0
 800150e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  int   x_axis_mov = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	65bb      	str	r3, [r7, #88]	; 0x58
  int   x_axis_curr = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	657b      	str	r3, [r7, #84]	; 0x54
  int   x_axis_end = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	647b      	str	r3, [r7, #68]	; 0x44
  int   y_axis_mov = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	653b      	str	r3, [r7, #80]	; 0x50
  int   y_axis_curr = 0;
 8001522:	2300      	movs	r3, #0
 8001524:	64fb      	str	r3, [r7, #76]	; 0x4c
  int   y_axis_end = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	643b      	str	r3, [r7, #64]	; 0x40

  // PEN UP and move to the 0-0-pos
  BSP_PWM_SetPen(1);
 800152a:	2001      	movs	r0, #1
 800152c:	f006 f866 	bl	80075fc <BSP_PWM_SetPen>
  OSTimeDlyHMSM(0,0,0,100,OS_OPT_TIME_HMSM_STRICT, &err);
 8001530:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8001534:	9301      	str	r3, [sp, #4]
 8001536:	2300      	movs	r3, #0
 8001538:	9300      	str	r3, [sp, #0]
 800153a:	2364      	movs	r3, #100	; 0x64
 800153c:	2200      	movs	r2, #0
 800153e:	2100      	movs	r1, #0
 8001540:	2000      	movs	r0, #0
 8001542:	f001 fe71 	bl	8003228 <OSTimeDlyHMSM>
  if(err != OS_ERR_NONE)
 8001546:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001548:	2b00      	cmp	r3, #0
 800154a:	d002      	beq.n	8001552 <AppTaskPlot+0x7e>
    APP_TRACE_DBG ("Error TimeDelay: AppTaskMOVE\n");
 800154c:	48a4      	ldr	r0, [pc, #656]	; (80017e0 <AppTaskPlot+0x30c>)
 800154e:	f007 f8f9 	bl	8008744 <puts>
  // Set the output of the pen OFF
  BSP_PWM_SetPen(3);
 8001552:	2003      	movs	r0, #3
 8001554:	f006 f852 	bl	80075fc <BSP_PWM_SetPen>
  //   _mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,dir_xy,MCP23S08_WR);
  //   _mcp23s08_set_ss(MCP23S08_SS);
  // }
  while(DEF_TRUE)
  {
    ack = 2;
 8001558:	2302      	movs	r3, #2
 800155a:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
    errno = 0;
 800155e:	f007 f81b 	bl	8008598 <__errno>
 8001562:	4602      	mov	r2, r0
 8001564:	2300      	movs	r3, #0
 8001566:	6013      	str	r3, [r2, #0]
    errmem = memset(&data[0], 0, MAX_MSG_LENGTH);
 8001568:	f107 0318 	add.w	r3, r7, #24
 800156c:	2214      	movs	r2, #20
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f007 f83b 	bl	80085ec <memset>
 8001576:	6678      	str	r0, [r7, #100]	; 0x64
    if(errmem != &data)
 8001578:	f107 0318 	add.w	r3, r7, #24
 800157c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800157e:	429a      	cmp	r2, r3
 8001580:	d002      	beq.n	8001588 <AppTaskPlot+0xb4>
      APP_TRACE_DBG ("Error memset: AppTaskPlot\n");
 8001582:	4898      	ldr	r0, [pc, #608]	; (80017e4 <AppTaskPlot+0x310>)
 8001584:	f007 f8de 	bl	8008744 <puts>

    p_msg = OSQPend (&DUTY_QUEUE,                                          // <16>
 8001588:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 800158c:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8001590:	9301      	str	r3, [sp, #4]
 8001592:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	4613      	mov	r3, r2
 800159a:	2200      	movs	r2, #0
 800159c:	2100      	movs	r1, #0
 800159e:	4892      	ldr	r0, [pc, #584]	; (80017e8 <AppTaskPlot+0x314>)
 80015a0:	f004 fa3e 	bl	8005a20 <OSQPend>
 80015a4:	63f8      	str	r0, [r7, #60]	; 0x3c
          0,
          OS_OPT_PEND_BLOCKING,
          &msg_size,
          &ts,
          &err);
    if (err != OS_ERR_NONE)
 80015a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d002      	beq.n	80015b2 <AppTaskPlot+0xde>
      APP_TRACE_DBG ("Error OSQPend: AppTaskPlot\n");
 80015ac:	488f      	ldr	r0, [pc, #572]	; (80017ec <AppTaskPlot+0x318>)
 80015ae:	f007 f8c9 	bl	8008744 <puts>

    if(msg_size < 20)
 80015b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80015b4:	2b13      	cmp	r3, #19
 80015b6:	d80a      	bhi.n	80015ce <AppTaskPlot+0xfa>
      errmem = memcpy (data, p_msg, msg_size - 1);
 80015b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80015ba:	3b01      	subs	r3, #1
 80015bc:	461a      	mov	r2, r3
 80015be:	f107 0318 	add.w	r3, r7, #24
 80015c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff f821 	bl	800060c <memcpy>
 80015ca:	6678      	str	r0, [r7, #100]	; 0x64
 80015cc:	e002      	b.n	80015d4 <AppTaskPlot+0x100>
    else
      APP_TRACE_DBG ("Error msg_size/memcpy: AppTaskPlot\n");
 80015ce:	4888      	ldr	r0, [pc, #544]	; (80017f0 <AppTaskPlot+0x31c>)
 80015d0:	f007 f8b8 	bl	8008744 <puts>
    if(errmem != &data)
 80015d4:	f107 0318 	add.w	r3, r7, #24
 80015d8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80015da:	429a      	cmp	r2, r3
 80015dc:	d002      	beq.n	80015e4 <AppTaskPlot+0x110>
      APP_TRACE_DBG ("Error memcpy: AppTaskPlot\n");
 80015de:	4885      	ldr	r0, [pc, #532]	; (80017f4 <AppTaskPlot+0x320>)
 80015e0:	f007 f8b0 	bl	8008744 <puts>

    char *token = strtok(data, " ");
 80015e4:	f107 0318 	add.w	r3, r7, #24
 80015e8:	4983      	ldr	r1, [pc, #524]	; (80017f8 <AppTaskPlot+0x324>)
 80015ea:	4618      	mov	r0, r3
 80015ec:	f007 f920 	bl	8008830 <strtok>
 80015f0:	63b8      	str	r0, [r7, #56]	; 0x38

    if(strncmp(data, compG00, 3) == 0)           // timer on and pen UP
 80015f2:	f107 0110 	add.w	r1, r7, #16
 80015f6:	f107 0318 	add.w	r3, r7, #24
 80015fa:	2203      	movs	r2, #3
 80015fc:	4618      	mov	r0, r3
 80015fe:	f007 f8cb 	bl	8008798 <strncmp>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d108      	bne.n	800161a <AppTaskPlot+0x146>
    {
      ret = BSP_PWM_SetPen(1);
 8001608:	2001      	movs	r0, #1
 800160a:	f005 fff7 	bl	80075fc <BSP_PWM_SetPen>
 800160e:	4603      	mov	r3, r0
 8001610:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
      ack = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
    }
    if(strncmp(data, compG01, 3) == 0)           // timer on and pen DOWN
 800161a:	f107 010c 	add.w	r1, r7, #12
 800161e:	f107 0318 	add.w	r3, r7, #24
 8001622:	2203      	movs	r2, #3
 8001624:	4618      	mov	r0, r3
 8001626:	f007 f8b7 	bl	8008798 <strncmp>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d108      	bne.n	8001642 <AppTaskPlot+0x16e>
    {
      ack = 1;
 8001630:	2301      	movs	r3, #1
 8001632:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
      ret = BSP_PWM_SetPen(2);
 8001636:	2002      	movs	r0, #2
 8001638:	f005 ffe0 	bl	80075fc <BSP_PWM_SetPen>
 800163c:	4603      	mov	r3, r0
 800163e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
    }
    if(!ret)
 8001642:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001646:	f083 0301 	eor.w	r3, r3, #1
 800164a:	b2db      	uxtb	r3, r3
 800164c:	2b00      	cmp	r3, #0
 800164e:	d002      	beq.n	8001656 <AppTaskPlot+0x182>
      APP_TRACE_DBG ("Error returnval: AppTaskPlot\n");
 8001650:	486a      	ldr	r0, [pc, #424]	; (80017fc <AppTaskPlot+0x328>)
 8001652:	f007 f877 	bl	8008744 <puts>

    // Wait 100ms to move the PEN
    OSTimeDlyHMSM(0,0,0,100,OS_OPT_TIME_HMSM_STRICT, &err);
 8001656:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800165a:	9301      	str	r3, [sp, #4]
 800165c:	2300      	movs	r3, #0
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	2364      	movs	r3, #100	; 0x64
 8001662:	2200      	movs	r2, #0
 8001664:	2100      	movs	r1, #0
 8001666:	2000      	movs	r0, #0
 8001668:	f001 fdde 	bl	8003228 <OSTimeDlyHMSM>
    if(err != OS_ERR_NONE)
 800166c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800166e:	2b00      	cmp	r3, #0
 8001670:	d002      	beq.n	8001678 <AppTaskPlot+0x1a4>
      APP_TRACE_DBG ("Error TimeDelay: AppTaskMOVE\n");
 8001672:	485b      	ldr	r0, [pc, #364]	; (80017e0 <AppTaskPlot+0x30c>)
 8001674:	f007 f866 	bl	8008744 <puts>
    // Set the output of the pen OFF
    ret = BSP_PWM_SetPen(3);
 8001678:	2003      	movs	r0, #3
 800167a:	f005 ffbf 	bl	80075fc <BSP_PWM_SetPen>
 800167e:	4603      	mov	r3, r0
 8001680:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
    if(!ret)
 8001684:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001688:	f083 0301 	eor.w	r3, r3, #1
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	d002      	beq.n	8001698 <AppTaskPlot+0x1c4>
      APP_TRACE_DBG ("Error returnval: AppTaskPlot\n");
 8001692:	485a      	ldr	r0, [pc, #360]	; (80017fc <AppTaskPlot+0x328>)
 8001694:	f007 f856 	bl	8008744 <puts>

    token = strtok(NULL, " ");
 8001698:	4957      	ldr	r1, [pc, #348]	; (80017f8 <AppTaskPlot+0x324>)
 800169a:	2000      	movs	r0, #0
 800169c:	f007 f8c8 	bl	8008830 <strtok>
 80016a0:	63b8      	str	r0, [r7, #56]	; 0x38
    x_axis_end = strtol(token, &pEnd,10);
 80016a2:	f107 0314 	add.w	r3, r7, #20
 80016a6:	220a      	movs	r2, #10
 80016a8:	4619      	mov	r1, r3
 80016aa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80016ac:	f007 f98c 	bl	80089c8 <strtol>
 80016b0:	6478      	str	r0, [r7, #68]	; 0x44
    token = strtok(NULL, " ");
 80016b2:	4951      	ldr	r1, [pc, #324]	; (80017f8 <AppTaskPlot+0x324>)
 80016b4:	2000      	movs	r0, #0
 80016b6:	f007 f8bb 	bl	8008830 <strtok>
 80016ba:	63b8      	str	r0, [r7, #56]	; 0x38
    y_axis_end = strtol(token, &pEnd,10);
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	220a      	movs	r2, #10
 80016c2:	4619      	mov	r1, r3
 80016c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80016c6:	f007 f97f 	bl	80089c8 <strtol>
 80016ca:	6438      	str	r0, [r7, #64]	; 0x40

    if((x_axis_end - x_axis_curr)==0) // next point is equally
 80016cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80016ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d101      	bne.n	80016d8 <AppTaskPlot+0x204>
      x_axis_mov = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	65bb      	str	r3, [r7, #88]	; 0x58
    if((x_axis_end - x_axis_curr)<0)  // go in direction left --> minus
 80016d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80016da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	da05      	bge.n	80016ee <AppTaskPlot+0x21a>
    {
      x_axis_mov = -1;
 80016e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016e6:	65bb      	str	r3, [r7, #88]	; 0x58
      dir_x = X_MINUS_PLOT_HIGH;
 80016e8:	2308      	movs	r3, #8
 80016ea:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
    }
    if((x_axis_end - x_axis_curr)>0)  // go in direction right --> plus
 80016ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80016f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	dd04      	ble.n	8001702 <AppTaskPlot+0x22e>
    {
      x_axis_mov = 1;
 80016f8:	2301      	movs	r3, #1
 80016fa:	65bb      	str	r3, [r7, #88]	; 0x58
      dir_x = X_PLUS_PLOT_HIGH;
 80016fc:	230c      	movs	r3, #12
 80016fe:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
    }

    if((y_axis_end - y_axis_curr)==0) // next point is equally
 8001702:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001706:	429a      	cmp	r2, r3
 8001708:	d101      	bne.n	800170e <AppTaskPlot+0x23a>
      y_axis_mov = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	653b      	str	r3, [r7, #80]	; 0x50
    if((y_axis_end - y_axis_curr)<0)  // go "up" --> minus
 800170e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b00      	cmp	r3, #0
 8001716:	da05      	bge.n	8001724 <AppTaskPlot+0x250>
    {
      y_axis_mov = -1;
 8001718:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800171c:	653b      	str	r3, [r7, #80]	; 0x50
      dir_y = Y_MINUS_PLOT_HIGH;
 800171e:	2302      	movs	r3, #2
 8001720:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    if((y_axis_end - y_axis_curr)>0)  // go "down" --> plus
 8001724:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	dd37      	ble.n	800179e <AppTaskPlot+0x2ca>
    {
      y_axis_mov = 1;
 800172e:	2301      	movs	r3, #1
 8001730:	653b      	str	r3, [r7, #80]	; 0x50
      dir_y = Y_PLUS_PLOT_HIGH;
 8001732:	2303      	movs	r3, #3
 8001734:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    // multiply number of g-code 200
    // move pen x axis
    while(x_axis_mov!=0)
 8001738:	e031      	b.n	800179e <AppTaskPlot+0x2ca>
    {
      if(x_axis_curr == x_axis_end)//(((XMC_GPIO_GetInput(D7) == 0)&&(x_axis_mov==-1))||((XMC_GPIO_GetInput(D8) == 0)&&(x_axis_mov==1))||(x_axis_curr == x_axis_end))//(x_axis_curr == x_axis_end)//
 800173a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800173c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800173e:	429a      	cmp	r2, r3
 8001740:	d031      	beq.n	80017a6 <AppTaskPlot+0x2d2>
        break;
      x_axis_curr+=x_axis_mov;
 8001742:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001744:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001746:	4413      	add	r3, r2
 8001748:	657b      	str	r3, [r7, #84]	; 0x54
      _mcp23s08_reset_ss(MCP23S08_SS);
 800174a:	2102      	movs	r1, #2
 800174c:	482c      	ldr	r0, [pc, #176]	; (8001800 <AppTaskPlot+0x32c>)
 800174e:	f004 fcfc 	bl	800614a <_mcp23s08_reset_ss>
      _mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,0x00,MCP23S08_WR);
 8001752:	2300      	movs	r3, #0
 8001754:	2200      	movs	r2, #0
 8001756:	2109      	movs	r1, #9
 8001758:	482a      	ldr	r0, [pc, #168]	; (8001804 <AppTaskPlot+0x330>)
 800175a:	f004 fd27 	bl	80061ac <_mcp23s08_reg_xfer>
      _mcp23s08_set_ss(MCP23S08_SS);
 800175e:	2102      	movs	r1, #2
 8001760:	4827      	ldr	r0, [pc, #156]	; (8001800 <AppTaskPlot+0x32c>)
 8001762:	f004 fd02 	bl	800616a <_mcp23s08_set_ss>

      while(countsteps!=0)
 8001766:	e004      	b.n	8001772 <AppTaskPlot+0x29e>
        countsteps--;
 8001768:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 800176c:	3b01      	subs	r3, #1
 800176e:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
      while(countsteps!=0)
 8001772:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f6      	bne.n	8001768 <AppTaskPlot+0x294>
      countsteps = 255;
 800177a:	23ff      	movs	r3, #255	; 0xff
 800177c:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

      _mcp23s08_reset_ss(MCP23S08_SS);
 8001780:	2102      	movs	r1, #2
 8001782:	481f      	ldr	r0, [pc, #124]	; (8001800 <AppTaskPlot+0x32c>)
 8001784:	f004 fce1 	bl	800614a <_mcp23s08_reset_ss>
      _mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,dir_x,MCP23S08_WR);
 8001788:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800178c:	2300      	movs	r3, #0
 800178e:	2109      	movs	r1, #9
 8001790:	481c      	ldr	r0, [pc, #112]	; (8001804 <AppTaskPlot+0x330>)
 8001792:	f004 fd0b 	bl	80061ac <_mcp23s08_reg_xfer>
      _mcp23s08_set_ss(MCP23S08_SS);
 8001796:	2102      	movs	r1, #2
 8001798:	4819      	ldr	r0, [pc, #100]	; (8001800 <AppTaskPlot+0x32c>)
 800179a:	f004 fce6 	bl	800616a <_mcp23s08_set_ss>
    while(x_axis_mov!=0)
 800179e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1ca      	bne.n	800173a <AppTaskPlot+0x266>
 80017a4:	e04b      	b.n	800183e <AppTaskPlot+0x36a>
        break;
 80017a6:	bf00      	nop
    }
    // move pen y axis
    while(y_axis_mov!=0)
 80017a8:	e049      	b.n	800183e <AppTaskPlot+0x36a>
    {
      if(y_axis_curr == y_axis_end)//(((XMC_GPIO_GetInput(D5) == 0)&&(y_axis_mov==-1))||((XMC_GPIO_GetInput(D6) == 0)&&(y_axis_mov==1))||(y_axis_curr == y_axis_end))//(y_axis_curr == y_axis_end)//
 80017aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80017ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d049      	beq.n	8001846 <AppTaskPlot+0x372>
        break;
      y_axis_curr+=y_axis_mov;
 80017b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80017b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017b6:	4413      	add	r3, r2
 80017b8:	64fb      	str	r3, [r7, #76]	; 0x4c
      _mcp23s08_reset_ss(MCP23S08_SS);
 80017ba:	2102      	movs	r1, #2
 80017bc:	4810      	ldr	r0, [pc, #64]	; (8001800 <AppTaskPlot+0x32c>)
 80017be:	f004 fcc4 	bl	800614a <_mcp23s08_reset_ss>
      _mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,0x00,MCP23S08_WR);
 80017c2:	2300      	movs	r3, #0
 80017c4:	2200      	movs	r2, #0
 80017c6:	2109      	movs	r1, #9
 80017c8:	480e      	ldr	r0, [pc, #56]	; (8001804 <AppTaskPlot+0x330>)
 80017ca:	f004 fcef 	bl	80061ac <_mcp23s08_reg_xfer>
      _mcp23s08_set_ss(MCP23S08_SS);
 80017ce:	2102      	movs	r1, #2
 80017d0:	480b      	ldr	r0, [pc, #44]	; (8001800 <AppTaskPlot+0x32c>)
 80017d2:	f004 fcca 	bl	800616a <_mcp23s08_set_ss>

      while(countsteps!=0)
 80017d6:	e01c      	b.n	8001812 <AppTaskPlot+0x33e>
 80017d8:	00303047 	.word	0x00303047
 80017dc:	00313047 	.word	0x00313047
 80017e0:	0800e5a4 	.word	0x0800e5a4
 80017e4:	0800e5c4 	.word	0x0800e5c4
 80017e8:	20001a58 	.word	0x20001a58
 80017ec:	0800e5e0 	.word	0x0800e5e0
 80017f0:	0800e5fc 	.word	0x0800e5fc
 80017f4:	0800e620 	.word	0x0800e620
 80017f8:	0800e63c 	.word	0x0800e63c
 80017fc:	0800e640 	.word	0x0800e640
 8001800:	48028100 	.word	0x48028100
 8001804:	48020000 	.word	0x48020000
        countsteps--;
 8001808:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 800180c:	3b01      	subs	r3, #1
 800180e:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
      while(countsteps!=0)
 8001812:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f6      	bne.n	8001808 <AppTaskPlot+0x334>
      countsteps = 255;
 800181a:	23ff      	movs	r3, #255	; 0xff
 800181c:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

      _mcp23s08_reset_ss(MCP23S08_SS);
 8001820:	2102      	movs	r1, #2
 8001822:	480e      	ldr	r0, [pc, #56]	; (800185c <AppTaskPlot+0x388>)
 8001824:	f004 fc91 	bl	800614a <_mcp23s08_reset_ss>
      _mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,dir_y,MCP23S08_WR);
 8001828:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800182c:	2300      	movs	r3, #0
 800182e:	2109      	movs	r1, #9
 8001830:	480b      	ldr	r0, [pc, #44]	; (8001860 <AppTaskPlot+0x38c>)
 8001832:	f004 fcbb 	bl	80061ac <_mcp23s08_reg_xfer>
      _mcp23s08_set_ss(MCP23S08_SS);
 8001836:	2102      	movs	r1, #2
 8001838:	4808      	ldr	r0, [pc, #32]	; (800185c <AppTaskPlot+0x388>)
 800183a:	f004 fc96 	bl	800616a <_mcp23s08_set_ss>
    while(y_axis_mov!=0)
 800183e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1b2      	bne.n	80017aa <AppTaskPlot+0x2d6>
 8001844:	e000      	b.n	8001848 <AppTaskPlot+0x374>
        break;
 8001846:	bf00      	nop
    }

    SendAcknowledge(ack);
 8001848:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff fdfd 	bl	800144c <SendAcknowledge>
    APP_TRACE_DBG ("Led Task\n");
 8001852:	4804      	ldr	r0, [pc, #16]	; (8001864 <AppTaskPlot+0x390>)
 8001854:	f006 ff76 	bl	8008744 <puts>
  {
 8001858:	e67e      	b.n	8001558 <AppTaskPlot+0x84>
 800185a:	bf00      	nop
 800185c:	48028100 	.word	0x48028100
 8001860:	48020000 	.word	0x48020000
 8001864:	0800e660 	.word	0x0800e660

08001868 <AppTaskCom>:
 *        (3) Launch a terminal program and connect with 9600-8N1
 *            Enter strings like: #12345$, #abc$, etc.
 *            The XMC will respond with: XMC: 12345, XMC: abc, etc.
 */
static void AppTaskCom (void *p_arg)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b0a0      	sub	sp, #128	; 0x80
 800186c:	af02      	add	r7, sp, #8
 800186e:	6078      	str	r0, [r7, #4]
  void        *errmem = NULL;
 8001870:	2300      	movs	r3, #0
 8001872:	677b      	str	r3, [r7, #116]	; 0x74
  void        *p_msg;
  OS_ERR      err;
  OS_MSG_SIZE msg_size;
  CPU_TS      ts;
  CPU_CHAR    msg[MAX_MSG_LENGTH];
  CPU_INT08U  i = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  CPU_CHAR    debug_msg[MAX_MSG_LENGTH + 30];
  CPU_CHAR    CommRxBuf[MAX_MSG_LENGTH];
  (void) p_arg;                                                          // <14>
  APP_TRACE_INFO ("Entering AppTaskCom ...\n");
 800187a:	4854      	ldr	r0, [pc, #336]	; (80019cc <AppTaskCom+0x164>)
 800187c:	f006 ff62 	bl	8008744 <puts>
  while (DEF_TRUE) {
    // empty the message buffer
    errmem = memset (&msg[0], 0, MAX_MSG_LENGTH);
 8001880:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001884:	2214      	movs	r2, #20
 8001886:	2100      	movs	r1, #0
 8001888:	4618      	mov	r0, r3
 800188a:	f006 feaf 	bl	80085ec <memset>
 800188e:	6778      	str	r0, [r7, #116]	; 0x74
    if(errmem != &msg)
 8001890:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001894:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001896:	429a      	cmp	r2, r3
 8001898:	d002      	beq.n	80018a0 <AppTaskCom+0x38>
      APP_TRACE_DBG ("Error memset: AppTaskCom\n");
 800189a:	484d      	ldr	r0, [pc, #308]	; (80019d0 <AppTaskCom+0x168>)
 800189c:	f006 ff52 	bl	8008744 <puts>
    // wait until a message is received
    p_msg = OSQPend (&UART_ISR,                                          // <16>
 80018a0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80018a4:	f107 036a 	add.w	r3, r7, #106	; 0x6a
 80018a8:	9301      	str	r3, [sp, #4]
 80018aa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	4613      	mov	r3, r2
 80018b2:	2200      	movs	r2, #0
 80018b4:	2100      	movs	r1, #0
 80018b6:	4847      	ldr	r0, [pc, #284]	; (80019d4 <AppTaskCom+0x16c>)
 80018b8:	f004 f8b2 	bl	8005a20 <OSQPend>
 80018bc:	66f8      	str	r0, [r7, #108]	; 0x6c
         0,
         OS_OPT_PEND_BLOCKING,
         &msg_size,
         &ts,
         &err);
    if (err != OS_ERR_NONE)
 80018be:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d002      	beq.n	80018cc <AppTaskCom+0x64>
      APP_TRACE_DBG ("Error OSQPend: AppTaskCom\n");
 80018c6:	4844      	ldr	r0, [pc, #272]	; (80019d8 <AppTaskCom+0x170>)
 80018c8:	f006 ff3c 	bl	8008744 <puts>

    // obtain message we received
    if(msg_size < 20)
 80018cc:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80018d0:	2b13      	cmp	r3, #19
 80018d2:	d807      	bhi.n	80018e4 <AppTaskCom+0x7c>
      errmem = memset (&CommRxBuf[0], 0, MAX_MSG_LENGTH);
 80018d4:	f107 0308 	add.w	r3, r7, #8
 80018d8:	2214      	movs	r2, #20
 80018da:	2100      	movs	r1, #0
 80018dc:	4618      	mov	r0, r3
 80018de:	f006 fe85 	bl	80085ec <memset>
 80018e2:	6778      	str	r0, [r7, #116]	; 0x74
    if((errmem != &CommRxBuf) || (msg_size > 19))
 80018e4:	f107 0308 	add.w	r3, r7, #8
 80018e8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d103      	bne.n	80018f6 <AppTaskCom+0x8e>
 80018ee:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80018f2:	2b13      	cmp	r3, #19
 80018f4:	d902      	bls.n	80018fc <AppTaskCom+0x94>
      APP_TRACE_DBG ("Error memset: AppTaskCom\n");
 80018f6:	4836      	ldr	r0, [pc, #216]	; (80019d0 <AppTaskCom+0x168>)
 80018f8:	f006 ff24 	bl	8008744 <puts>

    if(msg_size < 20)
 80018fc:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001900:	2b13      	cmp	r3, #19
 8001902:	d80a      	bhi.n	800191a <AppTaskCom+0xb2>
      errmem = memcpy (msg, (CPU_CHAR*) p_msg, msg_size - 1);
 8001904:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001908:	3b01      	subs	r3, #1
 800190a:	461a      	mov	r2, r3
 800190c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001910:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001912:	4618      	mov	r0, r3
 8001914:	f7fe fe7a 	bl	800060c <memcpy>
 8001918:	6778      	str	r0, [r7, #116]	; 0x74
    if((errmem != &msg) || (msg_size > 19))
 800191a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800191e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001920:	429a      	cmp	r2, r3
 8001922:	d103      	bne.n	800192c <AppTaskCom+0xc4>
 8001924:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001928:	2b13      	cmp	r3, #19
 800192a:	d902      	bls.n	8001932 <AppTaskCom+0xca>
      APP_TRACE_DBG ("Error memcpy: AppTaskCom\n");
 800192c:	482b      	ldr	r0, [pc, #172]	; (80019dc <AppTaskCom+0x174>)
 800192e:	f006 ff09 	bl	8008744 <puts>

    if(msg_size < 20)
 8001932:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001936:	2b13      	cmp	r3, #19
 8001938:	d80a      	bhi.n	8001950 <AppTaskCom+0xe8>
      errmem = memcpy (CommRxBuf, (CPU_CHAR*) p_msg, msg_size - 1);
 800193a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800193e:	3b01      	subs	r3, #1
 8001940:	461a      	mov	r2, r3
 8001942:	f107 0308 	add.w	r3, r7, #8
 8001946:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe fe5f 	bl	800060c <memcpy>
 800194e:	6778      	str	r0, [r7, #116]	; 0x74
    if((errmem != &CommRxBuf) || (msg_size > 19))
 8001950:	f107 0308 	add.w	r3, r7, #8
 8001954:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001956:	429a      	cmp	r2, r3
 8001958:	d103      	bne.n	8001962 <AppTaskCom+0xfa>
 800195a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800195e:	2b13      	cmp	r3, #19
 8001960:	d902      	bls.n	8001968 <AppTaskCom+0x100>
      APP_TRACE_DBG ("Error memcpy: AppTaskCom\n");                     // <17>
 8001962:	481e      	ldr	r0, [pc, #120]	; (80019dc <AppTaskCom+0x174>)
 8001964:	f006 feee 	bl	8008744 <puts>
    // release the memory partition allocated in the UART service routine
    OSMemPut (&Mem_Partition, p_msg, &err);                              // <18>
 8001968:	f107 036a 	add.w	r3, r7, #106	; 0x6a
 800196c:	461a      	mov	r2, r3
 800196e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001970:	481b      	ldr	r0, [pc, #108]	; (80019e0 <AppTaskCom+0x178>)
 8001972:	f000 fc43 	bl	80021fc <OSMemPut>
    if (err != OS_ERR_NONE)
 8001976:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800197a:	2b00      	cmp	r3, #0
 800197c:	d002      	beq.n	8001984 <AppTaskCom+0x11c>
      APP_TRACE_DBG ("Error OSMemPut: AppTaskCom\n");
 800197e:	4819      	ldr	r0, [pc, #100]	; (80019e4 <AppTaskCom+0x17c>)
 8001980:	f006 fee0 	bl	8008744 <puts>

    // send ACK in return
    //XMC_UART_CH_Transmit (XMC_UART1_CH1, ACK);                           // <19>

    // print the received message to the debug interface
    sprintf (debug_msg, "Msg: %s\tLength: %d\n", msg, msg_size - 1);     // <20>
 8001984:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001988:	3b01      	subs	r3, #1
 800198a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800198e:	f107 001c 	add.w	r0, r7, #28
 8001992:	4915      	ldr	r1, [pc, #84]	; (80019e8 <AppTaskCom+0x180>)
 8001994:	f006 fede 	bl	8008754 <sprintf>
    APP_TRACE_INFO (debug_msg);
 8001998:	f107 031c 	add.w	r3, r7, #28
 800199c:	4618      	mov	r0, r3
 800199e:	f006 fe6f 	bl	8008680 <printf>

    // send the message to AppTaskPlot to change the dutycycle
    OSQPost ( (OS_Q      *) &DUTY_QUEUE,
 80019a2:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 80019a6:	f107 0108 	add.w	r1, r7, #8
 80019aa:	f107 036a 	add.w	r3, r7, #106	; 0x6a
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	2300      	movs	r3, #0
 80019b2:	480e      	ldr	r0, [pc, #56]	; (80019ec <AppTaskCom+0x184>)
 80019b4:	f004 f92c 	bl	8005c10 <OSQPost>
      (void      *) &CommRxBuf[0],
      (OS_MSG_SIZE) msg_size,
      (OS_OPT)      OS_OPT_POST_FIFO,
      (OS_ERR    *) &err);
    if (err != OS_ERR_NONE)
 80019b8:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f43f af5f 	beq.w	8001880 <AppTaskCom+0x18>
      APP_TRACE_DBG ("Error OSQPost: AppTaskCom\n");
 80019c2:	480b      	ldr	r0, [pc, #44]	; (80019f0 <AppTaskCom+0x188>)
 80019c4:	f006 febe 	bl	8008744 <puts>
    errmem = memset (&msg[0], 0, MAX_MSG_LENGTH);
 80019c8:	e75a      	b.n	8001880 <AppTaskCom+0x18>
 80019ca:	bf00      	nop
 80019cc:	0800e66c 	.word	0x0800e66c
 80019d0:	0800e684 	.word	0x0800e684
 80019d4:	20001a88 	.word	0x20001a88
 80019d8:	0800e6a0 	.word	0x0800e6a0
 80019dc:	0800e6bc 	.word	0x0800e6bc
 80019e0:	20001ab8 	.word	0x20001ab8
 80019e4:	0800e6d8 	.word	0x0800e6d8
 80019e8:	0800e6f4 	.word	0x0800e6f4
 80019ec:	20001a58 	.word	0x20001a58
 80019f0:	0800e708 	.word	0x0800e708

080019f4 <CPU_Init>:
*                                                   & other CPU interrupts disabled time measurement functions
*********************************************************************************************************
*/

void  CPU_Init (void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
                                                                /* --------------------- INIT TS ---------------------- */
#if ((CPU_CFG_TS_EN     == DEF_ENABLED) || \
     (CPU_CFG_TS_TMR_EN == DEF_ENABLED))
    CPU_TS_Init();                                              /* See Note #3a.                                        */
 80019f8:	f000 f832 	bl	8001a60 <CPU_TS_Init>
    CPU_IntDisMeasInit();                                       /* See Note #3b.                                        */
#endif

                                                                /* ------------------ INIT CPU NAME ------------------- */
#if (CPU_CFG_NAME_EN == DEF_ENABLED)
     CPU_NameInit();
 80019fc:	f000 f82a 	bl	8001a54 <CPU_NameInit>
#endif

#if (CPU_CFG_CACHE_MGMT_EN == DEF_ENABLED)
     CPU_Cache_Init();
#endif
}
 8001a00:	bf00      	nop
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <CPU_SW_Exception>:
*                   See also 'cpu_core.h  CPU_SW_EXCEPTION()  Note #1'.
*********************************************************************************************************
*/

void  CPU_SW_Exception (void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
    while (DEF_ON) {
 8001a08:	e7fe      	b.n	8001a08 <CPU_SW_Exception+0x4>
	...

08001a0c <CPU_NameClr>:
*********************************************************************************************************
*/

#if (CPU_CFG_NAME_EN == DEF_ENABLED)
void  CPU_NameClr (void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
 8001a12:	2300      	movs	r3, #0
 8001a14:	607b      	str	r3, [r7, #4]


    CPU_CRITICAL_ENTER();
 8001a16:	f7fe fc63 	bl	80002e0 <CPU_SR_Save>
 8001a1a:	6078      	str	r0, [r7, #4]
    Mem_Clr((void     *)&CPU_Name[0],
 8001a1c:	2110      	movs	r1, #16
 8001a1e:	4805      	ldr	r0, [pc, #20]	; (8001a34 <CPU_NameClr+0x28>)
 8001a20:	f000 f90e 	bl	8001c40 <Mem_Clr>
            (CPU_SIZE_T) CPU_CFG_NAME_SIZE);
    CPU_CRITICAL_EXIT();
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7fe fc5f 	bl	80002e8 <CPU_SR_Restore>
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20001adc 	.word	0x20001adc

08001a38 <CPU_TS_TmrFreqSet>:
*********************************************************************************************************
*/

#if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
void  CPU_TS_TmrFreqSet (CPU_TS_TMR_FREQ  freq_hz)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
    CPU_TS_TmrFreq_Hz = freq_hz;
 8001a40:	4a03      	ldr	r2, [pc, #12]	; (8001a50 <CPU_TS_TmrFreqSet+0x18>)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6013      	str	r3, [r2, #0]
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr
 8001a50:	20001ad8 	.word	0x20001ad8

08001a54 <CPU_NameInit>:
*********************************************************************************************************
*/

#if (CPU_CFG_NAME_EN == DEF_ENABLED)
static  void  CPU_NameInit (void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
    CPU_NameClr();
 8001a58:	f7ff ffd8 	bl	8001a0c <CPU_NameClr>
}
 8001a5c:	bf00      	nop
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <CPU_TS_Init>:
*/

#if ((CPU_CFG_TS_EN     == DEF_ENABLED) || \
     (CPU_CFG_TS_TMR_EN == DEF_ENABLED))
static  void  CPU_TS_Init (void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
#endif


                                                                /* ----------------- INIT CPU TS TMR ------------------ */
#if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
    CPU_TS_TmrFreq_Hz   = 0u;                                   /* Init/clr     ts tmr freq (see Note #1a).             */
 8001a64:	4b03      	ldr	r3, [pc, #12]	; (8001a74 <CPU_TS_Init+0x14>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
    CPU_TS_TmrInit();                                           /* Init & start ts tmr      (see Note #1b).             */
 8001a6a:	f004 fbf7 	bl	800625c <CPU_TS_TmrInit>
#if  ((CPU_CFG_TS_64_EN    == DEF_ENABLED)  && \
      (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_64))
    CPU_TS_64_Accum   = 0u;                                     /* Init 64-bit accum'd ts.                              */
    CPU_TS_64_TmrPrev = ts_tmr_cnts;                            /* Init 64-bit ts prev tmr val.                         */
#endif
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20001ad8 	.word	0x20001ad8

08001a78 <CPU_IntSrcEn>:
*               (3) See 'CPU_IntSrcDis()  Note #3'.
*********************************************************************************************************
*/

void  CPU_IntSrcEn (CPU_INT08U  pos)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]
    CPU_INT08U  group;
    CPU_INT08U  nbr;
    CPU_INT08U  pos_max;
    CPU_SR_ALLOC();
 8001a82:	2300      	movs	r3, #0
 8001a84:	60fb      	str	r3, [r7, #12]


    switch (pos) {
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	2b0f      	cmp	r3, #15
 8001a8a:	d857      	bhi.n	8001b3c <CPU_IntSrcEn+0xc4>
 8001a8c:	a201      	add	r2, pc, #4	; (adr r2, 8001a94 <CPU_IntSrcEn+0x1c>)
 8001a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a92:	bf00      	nop
 8001a94:	08001b9f 	.word	0x08001b9f
 8001a98:	08001b9f 	.word	0x08001b9f
 8001a9c:	08001b9f 	.word	0x08001b9f
 8001aa0:	08001b9f 	.word	0x08001b9f
 8001aa4:	08001ad5 	.word	0x08001ad5
 8001aa8:	08001aef 	.word	0x08001aef
 8001aac:	08001b09 	.word	0x08001b09
 8001ab0:	08001b9f 	.word	0x08001b9f
 8001ab4:	08001b9f 	.word	0x08001b9f
 8001ab8:	08001b9f 	.word	0x08001b9f
 8001abc:	08001b9f 	.word	0x08001b9f
 8001ac0:	08001b9f 	.word	0x08001b9f
 8001ac4:	08001b9f 	.word	0x08001b9f
 8001ac8:	08001b9f 	.word	0x08001b9f
 8001acc:	08001b9f 	.word	0x08001b9f
 8001ad0:	08001b23 	.word	0x08001b23
        case CPU_INT_DBGMON:                                    /* Debug monitor (see Note #2).                         */
        case CPU_INT_PENDSV:                                    /* PendSV (see Note #2).                                */
             break;

        case CPU_INT_MEM:                                       /* Memory management.                                   */
             CPU_CRITICAL_ENTER();
 8001ad4:	f7fe fc04 	bl	80002e0 <CPU_SR_Save>
 8001ad8:	60f8      	str	r0, [r7, #12]
             CPU_REG_NVIC_SHCSR |= CPU_REG_NVIC_SHCSR_MEMFAULTENA;
 8001ada:	4b34      	ldr	r3, [pc, #208]	; (8001bac <CPU_IntSrcEn+0x134>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a33      	ldr	r2, [pc, #204]	; (8001bac <CPU_IntSrcEn+0x134>)
 8001ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae4:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	f7fe fbfe 	bl	80002e8 <CPU_SR_Restore>
             break;
 8001aec:	e05a      	b.n	8001ba4 <CPU_IntSrcEn+0x12c>

        case CPU_INT_BUSFAULT:                                  /* Bus fault.                                           */
             CPU_CRITICAL_ENTER();
 8001aee:	f7fe fbf7 	bl	80002e0 <CPU_SR_Save>
 8001af2:	60f8      	str	r0, [r7, #12]
             CPU_REG_NVIC_SHCSR |= CPU_REG_NVIC_SHCSR_BUSFAULTENA;
 8001af4:	4b2d      	ldr	r3, [pc, #180]	; (8001bac <CPU_IntSrcEn+0x134>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a2c      	ldr	r2, [pc, #176]	; (8001bac <CPU_IntSrcEn+0x134>)
 8001afa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001afe:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 8001b00:	68f8      	ldr	r0, [r7, #12]
 8001b02:	f7fe fbf1 	bl	80002e8 <CPU_SR_Restore>
             break;
 8001b06:	e04d      	b.n	8001ba4 <CPU_IntSrcEn+0x12c>

        case CPU_INT_USAGEFAULT:                                /* Usage fault.                                         */
             CPU_CRITICAL_ENTER();
 8001b08:	f7fe fbea 	bl	80002e0 <CPU_SR_Save>
 8001b0c:	60f8      	str	r0, [r7, #12]
             CPU_REG_NVIC_SHCSR |= CPU_REG_NVIC_SHCSR_USGFAULTENA;
 8001b0e:	4b27      	ldr	r3, [pc, #156]	; (8001bac <CPU_IntSrcEn+0x134>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a26      	ldr	r2, [pc, #152]	; (8001bac <CPU_IntSrcEn+0x134>)
 8001b14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b18:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f7fe fbe4 	bl	80002e8 <CPU_SR_Restore>
             break;
 8001b20:	e040      	b.n	8001ba4 <CPU_IntSrcEn+0x12c>

        case CPU_INT_SYSTICK:                                   /* SysTick.                                             */
             CPU_CRITICAL_ENTER();
 8001b22:	f7fe fbdd 	bl	80002e0 <CPU_SR_Save>
 8001b26:	60f8      	str	r0, [r7, #12]
             CPU_REG_NVIC_ST_CTRL |= CPU_REG_NVIC_ST_CTRL_ENABLE;
 8001b28:	4b21      	ldr	r3, [pc, #132]	; (8001bb0 <CPU_IntSrcEn+0x138>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a20      	ldr	r2, [pc, #128]	; (8001bb0 <CPU_IntSrcEn+0x138>)
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f7fe fbd7 	bl	80002e8 <CPU_SR_Restore>
             break;
 8001b3a:	e033      	b.n	8001ba4 <CPU_IntSrcEn+0x12c>


                                                                /* ---------------- EXTERNAL INTERRUPT ---------------- */
        default:
            pos_max = CPU_INT_SRC_POS_MAX;
 8001b3c:	4b1d      	ldr	r3, [pc, #116]	; (8001bb4 <CPU_IntSrcEn+0x13c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	3301      	adds	r3, #1
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	f003 031f 	and.w	r3, r3, #31
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	015b      	lsls	r3, r3, #5
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	3310      	adds	r3, #16
 8001b50:	72fb      	strb	r3, [r7, #11]
            if (pos < pos_max) {                                /* See Note #3.                                         */
 8001b52:	79fa      	ldrb	r2, [r7, #7]
 8001b54:	7afb      	ldrb	r3, [r7, #11]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d223      	bcs.n	8001ba2 <CPU_IntSrcEn+0x12a>
                 group = (pos - 16) / 32;
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	3b10      	subs	r3, #16
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	da00      	bge.n	8001b64 <CPU_IntSrcEn+0xec>
 8001b62:	331f      	adds	r3, #31
 8001b64:	115b      	asrs	r3, r3, #5
 8001b66:	72bb      	strb	r3, [r7, #10]
                 nbr   = (pos - 16) % 32;
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	3b10      	subs	r3, #16
 8001b6c:	425a      	negs	r2, r3
 8001b6e:	f003 031f 	and.w	r3, r3, #31
 8001b72:	f002 021f 	and.w	r2, r2, #31
 8001b76:	bf58      	it	pl
 8001b78:	4253      	negpl	r3, r2
 8001b7a:	727b      	strb	r3, [r7, #9]

                 CPU_CRITICAL_ENTER();
 8001b7c:	f7fe fbb0 	bl	80002e0 <CPU_SR_Save>
 8001b80:	60f8      	str	r0, [r7, #12]
                 CPU_REG_NVIC_SETEN(group) = DEF_BIT(nbr);
 8001b82:	7a7a      	ldrb	r2, [r7, #9]
 8001b84:	7abb      	ldrb	r3, [r7, #10]
 8001b86:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
 8001b8a:	3340      	adds	r3, #64	; 0x40
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4619      	mov	r1, r3
 8001b90:	2301      	movs	r3, #1
 8001b92:	4093      	lsls	r3, r2
 8001b94:	600b      	str	r3, [r1, #0]
                 CPU_CRITICAL_EXIT();
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f7fe fba6 	bl	80002e8 <CPU_SR_Restore>
             }
             break;
 8001b9c:	e001      	b.n	8001ba2 <CPU_IntSrcEn+0x12a>
             break;
 8001b9e:	bf00      	nop
 8001ba0:	e000      	b.n	8001ba4 <CPU_IntSrcEn+0x12c>
             break;
 8001ba2:	bf00      	nop
    }
}
 8001ba4:	bf00      	nop
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	e000ed24 	.word	0xe000ed24
 8001bb0:	e000e010 	.word	0xe000e010
 8001bb4:	e000e004 	.word	0xe000e004

08001bb8 <Math_Init>:
*                   as when srand() is first called with a seed value of 1".
*********************************************************************************************************
*/

void  Math_Init (void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
    Math_RandSetSeed((RAND_NBR)RAND_SEED_INIT_VAL);             /* See Note #2.                                         */
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	f000 f803 	bl	8001bc8 <Math_RandSetSeed>
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <Math_RandSetSeed>:
*                   See also 'Math_Rand()  Note #1b'.
*********************************************************************************************************
*/

void  Math_RandSetSeed (RAND_NBR  seed)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
    CPU_SR_ALLOC();
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60fb      	str	r3, [r7, #12]


    CPU_CRITICAL_ENTER();
 8001bd4:	f7fe fb84 	bl	80002e0 <CPU_SR_Save>
 8001bd8:	60f8      	str	r0, [r7, #12]
    Math_RandSeedCur = seed;
 8001bda:	4a05      	ldr	r2, [pc, #20]	; (8001bf0 <Math_RandSetSeed+0x28>)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6013      	str	r3, [r2, #0]
    CPU_CRITICAL_EXIT();
 8001be0:	68f8      	ldr	r0, [r7, #12]
 8001be2:	f7fe fb81 	bl	80002e8 <CPU_SR_Restore>
}
 8001be6:	bf00      	nop
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20001aec 	.word	0x20001aec

08001bf4 <Mem_Init>:
*                   (b) BEFORE product's application calls any memory library module function(s)
*********************************************************************************************************
*/

void  Mem_Init (void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af02      	add	r7, sp, #8

                                                                /* ------------------ INIT SEG LIST ------------------- */
    Mem_SegHeadPtr = DEF_NULL;
 8001bfa:	4b0d      	ldr	r3, [pc, #52]	; (8001c30 <Mem_Init+0x3c>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]

                                                                /* ------------------ INIT HEAP SEG ------------------- */
#ifdef  LIB_MEM_CFG_HEAP_BASE_ADDR
        heap_base_addr = LIB_MEM_CFG_HEAP_BASE_ADDR;
#else
        heap_base_addr = (CPU_ADDR)&Mem_Heap[0u];
 8001c00:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <Mem_Init+0x40>)
 8001c02:	607b      	str	r3, [r7, #4]
#endif

        Mem_SegCreate("Heap",
 8001c04:	1cbb      	adds	r3, r7, #2
 8001c06:	9301      	str	r3, [sp, #4]
 8001c08:	2301      	movs	r3, #1
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	4909      	ldr	r1, [pc, #36]	; (8001c38 <Mem_Init+0x44>)
 8001c14:	4809      	ldr	r0, [pc, #36]	; (8001c3c <Mem_Init+0x48>)
 8001c16:	f000 f87b 	bl	8001d10 <Mem_SegCreate>
                      &Mem_SegHeap,                             /* Create heap seg.                                     */
                       heap_base_addr,
                       LIB_MEM_CFG_HEAP_SIZE,
                       LIB_MEM_PADDING_ALIGN_NONE,
                      &err);
        if (err != LIB_MEM_ERR_NONE) {
 8001c1a:	887b      	ldrh	r3, [r7, #2]
 8001c1c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d001      	beq.n	8001c28 <Mem_Init+0x34>
            CPU_SW_EXCEPTION(;);
 8001c24:	f7ff feee 	bl	8001a04 <CPU_SW_Exception>
        }
    }
#endif
}
 8001c28:	bf00      	nop
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20001b04 	.word	0x20001b04
 8001c34:	20001b08 	.word	0x20001b08
 8001c38:	20001af0 	.word	0x20001af0
 8001c3c:	0800e724 	.word	0x0800e724

08001c40 <Mem_Clr>:
*********************************************************************************************************
*/

void  Mem_Clr (void        *pmem,
               CPU_SIZE_T   size)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
    Mem_Set(pmem,
 8001c4a:	683a      	ldr	r2, [r7, #0]
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 f804 	bl	8001c5c <Mem_Set>
            0u,                                                 /* See Note #2.                                         */
            size);
}
 8001c54:	bf00      	nop
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <Mem_Set>:
*/

void  Mem_Set (void        *pmem,
               CPU_INT08U   data_val,
               CPU_SIZE_T   size)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b08b      	sub	sp, #44	; 0x2c
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	460b      	mov	r3, r1
 8001c66:	607a      	str	r2, [r7, #4]
 8001c68:	72fb      	strb	r3, [r7, #11]
        return;
    }
#endif


    data_align = 0u;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	623b      	str	r3, [r7, #32]
    for (i = 0u; i < sizeof(CPU_ALIGN); i++) {                  /* Fill each data_align octet with data val.            */
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
 8001c72:	e009      	b.n	8001c88 <Mem_Set+0x2c>
        data_align <<=  DEF_OCTET_NBR_BITS;
 8001c74:	6a3b      	ldr	r3, [r7, #32]
 8001c76:	021b      	lsls	r3, r3, #8
 8001c78:	623b      	str	r3, [r7, #32]
        data_align  |= (CPU_ALIGN)data_val;
 8001c7a:	7afb      	ldrb	r3, [r7, #11]
 8001c7c:	6a3a      	ldr	r2, [r7, #32]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	623b      	str	r3, [r7, #32]
    for (i = 0u; i < sizeof(CPU_ALIGN); i++) {                  /* Fill each data_align octet with data val.            */
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	3301      	adds	r3, #1
 8001c86:	617b      	str	r3, [r7, #20]
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	2b03      	cmp	r3, #3
 8001c8c:	d9f2      	bls.n	8001c74 <Mem_Set+0x18>
    }

    size_rem      =  size;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
    mem_align_mod = (CPU_INT08U)((CPU_ADDR)pmem % sizeof(CPU_ALIGN));   /* See Note #3.                                 */
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	613b      	str	r3, [r7, #16]

    pmem_08 = (CPU_INT08U *)pmem;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	61bb      	str	r3, [r7, #24]
    if (mem_align_mod != 0u) {                                  /* If leading octets avail,                   ...       */
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d013      	beq.n	8001cce <Mem_Set+0x72>
        i = mem_align_mod;
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	617b      	str	r3, [r7, #20]
        while ((size_rem > 0) &&                                /* ... start mem buf fill with leading octets ...       */
 8001caa:	e00a      	b.n	8001cc2 <Mem_Set+0x66>
               (i        < sizeof(CPU_ALIGN ))) {               /* ... until next CPU_ALIGN word boundary.              */
           *pmem_08++ = data_val;
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	1c5a      	adds	r2, r3, #1
 8001cb0:	61ba      	str	r2, [r7, #24]
 8001cb2:	7afa      	ldrb	r2, [r7, #11]
 8001cb4:	701a      	strb	r2, [r3, #0]
            size_rem -= sizeof(CPU_INT08U);
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24
            i++;
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	617b      	str	r3, [r7, #20]
        while ((size_rem > 0) &&                                /* ... start mem buf fill with leading octets ...       */
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d002      	beq.n	8001cce <Mem_Set+0x72>
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	2b03      	cmp	r3, #3
 8001ccc:	d9ee      	bls.n	8001cac <Mem_Set+0x50>
        }
    }

    pmem_align = (CPU_ALIGN *)pmem_08;                          /* See Note #2.                                         */
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	61fb      	str	r3, [r7, #28]
    while (size_rem >= sizeof(CPU_ALIGN)) {                     /* While mem buf aligned on CPU_ALIGN word boundaries,  */
 8001cd2:	e007      	b.n	8001ce4 <Mem_Set+0x88>
       *pmem_align++ = data_align;                              /* ... fill mem buf with    CPU_ALIGN-sized data.       */
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	1d1a      	adds	r2, r3, #4
 8001cd8:	61fa      	str	r2, [r7, #28]
 8001cda:	6a3a      	ldr	r2, [r7, #32]
 8001cdc:	601a      	str	r2, [r3, #0]
        size_rem    -= sizeof(CPU_ALIGN);
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	3b04      	subs	r3, #4
 8001ce2:	627b      	str	r3, [r7, #36]	; 0x24
    while (size_rem >= sizeof(CPU_ALIGN)) {                     /* While mem buf aligned on CPU_ALIGN word boundaries,  */
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	2b03      	cmp	r3, #3
 8001ce8:	d8f4      	bhi.n	8001cd4 <Mem_Set+0x78>
    }

    pmem_08 = (CPU_INT08U *)pmem_align;
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	61bb      	str	r3, [r7, #24]
    while (size_rem > 0) {                                      /* Finish mem buf fill with trailing octets.            */
 8001cee:	e007      	b.n	8001d00 <Mem_Set+0xa4>
       *pmem_08++   = data_val;
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	1c5a      	adds	r2, r3, #1
 8001cf4:	61ba      	str	r2, [r7, #24]
 8001cf6:	7afa      	ldrb	r2, [r7, #11]
 8001cf8:	701a      	strb	r2, [r3, #0]
        size_rem   -= sizeof(CPU_INT08U);
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24
    while (size_rem > 0) {                                      /* Finish mem buf fill with trailing octets.            */
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1f4      	bne.n	8001cf0 <Mem_Set+0x94>
    }
}
 8001d06:	bf00      	nop
 8001d08:	372c      	adds	r7, #44	; 0x2c
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr

08001d10 <Mem_SegCreate>:
                            MEM_SEG     *p_seg,
                            CPU_ADDR     seg_base_addr,
                            CPU_SIZE_T   size,
                            CPU_SIZE_T   padding_align,
                            LIB_ERR     *p_err)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b088      	sub	sp, #32
 8001d14:	af02      	add	r7, sp, #8
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
 8001d1c:	603b      	str	r3, [r7, #0]
    CPU_SR_ALLOC();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	617b      	str	r3, [r7, #20]
       *p_err = LIB_MEM_ERR_INVALID_MEM_ALIGN;
        return;
    }
#endif

    CPU_CRITICAL_ENTER();
 8001d22:	f7fe fadd 	bl	80002e0 <CPU_SR_Save>
 8001d26:	6178      	str	r0, [r7, #20]
        CPU_CRITICAL_EXIT();
        return;
    }
#endif

    Mem_SegCreateCritical(p_name,                               /* Create seg.                                          */
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	9300      	str	r3, [sp, #0]
 8001d2c:	6a3b      	ldr	r3, [r7, #32]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	68b9      	ldr	r1, [r7, #8]
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	f000 f80c 	bl	8001d50 <Mem_SegCreateCritical>
                          p_seg,
                          seg_base_addr,
                          padding_align,
                          size);
    CPU_CRITICAL_EXIT();
 8001d38:	6978      	ldr	r0, [r7, #20]
 8001d3a:	f7fe fad5 	bl	80002e8 <CPU_SR_Restore>

   *p_err = LIB_MEM_ERR_NONE;
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d40:	f242 7210 	movw	r2, #10000	; 0x2710
 8001d44:	801a      	strh	r2, [r3, #0]
}
 8001d46:	bf00      	nop
 8001d48:	3718      	adds	r7, #24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
	...

08001d50 <Mem_SegCreateCritical>:
static  void  Mem_SegCreateCritical(const  CPU_CHAR    *p_name,
                                           MEM_SEG     *p_seg,
                                           CPU_ADDR     seg_base_addr,
                                           CPU_SIZE_T   padding_align,
                                           CPU_SIZE_T   size)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
 8001d5c:	603b      	str	r3, [r7, #0]
    p_seg->AddrBase         =  seg_base_addr;
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	601a      	str	r2, [r3, #0]
    p_seg->AddrEnd          = (seg_base_addr + (size - 1u));
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4413      	add	r3, r2
 8001d6a:	1e5a      	subs	r2, r3, #1
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	605a      	str	r2, [r3, #4]
    p_seg->AddrNext         =  seg_base_addr;
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	609a      	str	r2, [r3, #8]
    p_seg->NextPtr          =  Mem_SegHeadPtr;
 8001d76:	4b07      	ldr	r3, [pc, #28]	; (8001d94 <Mem_SegCreateCritical+0x44>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
    p_seg->PaddingAlign     =  padding_align;
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	611a      	str	r2, [r3, #16]
    p_seg->AllocInfoHeadPtr = DEF_NULL;
#else
    (void)&p_name;
#endif

    Mem_SegHeadPtr = p_seg;
 8001d84:	4a03      	ldr	r2, [pc, #12]	; (8001d94 <Mem_SegCreateCritical+0x44>)
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	6013      	str	r3, [r2, #0]
}
 8001d8a:	bf00      	nop
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr
 8001d94:	20001b04 	.word	0x20001b04

08001d98 <OS_TmrInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_TmrInit (OS_ERR  *p_err)
{
 8001d98:	b590      	push	{r4, r7, lr}
 8001d9a:	b08d      	sub	sp, #52	; 0x34
 8001d9c:	af0a      	add	r7, sp, #40	; 0x28
 8001d9e:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSTmrDbgListPtr = (OS_TMR *)0;
 8001da0:	4b37      	ldr	r3, [pc, #220]	; (8001e80 <OS_TmrInit+0xe8>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
#endif

    OSTmrListPtr        = (OS_TMR *)0;                      /* Create an empty timer list                             */
 8001da6:	4b37      	ldr	r3, [pc, #220]	; (8001e84 <OS_TmrInit+0xec>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
    OSTmrListEntries    = 0u;
 8001dac:	4b36      	ldr	r3, [pc, #216]	; (8001e88 <OS_TmrInit+0xf0>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	801a      	strh	r2, [r3, #0]

    if (OSCfg_TmrTaskRate_Hz > (OS_RATE_HZ)0) {
 8001db2:	4b36      	ldr	r3, [pc, #216]	; (8001e8c <OS_TmrInit+0xf4>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d008      	beq.n	8001dcc <OS_TmrInit+0x34>
        OSTmrUpdateCnt  = OSCfg_TickRate_Hz / OSCfg_TmrTaskRate_Hz;
 8001dba:	4b35      	ldr	r3, [pc, #212]	; (8001e90 <OS_TmrInit+0xf8>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	4b33      	ldr	r3, [pc, #204]	; (8001e8c <OS_TmrInit+0xf4>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc6:	4a33      	ldr	r2, [pc, #204]	; (8001e94 <OS_TmrInit+0xfc>)
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	e007      	b.n	8001ddc <OS_TmrInit+0x44>
    } else {
        OSTmrUpdateCnt  = OSCfg_TickRate_Hz / (OS_RATE_HZ)10;
 8001dcc:	4b30      	ldr	r3, [pc, #192]	; (8001e90 <OS_TmrInit+0xf8>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a31      	ldr	r2, [pc, #196]	; (8001e98 <OS_TmrInit+0x100>)
 8001dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd6:	08db      	lsrs	r3, r3, #3
 8001dd8:	4a2e      	ldr	r2, [pc, #184]	; (8001e94 <OS_TmrInit+0xfc>)
 8001dda:	6013      	str	r3, [r2, #0]
    }
    OSTmrUpdateCtr      = OSTmrUpdateCnt;
 8001ddc:	4b2d      	ldr	r3, [pc, #180]	; (8001e94 <OS_TmrInit+0xfc>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a2e      	ldr	r2, [pc, #184]	; (8001e9c <OS_TmrInit+0x104>)
 8001de2:	6013      	str	r3, [r2, #0]

    OSTmrTickCtr        = (OS_TICK)0;
 8001de4:	4b2e      	ldr	r3, [pc, #184]	; (8001ea0 <OS_TmrInit+0x108>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]

    OSTmrTaskTimeMax    = (CPU_TS)0;
 8001dea:	4b2e      	ldr	r3, [pc, #184]	; (8001ea4 <OS_TmrInit+0x10c>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]

#if   OS_CFG_MUTEX_EN > 0u
    OSMutexCreate(&OSTmrMutex,                              /* Use a mutex to protect the timers                      */
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	492d      	ldr	r1, [pc, #180]	; (8001ea8 <OS_TmrInit+0x110>)
 8001df4:	482d      	ldr	r0, [pc, #180]	; (8001eac <OS_TmrInit+0x114>)
 8001df6:	f000 fb95 	bl	8002524 <OSMutexCreate>
                  "OS Tmr Mutex", 
                  p_err);
    if (*p_err != OS_ERR_NONE) {
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	881b      	ldrh	r3, [r3, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d139      	bne.n	8001e76 <OS_TmrInit+0xde>
        return;
    }
#endif

                                                            /* ---------------- CREATE THE TIMER TASK --------------- */
    if (OSCfg_TmrTaskStkBasePtr == (CPU_STK*)0) {
 8001e02:	4b2b      	ldr	r3, [pc, #172]	; (8001eb0 <OS_TmrInit+0x118>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d104      	bne.n	8001e14 <OS_TmrInit+0x7c>
       *p_err = OS_ERR_TMR_STK_INVALID;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f247 3247 	movw	r2, #29511	; 0x7347
 8001e10:	801a      	strh	r2, [r3, #0]
        return;
 8001e12:	e031      	b.n	8001e78 <OS_TmrInit+0xe0>
    }

    if (OSCfg_TmrTaskStkSize < OSCfg_StkSizeMin) {
 8001e14:	4b27      	ldr	r3, [pc, #156]	; (8001eb4 <OS_TmrInit+0x11c>)
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	4b27      	ldr	r3, [pc, #156]	; (8001eb8 <OS_TmrInit+0x120>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d204      	bcs.n	8001e2a <OS_TmrInit+0x92>
       *p_err = OS_ERR_TMR_STK_SIZE_INVALID;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f247 3248 	movw	r2, #29512	; 0x7348
 8001e26:	801a      	strh	r2, [r3, #0]
        return;
 8001e28:	e026      	b.n	8001e78 <OS_TmrInit+0xe0>
    }

    if (OSCfg_TmrTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {
 8001e2a:	4b24      	ldr	r3, [pc, #144]	; (8001ebc <OS_TmrInit+0x124>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b1e      	cmp	r3, #30
 8001e30:	d904      	bls.n	8001e3c <OS_TmrInit+0xa4>
       *p_err = OS_ERR_TMR_PRIO_INVALID;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f247 3246 	movw	r2, #29510	; 0x7346
 8001e38:	801a      	strh	r2, [r3, #0]
        return;
 8001e3a:	e01d      	b.n	8001e78 <OS_TmrInit+0xe0>
    }

    OSTaskCreate((OS_TCB     *)&OSTmrTaskTCB,
 8001e3c:	4b1f      	ldr	r3, [pc, #124]	; (8001ebc <OS_TmrInit+0x124>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	4a1b      	ldr	r2, [pc, #108]	; (8001eb0 <OS_TmrInit+0x118>)
 8001e42:	6812      	ldr	r2, [r2, #0]
 8001e44:	491e      	ldr	r1, [pc, #120]	; (8001ec0 <OS_TmrInit+0x128>)
 8001e46:	6809      	ldr	r1, [r1, #0]
 8001e48:	481a      	ldr	r0, [pc, #104]	; (8001eb4 <OS_TmrInit+0x11c>)
 8001e4a:	6800      	ldr	r0, [r0, #0]
 8001e4c:	687c      	ldr	r4, [r7, #4]
 8001e4e:	9408      	str	r4, [sp, #32]
 8001e50:	240b      	movs	r4, #11
 8001e52:	9407      	str	r4, [sp, #28]
 8001e54:	2400      	movs	r4, #0
 8001e56:	9406      	str	r4, [sp, #24]
 8001e58:	2400      	movs	r4, #0
 8001e5a:	9405      	str	r4, [sp, #20]
 8001e5c:	2400      	movs	r4, #0
 8001e5e:	9404      	str	r4, [sp, #16]
 8001e60:	9003      	str	r0, [sp, #12]
 8001e62:	9102      	str	r1, [sp, #8]
 8001e64:	9201      	str	r2, [sp, #4]
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	2300      	movs	r3, #0
 8001e6a:	4a16      	ldr	r2, [pc, #88]	; (8001ec4 <OS_TmrInit+0x12c>)
 8001e6c:	4916      	ldr	r1, [pc, #88]	; (8001ec8 <OS_TmrInit+0x130>)
 8001e6e:	4817      	ldr	r0, [pc, #92]	; (8001ecc <OS_TmrInit+0x134>)
 8001e70:	f002 ff2e 	bl	8004cd0 <OSTaskCreate>
 8001e74:	e000      	b.n	8001e78 <OS_TmrInit+0xe0>
        return;
 8001e76:	bf00      	nop
                 (OS_MSG_QTY  )0,
                 (OS_TICK     )0,
                 (void       *)0,
                 (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR | OS_OPT_TASK_NO_TLS),
                 (OS_ERR     *)p_err);
}
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd90      	pop	{r4, r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20002464 	.word	0x20002464
 8001e84:	20002460 	.word	0x20002460
 8001e88:	2000246c 	.word	0x2000246c
 8001e8c:	0800ea18 	.word	0x0800ea18
 8001e90:	0800ea00 	.word	0x0800ea00
 8001e94:	20002470 	.word	0x20002470
 8001e98:	cccccccd 	.word	0xcccccccd
 8001e9c:	20002480 	.word	0x20002480
 8001ea0:	2000216c 	.word	0x2000216c
 8001ea4:	2000218c 	.word	0x2000218c
 8001ea8:	0800e76c 	.word	0x0800e76c
 8001eac:	2000233c 	.word	0x2000233c
 8001eb0:	0800ea1c 	.word	0x0800ea1c
 8001eb4:	0800ea24 	.word	0x0800ea24
 8001eb8:	0800e9fc 	.word	0x0800e9fc
 8001ebc:	0800ea14 	.word	0x0800ea14
 8001ec0:	0800ea20 	.word	0x0800ea20
 8001ec4:	08001f59 	.word	0x08001f59
 8001ec8:	0800e77c 	.word	0x0800e77c
 8001ecc:	200021a4 	.word	0x200021a4

08001ed0 <OS_TmrResetPeak>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TmrResetPeak (void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr

08001edc <OS_TmrUnlink>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_TmrUnlink (OS_TMR  *p_tmr)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
    OS_TMR  *p_tmr1;
    OS_TMR  *p_tmr2;



    if (OSTmrListPtr == p_tmr) {                            /* See if timer to remove is at the beginning of list     */
 8001ee4:	4b1a      	ldr	r3, [pc, #104]	; (8001f50 <OS_TmrUnlink+0x74>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d10c      	bne.n	8001f08 <OS_TmrUnlink+0x2c>
        p_tmr1       = (OS_TMR *)p_tmr->NextPtr;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	60fb      	str	r3, [r7, #12]
        OSTmrListPtr = (OS_TMR *)p_tmr1;
 8001ef4:	4a16      	ldr	r2, [pc, #88]	; (8001f50 <OS_TmrUnlink+0x74>)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6013      	str	r3, [r2, #0]
        if (p_tmr1 != (OS_TMR *)0) {
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d012      	beq.n	8001f26 <OS_TmrUnlink+0x4a>
            p_tmr1->PrevPtr = (OS_TMR *)0;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2200      	movs	r2, #0
 8001f04:	615a      	str	r2, [r3, #20]
 8001f06:	e00e      	b.n	8001f26 <OS_TmrUnlink+0x4a>
        }
    } else {
        p_tmr1          = (OS_TMR *)p_tmr->PrevPtr;         /* Remove timer from somewhere in the list                */
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	695b      	ldr	r3, [r3, #20]
 8001f0c:	60fb      	str	r3, [r7, #12]
        p_tmr2          = (OS_TMR *)p_tmr->NextPtr;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	60bb      	str	r3, [r7, #8]
        p_tmr1->NextPtr = p_tmr2;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	68ba      	ldr	r2, [r7, #8]
 8001f18:	611a      	str	r2, [r3, #16]
        if (p_tmr2 != (OS_TMR *)0) {
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d002      	beq.n	8001f26 <OS_TmrUnlink+0x4a>
            p_tmr2->PrevPtr = (OS_TMR *)p_tmr1;
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	615a      	str	r2, [r3, #20]
        }
    }
    p_tmr->State   = OS_TMR_STATE_STOPPED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    p_tmr->NextPtr = (OS_TMR *)0;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	611a      	str	r2, [r3, #16]
    p_tmr->PrevPtr = (OS_TMR *)0;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	615a      	str	r2, [r3, #20]
    OSTmrListEntries--;
 8001f3a:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <OS_TmrUnlink+0x78>)
 8001f3c:	881b      	ldrh	r3, [r3, #0]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	4b04      	ldr	r3, [pc, #16]	; (8001f54 <OS_TmrUnlink+0x78>)
 8001f44:	801a      	strh	r2, [r3, #0]
}
 8001f46:	bf00      	nop
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr
 8001f50:	20002460 	.word	0x20002460
 8001f54:	2000246c 	.word	0x2000246c

08001f58 <OS_TmrTask>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_TmrTask (void  *p_arg)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08a      	sub	sp, #40	; 0x28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]



    (void)&p_arg;                                                /* Not using 'p_arg', prevent compiler warning       */
    while (DEF_ON) {
        (void)OSTaskSemPend((OS_TICK )0,                         /* Wait for signal indicating time to update tmrs    */
 8001f60:	f107 0312 	add.w	r3, r7, #18
 8001f64:	f107 020c 	add.w	r2, r7, #12
 8001f68:	2100      	movs	r1, #0
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	f002 ffe0 	bl	8004f30 <OSTaskSemPend>
                            (OS_OPT  )OS_OPT_PEND_BLOCKING,
                            (CPU_TS *)&ts,
                            (OS_ERR *)&err);


        OS_TmrLock();
 8001f70:	f000 f85a 	bl	8002028 <OS_TmrLock>
        ts_start = OS_TS_GET();
 8001f74:	f004 f990 	bl	8006298 <CPU_TS_TmrRd>
 8001f78:	6238      	str	r0, [r7, #32]
        OSTmrTickCtr++;                                          /* Increment the current time                        */
 8001f7a:	4b28      	ldr	r3, [pc, #160]	; (800201c <OS_TmrTask+0xc4>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	4a26      	ldr	r2, [pc, #152]	; (800201c <OS_TmrTask+0xc4>)
 8001f82:	6013      	str	r3, [r2, #0]
        p_tmr    = OSTmrListPtr;
 8001f84:	4b26      	ldr	r3, [pc, #152]	; (8002020 <OS_TmrTask+0xc8>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	627b      	str	r3, [r7, #36]	; 0x24
        while (p_tmr != (OS_TMR *)0) {                           /* Update all the timers in the list                 */
 8001f8a:	e033      	b.n	8001ff4 <OS_TmrTask+0x9c>
            OSSchedLock(&err);
 8001f8c:	f107 0312 	add.w	r3, r7, #18
 8001f90:	4618      	mov	r0, r3
 8001f92:	f001 ffe3 	bl	8003f5c <OSSchedLock>
            (void)&err;
            p_tmr_next = p_tmr->NextPtr;
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	61bb      	str	r3, [r7, #24]
            p_tmr->Remain--;
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	1e5a      	subs	r2, r3, #1
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	619a      	str	r2, [r3, #24]
            if (p_tmr->Remain == 0) {
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d11b      	bne.n	8001fe6 <OS_TmrTask+0x8e>
                if (p_tmr->Opt == OS_OPT_TMR_PERIODIC) {
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d104      	bne.n	8001fc0 <OS_TmrTask+0x68>
                    p_tmr->Remain = p_tmr->Period;               /* Reload the time remaining                         */
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	6a1a      	ldr	r2, [r3, #32]
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	619a      	str	r2, [r3, #24]
 8001fbe:	e006      	b.n	8001fce <OS_TmrTask+0x76>
                } else {
                    OS_TmrUnlink(p_tmr);                         /* Remove from list                                  */
 8001fc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001fc2:	f7ff ff8b 	bl	8001edc <OS_TmrUnlink>
                    p_tmr->State = OS_TMR_STATE_COMPLETED;       /* Indicate that the timer has completed             */
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	2203      	movs	r2, #3
 8001fca:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
                }
                p_fnct = p_tmr->CallbackPtr;                     /* Execute callback function if available            */
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	617b      	str	r3, [r7, #20]
                if (p_fnct != (OS_TMR_CALLBACK_PTR)0) {
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d005      	beq.n	8001fe6 <OS_TmrTask+0x8e>
                    (*p_fnct)((void *)p_tmr,
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	68da      	ldr	r2, [r3, #12]
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	4611      	mov	r1, r2
 8001fe2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001fe4:	4798      	blx	r3
                              p_tmr->CallbackPtrArg);
                }
            }
            p_tmr = p_tmr_next;
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
            OSSchedUnlock(&err);
 8001fea:	f107 0312 	add.w	r3, r7, #18
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f001 fff0 	bl	8003fd4 <OSSchedUnlock>
        while (p_tmr != (OS_TMR *)0) {                           /* Update all the timers in the list                 */
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1c8      	bne.n	8001f8c <OS_TmrTask+0x34>
            (void)&err;
        }

        ts_delta = OS_TS_GET() - ts_start;                      /* Measure execution time of timer task              */
 8001ffa:	f004 f94d 	bl	8006298 <CPU_TS_TmrRd>
 8001ffe:	4602      	mov	r2, r0
 8002000:	6a3b      	ldr	r3, [r7, #32]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	61fb      	str	r3, [r7, #28]
        OS_TmrUnlock();
 8002006:	f000 f821 	bl	800204c <OS_TmrUnlock>

        if (OSTmrTaskTimeMax < ts_delta) {
 800200a:	4b06      	ldr	r3, [pc, #24]	; (8002024 <OS_TmrTask+0xcc>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	69fa      	ldr	r2, [r7, #28]
 8002010:	429a      	cmp	r2, r3
 8002012:	d9a5      	bls.n	8001f60 <OS_TmrTask+0x8>
            OSTmrTaskTimeMax = ts_delta;
 8002014:	4a03      	ldr	r2, [pc, #12]	; (8002024 <OS_TmrTask+0xcc>)
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	6013      	str	r3, [r2, #0]
        (void)OSTaskSemPend((OS_TICK )0,                         /* Wait for signal indicating time to update tmrs    */
 800201a:	e7a1      	b.n	8001f60 <OS_TmrTask+0x8>
 800201c:	2000216c 	.word	0x2000216c
 8002020:	20002460 	.word	0x20002460
 8002024:	2000218c 	.word	0x2000218c

08002028 <OS_TmrLock>:
* Note(s)    : 1) These function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

static  void  OS_TmrLock (void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af02      	add	r7, sp, #8
    OS_ERR  err;
#if OS_CFG_MUTEX_EN > 0u
    CPU_TS  ts;


    OSMutexPend(&OSTmrMutex,                                /* Use a mutex to protect the timers                      */
 800202e:	463a      	mov	r2, r7
 8002030:	1dbb      	adds	r3, r7, #6
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	4613      	mov	r3, r2
 8002036:	2200      	movs	r2, #0
 8002038:	2100      	movs	r1, #0
 800203a:	4803      	ldr	r0, [pc, #12]	; (8002048 <OS_TmrLock+0x20>)
 800203c:	f000 fabe 	bl	80025bc <OSMutexPend>
                &err);
#else
    OSSchedLock(&err);                                      /* Lock the scheduler to protect the timers               */
#endif
    (void)&err;
}
 8002040:	bf00      	nop
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	2000233c 	.word	0x2000233c

0800204c <OS_TmrUnlock>:




static  void  OS_TmrUnlock (void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
    OS_ERR  err;


#if OS_CFG_MUTEX_EN > 0u
    OSMutexPost(&OSTmrMutex,                                /* Use a mutex to protect the timers                      */
 8002052:	1dbb      	adds	r3, r7, #6
 8002054:	461a      	mov	r2, r3
 8002056:	2100      	movs	r1, #0
 8002058:	4803      	ldr	r0, [pc, #12]	; (8002068 <OS_TmrUnlock+0x1c>)
 800205a:	f000 fbb7 	bl	80027cc <OSMutexPost>
                &err);
#else
    OSSchedUnlock(&err);                                    /* Lock the scheduler to protect the timers               */
#endif
    (void)&err;
}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	2000233c 	.word	0x2000233c

0800206c <OSMemCreate>:
                   CPU_CHAR     *p_name,
                   void         *p_addr,
                   OS_MEM_QTY    n_blks,
                   OS_MEM_SIZE   blk_size,
                   OS_ERR       *p_err)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b08a      	sub	sp, #40	; 0x28
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
 8002078:	807b      	strh	r3, [r7, #2]
#endif
    OS_MEM_QTY     i;
    OS_MEM_QTY     loops;
    CPU_INT08U    *p_blk;
    void         **p_link;
    CPU_SR_ALLOC();
 800207a:	2300      	movs	r3, #0
 800207c:	61bb      	str	r3, [r7, #24]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 800207e:	4b40      	ldr	r3, [pc, #256]	; (8002180 <OSMemCreate+0x114>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d004      	beq.n	8002090 <OSMemCreate+0x24>
       *p_err = OS_ERR_MEM_CREATE_ISR;
 8002086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002088:	f245 62b9 	movw	r2, #22201	; 0x56b9
 800208c:	801a      	strh	r2, [r3, #0]
        return;
 800208e:	e074      	b.n	800217a <OSMemCreate+0x10e>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_addr == (void *)0) {                              /* Must pass a valid address for the memory part.         */
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d104      	bne.n	80020a0 <OSMemCreate+0x34>
       *p_err   = OS_ERR_MEM_INVALID_P_ADDR;
 8002096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002098:	f245 62bb 	movw	r2, #22203	; 0x56bb
 800209c:	801a      	strh	r2, [r3, #0]
        return;
 800209e:	e06c      	b.n	800217a <OSMemCreate+0x10e>
    }
    if (n_blks < (OS_MEM_QTY)2) {                           /* Must have at least 2 blocks per partition              */
 80020a0:	887b      	ldrh	r3, [r7, #2]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d804      	bhi.n	80020b0 <OSMemCreate+0x44>
       *p_err = OS_ERR_MEM_INVALID_BLKS;
 80020a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020a8:	f245 62bc 	movw	r2, #22204	; 0x56bc
 80020ac:	801a      	strh	r2, [r3, #0]
        return;
 80020ae:	e064      	b.n	800217a <OSMemCreate+0x10e>
    }
    if (blk_size < sizeof(void *)) {                        /* Must contain space for at least a pointer              */
 80020b0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80020b2:	2b03      	cmp	r3, #3
 80020b4:	d804      	bhi.n	80020c0 <OSMemCreate+0x54>
       *p_err = OS_ERR_MEM_INVALID_SIZE;
 80020b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020b8:	f245 62c1 	movw	r2, #22209	; 0x56c1
 80020bc:	801a      	strh	r2, [r3, #0]
        return;
 80020be:	e05c      	b.n	800217a <OSMemCreate+0x10e>
    }
    align_msk = sizeof(void *) - 1u;
 80020c0:	2303      	movs	r3, #3
 80020c2:	617b      	str	r3, [r7, #20]
    if (align_msk > 0u) {
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d013      	beq.n	80020f2 <OSMemCreate+0x86>
        if (((CPU_ADDR)p_addr & align_msk) != 0u){          /* Must be pointer size aligned                           */
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d004      	beq.n	80020de <OSMemCreate+0x72>
           *p_err = OS_ERR_MEM_INVALID_P_ADDR;
 80020d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d6:	f245 62bb 	movw	r2, #22203	; 0x56bb
 80020da:	801a      	strh	r2, [r3, #0]
            return;
 80020dc:	e04d      	b.n	800217a <OSMemCreate+0x10e>
        }
        if ((blk_size & align_msk) != 0u) {                 /* Block size must be a multiple address size             */
 80020de:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	4013      	ands	r3, r2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d004      	beq.n	80020f2 <OSMemCreate+0x86>
           *p_err = OS_ERR_MEM_INVALID_SIZE;
 80020e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ea:	f245 62c1 	movw	r2, #22209	; 0x56c1
 80020ee:	801a      	strh	r2, [r3, #0]
            return;
 80020f0:	e043      	b.n	800217a <OSMemCreate+0x10e>
        }
    }
#endif

    p_link = (void **)p_addr;                               /* Create linked list of free memory blocks               */
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	61fb      	str	r3, [r7, #28]
    p_blk  = (CPU_INT08U *)p_addr;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	623b      	str	r3, [r7, #32]
    loops  = n_blks - 1u;
 80020fa:	887b      	ldrh	r3, [r7, #2]
 80020fc:	3b01      	subs	r3, #1
 80020fe:	827b      	strh	r3, [r7, #18]
    for (i = 0u; i < loops; i++) {
 8002100:	2300      	movs	r3, #0
 8002102:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002104:	e00b      	b.n	800211e <OSMemCreate+0xb2>
        p_blk +=  blk_size;
 8002106:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002108:	6a3a      	ldr	r2, [r7, #32]
 800210a:	4413      	add	r3, r2
 800210c:	623b      	str	r3, [r7, #32]
       *p_link = (void  *)p_blk;                            /* Save pointer to NEXT block in CURRENT block            */
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	6a3a      	ldr	r2, [r7, #32]
 8002112:	601a      	str	r2, [r3, #0]
        p_link = (void **)(void *)p_blk;                    /* Position     to NEXT block                             */
 8002114:	6a3b      	ldr	r3, [r7, #32]
 8002116:	61fb      	str	r3, [r7, #28]
    for (i = 0u; i < loops; i++) {
 8002118:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800211a:	3301      	adds	r3, #1
 800211c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800211e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002120:	8a7b      	ldrh	r3, [r7, #18]
 8002122:	429a      	cmp	r2, r3
 8002124:	d3ef      	bcc.n	8002106 <OSMemCreate+0x9a>
    }
   *p_link             = (void *)0;                         /* Last memory block points to NULL                       */
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]

    OS_CRITICAL_ENTER();
 800212c:	f7fe f8d8 	bl	80002e0 <CPU_SR_Save>
 8002130:	61b8      	str	r0, [r7, #24]
#if OS_OBJ_TYPE_REQ > 0u
    p_mem->Type        = OS_OBJ_TYPE_MEM;                   /* Set the type of object                                 */
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	4a13      	ldr	r2, [pc, #76]	; (8002184 <OSMemCreate+0x118>)
 8002136:	601a      	str	r2, [r3, #0]
#endif
#if OS_CFG_DBG_EN > 0u
    p_mem->NamePtr     = p_name;                            /* Save name of memory partition                          */
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	609a      	str	r2, [r3, #8]
#else
    (void)&p_name;
#endif
    p_mem->AddrPtr     = p_addr;                            /* Store start address of memory partition                */
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	605a      	str	r2, [r3, #4]
    p_mem->FreeListPtr = p_addr;                            /* Initialize pointer to pool of free blocks              */
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	60da      	str	r2, [r3, #12]
    p_mem->NbrFree     = n_blks;                            /* Store number of free blocks in MCB                     */
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	887a      	ldrh	r2, [r7, #2]
 800214e:	829a      	strh	r2, [r3, #20]
    p_mem->NbrMax      = n_blks;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	887a      	ldrh	r2, [r7, #2]
 8002154:	825a      	strh	r2, [r3, #18]
    p_mem->BlkSize     = blk_size;                          /* Store block size of each memory blocks                 */
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800215a:	821a      	strh	r2, [r3, #16]

#if OS_CFG_DBG_EN > 0u
    OS_MemDbgListAdd(p_mem);
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f000 f88d 	bl	800227c <OS_MemDbgListAdd>
#endif

    OSMemQty++;
 8002162:	4b09      	ldr	r3, [pc, #36]	; (8002188 <OSMemCreate+0x11c>)
 8002164:	881b      	ldrh	r3, [r3, #0]
 8002166:	3301      	adds	r3, #1
 8002168:	b29a      	uxth	r2, r3
 800216a:	4b07      	ldr	r3, [pc, #28]	; (8002188 <OSMemCreate+0x11c>)
 800216c:	801a      	strh	r2, [r3, #0]

#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_MEM_CREATE(p_mem, p_name);                     /* Record the event.                                      */
#endif

    OS_CRITICAL_EXIT_NO_SCHED();
 800216e:	69b8      	ldr	r0, [r7, #24]
 8002170:	f7fe f8ba 	bl	80002e8 <CPU_SR_Restore>
   *p_err = OS_ERR_NONE;
 8002174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002176:	2200      	movs	r2, #0
 8002178:	801a      	strh	r2, [r3, #0]
}
 800217a:	3728      	adds	r7, #40	; 0x28
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	2000219e 	.word	0x2000219e
 8002184:	204d454d 	.word	0x204d454d
 8002188:	2000239a 	.word	0x2000239a

0800218c <OSMemGet>:
************************************************************************************************************************
*/

void  *OSMemGet (OS_MEM  *p_mem,
                 OS_ERR  *p_err)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
    void    *p_blk;
    CPU_SR_ALLOC();
 8002196:	2300      	movs	r3, #0
 8002198:	60fb      	str	r3, [r7, #12]
        return ((void *)0);
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_mem == (OS_MEM *)0) {                             /* Must point to a valid memory partition                 */
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d105      	bne.n	80021ac <OSMemGet+0x20>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MEM_GET_FAILED(p_mem);                     /* Record the event.                                      */
#endif
       *p_err  = OS_ERR_MEM_INVALID_P_MEM;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	f245 62bf 	movw	r2, #22207	; 0x56bf
 80021a6:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 80021a8:	2300      	movs	r3, #0
 80021aa:	e023      	b.n	80021f4 <OSMemGet+0x68>
    }
#endif

    CPU_CRITICAL_ENTER();
 80021ac:	f7fe f898 	bl	80002e0 <CPU_SR_Save>
 80021b0:	60f8      	str	r0, [r7, #12]
    if (p_mem->NbrFree == (OS_MEM_QTY)0) {                  /* See if there are any free memory blocks                */
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	8a9b      	ldrh	r3, [r3, #20]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d108      	bne.n	80021cc <OSMemGet+0x40>
        CPU_CRITICAL_EXIT();
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f7fe f894 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MEM_GET_FAILED(p_mem);                     /* Record the event.                                      */
#endif
       *p_err = OS_ERR_MEM_NO_FREE_BLKS;                    /* No,  Notify caller of empty memory partition           */
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	f245 62c2 	movw	r2, #22210	; 0x56c2
 80021c6:	801a      	strh	r2, [r3, #0]
        return ((void *)0);                                 /*      Return NULL pointer to caller                     */
 80021c8:	2300      	movs	r3, #0
 80021ca:	e013      	b.n	80021f4 <OSMemGet+0x68>
    }
    p_blk              = p_mem->FreeListPtr;                /* Yes, point to next free memory block                   */
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	60bb      	str	r3, [r7, #8]
    p_mem->FreeListPtr = *(void **)p_blk;                   /*      Adjust pointer to new free list                   */
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	60da      	str	r2, [r3, #12]
    p_mem->NbrFree--;                                       /*      One less memory block in this partition           */
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	8a9b      	ldrh	r3, [r3, #20]
 80021de:	3b01      	subs	r3, #1
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	829a      	strh	r2, [r3, #20]
    CPU_CRITICAL_EXIT();
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f7fe f87e 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_MEM_GET(p_mem);                                /* Record the event.                                      */
#endif
   *p_err = OS_ERR_NONE;                                    /*      No error                                          */
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	2200      	movs	r2, #0
 80021f0:	801a      	strh	r2, [r3, #0]
    return (p_blk);                                         /*      Return memory block to caller                     */
 80021f2:	68bb      	ldr	r3, [r7, #8]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <OSMemPut>:
*/

void  OSMemPut (OS_MEM  *p_mem,
                void    *p_blk,
                OS_ERR  *p_err)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
    CPU_SR_ALLOC();
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_mem == (OS_MEM *)0) {                             /* Must point to a valid memory partition                 */
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d104      	bne.n	800221c <OSMemPut+0x20>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MEM_PUT_FAILED(p_mem);                     /* Record the event.                                      */
#endif
       *p_err  = OS_ERR_MEM_INVALID_P_MEM;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f245 62bf 	movw	r2, #22207	; 0x56bf
 8002218:	801a      	strh	r2, [r3, #0]
        return;
 800221a:	e02b      	b.n	8002274 <OSMemPut+0x78>
    }
    if (p_blk == (void *)0) {                               /* Must release a valid block                             */
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d104      	bne.n	800222c <OSMemPut+0x30>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MEM_PUT_FAILED(p_mem);                     /* Record the event.                                      */
#endif
       *p_err  = OS_ERR_MEM_INVALID_P_BLK;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f245 62be 	movw	r2, #22206	; 0x56be
 8002228:	801a      	strh	r2, [r3, #0]
        return;
 800222a:	e023      	b.n	8002274 <OSMemPut+0x78>
    }
#endif

    CPU_CRITICAL_ENTER();
 800222c:	f7fe f858 	bl	80002e0 <CPU_SR_Save>
 8002230:	6178      	str	r0, [r7, #20]
    if (p_mem->NbrFree >= p_mem->NbrMax) {                  /* Make sure all blocks not already returned              */
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	8a9a      	ldrh	r2, [r3, #20]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	8a5b      	ldrh	r3, [r3, #18]
 800223a:	429a      	cmp	r2, r3
 800223c:	d307      	bcc.n	800224e <OSMemPut+0x52>
        CPU_CRITICAL_EXIT();
 800223e:	6978      	ldr	r0, [r7, #20]
 8002240:	f7fe f852 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MEM_PUT_FAILED(p_mem);                     /* Record the event.                                      */
#endif
       *p_err = OS_ERR_MEM_FULL;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f245 62ba 	movw	r2, #22202	; 0x56ba
 800224a:	801a      	strh	r2, [r3, #0]
        return;
 800224c:	e012      	b.n	8002274 <OSMemPut+0x78>
    }
    *(void **)p_blk    = p_mem->FreeListPtr;                /* Insert released block into free block list             */
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	68da      	ldr	r2, [r3, #12]
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	601a      	str	r2, [r3, #0]
    p_mem->FreeListPtr = p_blk;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	68ba      	ldr	r2, [r7, #8]
 800225a:	60da      	str	r2, [r3, #12]
    p_mem->NbrFree++;                                       /* One more memory block in this partition                */
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8a9b      	ldrh	r3, [r3, #20]
 8002260:	3301      	adds	r3, #1
 8002262:	b29a      	uxth	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	829a      	strh	r2, [r3, #20]
    CPU_CRITICAL_EXIT();
 8002268:	6978      	ldr	r0, [r7, #20]
 800226a:	f7fe f83d 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_MEM_PUT(p_mem);                                /* Record the event.                                      */
#endif
   *p_err              = OS_ERR_NONE;                       /* Notify caller that memory block was released           */
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	801a      	strh	r2, [r3, #0]
}
 8002274:	3718      	adds	r7, #24
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
	...

0800227c <OS_MemDbgListAdd>:
************************************************************************************************************************
*/

#if OS_CFG_DBG_EN > 0u
void  OS_MemDbgListAdd (OS_MEM  *p_mem)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
    p_mem->DbgPrevPtr               = (OS_MEM *)0;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	619a      	str	r2, [r3, #24]
    if (OSMemDbgListPtr == (OS_MEM *)0) {
 800228a:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <OS_MemDbgListAdd+0x40>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d103      	bne.n	800229a <OS_MemDbgListAdd+0x1e>
        p_mem->DbgNextPtr           = (OS_MEM *)0;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	61da      	str	r2, [r3, #28]
 8002298:	e007      	b.n	80022aa <OS_MemDbgListAdd+0x2e>
    } else {
        p_mem->DbgNextPtr           =  OSMemDbgListPtr;
 800229a:	4b08      	ldr	r3, [pc, #32]	; (80022bc <OS_MemDbgListAdd+0x40>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	61da      	str	r2, [r3, #28]
        OSMemDbgListPtr->DbgPrevPtr =  p_mem;
 80022a2:	4b06      	ldr	r3, [pc, #24]	; (80022bc <OS_MemDbgListAdd+0x40>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	619a      	str	r2, [r3, #24]
    }
    OSMemDbgListPtr                 =  p_mem;
 80022aa:	4a04      	ldr	r2, [pc, #16]	; (80022bc <OS_MemDbgListAdd+0x40>)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6013      	str	r3, [r2, #0]
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bc80      	pop	{r7}
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	20002338 	.word	0x20002338

080022c0 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_MemInit (OS_ERR  *p_err)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSMemDbgListPtr = (OS_MEM   *)0;
 80022c8:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <OS_MemInit+0x24>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
#endif

    OSMemQty        = (OS_OBJ_QTY)0;
 80022ce:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <OS_MemInit+0x28>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	801a      	strh	r2, [r3, #0]
   *p_err           = OS_ERR_NONE;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	801a      	strh	r2, [r3, #0]
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr
 80022e4:	20002338 	.word	0x20002338
 80022e8:	2000239a 	.word	0x2000239a

080022ec <OS_Dbg_Init>:
*                  DOES NOT optimize out the 'const' variables above.
************************************************************************************************************************
*/

void  OS_Dbg_Init (void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
    CPU_INT08U const  *p_temp08;
    CPU_INT16U const  *p_temp16;
    CPU_INT32U const  *p_temp32;


    p_temp08 = (CPU_INT08U const *)&OSDbg_DbgEn;
 80022f2:	4b47      	ldr	r3, [pc, #284]	; (8002410 <OS_Dbg_Init+0x124>)
 80022f4:	60fb      	str	r3, [r7, #12]

    p_temp32 = (CPU_INT32U const *)&OSDbg_DataSize;
 80022f6:	4b47      	ldr	r3, [pc, #284]	; (8002414 <OS_Dbg_Init+0x128>)
 80022f8:	60bb      	str	r3, [r7, #8]

    p_temp08 = (CPU_INT08U const *)&OSDbg_ArgChkEn;
 80022fa:	4b47      	ldr	r3, [pc, #284]	; (8002418 <OS_Dbg_Init+0x12c>)
 80022fc:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_AppHooksEn;
 80022fe:	4b47      	ldr	r3, [pc, #284]	; (800241c <OS_Dbg_Init+0x130>)
 8002300:	60fb      	str	r3, [r7, #12]

    p_temp32 = (CPU_INT32U const *)&OSDbg_EndiannessTest;
 8002302:	4b47      	ldr	r3, [pc, #284]	; (8002420 <OS_Dbg_Init+0x134>)
 8002304:	60bb      	str	r3, [r7, #8]

    p_temp08 = (CPU_INT08U const *)&OSDbg_CalledFromISRChkEn;
 8002306:	4b47      	ldr	r3, [pc, #284]	; (8002424 <OS_Dbg_Init+0x138>)
 8002308:	60fb      	str	r3, [r7, #12]

    p_temp16 = (CPU_INT16U const *)&OSDbg_FlagGrp;
 800230a:	4b47      	ldr	r3, [pc, #284]	; (8002428 <OS_Dbg_Init+0x13c>)
 800230c:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_FlagEn;
 800230e:	4b47      	ldr	r3, [pc, #284]	; (800242c <OS_Dbg_Init+0x140>)
 8002310:	60fb      	str	r3, [r7, #12]
#if OS_CFG_FLAG_EN > 0u
    p_temp08 = (CPU_INT08U const *)&OSDbg_FlagDelEn;
 8002312:	4b47      	ldr	r3, [pc, #284]	; (8002430 <OS_Dbg_Init+0x144>)
 8002314:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_FlagModeClrEn;
 8002316:	4b47      	ldr	r3, [pc, #284]	; (8002434 <OS_Dbg_Init+0x148>)
 8002318:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_FlagPendAbortEn;
 800231a:	4b47      	ldr	r3, [pc, #284]	; (8002438 <OS_Dbg_Init+0x14c>)
 800231c:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_FlagGrpSize;
 800231e:	4b47      	ldr	r3, [pc, #284]	; (800243c <OS_Dbg_Init+0x150>)
 8002320:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_FlagWidth;
 8002322:	4b47      	ldr	r3, [pc, #284]	; (8002440 <OS_Dbg_Init+0x154>)
 8002324:	607b      	str	r3, [r7, #4]

#if OS_CFG_ISR_POST_DEFERRED_EN > 0u
    p_temp16 = (CPU_INT16U const *)&OSDbg_IntQ;
#endif

    p_temp08 = (CPU_INT08U const *)&OSDbg_ISRPostDeferredEn;
 8002326:	4b47      	ldr	r3, [pc, #284]	; (8002444 <OS_Dbg_Init+0x158>)
 8002328:	60fb      	str	r3, [r7, #12]

    p_temp16 = (CPU_INT16U const *)&OSDbg_Mem;
 800232a:	4b47      	ldr	r3, [pc, #284]	; (8002448 <OS_Dbg_Init+0x15c>)
 800232c:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_MemEn;
 800232e:	4b47      	ldr	r3, [pc, #284]	; (800244c <OS_Dbg_Init+0x160>)
 8002330:	60fb      	str	r3, [r7, #12]
#if OS_CFG_MEM_EN > 0u
    p_temp16 = (CPU_INT16U const *)&OSDbg_MemSize;
 8002332:	4b47      	ldr	r3, [pc, #284]	; (8002450 <OS_Dbg_Init+0x164>)
 8002334:	607b      	str	r3, [r7, #4]
#endif

    p_temp08 = (CPU_INT08U const *)&OSDbg_MsgEn;
 8002336:	4b47      	ldr	r3, [pc, #284]	; (8002454 <OS_Dbg_Init+0x168>)
 8002338:	60fb      	str	r3, [r7, #12]
#if (OS_MSG_EN) > 0u
    p_temp16 = (CPU_INT16U const *)&OSDbg_MsgSize;
 800233a:	4b47      	ldr	r3, [pc, #284]	; (8002458 <OS_Dbg_Init+0x16c>)
 800233c:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_MsgPoolSize;
 800233e:	4b47      	ldr	r3, [pc, #284]	; (800245c <OS_Dbg_Init+0x170>)
 8002340:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_MsgQSize;
 8002342:	4b47      	ldr	r3, [pc, #284]	; (8002460 <OS_Dbg_Init+0x174>)
 8002344:	607b      	str	r3, [r7, #4]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_Mutex;
 8002346:	4b47      	ldr	r3, [pc, #284]	; (8002464 <OS_Dbg_Init+0x178>)
 8002348:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_MutexEn;
 800234a:	4b47      	ldr	r3, [pc, #284]	; (8002468 <OS_Dbg_Init+0x17c>)
 800234c:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_MUTEX_EN) > 0u
    p_temp08 = (CPU_INT08U const *)&OSDbg_MutexDelEn;
 800234e:	4b47      	ldr	r3, [pc, #284]	; (800246c <OS_Dbg_Init+0x180>)
 8002350:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_MutexPendAbortEn;
 8002352:	4b47      	ldr	r3, [pc, #284]	; (8002470 <OS_Dbg_Init+0x184>)
 8002354:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_MutexSize;
 8002356:	4b47      	ldr	r3, [pc, #284]	; (8002474 <OS_Dbg_Init+0x188>)
 8002358:	607b      	str	r3, [r7, #4]
#endif

    p_temp08 = (CPU_INT08U const *)&OSDbg_ObjTypeChkEn;
 800235a:	4b47      	ldr	r3, [pc, #284]	; (8002478 <OS_Dbg_Init+0x18c>)
 800235c:	60fb      	str	r3, [r7, #12]

    p_temp08 = (CPU_INT08U const *)&OSDbg_PendMultiEn;
 800235e:	4b47      	ldr	r3, [pc, #284]	; (800247c <OS_Dbg_Init+0x190>)
 8002360:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_PendDataSize;
 8002362:	4b47      	ldr	r3, [pc, #284]	; (8002480 <OS_Dbg_Init+0x194>)
 8002364:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_PendListSize;
 8002366:	4b47      	ldr	r3, [pc, #284]	; (8002484 <OS_Dbg_Init+0x198>)
 8002368:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_PendObjSize;
 800236a:	4b47      	ldr	r3, [pc, #284]	; (8002488 <OS_Dbg_Init+0x19c>)
 800236c:	607b      	str	r3, [r7, #4]

    p_temp16 = (CPU_INT16U const *)&OSDbg_PrioMax;
 800236e:	4b47      	ldr	r3, [pc, #284]	; (800248c <OS_Dbg_Init+0x1a0>)
 8002370:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_PrioTblSize;
 8002372:	4b47      	ldr	r3, [pc, #284]	; (8002490 <OS_Dbg_Init+0x1a4>)
 8002374:	607b      	str	r3, [r7, #4]

    p_temp16 = (CPU_INT16U const *)&OSDbg_PtrSize;
 8002376:	4b47      	ldr	r3, [pc, #284]	; (8002494 <OS_Dbg_Init+0x1a8>)
 8002378:	607b      	str	r3, [r7, #4]

    p_temp16 = (CPU_INT16U const *)&OSDbg_Q;
 800237a:	4b47      	ldr	r3, [pc, #284]	; (8002498 <OS_Dbg_Init+0x1ac>)
 800237c:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_QEn;
 800237e:	4b47      	ldr	r3, [pc, #284]	; (800249c <OS_Dbg_Init+0x1b0>)
 8002380:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_Q_EN) > 0u
    p_temp08 = (CPU_INT08U const *)&OSDbg_QDelEn;
 8002382:	4b47      	ldr	r3, [pc, #284]	; (80024a0 <OS_Dbg_Init+0x1b4>)
 8002384:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_QFlushEn;
 8002386:	4b47      	ldr	r3, [pc, #284]	; (80024a4 <OS_Dbg_Init+0x1b8>)
 8002388:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_QPendAbortEn;
 800238a:	4b47      	ldr	r3, [pc, #284]	; (80024a8 <OS_Dbg_Init+0x1bc>)
 800238c:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_QSize;
 800238e:	4b47      	ldr	r3, [pc, #284]	; (80024ac <OS_Dbg_Init+0x1c0>)
 8002390:	607b      	str	r3, [r7, #4]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_SchedRoundRobinEn;
 8002392:	4b47      	ldr	r3, [pc, #284]	; (80024b0 <OS_Dbg_Init+0x1c4>)
 8002394:	607b      	str	r3, [r7, #4]

    p_temp16 = (CPU_INT16U const *)&OSDbg_Sem;
 8002396:	4b47      	ldr	r3, [pc, #284]	; (80024b4 <OS_Dbg_Init+0x1c8>)
 8002398:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_SemEn;
 800239a:	4b47      	ldr	r3, [pc, #284]	; (80024b8 <OS_Dbg_Init+0x1cc>)
 800239c:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_SEM_EN) > 0u
    p_temp08 = (CPU_INT08U const *)&OSDbg_SemDelEn;
 800239e:	4b47      	ldr	r3, [pc, #284]	; (80024bc <OS_Dbg_Init+0x1d0>)
 80023a0:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_SemPendAbortEn;
 80023a2:	4b47      	ldr	r3, [pc, #284]	; (80024c0 <OS_Dbg_Init+0x1d4>)
 80023a4:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_SemSetEn;
 80023a6:	4b47      	ldr	r3, [pc, #284]	; (80024c4 <OS_Dbg_Init+0x1d8>)
 80023a8:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_SemSize;
 80023aa:	4b47      	ldr	r3, [pc, #284]	; (80024c8 <OS_Dbg_Init+0x1dc>)
 80023ac:	607b      	str	r3, [r7, #4]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_RdyList;
 80023ae:	4b47      	ldr	r3, [pc, #284]	; (80024cc <OS_Dbg_Init+0x1e0>)
 80023b0:	607b      	str	r3, [r7, #4]
    p_temp32 = (CPU_INT32U const *)&OSDbg_RdyListSize;
 80023b2:	4b47      	ldr	r3, [pc, #284]	; (80024d0 <OS_Dbg_Init+0x1e4>)
 80023b4:	60bb      	str	r3, [r7, #8]

    p_temp16 = (CPU_INT16U const *)&OSDbg_StkWidth;
 80023b6:	4b47      	ldr	r3, [pc, #284]	; (80024d4 <OS_Dbg_Init+0x1e8>)
 80023b8:	607b      	str	r3, [r7, #4]

    p_temp08 = (CPU_INT08U const *)&OSDbg_StatTaskEn;
 80023ba:	4b47      	ldr	r3, [pc, #284]	; (80024d8 <OS_Dbg_Init+0x1ec>)
 80023bc:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_StatTaskStkChkEn;
 80023be:	4b47      	ldr	r3, [pc, #284]	; (80024dc <OS_Dbg_Init+0x1f0>)
 80023c0:	60fb      	str	r3, [r7, #12]

    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskChangePrioEn;
 80023c2:	4b47      	ldr	r3, [pc, #284]	; (80024e0 <OS_Dbg_Init+0x1f4>)
 80023c4:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskDelEn;
 80023c6:	4b47      	ldr	r3, [pc, #284]	; (80024e4 <OS_Dbg_Init+0x1f8>)
 80023c8:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskQEn;
 80023ca:	4b47      	ldr	r3, [pc, #284]	; (80024e8 <OS_Dbg_Init+0x1fc>)
 80023cc:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskQPendAbortEn;
 80023ce:	4b47      	ldr	r3, [pc, #284]	; (80024ec <OS_Dbg_Init+0x200>)
 80023d0:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskProfileEn;
 80023d2:	4b47      	ldr	r3, [pc, #284]	; (80024f0 <OS_Dbg_Init+0x204>)
 80023d4:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_TaskRegTblSize;
 80023d6:	4b47      	ldr	r3, [pc, #284]	; (80024f4 <OS_Dbg_Init+0x208>)
 80023d8:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskSemPendAbortEn;
 80023da:	4b47      	ldr	r3, [pc, #284]	; (80024f8 <OS_Dbg_Init+0x20c>)
 80023dc:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskSuspendEn;
 80023de:	4b47      	ldr	r3, [pc, #284]	; (80024fc <OS_Dbg_Init+0x210>)
 80023e0:	60fb      	str	r3, [r7, #12]

    p_temp16 = (CPU_INT16U const *)&OSDbg_TCBSize;
 80023e2:	4b47      	ldr	r3, [pc, #284]	; (8002500 <OS_Dbg_Init+0x214>)
 80023e4:	607b      	str	r3, [r7, #4]

    p_temp16 = (CPU_INT16U const *)&OSDbg_TickListSize;
 80023e6:	4b47      	ldr	r3, [pc, #284]	; (8002504 <OS_Dbg_Init+0x218>)
 80023e8:	607b      	str	r3, [r7, #4]

    p_temp08 = (CPU_INT08U const *)&OSDbg_TimeDlyHMSMEn;
 80023ea:	4b47      	ldr	r3, [pc, #284]	; (8002508 <OS_Dbg_Init+0x21c>)
 80023ec:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TimeDlyResumeEn;
 80023ee:	4b47      	ldr	r3, [pc, #284]	; (800250c <OS_Dbg_Init+0x220>)
 80023f0:	60fb      	str	r3, [r7, #12]


    p_temp16 = (CPU_INT16U const *)&OSDbg_Tmr;
 80023f2:	4b47      	ldr	r3, [pc, #284]	; (8002510 <OS_Dbg_Init+0x224>)
 80023f4:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TmrEn;
 80023f6:	4b47      	ldr	r3, [pc, #284]	; (8002514 <OS_Dbg_Init+0x228>)
 80023f8:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_TMR_EN) > 0u
    p_temp08 = (CPU_INT08U const *)&OSDbg_TmrDelEn;
 80023fa:	4b47      	ldr	r3, [pc, #284]	; (8002518 <OS_Dbg_Init+0x22c>)
 80023fc:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_TmrSize;
 80023fe:	4b47      	ldr	r3, [pc, #284]	; (800251c <OS_Dbg_Init+0x230>)
 8002400:	607b      	str	r3, [r7, #4]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_VersionNbr;
 8002402:	4b47      	ldr	r3, [pc, #284]	; (8002520 <OS_Dbg_Init+0x234>)
 8002404:	607b      	str	r3, [r7, #4]

    p_temp08 = p_temp08;                                     /* Prevent compiler warning for not using 'p_temp'        */
    p_temp16 = p_temp16;
    p_temp32 = p_temp32;
}
 8002406:	bf00      	nop
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr
 8002410:	0800e85e 	.word	0x0800e85e
 8002414:	0800e9c8 	.word	0x0800e9c8
 8002418:	0800e85f 	.word	0x0800e85f
 800241c:	0800e860 	.word	0x0800e860
 8002420:	0800e864 	.word	0x0800e864
 8002424:	0800e868 	.word	0x0800e868
 8002428:	0800e86c 	.word	0x0800e86c
 800242c:	0800e869 	.word	0x0800e869
 8002430:	0800e894 	.word	0x0800e894
 8002434:	0800e895 	.word	0x0800e895
 8002438:	0800e896 	.word	0x0800e896
 800243c:	0800e898 	.word	0x0800e898
 8002440:	0800e89a 	.word	0x0800e89a
 8002444:	0800e89c 	.word	0x0800e89c
 8002448:	0800e8a0 	.word	0x0800e8a0
 800244c:	0800e8c0 	.word	0x0800e8c0
 8002450:	0800e8c2 	.word	0x0800e8c2
 8002454:	0800e8c4 	.word	0x0800e8c4
 8002458:	0800e8c6 	.word	0x0800e8c6
 800245c:	0800e8c8 	.word	0x0800e8c8
 8002460:	0800e8ca 	.word	0x0800e8ca
 8002464:	0800e8cc 	.word	0x0800e8cc
 8002468:	0800e8fc 	.word	0x0800e8fc
 800246c:	0800e8fd 	.word	0x0800e8fd
 8002470:	0800e8fe 	.word	0x0800e8fe
 8002474:	0800e900 	.word	0x0800e900
 8002478:	0800e902 	.word	0x0800e902
 800247c:	0800e903 	.word	0x0800e903
 8002480:	0800e904 	.word	0x0800e904
 8002484:	0800e906 	.word	0x0800e906
 8002488:	0800e908 	.word	0x0800e908
 800248c:	0800e90a 	.word	0x0800e90a
 8002490:	0800e90c 	.word	0x0800e90c
 8002494:	0800e90e 	.word	0x0800e90e
 8002498:	0800e910 	.word	0x0800e910
 800249c:	0800e940 	.word	0x0800e940
 80024a0:	0800e941 	.word	0x0800e941
 80024a4:	0800e942 	.word	0x0800e942
 80024a8:	0800e943 	.word	0x0800e943
 80024ac:	0800e944 	.word	0x0800e944
 80024b0:	0800e946 	.word	0x0800e946
 80024b4:	0800e948 	.word	0x0800e948
 80024b8:	0800e970 	.word	0x0800e970
 80024bc:	0800e971 	.word	0x0800e971
 80024c0:	0800e972 	.word	0x0800e972
 80024c4:	0800e973 	.word	0x0800e973
 80024c8:	0800e974 	.word	0x0800e974
 80024cc:	0800e976 	.word	0x0800e976
 80024d0:	0800e978 	.word	0x0800e978
 80024d4:	0800e97c 	.word	0x0800e97c
 80024d8:	0800e97d 	.word	0x0800e97d
 80024dc:	0800e97e 	.word	0x0800e97e
 80024e0:	0800e97f 	.word	0x0800e97f
 80024e4:	0800e980 	.word	0x0800e980
 80024e8:	0800e981 	.word	0x0800e981
 80024ec:	0800e982 	.word	0x0800e982
 80024f0:	0800e983 	.word	0x0800e983
 80024f4:	0800e984 	.word	0x0800e984
 80024f8:	0800e986 	.word	0x0800e986
 80024fc:	0800e987 	.word	0x0800e987
 8002500:	0800e988 	.word	0x0800e988
 8002504:	0800e98a 	.word	0x0800e98a
 8002508:	0800e98c 	.word	0x0800e98c
 800250c:	0800e98d 	.word	0x0800e98d
 8002510:	0800e990 	.word	0x0800e990
 8002514:	0800e9c0 	.word	0x0800e9c0
 8002518:	0800e9c1 	.word	0x0800e9c1
 800251c:	0800e9c2 	.word	0x0800e9c2
 8002520:	0800e9c4 	.word	0x0800e9c4

08002524 <OSMutexCreate>:
*/

void  OSMutexCreate (OS_MUTEX  *p_mutex,
                     CPU_CHAR  *p_name,
                     OS_ERR    *p_err)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
    CPU_SR_ALLOC();
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to be called from an ISR                   */
 8002534:	4b1e      	ldr	r3, [pc, #120]	; (80025b0 <OSMutexCreate+0x8c>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d004      	beq.n	8002546 <OSMutexCreate+0x22>
       *p_err = OS_ERR_CREATE_ISR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f642 62e1 	movw	r2, #12001	; 0x2ee1
 8002542:	801a      	strh	r2, [r3, #0]
        return;
 8002544:	e031      	b.n	80025aa <OSMutexCreate+0x86>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_mutex == (OS_MUTEX *)0) {                         /* Validate 'p_mutex'                                     */
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d104      	bne.n	8002556 <OSMutexCreate+0x32>
       *p_err = OS_ERR_OBJ_PTR_NULL;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f645 52c3 	movw	r2, #24003	; 0x5dc3
 8002552:	801a      	strh	r2, [r3, #0]
        return;
 8002554:	e029      	b.n	80025aa <OSMutexCreate+0x86>
    }
#endif

    OS_CRITICAL_ENTER();
 8002556:	f7fd fec3 	bl	80002e0 <CPU_SR_Save>
 800255a:	6178      	str	r0, [r7, #20]
#if OS_OBJ_TYPE_REQ > 0u
    p_mutex->Type              =  OS_OBJ_TYPE_MUTEX;        /* Mark the data structure as a mutex                     */
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4a15      	ldr	r2, [pc, #84]	; (80025b4 <OSMutexCreate+0x90>)
 8002560:	601a      	str	r2, [r3, #0]
#endif
#if OS_CFG_DBG_EN > 0u
    p_mutex->NamePtr           =  p_name;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	605a      	str	r2, [r3, #4]
#else
    (void)&p_name;
#endif
    p_mutex->MutexGrpNextPtr   = (OS_MUTEX     *)0;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	621a      	str	r2, [r3, #32]
    p_mutex->OwnerTCBPtr       = (OS_TCB       *)0;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	625a      	str	r2, [r3, #36]	; 0x24
    p_mutex->OwnerNestingCtr   = (OS_NESTING_CTR)0;         /* Mutex is available                                     */
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    p_mutex->TS                = (CPU_TS        )0;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	62da      	str	r2, [r3, #44]	; 0x2c
    OS_PendListInit(&p_mutex->PendList);                    /* Initialize the waiting list                            */
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	3308      	adds	r3, #8
 8002586:	4618      	mov	r0, r3
 8002588:	f001 ff05 	bl	8004396 <OS_PendListInit>

#if OS_CFG_DBG_EN > 0u
    OS_MutexDbgListAdd(p_mutex);
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f000 f9f9 	bl	8002984 <OS_MutexDbgListAdd>
#endif

    OSMutexQty++;
 8002592:	4b09      	ldr	r3, [pc, #36]	; (80025b8 <OSMutexCreate+0x94>)
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	3301      	adds	r3, #1
 8002598:	b29a      	uxth	r2, r3
 800259a:	4b07      	ldr	r3, [pc, #28]	; (80025b8 <OSMutexCreate+0x94>)
 800259c:	801a      	strh	r2, [r3, #0]

#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_MUTEX_CREATE(p_mutex, p_name);                 /* Record the event.                                      */
#endif

    OS_CRITICAL_EXIT_NO_SCHED();
 800259e:	6978      	ldr	r0, [r7, #20]
 80025a0:	f7fd fea2 	bl	80002e8 <CPU_SR_Restore>
   *p_err = OS_ERR_NONE;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	801a      	strh	r2, [r3, #0]
}
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	2000219e 	.word	0x2000219e
 80025b4:	5854554d 	.word	0x5854554d
 80025b8:	2000239c 	.word	0x2000239c

080025bc <OSMutexPend>:
void  OSMutexPend (OS_MUTEX  *p_mutex,
                   OS_TICK    timeout,
                   OS_OPT     opt,
                   CPU_TS    *p_ts,
                   OS_ERR    *p_err)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b08e      	sub	sp, #56	; 0x38
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	603b      	str	r3, [r7, #0]
 80025c8:	4613      	mov	r3, r2
 80025ca:	80fb      	strh	r3, [r7, #6]
    OS_PEND_DATA  pend_data;
    OS_TCB       *p_tcb;
    CPU_SR_ALLOC();
 80025cc:	2300      	movs	r3, #0
 80025ce:	637b      	str	r3, [r7, #52]	; 0x34
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 80025d0:	4b7a      	ldr	r3, [pc, #488]	; (80027bc <OSMutexPend+0x200>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d004      	beq.n	80025e2 <OSMutexPend+0x26>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_PEND_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_PEND_ISR;
 80025d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025da:	f246 12ae 	movw	r2, #25006	; 0x61ae
 80025de:	801a      	strh	r2, [r3, #0]
        return;
 80025e0:	e0e9      	b.n	80027b6 <OSMutexPend+0x1fa>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_mutex == (OS_MUTEX *)0) {                         /* Validate arguments                                     */
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d104      	bne.n	80025f2 <OSMutexPend+0x36>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_PEND_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_PTR_NULL;
 80025e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025ea:	f645 52c3 	movw	r2, #24003	; 0x5dc3
 80025ee:	801a      	strh	r2, [r3, #0]
        return;
 80025f0:	e0e1      	b.n	80027b6 <OSMutexPend+0x1fa>
    }
    switch (opt) {                                          /* Validate 'opt'                                         */
 80025f2:	88fb      	ldrh	r3, [r7, #6]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d007      	beq.n	8002608 <OSMutexPend+0x4c>
 80025f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025fc:	d004      	beq.n	8002608 <OSMutexPend+0x4c>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_MUTEX_PEND_FAILED(p_mutex);           /* Record the event.                                      */
#endif
            *p_err = OS_ERR_OPT_INVALID;
 80025fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002600:	f645 6225 	movw	r2, #24101	; 0x5e25
 8002604:	801a      	strh	r2, [r3, #0]
             return;
 8002606:	e0d6      	b.n	80027b6 <OSMutexPend+0x1fa>
             break;
 8002608:	bf00      	nop
    }
#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_mutex->Type != OS_OBJ_TYPE_MUTEX) {               /* Make sure mutex was created                            */
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a6c      	ldr	r2, [pc, #432]	; (80027c0 <OSMutexPend+0x204>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d004      	beq.n	800261e <OSMutexPend+0x62>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_PEND_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_TYPE;
 8002614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002616:	f645 52c4 	movw	r2, #24004	; 0x5dc4
 800261a:	801a      	strh	r2, [r3, #0]
        return;
 800261c:	e0cb      	b.n	80027b6 <OSMutexPend+0x1fa>
    }
#endif

    if (p_ts != (CPU_TS *)0) {
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d002      	beq.n	800262a <OSMutexPend+0x6e>
       *p_ts  = (CPU_TS  )0;                                /* Initialize the returned timestamp                      */
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
    }

    CPU_CRITICAL_ENTER();
 800262a:	f7fd fe59 	bl	80002e0 <CPU_SR_Save>
 800262e:	6378      	str	r0, [r7, #52]	; 0x34
    if (p_mutex->OwnerNestingCtr == (OS_NESTING_CTR)0) {    /* Resource available?                                    */
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002636:	2b00      	cmp	r3, #0
 8002638:	d11b      	bne.n	8002672 <OSMutexPend+0xb6>
        p_mutex->OwnerTCBPtr       =  OSTCBCurPtr;          /* Yes, caller may proceed                                */
 800263a:	4b62      	ldr	r3, [pc, #392]	; (80027c4 <OSMutexPend+0x208>)
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	625a      	str	r2, [r3, #36]	; 0x24
        p_mutex->OwnerNestingCtr   = (OS_NESTING_CTR)1;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        if (p_ts != (CPU_TS *)0) {
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <OSMutexPend+0x9c>
           *p_ts  = p_mutex->TS;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	601a      	str	r2, [r3, #0]
        }
        OS_MutexGrpAdd(OSTCBCurPtr, p_mutex);               /* Add mutex to owner's group                             */
 8002658:	4b5a      	ldr	r3, [pc, #360]	; (80027c4 <OSMutexPend+0x208>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68f9      	ldr	r1, [r7, #12]
 800265e:	4618      	mov	r0, r3
 8002660:	f000 f9cc 	bl	80029fc <OS_MutexGrpAdd>
        CPU_CRITICAL_EXIT();
 8002664:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002666:	f7fd fe3f 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_PEND(p_mutex);                       /* Record the event.                                      */
#endif
       *p_err = OS_ERR_NONE;
 800266a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800266c:	2200      	movs	r2, #0
 800266e:	801a      	strh	r2, [r3, #0]
        return;
 8002670:	e0a1      	b.n	80027b6 <OSMutexPend+0x1fa>
    }

    if (OSTCBCurPtr == p_mutex->OwnerTCBPtr) {              /* See if current task is already the owner of the mutex  */
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002676:	4b53      	ldr	r3, [pc, #332]	; (80027c4 <OSMutexPend+0x208>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	429a      	cmp	r2, r3
 800267c:	d116      	bne.n	80026ac <OSMutexPend+0xf0>
        p_mutex->OwnerNestingCtr++;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002684:	3301      	adds	r3, #1
 8002686:	b2da      	uxtb	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        if (p_ts != (CPU_TS *)0) {
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <OSMutexPend+0xe0>
           *p_ts  = p_mutex->TS;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	601a      	str	r2, [r3, #0]
        }
        CPU_CRITICAL_EXIT();
 800269c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800269e:	f7fd fe23 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_PEND_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_MUTEX_OWNER;                         /* Indicate that current task already owns the mutex      */
 80026a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026a4:	f245 7282 	movw	r2, #22402	; 0x5782
 80026a8:	801a      	strh	r2, [r3, #0]
        return;
 80026aa:	e084      	b.n	80027b6 <OSMutexPend+0x1fa>
    }

    if ((opt & OS_OPT_PEND_NON_BLOCKING) != (OS_OPT)0) {    /* Caller wants to block if not available?                */
 80026ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	da07      	bge.n	80026c4 <OSMutexPend+0x108>
        CPU_CRITICAL_EXIT();
 80026b4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80026b6:	f7fd fe17 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_PEND_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_PEND_WOULD_BLOCK;                    /* No                                                     */
 80026ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026bc:	f246 12b0 	movw	r2, #25008	; 0x61b0
 80026c0:	801a      	strh	r2, [r3, #0]
        return;
 80026c2:	e078      	b.n	80027b6 <OSMutexPend+0x1fa>
    } else {
        if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {    /* Can't pend when the scheduler is locked                */
 80026c4:	4b40      	ldr	r3, [pc, #256]	; (80027c8 <OSMutexPend+0x20c>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d007      	beq.n	80026dc <OSMutexPend+0x120>
            CPU_CRITICAL_EXIT();
 80026cc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80026ce:	f7fd fe0b 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
            TRACE_OS_MUTEX_PEND_FAILED(p_mutex);            /* Record the event.                                      */
#endif
           *p_err = OS_ERR_SCHED_LOCKED;
 80026d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026d4:	f646 5263 	movw	r2, #28003	; 0x6d63
 80026d8:	801a      	strh	r2, [r3, #0]
            return;
 80026da:	e06c      	b.n	80027b6 <OSMutexPend+0x1fa>
        }
    }
                                                            /* Lock the scheduler/re-enable interrupts                */
    OS_CRITICAL_ENTER_CPU_EXIT();
    p_tcb = p_mutex->OwnerTCBPtr;                           /* Point to the TCB of the Mutex owner                    */
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	633b      	str	r3, [r7, #48]	; 0x30
    if (p_tcb->Prio > OSTCBCurPtr->Prio) {                  /* See if mutex owner has a lower priority than current   */
 80026e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e4:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 80026e8:	4b36      	ldr	r3, [pc, #216]	; (80027c4 <OSMutexPend+0x208>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d907      	bls.n	8002704 <OSMutexPend+0x148>
        OS_TaskChangePrio(p_tcb, OSTCBCurPtr->Prio);
 80026f4:	4b33      	ldr	r3, [pc, #204]	; (80027c4 <OSMutexPend+0x208>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80026fc:	4619      	mov	r1, r3
 80026fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002700:	f003 f89a 	bl	8005838 <OS_TaskChangePrio>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
                 TRACE_OS_MUTEX_TASK_PRIO_INHERIT(p_tcb, p_tcb->Prio);
#endif
    }

    OS_Pend(&pend_data,                                     /* Block task pending on Mutex                            */
 8002704:	f107 0010 	add.w	r0, r7, #16
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2204      	movs	r2, #4
 800270c:	68f9      	ldr	r1, [r7, #12]
 800270e:	f001 fd3d 	bl	800418c <OS_Pend>
            (OS_PEND_OBJ *)((void *)p_mutex),
             OS_TASK_PEND_ON_MUTEX,
             timeout);

    OS_CRITICAL_EXIT_NO_SCHED();
 8002712:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002714:	f7fd fde8 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_MUTEX_PEND_BLOCK(p_mutex);                     /* Record the event.                                      */
#endif
    OSSched();                                              /* Find the next highest priority task ready to run       */
 8002718:	f001 fbcc 	bl	8003eb4 <OSSched>

    CPU_CRITICAL_ENTER();
 800271c:	f7fd fde0 	bl	80002e0 <CPU_SR_Save>
 8002720:	6378      	str	r0, [r7, #52]	; 0x34
    switch (OSTCBCurPtr->PendStatus) {
 8002722:	4b28      	ldr	r3, [pc, #160]	; (80027c4 <OSMutexPend+0x208>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800272a:	2b03      	cmp	r3, #3
 800272c:	d83b      	bhi.n	80027a6 <OSMutexPend+0x1ea>
 800272e:	a201      	add	r2, pc, #4	; (adr r2, 8002734 <OSMutexPend+0x178>)
 8002730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002734:	08002745 	.word	0x08002745
 8002738:	0800275d 	.word	0x0800275d
 800273c:	0800278d 	.word	0x0800278d
 8002740:	08002777 	.word	0x08002777
        case OS_STATUS_PEND_OK:                             /* We got the mutex                                       */
             if (p_ts != (CPU_TS *)0) {
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d004      	beq.n	8002754 <OSMutexPend+0x198>
                *p_ts  = OSTCBCurPtr->TS;
 800274a:	4b1e      	ldr	r3, [pc, #120]	; (80027c4 <OSMutexPend+0x208>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_MUTEX_PEND(p_mutex);                  /* Record the event.                                      */
#endif
            *p_err = OS_ERR_NONE;
 8002754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002756:	2200      	movs	r2, #0
 8002758:	801a      	strh	r2, [r3, #0]
             break;
 800275a:	e029      	b.n	80027b0 <OSMutexPend+0x1f4>

        case OS_STATUS_PEND_ABORT:                          /* Indicate that we aborted                               */
             if (p_ts != (CPU_TS *)0) {
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d004      	beq.n	800276c <OSMutexPend+0x1b0>
                *p_ts  = OSTCBCurPtr->TS;
 8002762:	4b18      	ldr	r3, [pc, #96]	; (80027c4 <OSMutexPend+0x208>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_MUTEX_PEND_FAILED(p_mutex);           /* Record the event.                                      */
#endif
            *p_err = OS_ERR_PEND_ABORT;
 800276c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800276e:	f246 12a9 	movw	r2, #25001	; 0x61a9
 8002772:	801a      	strh	r2, [r3, #0]
             break;
 8002774:	e01c      	b.n	80027b0 <OSMutexPend+0x1f4>

        case OS_STATUS_PEND_TIMEOUT:                        /* Indicate that we didn't get mutex within timeout       */
             if (p_ts != (CPU_TS *)0) {
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d002      	beq.n	8002782 <OSMutexPend+0x1c6>
                *p_ts  = (CPU_TS  )0;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_MUTEX_PEND_FAILED(p_mutex);           /* Record the event.                                      */
#endif
            *p_err = OS_ERR_TIMEOUT;
 8002782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002784:	f247 22d9 	movw	r2, #29401	; 0x72d9
 8002788:	801a      	strh	r2, [r3, #0]
             break;
 800278a:	e011      	b.n	80027b0 <OSMutexPend+0x1f4>

        case OS_STATUS_PEND_DEL:                            /* Indicate that object pended on has been deleted        */
             if (p_ts != (CPU_TS *)0) {
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d004      	beq.n	800279c <OSMutexPend+0x1e0>
                *p_ts  = OSTCBCurPtr->TS;
 8002792:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <OSMutexPend+0x208>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_MUTEX_PEND_FAILED(p_mutex);           /* Record the event.                                      */
#endif
            *p_err = OS_ERR_OBJ_DEL;
 800279c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800279e:	f645 52c2 	movw	r2, #24002	; 0x5dc2
 80027a2:	801a      	strh	r2, [r3, #0]
             break;
 80027a4:	e004      	b.n	80027b0 <OSMutexPend+0x1f4>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_MUTEX_PEND_FAILED(p_mutex);           /* Record the event.                                      */
#endif
            *p_err = OS_ERR_STATUS_INVALID;
 80027a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027a8:	f646 622e 	movw	r2, #28206	; 0x6e2e
 80027ac:	801a      	strh	r2, [r3, #0]
             break;
 80027ae:	bf00      	nop
    }
    CPU_CRITICAL_EXIT();
 80027b0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80027b2:	f7fd fd99 	bl	80002e8 <CPU_SR_Restore>
}
 80027b6:	3738      	adds	r7, #56	; 0x38
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	2000219e 	.word	0x2000219e
 80027c0:	5854554d 	.word	0x5854554d
 80027c4:	20002174 	.word	0x20002174
 80027c8:	20001f08 	.word	0x20001f08

080027cc <OSMutexPost>:
*/

void  OSMutexPost (OS_MUTEX  *p_mutex,
                   OS_OPT     opt,
                   OS_ERR    *p_err)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b08c      	sub	sp, #48	; 0x30
 80027d0:	af02      	add	r7, sp, #8
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	460b      	mov	r3, r1
 80027d6:	607a      	str	r2, [r7, #4]
 80027d8:	817b      	strh	r3, [r7, #10]
    OS_PEND_LIST  *p_pend_list;
    OS_TCB        *p_tcb;
    CPU_TS         ts;
    OS_PRIO        prio_new;
    CPU_SR_ALLOC();
 80027da:	2300      	movs	r3, #0
 80027dc:	627b      	str	r3, [r7, #36]	; 0x24
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 80027de:	4b65      	ldr	r3, [pc, #404]	; (8002974 <OSMutexPost+0x1a8>)
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d004      	beq.n	80027f0 <OSMutexPost+0x24>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_POST_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_POST_ISR;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f246 220e 	movw	r2, #25102	; 0x620e
 80027ec:	801a      	strh	r2, [r3, #0]
        return;
 80027ee:	e0be      	b.n	800296e <OSMutexPost+0x1a2>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_mutex == (OS_MUTEX *)0) {                         /* Validate 'p_mutex'                                     */
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d104      	bne.n	8002800 <OSMutexPost+0x34>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_POST_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_PTR_NULL;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f645 52c3 	movw	r2, #24003	; 0x5dc3
 80027fc:	801a      	strh	r2, [r3, #0]
        return;
 80027fe:	e0b6      	b.n	800296e <OSMutexPost+0x1a2>
    }
    switch (opt) {                                          /* Validate 'opt'                                         */
 8002800:	897b      	ldrh	r3, [r7, #10]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d007      	beq.n	8002816 <OSMutexPost+0x4a>
 8002806:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800280a:	d004      	beq.n	8002816 <OSMutexPost+0x4a>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_MUTEX_POST_FAILED(p_mutex);           /* Record the event.                                      */
#endif
            *p_err =  OS_ERR_OPT_INVALID;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f645 6225 	movw	r2, #24101	; 0x5e25
 8002812:	801a      	strh	r2, [r3, #0]
             return;
 8002814:	e0ab      	b.n	800296e <OSMutexPost+0x1a2>
             break;
 8002816:	bf00      	nop
    }
#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_mutex->Type != OS_OBJ_TYPE_MUTEX) {               /* Make sure mutex was created                            */
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a56      	ldr	r2, [pc, #344]	; (8002978 <OSMutexPost+0x1ac>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d004      	beq.n	800282c <OSMutexPost+0x60>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_POST_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_TYPE;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f645 52c4 	movw	r2, #24004	; 0x5dc4
 8002828:	801a      	strh	r2, [r3, #0]
        return;
 800282a:	e0a0      	b.n	800296e <OSMutexPost+0x1a2>
    }
#endif

    CPU_CRITICAL_ENTER();
 800282c:	f7fd fd58 	bl	80002e0 <CPU_SR_Save>
 8002830:	6278      	str	r0, [r7, #36]	; 0x24
    if (OSTCBCurPtr != p_mutex->OwnerTCBPtr) {              /* Make sure the mutex owner is releasing the mutex       */
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002836:	4b51      	ldr	r3, [pc, #324]	; (800297c <OSMutexPost+0x1b0>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	429a      	cmp	r2, r3
 800283c:	d007      	beq.n	800284e <OSMutexPost+0x82>
        CPU_CRITICAL_EXIT();
 800283e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002840:	f7fd fd52 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_POST_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_MUTEX_NOT_OWNER;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f245 7281 	movw	r2, #22401	; 0x5781
 800284a:	801a      	strh	r2, [r3, #0]
        return;
 800284c:	e08f      	b.n	800296e <OSMutexPost+0x1a2>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_MUTEX_POST(p_mutex);                           /* Record the event.                                      */
#endif

    OS_CRITICAL_ENTER_CPU_EXIT();
    ts          = OS_TS_GET();                              /* Get timestamp                                          */
 800284e:	f003 fd23 	bl	8006298 <CPU_TS_TmrRd>
 8002852:	6238      	str	r0, [r7, #32]
    p_mutex->TS = ts;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6a3a      	ldr	r2, [r7, #32]
 8002858:	62da      	str	r2, [r3, #44]	; 0x2c
    p_mutex->OwnerNestingCtr--;                             /* Decrement owner's nesting counter                      */
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002860:	3b01      	subs	r3, #1
 8002862:	b2da      	uxtb	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (p_mutex->OwnerNestingCtr > (OS_NESTING_CTR)0) {     /* Are we done with all nestings?                         */
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002870:	2b00      	cmp	r3, #0
 8002872:	d007      	beq.n	8002884 <OSMutexPost+0xb8>
        OS_CRITICAL_EXIT();                                 /* No                                                     */
 8002874:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002876:	f7fd fd37 	bl	80002e8 <CPU_SR_Restore>
       *p_err = OS_ERR_MUTEX_NESTING;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f245 7283 	movw	r2, #22403	; 0x5783
 8002880:	801a      	strh	r2, [r3, #0]
        return;
 8002882:	e074      	b.n	800296e <OSMutexPost+0x1a2>
    }

    OS_MutexGrpRemove(OSTCBCurPtr, p_mutex);                /* Remove mutex from owner's group                        */
 8002884:	4b3d      	ldr	r3, [pc, #244]	; (800297c <OSMutexPost+0x1b0>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68f9      	ldr	r1, [r7, #12]
 800288a:	4618      	mov	r0, r3
 800288c:	f000 f8c7 	bl	8002a1e <OS_MutexGrpRemove>

    p_pend_list = &p_mutex->PendList;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	3308      	adds	r3, #8
 8002894:	61fb      	str	r3, [r7, #28]
    if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0) {         /* Any task waiting on mutex?                             */
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	891b      	ldrh	r3, [r3, #8]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10d      	bne.n	80028ba <OSMutexPost+0xee>
        p_mutex->OwnerTCBPtr     = (OS_TCB       *)0;       /* No                                                     */
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	625a      	str	r2, [r3, #36]	; 0x24
        p_mutex->OwnerNestingCtr = (OS_NESTING_CTR)0;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        OS_CRITICAL_EXIT();
 80028ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028ae:	f7fd fd1b 	bl	80002e8 <CPU_SR_Restore>
       *p_err = OS_ERR_NONE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	801a      	strh	r2, [r3, #0]
        return;
 80028b8:	e059      	b.n	800296e <OSMutexPost+0x1a2>
    }
                                                            /* Yes                                                    */
    if (OSTCBCurPtr->Prio != OSTCBCurPtr->BasePrio) {       /* Has owner inherited a priority?                        */
 80028ba:	4b30      	ldr	r3, [pc, #192]	; (800297c <OSMutexPost+0x1b0>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 80028c2:	4b2e      	ldr	r3, [pc, #184]	; (800297c <OSMutexPost+0x1b0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d02c      	beq.n	8002928 <OSMutexPost+0x15c>
        prio_new = OS_MutexGrpPrioFindHighest(OSTCBCurPtr); /* Yes, find highest priority pending                     */
 80028ce:	4b2b      	ldr	r3, [pc, #172]	; (800297c <OSMutexPost+0x1b0>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f000 f8bf 	bl	8002a56 <OS_MutexGrpPrioFindHighest>
 80028d8:	4603      	mov	r3, r0
 80028da:	76fb      	strb	r3, [r7, #27]
        prio_new = prio_new > OSTCBCurPtr->BasePrio ? OSTCBCurPtr->BasePrio : prio_new;
 80028dc:	4b27      	ldr	r3, [pc, #156]	; (800297c <OSMutexPost+0x1b0>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028e4:	7efa      	ldrb	r2, [r7, #27]
 80028e6:	4293      	cmp	r3, r2
 80028e8:	bf28      	it	cs
 80028ea:	4613      	movcs	r3, r2
 80028ec:	76fb      	strb	r3, [r7, #27]
        if (prio_new > OSTCBCurPtr->Prio) {
 80028ee:	4b23      	ldr	r3, [pc, #140]	; (800297c <OSMutexPost+0x1b0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80028f6:	7efa      	ldrb	r2, [r7, #27]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d915      	bls.n	8002928 <OSMutexPost+0x15c>
            OS_RdyListRemove(OSTCBCurPtr);
 80028fc:	4b1f      	ldr	r3, [pc, #124]	; (800297c <OSMutexPost+0x1b0>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f001 ffcb 	bl	800489c <OS_RdyListRemove>
            OSTCBCurPtr->Prio = prio_new;                   /* Lower owner's priority back to its original one        */
 8002906:	4b1d      	ldr	r3, [pc, #116]	; (800297c <OSMutexPost+0x1b0>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	7efa      	ldrb	r2, [r7, #27]
 800290c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
            TRACE_OS_MUTEX_TASK_PRIO_DISINHERIT(OSTCBCurPtr, prio_new);
#endif
            OS_PrioInsert(prio_new);
 8002910:	7efb      	ldrb	r3, [r7, #27]
 8002912:	4618      	mov	r0, r3
 8002914:	f000 fde6 	bl	80034e4 <OS_PrioInsert>
            OS_RdyListInsertTail(OSTCBCurPtr);              /* Insert owner in ready list at new priority             */
 8002918:	4b18      	ldr	r3, [pc, #96]	; (800297c <OSMutexPost+0x1b0>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4618      	mov	r0, r3
 800291e:	f001 ff7d 	bl	800481c <OS_RdyListInsertTail>
            OSPrioCur         = prio_new;
 8002922:	4a17      	ldr	r2, [pc, #92]	; (8002980 <OSMutexPost+0x1b4>)
 8002924:	7efb      	ldrb	r3, [r7, #27]
 8002926:	7013      	strb	r3, [r2, #0]
        }
    }
                                                            /* Get TCB from head of pend list                         */
    p_tcb                      = p_pend_list->HeadPtr->TCBPtr;
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	617b      	str	r3, [r7, #20]
    p_mutex->OwnerTCBPtr       = p_tcb;                     /* Give mutex to new owner                                */
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	625a      	str	r2, [r3, #36]	; 0x24
    p_mutex->OwnerNestingCtr   = (OS_NESTING_CTR)1;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    OS_MutexGrpAdd(p_tcb, p_mutex);
 800293e:	68f9      	ldr	r1, [r7, #12]
 8002940:	6978      	ldr	r0, [r7, #20]
 8002942:	f000 f85b 	bl	80029fc <OS_MutexGrpAdd>
                                                            /* Post to mutex                                          */
    OS_Post((OS_PEND_OBJ *)((void *)p_mutex),
 8002946:	6a3b      	ldr	r3, [r7, #32]
 8002948:	9300      	str	r3, [sp, #0]
 800294a:	2300      	movs	r3, #0
 800294c:	2200      	movs	r2, #0
 800294e:	6979      	ldr	r1, [r7, #20]
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f001 fe19 	bl	8004588 <OS_Post>
            (OS_TCB      *)p_tcb,
            (void        *)0,
            (OS_MSG_SIZE  )0,
            (CPU_TS       )ts);

    OS_CRITICAL_EXIT_NO_SCHED();
 8002956:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002958:	f7fd fcc6 	bl	80002e8 <CPU_SR_Restore>

    if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0) {
 800295c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002960:	2b00      	cmp	r3, #0
 8002962:	db01      	blt.n	8002968 <OSMutexPost+0x19c>
        OSSched();                                          /* Run the scheduler                                      */
 8002964:	f001 faa6 	bl	8003eb4 <OSSched>
    }

   *p_err = OS_ERR_NONE;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	801a      	strh	r2, [r3, #0]
}
 800296e:	3728      	adds	r7, #40	; 0x28
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	2000219e 	.word	0x2000219e
 8002978:	5854554d 	.word	0x5854554d
 800297c:	20002174 	.word	0x20002174
 8002980:	200020a8 	.word	0x200020a8

08002984 <OS_MutexDbgListAdd>:
*/


#if OS_CFG_DBG_EN > 0u
void  OS_MutexDbgListAdd (OS_MUTEX  *p_mutex)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
    p_mutex->DbgNamePtr               = (CPU_CHAR *)((void *)" ");
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a0e      	ldr	r2, [pc, #56]	; (80029c8 <OS_MutexDbgListAdd+0x44>)
 8002990:	61da      	str	r2, [r3, #28]
    p_mutex->DbgPrevPtr               = (OS_MUTEX *)0;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	615a      	str	r2, [r3, #20]
    if (OSMutexDbgListPtr == (OS_MUTEX *)0) {
 8002998:	4b0c      	ldr	r3, [pc, #48]	; (80029cc <OS_MutexDbgListAdd+0x48>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d103      	bne.n	80029a8 <OS_MutexDbgListAdd+0x24>
        p_mutex->DbgNextPtr           = (OS_MUTEX *)0;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	619a      	str	r2, [r3, #24]
 80029a6:	e007      	b.n	80029b8 <OS_MutexDbgListAdd+0x34>
    } else {
        p_mutex->DbgNextPtr           =  OSMutexDbgListPtr;
 80029a8:	4b08      	ldr	r3, [pc, #32]	; (80029cc <OS_MutexDbgListAdd+0x48>)
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	619a      	str	r2, [r3, #24]
        OSMutexDbgListPtr->DbgPrevPtr =  p_mutex;
 80029b0:	4b06      	ldr	r3, [pc, #24]	; (80029cc <OS_MutexDbgListAdd+0x48>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	615a      	str	r2, [r3, #20]
    }
    OSMutexDbgListPtr                 =  p_mutex;
 80029b8:	4a04      	ldr	r2, [pc, #16]	; (80029cc <OS_MutexDbgListAdd+0x48>)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6013      	str	r3, [r2, #0]
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr
 80029c8:	0800e79c 	.word	0x0800e79c
 80029cc:	20002474 	.word	0x20002474

080029d0 <OS_MutexInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MutexInit (OS_ERR  *p_err)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSMutexDbgListPtr = (OS_MUTEX *)0;
 80029d8:	4b06      	ldr	r3, [pc, #24]	; (80029f4 <OS_MutexInit+0x24>)
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]
#endif

    OSMutexQty        = (OS_OBJ_QTY)0;
 80029de:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <OS_MutexInit+0x28>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	801a      	strh	r2, [r3, #0]
   *p_err             =  OS_ERR_NONE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	801a      	strh	r2, [r3, #0]
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr
 80029f4:	20002474 	.word	0x20002474
 80029f8:	2000239c 	.word	0x2000239c

080029fc <OS_MutexGrpAdd>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MutexGrpAdd (OS_TCB  *p_tcb, OS_MUTEX  *p_mutex)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
    p_mutex->MutexGrpNextPtr = p_tcb->MutexGrpHeadPtr;      /* The mutex grp is not sorted add to head of list.       */
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	621a      	str	r2, [r3, #32]
    p_tcb->MutexGrpHeadPtr   = p_mutex;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bc80      	pop	{r7}
 8002a1c:	4770      	bx	lr

08002a1e <OS_MutexGrpRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MutexGrpRemove (OS_TCB  *p_tcb, OS_MUTEX  *p_mutex)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b085      	sub	sp, #20
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
 8002a26:	6039      	str	r1, [r7, #0]
    OS_MUTEX  **pp_mutex;

    pp_mutex = &p_tcb->MutexGrpHeadPtr;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	333c      	adds	r3, #60	; 0x3c
 8002a2c:	60fb      	str	r3, [r7, #12]

    while(*pp_mutex != p_mutex) {
 8002a2e:	e003      	b.n	8002a38 <OS_MutexGrpRemove+0x1a>
        pp_mutex = &(*pp_mutex)->MutexGrpNextPtr;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	3320      	adds	r3, #32
 8002a36:	60fb      	str	r3, [r7, #12]
    while(*pp_mutex != p_mutex) {
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d1f6      	bne.n	8002a30 <OS_MutexGrpRemove+0x12>
    }

    *pp_mutex = (*pp_mutex)->MutexGrpNextPtr;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6a1a      	ldr	r2, [r3, #32]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	601a      	str	r2, [r3, #0]
}
 8002a4c:	bf00      	nop
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bc80      	pop	{r7}
 8002a54:	4770      	bx	lr

08002a56 <OS_MutexGrpPrioFindHighest>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

OS_PRIO  OS_MutexGrpPrioFindHighest (OS_TCB  *p_tcb)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b087      	sub	sp, #28
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
    OS_PRIO        highest_prio;
    OS_PRIO        prio;
    OS_PEND_DATA  *p_head;


    highest_prio = OS_CFG_PRIO_MAX - 1u;
 8002a5e:	231f      	movs	r3, #31
 8002a60:	74fb      	strb	r3, [r7, #19]
    pp_mutex = &p_tcb->MutexGrpHeadPtr;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	333c      	adds	r3, #60	; 0x3c
 8002a66:	617b      	str	r3, [r7, #20]

    while(*pp_mutex != (OS_MUTEX *)0) {
 8002a68:	e015      	b.n	8002a96 <OS_MutexGrpPrioFindHighest+0x40>
        p_head = (*pp_mutex)->PendList.HeadPtr;
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	60fb      	str	r3, [r7, #12]
        if (p_head!= (OS_PEND_DATA *)0) {
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00a      	beq.n	8002a8e <OS_MutexGrpPrioFindHighest+0x38>
            prio = p_head->TCBPtr->Prio;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002a80:	72fb      	strb	r3, [r7, #11]
            if(prio < highest_prio) {
 8002a82:	7afa      	ldrb	r2, [r7, #11]
 8002a84:	7cfb      	ldrb	r3, [r7, #19]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d201      	bcs.n	8002a8e <OS_MutexGrpPrioFindHighest+0x38>
                highest_prio = prio;
 8002a8a:	7afb      	ldrb	r3, [r7, #11]
 8002a8c:	74fb      	strb	r3, [r7, #19]
            }
        }
        pp_mutex = &(*pp_mutex)->MutexGrpNextPtr;
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	3320      	adds	r3, #32
 8002a94:	617b      	str	r3, [r7, #20]
    while(*pp_mutex != (OS_MUTEX *)0) {
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1e5      	bne.n	8002a6a <OS_MutexGrpPrioFindHighest+0x14>
    }

    return (highest_prio);
 8002a9e:	7cfb      	ldrb	r3, [r7, #19]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	371c      	adds	r7, #28
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr
	...

08002aac <OS_SemInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_SemInit (OS_ERR  *p_err)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSSemDbgListPtr = (OS_SEM *)0;
 8002ab4:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <OS_SemInit+0x24>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
#endif

    OSSemQty        = (OS_OBJ_QTY)0;
 8002aba:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <OS_SemInit+0x28>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	801a      	strh	r2, [r3, #0]
   *p_err           = OS_ERR_NONE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	801a      	strh	r2, [r3, #0]
}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr
 8002ad0:	200020a0 	.word	0x200020a0
 8002ad4:	20002334 	.word	0x20002334

08002ad8 <OSCfg_Init>:
*                  DOES NOT optimize out the 'const' variables above.
************************************************************************************************************************
*/

void  OSCfg_Init (void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
    (void)&OSCfg_TmrTaskStkBasePtr;
    (void)&OSCfg_TmrTaskStkLimit;
    (void)&OSCfg_TmrTaskStkSize;
    (void)&OSCfg_TmrTaskStkSizeRAM;
#endif
}
 8002adc:	bf00      	nop
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr

08002ae4 <OS_TickTask>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TickTask (void  *p_arg)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b088      	sub	sp, #32
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
    OS_ERR  err;
    CPU_TS  ts_delta;
    CPU_TS  ts_delta_dly;
    CPU_TS  ts_delta_timeout;
    CPU_SR_ALLOC();
 8002aec:	2300      	movs	r3, #0
 8002aee:	61fb      	str	r3, [r7, #28]


    (void)&p_arg;                                               /* Prevent compiler warning                             */

    while (DEF_ON) {
        (void)OSTaskSemPend((OS_TICK  )0,
 8002af0:	f107 030e 	add.w	r3, r7, #14
 8002af4:	2200      	movs	r2, #0
 8002af6:	2100      	movs	r1, #0
 8002af8:	2000      	movs	r0, #0
 8002afa:	f002 fa19 	bl	8004f30 <OSTaskSemPend>
                            (OS_OPT   )OS_OPT_PEND_BLOCKING,
                            (CPU_TS  *)0,
                            (OS_ERR  *)&err);                   /* Wait for signal from tick interrupt                  */
        if (err == OS_ERR_NONE) {
 8002afe:	89fb      	ldrh	r3, [r7, #14]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1f5      	bne.n	8002af0 <OS_TickTask+0xc>
            OS_CRITICAL_ENTER();
 8002b04:	f7fd fbec 	bl	80002e0 <CPU_SR_Save>
 8002b08:	61f8      	str	r0, [r7, #28]
            OSTickCtr++;                                        /* Keep track of the number of ticks                    */
 8002b0a:	4b0d      	ldr	r3, [pc, #52]	; (8002b40 <OS_TickTask+0x5c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	4a0b      	ldr	r2, [pc, #44]	; (8002b40 <OS_TickTask+0x5c>)
 8002b12:	6013      	str	r3, [r2, #0]
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
            TRACE_OS_TICK_INCREMENT(OSTickCtr);                 /* Record the event.                                    */
#endif
            OS_CRITICAL_EXIT();
 8002b14:	69f8      	ldr	r0, [r7, #28]
 8002b16:	f7fd fbe7 	bl	80002e8 <CPU_SR_Restore>
            ts_delta_dly     = OS_TickListUpdateDly();
 8002b1a:	f000 fa05 	bl	8002f28 <OS_TickListUpdateDly>
 8002b1e:	61b8      	str	r0, [r7, #24]
            ts_delta_timeout = OS_TickListUpdateTimeout();
 8002b20:	f000 fa64 	bl	8002fec <OS_TickListUpdateTimeout>
 8002b24:	6178      	str	r0, [r7, #20]
            ts_delta         = ts_delta_dly + ts_delta_timeout; /* Compute total execution time of list updates         */
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
            if (OSTickTaskTimeMax < ts_delta) {
 8002b2e:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <OS_TickTask+0x60>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d9db      	bls.n	8002af0 <OS_TickTask+0xc>
                OSTickTaskTimeMax = ts_delta;
 8002b38:	4a02      	ldr	r2, [pc, #8]	; (8002b44 <OS_TickTask+0x60>)
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	6013      	str	r3, [r2, #0]
        (void)OSTaskSemPend((OS_TICK  )0,
 8002b3e:	e7d7      	b.n	8002af0 <OS_TickTask+0xc>
 8002b40:	20002374 	.word	0x20002374
 8002b44:	20002468 	.word	0x20002468

08002b48 <OS_TickTaskInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TickTaskInit (OS_ERR  *p_err)
{
 8002b48:	b590      	push	{r4, r7, lr}
 8002b4a:	b08d      	sub	sp, #52	; 0x34
 8002b4c:	af0a      	add	r7, sp, #40	; 0x28
 8002b4e:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    OSTickCtr                    = (OS_TICK)0u;                         /* Clear the tick counter                            */
 8002b50:	4b28      	ldr	r3, [pc, #160]	; (8002bf4 <OS_TickTaskInit+0xac>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]

    OSTickListDly.TCB_Ptr        = (OS_TCB   *)0;
 8002b56:	4b28      	ldr	r3, [pc, #160]	; (8002bf8 <OS_TickTaskInit+0xb0>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]
    OSTickListTimeout.TCB_Ptr    = (OS_TCB   *)0;
 8002b5c:	4b27      	ldr	r3, [pc, #156]	; (8002bfc <OS_TickTaskInit+0xb4>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	601a      	str	r2, [r3, #0]

#if OS_CFG_DBG_EN > 0u
    OSTickListDly.NbrEntries     = (OS_OBJ_QTY)0;
 8002b62:	4b25      	ldr	r3, [pc, #148]	; (8002bf8 <OS_TickTaskInit+0xb0>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	809a      	strh	r2, [r3, #4]
    OSTickListDly.NbrUpdated     = (OS_OBJ_QTY)0;
 8002b68:	4b23      	ldr	r3, [pc, #140]	; (8002bf8 <OS_TickTaskInit+0xb0>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	80da      	strh	r2, [r3, #6]

    OSTickListTimeout.NbrEntries = (OS_OBJ_QTY)0;
 8002b6e:	4b23      	ldr	r3, [pc, #140]	; (8002bfc <OS_TickTaskInit+0xb4>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	809a      	strh	r2, [r3, #4]
    OSTickListTimeout.NbrUpdated = (OS_OBJ_QTY)0;
 8002b74:	4b21      	ldr	r3, [pc, #132]	; (8002bfc <OS_TickTaskInit+0xb4>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	80da      	strh	r2, [r3, #6]
#endif

                                                                        /* ---------------- CREATE THE TICK TASK ----------- */
    if (OSCfg_TickTaskStkBasePtr == (CPU_STK *)0) {
 8002b7a:	4b21      	ldr	r3, [pc, #132]	; (8002c00 <OS_TickTaskInit+0xb8>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d104      	bne.n	8002b8c <OS_TickTaskInit+0x44>
       *p_err = OS_ERR_TICK_STK_INVALID;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f247 2212 	movw	r2, #29202	; 0x7212
 8002b88:	801a      	strh	r2, [r3, #0]
        return;
 8002b8a:	e02f      	b.n	8002bec <OS_TickTaskInit+0xa4>
    }

    if (OSCfg_TickTaskStkSize < OSCfg_StkSizeMin) {
 8002b8c:	4b1d      	ldr	r3, [pc, #116]	; (8002c04 <OS_TickTaskInit+0xbc>)
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	4b1d      	ldr	r3, [pc, #116]	; (8002c08 <OS_TickTaskInit+0xc0>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d204      	bcs.n	8002ba2 <OS_TickTaskInit+0x5a>
       *p_err = OS_ERR_TICK_STK_SIZE_INVALID;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f247 2213 	movw	r2, #29203	; 0x7213
 8002b9e:	801a      	strh	r2, [r3, #0]
        return;
 8002ba0:	e024      	b.n	8002bec <OS_TickTaskInit+0xa4>
    }

    if (OSCfg_TickTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {                 /* Only one task at the 'Idle Task' priority         */
 8002ba2:	4b1a      	ldr	r3, [pc, #104]	; (8002c0c <OS_TickTaskInit+0xc4>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b1e      	cmp	r3, #30
 8002ba8:	d904      	bls.n	8002bb4 <OS_TickTaskInit+0x6c>
       *p_err = OS_ERR_TICK_PRIO_INVALID;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f247 2211 	movw	r2, #29201	; 0x7211
 8002bb0:	801a      	strh	r2, [r3, #0]
        return;
 8002bb2:	e01b      	b.n	8002bec <OS_TickTaskInit+0xa4>
    }

    OSTaskCreate((OS_TCB     *)&OSTickTaskTCB,
 8002bb4:	4b15      	ldr	r3, [pc, #84]	; (8002c0c <OS_TickTaskInit+0xc4>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	4a11      	ldr	r2, [pc, #68]	; (8002c00 <OS_TickTaskInit+0xb8>)
 8002bba:	6812      	ldr	r2, [r2, #0]
 8002bbc:	4914      	ldr	r1, [pc, #80]	; (8002c10 <OS_TickTaskInit+0xc8>)
 8002bbe:	6809      	ldr	r1, [r1, #0]
 8002bc0:	4810      	ldr	r0, [pc, #64]	; (8002c04 <OS_TickTaskInit+0xbc>)
 8002bc2:	6800      	ldr	r0, [r0, #0]
 8002bc4:	687c      	ldr	r4, [r7, #4]
 8002bc6:	9408      	str	r4, [sp, #32]
 8002bc8:	240b      	movs	r4, #11
 8002bca:	9407      	str	r4, [sp, #28]
 8002bcc:	2400      	movs	r4, #0
 8002bce:	9406      	str	r4, [sp, #24]
 8002bd0:	2400      	movs	r4, #0
 8002bd2:	9405      	str	r4, [sp, #20]
 8002bd4:	2400      	movs	r4, #0
 8002bd6:	9404      	str	r4, [sp, #16]
 8002bd8:	9003      	str	r0, [sp, #12]
 8002bda:	9102      	str	r1, [sp, #8]
 8002bdc:	9201      	str	r2, [sp, #4]
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	2300      	movs	r3, #0
 8002be2:	4a0c      	ldr	r2, [pc, #48]	; (8002c14 <OS_TickTaskInit+0xcc>)
 8002be4:	490c      	ldr	r1, [pc, #48]	; (8002c18 <OS_TickTaskInit+0xd0>)
 8002be6:	480d      	ldr	r0, [pc, #52]	; (8002c1c <OS_TickTaskInit+0xd4>)
 8002be8:	f002 f872 	bl	8004cd0 <OSTaskCreate>
                 (OS_MSG_QTY  )0u,
                 (OS_TICK     )0u,
                 (void       *)0,
                 (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR | OS_OPT_TASK_NO_TLS),
                 (OS_ERR     *)p_err);
}
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd90      	pop	{r4, r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	20002374 	.word	0x20002374
 8002bf8:	20002478 	.word	0x20002478
 8002bfc:	20002484 	.word	0x20002484
 8002c00:	0800ea08 	.word	0x0800ea08
 8002c04:	0800ea10 	.word	0x0800ea10
 8002c08:	0800e9fc 	.word	0x0800e9fc
 8002c0c:	0800ea04 	.word	0x0800ea04
 8002c10:	0800ea0c 	.word	0x0800ea0c
 8002c14:	08002ae5 	.word	0x08002ae5
 8002c18:	0800e7a0 	.word	0x0800e7a0
 8002c1c:	200020ac 	.word	0x200020ac

08002c20 <OS_TickListInsert>:
*/

void  OS_TickListInsert (OS_TICK_LIST  *p_list,
                         OS_TCB        *p_tcb,
                         OS_TICK        time)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b089      	sub	sp, #36	; 0x24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
    OS_TCB  *p_tcb1;
    OS_TCB  *p_tcb2;
    OS_TICK  remain;


    if (p_list->TCB_Ptr == (OS_TCB *)0) {                               /* Is the list empty?                                */
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d112      	bne.n	8002c5a <OS_TickListInsert+0x3a>
        p_tcb->TickRemain  = time;                                      /* Yes, Store time in TCB                            */
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	651a      	str	r2, [r3, #80]	; 0x50
        p_tcb->TickNextPtr = (OS_TCB *)0;
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	615a      	str	r2, [r3, #20]
        p_tcb->TickPrevPtr = (OS_TCB *)0;
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2200      	movs	r2, #0
 8002c44:	619a      	str	r2, [r3, #24]
        p_tcb->TickListPtr = (OS_TICK_LIST *)p_list;                    /*      Link to this list                            */
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	61da      	str	r2, [r3, #28]
        p_list->TCB_Ptr    = p_tcb;                                     /*      Point to TCB of task to place in the list    */
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	68ba      	ldr	r2, [r7, #8]
 8002c50:	601a      	str	r2, [r3, #0]
#if OS_CFG_DBG_EN > 0u
        p_list->NbrEntries = 1u;                                        /*      List contains 1 entry                        */
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2201      	movs	r2, #1
 8002c56:	809a      	strh	r2, [r3, #4]
 8002c58:	e074      	b.n	8002d44 <OS_TickListInsert+0x124>
#endif
    } else {
        p_tcb1 = p_list->TCB_Ptr;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	61fb      	str	r3, [r7, #28]
        p_tcb2 = p_list->TCB_Ptr;                                       /* No,  Insert somewhere in the list in delta order  */
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	61bb      	str	r3, [r7, #24]
        remain = time;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	617b      	str	r3, [r7, #20]
        while (p_tcb2 != (OS_TCB *)0) {
 8002c6a:	e053      	b.n	8002d14 <OS_TickListInsert+0xf4>
            if (remain <= p_tcb2->TickRemain) {
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d844      	bhi.n	8002d00 <OS_TickListInsert+0xe0>
                if (p_tcb2->TickPrevPtr == (OS_TCB *)0) {               /*      Insert before the first entry in the list?   */
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d11e      	bne.n	8002cbc <OS_TickListInsert+0x9c>
                    p_tcb->TickRemain   = remain;                       /*      Yes, Store remaining time                    */                                          
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	651a      	str	r2, [r3, #80]	; 0x50
                    p_tcb->TickPrevPtr  = (OS_TCB *)0;
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	2200      	movs	r2, #0
 8002c88:	619a      	str	r2, [r3, #24]
                    p_tcb->TickNextPtr  = p_tcb2;    
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	615a      	str	r2, [r3, #20]
                    p_tcb->TickListPtr  = (OS_TICK_LIST *)p_list;       /*           Link TCB to this list                   */
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	61da      	str	r2, [r3, #28]
                    p_tcb2->TickRemain -= remain;                       /*           Reduce time of next entry in the list   */
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	1ad2      	subs	r2, r2, r3
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	651a      	str	r2, [r3, #80]	; 0x50
                    p_tcb2->TickPrevPtr = p_tcb;
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	619a      	str	r2, [r3, #24]
                    p_list->TCB_Ptr     = p_tcb;                        /*           Add TCB to the list                     */
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	601a      	str	r2, [r3, #0]
#if OS_CFG_DBG_EN > 0u
                    p_list->NbrEntries++;                               /*           List contains an extra entry            */
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	889b      	ldrh	r3, [r3, #4]
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	809a      	strh	r2, [r3, #4]
                    p_tcb1->TickNextPtr = p_tcb;
#if OS_CFG_DBG_EN > 0u
                    p_list->NbrEntries++;                               /*           List contains an extra entry            */
#endif
                }
                return;
 8002cba:	e043      	b.n	8002d44 <OS_TickListInsert+0x124>
                    p_tcb1              = p_tcb2->TickPrevPtr;
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	61fb      	str	r3, [r7, #28]
                    p_tcb->TickRemain   = remain;                       /*           Store remaining time                    */
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	651a      	str	r2, [r3, #80]	; 0x50
                    p_tcb->TickPrevPtr  = p_tcb1;
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	69fa      	ldr	r2, [r7, #28]
 8002ccc:	619a      	str	r2, [r3, #24]
                    p_tcb->TickNextPtr  = p_tcb2;    
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	615a      	str	r2, [r3, #20]
                    p_tcb->TickListPtr  = (OS_TICK_LIST *)p_list;       /*           TCB points to this list                 */
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	61da      	str	r2, [r3, #28]
                    p_tcb2->TickRemain -= remain;                       /*           Reduce time of next entry in the list   */
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	1ad2      	subs	r2, r2, r3
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	651a      	str	r2, [r3, #80]	; 0x50
                    p_tcb2->TickPrevPtr = p_tcb;
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	619a      	str	r2, [r3, #24]
                    p_tcb1->TickNextPtr = p_tcb;
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	68ba      	ldr	r2, [r7, #8]
 8002cf0:	615a      	str	r2, [r3, #20]
                    p_list->NbrEntries++;                               /*           List contains an extra entry            */
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	889b      	ldrh	r3, [r3, #4]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	809a      	strh	r2, [r3, #4]
                return;
 8002cfe:	e021      	b.n	8002d44 <OS_TickListInsert+0x124>
            } else {
                remain -= p_tcb2->TickRemain;                           /*           Point to the next TCB in the list       */
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	617b      	str	r3, [r7, #20]
                p_tcb1  = p_tcb2;
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	61fb      	str	r3, [r7, #28]
                p_tcb2  = p_tcb2->TickNextPtr;
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	61bb      	str	r3, [r7, #24]
        while (p_tcb2 != (OS_TCB *)0) {
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1a8      	bne.n	8002c6c <OS_TickListInsert+0x4c>
            }                 
        }
        p_tcb->TickRemain   = remain;                       
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	651a      	str	r2, [r3, #80]	; 0x50
        p_tcb->TickPrevPtr  = p_tcb1;
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	69fa      	ldr	r2, [r7, #28]
 8002d24:	619a      	str	r2, [r3, #24]
        p_tcb->TickNextPtr  = (OS_TCB *)0;    
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	615a      	str	r2, [r3, #20]
        p_tcb->TickListPtr  = (OS_TICK_LIST *)p_list;                   /*           Link the list to the TCB                */
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	61da      	str	r2, [r3, #28]
        p_tcb1->TickNextPtr = p_tcb;
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	68ba      	ldr	r2, [r7, #8]
 8002d36:	615a      	str	r2, [r3, #20]
#if OS_CFG_DBG_EN > 0u
        p_list->NbrEntries++;                                           /*           List contains an extra entry            */
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	889b      	ldrh	r3, [r3, #4]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	809a      	strh	r2, [r3, #4]
#endif
    }
}
 8002d44:	3724      	adds	r7, #36	; 0x24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr

08002d4c <OS_TickListInsertDly>:

void  OS_TickListInsertDly (OS_TCB   *p_tcb,
                            OS_TICK   time,
                            OS_OPT    opt,
                            OS_ERR   *p_err)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	603b      	str	r3, [r7, #0]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	80fb      	strh	r3, [r7, #6]
    OS_TICK   remain;



    if (opt == OS_OPT_TIME_MATCH) {                                     /* MATCH to absolute OSTickCtr value mode            */
 8002d5c:	88fb      	ldrh	r3, [r7, #6]
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	d113      	bne.n	8002d8a <OS_TickListInsertDly+0x3e>
        remain = time - OSTickCtr;
 8002d62:	4b3a      	ldr	r3, [pc, #232]	; (8002e4c <OS_TickListInsertDly+0x100>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	617b      	str	r3, [r7, #20]
        if ((remain > OS_TICK_TH_RDY) ||                                /* If delay already occurred, ...                    */
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d72:	d802      	bhi.n	8002d7a <OS_TickListInsertDly+0x2e>
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d158      	bne.n	8002e2c <OS_TickListInsertDly+0xe0>
            (remain == (OS_TICK)0u)) {
            p_tcb->TickRemain = (OS_TICK)0u;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	651a      	str	r2, [r3, #80]	; 0x50
           *p_err             =  OS_ERR_TIME_ZERO_DLY;                  /* ... do NOT delay.                                 */
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	f247 227e 	movw	r2, #29310	; 0x727e
 8002d86:	801a      	strh	r2, [r3, #0]
            return;
 8002d88:	e05c      	b.n	8002e44 <OS_TickListInsertDly+0xf8>
        }

    } else if (opt == OS_OPT_TIME_PERIODIC) {                           /* PERIODIC mode.                                    */
 8002d8a:	88fb      	ldrh	r3, [r7, #6]
 8002d8c:	2b08      	cmp	r3, #8
 8002d8e:	d13f      	bne.n	8002e10 <OS_TickListInsertDly+0xc4>
        if ((OSTickCtr - p_tcb->TickCtrPrev) > time) {
 8002d90:	4b2e      	ldr	r3, [pc, #184]	; (8002e4c <OS_TickListInsertDly+0x100>)
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d208      	bcs.n	8002db2 <OS_TickListInsertDly+0x66>
            remain             = time;                                  /* ... first time we load .TickCtrPrev               */
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	617b      	str	r3, [r7, #20]
            p_tcb->TickCtrPrev = OSTickCtr + time;
 8002da4:	4b29      	ldr	r3, [pc, #164]	; (8002e4c <OS_TickListInsertDly+0x100>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	441a      	add	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	655a      	str	r2, [r3, #84]	; 0x54
 8002db0:	e03c      	b.n	8002e2c <OS_TickListInsertDly+0xe0>
        } else {
            remain = time - (OSTickCtr - p_tcb->TickCtrPrev);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002db6:	4b25      	ldr	r3, [pc, #148]	; (8002e4c <OS_TickListInsertDly+0x100>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	68ba      	ldr	r2, [r7, #8]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	617b      	str	r3, [r7, #20]
            if ((remain > OS_TICK_TH_RDY) ||                            /* If delay time has already passed, ...             */
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002dc8:	d802      	bhi.n	8002dd0 <OS_TickListInsertDly+0x84>
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d118      	bne.n	8002e02 <OS_TickListInsertDly+0xb6>
                (remain == (OS_TICK)0u)) {
                p_tcb->TickCtrPrev += time + time * ((OSTickCtr - p_tcb->TickCtrPrev) / time); /* Try to recover the period  */
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002dd4:	4b1d      	ldr	r3, [pc, #116]	; (8002e4c <OS_TickListInsertDly+0x100>)
 8002dd6:	6819      	ldr	r1, [r3, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ddc:	1ac9      	subs	r1, r1, r3
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002de4:	3301      	adds	r3, #1
 8002de6:	68b9      	ldr	r1, [r7, #8]
 8002de8:	fb01 f303 	mul.w	r3, r1, r3
 8002dec:	441a      	add	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	655a      	str	r2, [r3, #84]	; 0x54
                p_tcb->TickRemain   = (OS_TICK)0u;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	651a      	str	r2, [r3, #80]	; 0x50
               *p_err               =  OS_ERR_TIME_ZERO_DLY;            /* ... do NOT delay.                                 */
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	f247 227e 	movw	r2, #29310	; 0x727e
 8002dfe:	801a      	strh	r2, [r3, #0]
                return;
 8002e00:	e020      	b.n	8002e44 <OS_TickListInsertDly+0xf8>
            }
            p_tcb->TickCtrPrev += time;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	441a      	add	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	655a      	str	r2, [r3, #84]	; 0x54
 8002e0e:	e00d      	b.n	8002e2c <OS_TickListInsertDly+0xe0>
        }

    } else if (time > (OS_TICK)0u) {                                    /* RELATIVE time delay mode                          */
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d002      	beq.n	8002e1c <OS_TickListInsertDly+0xd0>
        remain = time;
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	617b      	str	r3, [r7, #20]
 8002e1a:	e007      	b.n	8002e2c <OS_TickListInsertDly+0xe0>

    } else {                                                            /* Zero time delay; ...                              */
        p_tcb->TickRemain = (OS_TICK)0u;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	651a      	str	r2, [r3, #80]	; 0x50
       *p_err             =  OS_ERR_TIME_ZERO_DLY;                      /* ... do NOT delay.                                 */
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	f247 227e 	movw	r2, #29310	; 0x727e
 8002e28:	801a      	strh	r2, [r3, #0]
        return;
 8002e2a:	e00b      	b.n	8002e44 <OS_TickListInsertDly+0xf8>
    }

    p_tcb->TaskState = OS_TASK_STATE_DLY;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    OS_TickListInsert(&OSTickListDly, p_tcb, remain);
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	68f9      	ldr	r1, [r7, #12]
 8002e38:	4805      	ldr	r0, [pc, #20]	; (8002e50 <OS_TickListInsertDly+0x104>)
 8002e3a:	f7ff fef1 	bl	8002c20 <OS_TickListInsert>

   *p_err = OS_ERR_NONE;
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	2200      	movs	r2, #0
 8002e42:	801a      	strh	r2, [r3, #0]
}
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	20002374 	.word	0x20002374
 8002e50:	20002478 	.word	0x20002478

08002e54 <OS_TickListRemove>:
*              2) This function is assumed to be called with interrupts disabled.
************************************************************************************************************************
*/

void  OS_TickListRemove (OS_TCB  *p_tcb)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b087      	sub	sp, #28
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
    OS_TICK_LIST  *p_list;
    OS_TCB        *p_tcb1;
    OS_TCB        *p_tcb2;


    p_list = (OS_TICK_LIST *)p_tcb->TickListPtr;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	617b      	str	r3, [r7, #20]
    p_tcb1  = p_tcb->TickPrevPtr;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	613b      	str	r3, [r7, #16]
    p_tcb2  = p_tcb->TickNextPtr;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	60fb      	str	r3, [r7, #12]
    if (p_tcb1 == (OS_TCB *)0) {
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d12c      	bne.n	8002ece <OS_TickListRemove+0x7a>
        if (p_tcb2 == (OS_TCB *)0) {                                    /* Remove ONLY entry in the list?                    */
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10c      	bne.n	8002e94 <OS_TickListRemove+0x40>
            p_list->TCB_Ptr    = (OS_TCB        *)0;
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]
#if OS_CFG_DBG_EN > 0u
            p_list->NbrEntries = (OS_OBJ_QTY    )0u;
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	2200      	movs	r2, #0
 8002e84:	809a      	strh	r2, [r3, #4]
#endif
            p_tcb->TickRemain   = (OS_TICK       )0u;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	651a      	str	r2, [r3, #80]	; 0x50
            p_tcb->TickListPtr  = (OS_TICK_LIST *)0;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	61da      	str	r2, [r3, #28]
#endif
        p_tcb->TickNextPtr  = (OS_TCB       *)0;
        p_tcb->TickRemain   = (OS_TICK       )0u;
        p_tcb->TickListPtr  = (OS_TICK_LIST *)0;
    }
}
 8002e92:	e03e      	b.n	8002f12 <OS_TickListRemove+0xbe>
            p_tcb2->TickPrevPtr = (OS_TCB       *)0;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	619a      	str	r2, [r3, #24]
            p_tcb2->TickRemain += p_tcb->TickRemain;                    /* Add back the ticks to the delta                   */
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ea2:	441a      	add	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	651a      	str	r2, [r3, #80]	; 0x50
            p_list->TCB_Ptr    = p_tcb2;
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	601a      	str	r2, [r3, #0]
            p_list->NbrEntries--;
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	889b      	ldrh	r3, [r3, #4]
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	809a      	strh	r2, [r3, #4]
            p_tcb->TickNextPtr  = (OS_TCB       *)0;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	615a      	str	r2, [r3, #20]
            p_tcb->TickRemain   = (OS_TICK       )0u;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	651a      	str	r2, [r3, #80]	; 0x50
            p_tcb->TickListPtr  = (OS_TICK_LIST *)0;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	61da      	str	r2, [r3, #28]
}
 8002ecc:	e021      	b.n	8002f12 <OS_TickListRemove+0xbe>
        p_tcb1->TickNextPtr = p_tcb2;    
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	615a      	str	r2, [r3, #20]
        if (p_tcb2 != (OS_TCB *)0) {
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d009      	beq.n	8002eee <OS_TickListRemove+0x9a>
            p_tcb2->TickPrevPtr = p_tcb1;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	619a      	str	r2, [r3, #24]
            p_tcb2->TickRemain += p_tcb->TickRemain;                    /* Add back the ticks to the delta list              */
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ee8:	441a      	add	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	651a      	str	r2, [r3, #80]	; 0x50
        p_tcb->TickPrevPtr  = (OS_TCB       *)0;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	619a      	str	r2, [r3, #24]
        p_list->NbrEntries--;
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	889b      	ldrh	r3, [r3, #4]
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	809a      	strh	r2, [r3, #4]
        p_tcb->TickNextPtr  = (OS_TCB       *)0;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	615a      	str	r2, [r3, #20]
        p_tcb->TickRemain   = (OS_TICK       )0u;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	651a      	str	r2, [r3, #80]	; 0x50
        p_tcb->TickListPtr  = (OS_TICK_LIST *)0;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	61da      	str	r2, [r3, #28]
}
 8002f12:	bf00      	nop
 8002f14:	371c      	adds	r7, #28
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bc80      	pop	{r7}
 8002f1a:	4770      	bx	lr

08002f1c <OS_TickListResetPeak>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TickListResetPeak (void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
#if OS_CFG_DBG_EN > 0u
#endif
}
 8002f20:	bf00      	nop
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr

08002f28 <OS_TickListUpdateDly>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

static  CPU_TS  OS_TickListUpdateDly (void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
    CPU_TS        ts_start;
    CPU_TS        ts_delta_dly;
#if OS_CFG_DBG_EN > 0u
    OS_OBJ_QTY    nbr_updated;
#endif
    CPU_SR_ALLOC();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60fb      	str	r3, [r7, #12]

                                                              
                                                                        
    OS_CRITICAL_ENTER();
 8002f32:	f7fd f9d5 	bl	80002e0 <CPU_SR_Save>
 8002f36:	60f8      	str	r0, [r7, #12]
    ts_start    = OS_TS_GET();
 8002f38:	f003 f9ae 	bl	8006298 <CPU_TS_TmrRd>
 8002f3c:	60b8      	str	r0, [r7, #8]
#if OS_CFG_DBG_EN > 0u
    nbr_updated = (OS_OBJ_QTY)0u;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	827b      	strh	r3, [r7, #18]
#endif
    p_list      = &OSTickListDly;
 8002f42:	4b29      	ldr	r3, [pc, #164]	; (8002fe8 <OS_TickListUpdateDly+0xc0>)
 8002f44:	607b      	str	r3, [r7, #4]
    p_tcb       = p_list->TCB_Ptr;                                      
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	617b      	str	r3, [r7, #20]
    if (p_tcb != (OS_TCB *)0) {
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d039      	beq.n	8002fc6 <OS_TickListUpdateDly+0x9e>
        p_tcb->TickRemain--;
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f56:	1e5a      	subs	r2, r3, #1
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	651a      	str	r2, [r3, #80]	; 0x50
        while (p_tcb->TickRemain == 0u) {
 8002f5c:	e02f      	b.n	8002fbe <OS_TickListUpdateDly+0x96>
#if OS_CFG_DBG_EN > 0u
            nbr_updated++;											    /* Keep track of the number of TCBs updated          */
 8002f5e:	8a7b      	ldrh	r3, [r7, #18]
 8002f60:	3301      	adds	r3, #1
 8002f62:	827b      	strh	r3, [r7, #18]
#endif
            if (p_tcb->TaskState == OS_TASK_STATE_DLY) {
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d107      	bne.n	8002f7e <OS_TickListUpdateDly+0x56>
                p_tcb->TaskState = OS_TASK_STATE_RDY;
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                OS_RdyListInsert(p_tcb);                                /* Insert the task in the ready list                 */
 8002f76:	6978      	ldr	r0, [r7, #20]
 8002f78:	f001 fbf2 	bl	8004760 <OS_RdyListInsert>
 8002f7c:	e008      	b.n	8002f90 <OS_TickListUpdateDly+0x68>
            } else if (p_tcb->TaskState == OS_TASK_STATE_DLY_SUSPENDED) {
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002f84:	2b05      	cmp	r3, #5
 8002f86:	d103      	bne.n	8002f90 <OS_TickListUpdateDly+0x68>
                p_tcb->TaskState = OS_TASK_STATE_SUSPENDED;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	2204      	movs	r2, #4
 8002f8c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
            }

            p_list->TCB_Ptr = p_tcb->TickNextPtr;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	695a      	ldr	r2, [r3, #20]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	601a      	str	r2, [r3, #0]
            p_tcb           = p_list->TCB_Ptr;                          /* Get 'p_tcb' again for loop                        */
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	617b      	str	r3, [r7, #20]
            if (p_tcb == (OS_TCB *)0) {
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d103      	bne.n	8002fac <OS_TickListUpdateDly+0x84>
#if OS_CFG_DBG_EN > 0u
                p_list->NbrEntries = (OS_OBJ_QTY)0u;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	809a      	strh	r2, [r3, #4]
#endif
                break;
 8002faa:	e00c      	b.n	8002fc6 <OS_TickListUpdateDly+0x9e>
            } else {
#if OS_CFG_DBG_EN > 0u
                p_list->NbrEntries--;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	889b      	ldrh	r3, [r3, #4]
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	809a      	strh	r2, [r3, #4]
#endif
                p_tcb->TickPrevPtr = (OS_TCB *)0;
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	619a      	str	r2, [r3, #24]
        while (p_tcb->TickRemain == 0u) {
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0cb      	beq.n	8002f5e <OS_TickListUpdateDly+0x36>
            }
        }
    }
#if OS_CFG_DBG_EN > 0u
    p_list->NbrUpdated = nbr_updated;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	8a7a      	ldrh	r2, [r7, #18]
 8002fca:	80da      	strh	r2, [r3, #6]
#endif
    ts_delta_dly       = OS_TS_GET() - ts_start;                        /* Measure execution time of the update              */
 8002fcc:	f003 f964 	bl	8006298 <CPU_TS_TmrRd>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	603b      	str	r3, [r7, #0]
    OS_CRITICAL_EXIT();
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f7fd f985 	bl	80002e8 <CPU_SR_Restore>

    return (ts_delta_dly);
 8002fde:	683b      	ldr	r3, [r7, #0]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	20002478 	.word	0x20002478

08002fec <OS_TickListUpdateTimeout>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

static  CPU_TS  OS_TickListUpdateTimeout (void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b088      	sub	sp, #32
 8002ff0:	af00      	add	r7, sp, #0
#endif
#if OS_CFG_MUTEX_EN > 0u
    OS_TCB       *p_tcb_owner;
    OS_PRIO       prio_new;
#endif
    CPU_SR_ALLOC();
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	613b      	str	r3, [r7, #16]

                                                              
                                                                        
    OS_CRITICAL_ENTER();                                                /* ======= UPDATE TASKS WAITING WITH TIMEOUT ======= */
 8002ff6:	f7fd f973 	bl	80002e0 <CPU_SR_Save>
 8002ffa:	6138      	str	r0, [r7, #16]
    ts_start    = OS_TS_GET();
 8002ffc:	f003 f94c 	bl	8006298 <CPU_TS_TmrRd>
 8003000:	60f8      	str	r0, [r7, #12]
#if OS_CFG_DBG_EN > 0u
    nbr_updated = (OS_OBJ_QTY)0u;
 8003002:	2300      	movs	r3, #0
 8003004:	837b      	strh	r3, [r7, #26]
#endif
    p_list      = &OSTickListTimeout;
 8003006:	4b51      	ldr	r3, [pc, #324]	; (800314c <OS_TickListUpdateTimeout+0x160>)
 8003008:	60bb      	str	r3, [r7, #8]
    p_tcb       = p_list->TCB_Ptr;                                  
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	61fb      	str	r3, [r7, #28]
    if (p_tcb != (OS_TCB *)0) {
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 8089 	beq.w	800312a <OS_TickListUpdateTimeout+0x13e>
        p_tcb->TickRemain--;
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800301c:	1e5a      	subs	r2, r3, #1
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	651a      	str	r2, [r3, #80]	; 0x50
        while (p_tcb->TickRemain == 0u) {
 8003022:	e07d      	b.n	8003120 <OS_TickListUpdateTimeout+0x134>
#if OS_CFG_DBG_EN > 0u
            nbr_updated++;
 8003024:	8b7b      	ldrh	r3, [r7, #26]
 8003026:	3301      	adds	r3, #1
 8003028:	837b      	strh	r3, [r7, #26]
#endif

#if OS_CFG_MUTEX_EN > 0u
            p_tcb_owner = (OS_TCB *)0;
 800302a:	2300      	movs	r3, #0
 800302c:	617b      	str	r3, [r7, #20]
            if (p_tcb->PendOn == OS_TASK_PEND_ON_MUTEX) {
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003034:	2b04      	cmp	r3, #4
 8003036:	d104      	bne.n	8003042 <OS_TickListUpdateTimeout+0x56>
                p_tcb_owner = ((OS_MUTEX *)p_tcb->PendDataTblPtr->PendObjPtr)->OwnerTCBPtr;
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	617b      	str	r3, [r7, #20]
            }
#endif

#if (OS_MSG_EN > 0u)
            p_tcb->MsgPtr  = (void      *)0;
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	2200      	movs	r2, #0
 8003046:	659a      	str	r2, [r3, #88]	; 0x58
            p_tcb->MsgSize = (OS_MSG_SIZE)0u;
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	2200      	movs	r2, #0
 800304c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
#endif
            p_tcb->TS      = OS_TS_GET();
 8003050:	f003 f922 	bl	8006298 <CPU_TS_TmrRd>
 8003054:	4602      	mov	r2, r0
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	649a      	str	r2, [r3, #72]	; 0x48
            OS_PendListRemove(p_tcb);                                   /* Remove from wait list                             */
 800305a:	69f8      	ldr	r0, [r7, #28]
 800305c:	f001 fa20 	bl	80044a0 <OS_PendListRemove>
            if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT) {
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003066:	2b03      	cmp	r3, #3
 8003068:	d107      	bne.n	800307a <OS_TickListUpdateTimeout+0x8e>
                OS_RdyListInsert(p_tcb);                                /* Insert the task in the ready list                 */
 800306a:	69f8      	ldr	r0, [r7, #28]
 800306c:	f001 fb78 	bl	8004760 <OS_RdyListInsert>
                p_tcb->TaskState  = OS_TASK_STATE_RDY;
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8003078:	e008      	b.n	800308c <OS_TickListUpdateTimeout+0xa0>
            } else if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED) {
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003080:	2b07      	cmp	r3, #7
 8003082:	d103      	bne.n	800308c <OS_TickListUpdateTimeout+0xa0>

                p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	2204      	movs	r2, #4
 8003088:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
            }
            p_tcb->PendStatus = OS_STATUS_PEND_TIMEOUT;                 /* Indicate pend timed out                           */
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	2203      	movs	r2, #3
 8003090:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;                /* Indicate no longer pending                        */
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if OS_CFG_MUTEX_EN > 0u
            if(p_tcb_owner != (OS_TCB *)0) {
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d027      	beq.n	80030f2 <OS_TickListUpdateTimeout+0x106>
                if ((p_tcb_owner->Prio != p_tcb_owner->BasePrio) &&
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d01f      	beq.n	80030f2 <OS_TickListUpdateTimeout+0x106>
                    (p_tcb_owner->Prio == p_tcb->Prio)) {               /* Has the owner inherited a priority?               */
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
                if ((p_tcb_owner->Prio != p_tcb_owner->BasePrio) &&
 80030be:	429a      	cmp	r2, r3
 80030c0:	d117      	bne.n	80030f2 <OS_TickListUpdateTimeout+0x106>
                    prio_new = OS_MutexGrpPrioFindHighest(p_tcb_owner);
 80030c2:	6978      	ldr	r0, [r7, #20]
 80030c4:	f7ff fcc7 	bl	8002a56 <OS_MutexGrpPrioFindHighest>
 80030c8:	4603      	mov	r3, r0
 80030ca:	71fb      	strb	r3, [r7, #7]
                    prio_new = prio_new > p_tcb_owner->BasePrio ? p_tcb_owner->BasePrio : prio_new;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030d2:	79fa      	ldrb	r2, [r7, #7]
 80030d4:	4293      	cmp	r3, r2
 80030d6:	bf28      	it	cs
 80030d8:	4613      	movcs	r3, r2
 80030da:	71fb      	strb	r3, [r7, #7]
                    if(prio_new != p_tcb_owner->Prio) {
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80030e2:	79fa      	ldrb	r2, [r7, #7]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d004      	beq.n	80030f2 <OS_TickListUpdateTimeout+0x106>
                        OS_TaskChangePrio(p_tcb_owner, prio_new);
 80030e8:	79fb      	ldrb	r3, [r7, #7]
 80030ea:	4619      	mov	r1, r3
 80030ec:	6978      	ldr	r0, [r7, #20]
 80030ee:	f002 fba3 	bl	8005838 <OS_TaskChangePrio>
                    }
                }
            }
#endif

            p_list->TCB_Ptr = p_tcb->TickNextPtr;
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	695a      	ldr	r2, [r3, #20]
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	601a      	str	r2, [r3, #0]
            p_tcb           = p_list->TCB_Ptr;                          /* Get 'p_tcb' again for loop                        */
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	61fb      	str	r3, [r7, #28]
            if (p_tcb == (OS_TCB *)0) {
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d103      	bne.n	800310e <OS_TickListUpdateTimeout+0x122>
#if OS_CFG_DBG_EN > 0u
                p_list->NbrEntries = (OS_OBJ_QTY)0u;
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	2200      	movs	r2, #0
 800310a:	809a      	strh	r2, [r3, #4]
#endif
                break;
 800310c:	e00d      	b.n	800312a <OS_TickListUpdateTimeout+0x13e>
            } else {
#if OS_CFG_DBG_EN > 0u
                p_list->NbrEntries--;
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	889b      	ldrh	r3, [r3, #4]
 8003112:	3b01      	subs	r3, #1
 8003114:	b29a      	uxth	r2, r3
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	809a      	strh	r2, [r3, #4]
#endif
                p_tcb->TickPrevPtr = (OS_TCB *)0;
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	2200      	movs	r2, #0
 800311e:	619a      	str	r2, [r3, #24]
        while (p_tcb->TickRemain == 0u) {
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003124:	2b00      	cmp	r3, #0
 8003126:	f43f af7d 	beq.w	8003024 <OS_TickListUpdateTimeout+0x38>
            }
        }
    }
#if OS_CFG_DBG_EN > 0u
    p_list->NbrUpdated = nbr_updated;
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	8b7a      	ldrh	r2, [r7, #26]
 800312e:	80da      	strh	r2, [r3, #6]
#endif
    ts_delta_timeout   = OS_TS_GET() - ts_start;                        /* Measure execution time of the update              */
 8003130:	f003 f8b2 	bl	8006298 <CPU_TS_TmrRd>
 8003134:	4602      	mov	r2, r0
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	603b      	str	r3, [r7, #0]
    OS_CRITICAL_EXIT();                                                 /* ------------------------------------------------- */
 800313c:	6938      	ldr	r0, [r7, #16]
 800313e:	f7fd f8d3 	bl	80002e8 <CPU_SR_Restore>

    return (ts_delta_timeout);
 8003142:	683b      	ldr	r3, [r7, #0]
}
 8003144:	4618      	mov	r0, r3
 8003146:	3720      	adds	r7, #32
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	20002484 	.word	0x20002484

08003150 <OSTimeDly>:
*/

void  OSTimeDly (OS_TICK   dly,
                 OS_OPT    opt,
                 OS_ERR   *p_err)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	460b      	mov	r3, r1
 800315a:	607a      	str	r2, [r7, #4]
 800315c:	817b      	strh	r3, [r7, #10]
    CPU_SR_ALLOC();
 800315e:	2300      	movs	r3, #0
 8003160:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0u) {             /* Not allowed to call from an ISR                        */
 8003162:	4b2e      	ldr	r3, [pc, #184]	; (800321c <OSTimeDly+0xcc>)
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d004      	beq.n	8003174 <OSTimeDly+0x24>
       *p_err = OS_ERR_TIME_DLY_ISR;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f247 2275 	movw	r2, #29301	; 0x7275
 8003170:	801a      	strh	r2, [r3, #0]
        return;
 8003172:	e050      	b.n	8003216 <OSTimeDly+0xc6>
    }
#endif

    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0u) {       /* Can't delay when the scheduler is locked               */
 8003174:	4b2a      	ldr	r3, [pc, #168]	; (8003220 <OSTimeDly+0xd0>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d004      	beq.n	8003186 <OSTimeDly+0x36>
       *p_err = OS_ERR_SCHED_LOCKED;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f646 5263 	movw	r2, #28003	; 0x6d63
 8003182:	801a      	strh	r2, [r3, #0]
        return;
 8003184:	e047      	b.n	8003216 <OSTimeDly+0xc6>
    }

    switch (opt) {
 8003186:	897b      	ldrh	r3, [r7, #10]
 8003188:	2b08      	cmp	r3, #8
 800318a:	d81d      	bhi.n	80031c8 <OSTimeDly+0x78>
 800318c:	a201      	add	r2, pc, #4	; (adr r2, 8003194 <OSTimeDly+0x44>)
 800318e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003192:	bf00      	nop
 8003194:	080031b9 	.word	0x080031b9
 8003198:	080031c9 	.word	0x080031c9
 800319c:	080031b9 	.word	0x080031b9
 80031a0:	080031c9 	.word	0x080031c9
 80031a4:	080031d3 	.word	0x080031d3
 80031a8:	080031c9 	.word	0x080031c9
 80031ac:	080031c9 	.word	0x080031c9
 80031b0:	080031c9 	.word	0x080031c9
 80031b4:	080031b9 	.word	0x080031b9
        case OS_OPT_TIME_DLY:
        case OS_OPT_TIME_TIMEOUT:
        case OS_OPT_TIME_PERIODIC:
             if (dly == (OS_TICK)0u) {                      /* 0 means no delay!                                      */
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10b      	bne.n	80031d6 <OSTimeDly+0x86>
                *p_err = OS_ERR_TIME_ZERO_DLY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f247 227e 	movw	r2, #29310	; 0x727e
 80031c4:	801a      	strh	r2, [r3, #0]
                 return;
 80031c6:	e026      	b.n	8003216 <OSTimeDly+0xc6>

        case OS_OPT_TIME_MATCH:
             break;

        default:
            *p_err = OS_ERR_OPT_INVALID;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f645 6225 	movw	r2, #24101	; 0x5e25
 80031ce:	801a      	strh	r2, [r3, #0]
             return;
 80031d0:	e021      	b.n	8003216 <OSTimeDly+0xc6>
             break;
 80031d2:	bf00      	nop
 80031d4:	e000      	b.n	80031d8 <OSTimeDly+0x88>
             break;
 80031d6:	bf00      	nop
    }

    OS_CRITICAL_ENTER();
 80031d8:	f7fd f882 	bl	80002e0 <CPU_SR_Save>
 80031dc:	6178      	str	r0, [r7, #20]
    OS_TickListInsertDly(OSTCBCurPtr,
 80031de:	4b11      	ldr	r3, [pc, #68]	; (8003224 <OSTimeDly+0xd4>)
 80031e0:	6818      	ldr	r0, [r3, #0]
 80031e2:	897a      	ldrh	r2, [r7, #10]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68f9      	ldr	r1, [r7, #12]
 80031e8:	f7ff fdb0 	bl	8002d4c <OS_TickListInsertDly>
                         dly,
                         opt,
                         p_err);
    if (*p_err != OS_ERR_NONE) {
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	881b      	ldrh	r3, [r3, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <OSTimeDly+0xac>
         OS_CRITICAL_EXIT_NO_SCHED();
 80031f4:	6978      	ldr	r0, [r7, #20]
 80031f6:	f7fd f877 	bl	80002e8 <CPU_SR_Restore>
         return;
 80031fa:	e00c      	b.n	8003216 <OSTimeDly+0xc6>
    }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_TASK_DLY(dly);                                 /* Record the event.                                      */
#endif
    OS_RdyListRemove(OSTCBCurPtr);                          /* Remove current task from ready list                    */
 80031fc:	4b09      	ldr	r3, [pc, #36]	; (8003224 <OSTimeDly+0xd4>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	f001 fb4b 	bl	800489c <OS_RdyListRemove>
    OS_CRITICAL_EXIT_NO_SCHED();
 8003206:	6978      	ldr	r0, [r7, #20]
 8003208:	f7fd f86e 	bl	80002e8 <CPU_SR_Restore>
    OSSched();                                              /* Find next task to run!                                 */
 800320c:	f000 fe52 	bl	8003eb4 <OSSched>
   *p_err = OS_ERR_NONE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	801a      	strh	r2, [r3, #0]
}
 8003216:	3718      	adds	r7, #24
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	2000219e 	.word	0x2000219e
 8003220:	20001f08 	.word	0x20001f08
 8003224:	20002174 	.word	0x20002174

08003228 <OSTimeDlyHMSM>:
                     CPU_INT16U   minutes,
                     CPU_INT16U   seconds,
                     CPU_INT32U   milli,
                     OS_OPT       opt,
                     OS_ERR      *p_err)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b088      	sub	sp, #32
 800322c:	af00      	add	r7, sp, #0
 800322e:	607b      	str	r3, [r7, #4]
 8003230:	4603      	mov	r3, r0
 8003232:	81fb      	strh	r3, [r7, #14]
 8003234:	460b      	mov	r3, r1
 8003236:	81bb      	strh	r3, [r7, #12]
 8003238:	4613      	mov	r3, r2
 800323a:	817b      	strh	r3, [r7, #10]
    CPU_BOOLEAN  opt_non_strict;
#endif
    OS_OPT       opt_time;
    OS_RATE_HZ   tick_rate;
    OS_TICK      ticks;
    CPU_SR_ALLOC();
 800323c:	2300      	movs	r3, #0
 800323e:	61fb      	str	r3, [r7, #28]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0u) {             /* Not allowed to call from an ISR                        */
 8003240:	4b70      	ldr	r3, [pc, #448]	; (8003404 <OSTimeDlyHMSM+0x1dc>)
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d004      	beq.n	8003252 <OSTimeDlyHMSM+0x2a>
       *p_err = OS_ERR_TIME_DLY_ISR;
 8003248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324a:	f247 2275 	movw	r2, #29301	; 0x7275
 800324e:	801a      	strh	r2, [r3, #0]
        return;
 8003250:	e0d5      	b.n	80033fe <OSTimeDlyHMSM+0x1d6>
    }
#endif

    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0u) {       /* Can't delay when the scheduler is locked               */
 8003252:	4b6d      	ldr	r3, [pc, #436]	; (8003408 <OSTimeDlyHMSM+0x1e0>)
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d004      	beq.n	8003264 <OSTimeDlyHMSM+0x3c>
       *p_err = OS_ERR_SCHED_LOCKED;
 800325a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800325c:	f646 5263 	movw	r2, #28003	; 0x6d63
 8003260:	801a      	strh	r2, [r3, #0]
        return;
 8003262:	e0cc      	b.n	80033fe <OSTimeDlyHMSM+0x1d6>
    }

    opt_time = opt & OS_OPT_TIME_MASK;                      /* Retrieve time options only.                            */
 8003264:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003266:	f003 030e 	and.w	r3, r3, #14
 800326a:	837b      	strh	r3, [r7, #26]
    switch (opt_time) {
 800326c:	8b7b      	ldrh	r3, [r7, #26]
 800326e:	2b08      	cmp	r3, #8
 8003270:	d825      	bhi.n	80032be <OSTimeDlyHMSM+0x96>
 8003272:	a201      	add	r2, pc, #4	; (adr r2, 8003278 <OSTimeDlyHMSM+0x50>)
 8003274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003278:	0800329d 	.word	0x0800329d
 800327c:	080032bf 	.word	0x080032bf
 8003280:	0800329d 	.word	0x0800329d
 8003284:	080032bf 	.word	0x080032bf
 8003288:	080032c9 	.word	0x080032c9
 800328c:	080032bf 	.word	0x080032bf
 8003290:	080032bf 	.word	0x080032bf
 8003294:	080032bf 	.word	0x080032bf
 8003298:	0800329d 	.word	0x0800329d
        case OS_OPT_TIME_DLY:
        case OS_OPT_TIME_TIMEOUT:
        case OS_OPT_TIME_PERIODIC:
             if (milli == (CPU_INT32U)0u) {                 /* Make sure we didn't specify a 0 delay                  */
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d114      	bne.n	80032cc <OSTimeDlyHMSM+0xa4>
                 if (seconds == (CPU_INT16U)0u) {
 80032a2:	897b      	ldrh	r3, [r7, #10]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d111      	bne.n	80032cc <OSTimeDlyHMSM+0xa4>
                     if (minutes == (CPU_INT16U)0u) {
 80032a8:	89bb      	ldrh	r3, [r7, #12]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10e      	bne.n	80032cc <OSTimeDlyHMSM+0xa4>
                         if (hours == (CPU_INT16U)0u) {
 80032ae:	89fb      	ldrh	r3, [r7, #14]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10b      	bne.n	80032cc <OSTimeDlyHMSM+0xa4>
                            *p_err = OS_ERR_TIME_ZERO_DLY;
 80032b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b6:	f247 227e 	movw	r2, #29310	; 0x727e
 80032ba:	801a      	strh	r2, [r3, #0]
                             return;
 80032bc:	e09f      	b.n	80033fe <OSTimeDlyHMSM+0x1d6>

        case OS_OPT_TIME_MATCH:
             break;

        default:
            *p_err = OS_ERR_OPT_INVALID;
 80032be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c0:	f645 6225 	movw	r2, #24101	; 0x5e25
 80032c4:	801a      	strh	r2, [r3, #0]
             return;
 80032c6:	e09a      	b.n	80033fe <OSTimeDlyHMSM+0x1d6>
             break;
 80032c8:	bf00      	nop
 80032ca:	e000      	b.n	80032ce <OSTimeDlyHMSM+0xa6>
             break;
 80032cc:	bf00      	nop
    }

#if OS_CFG_ARG_CHK_EN > 0u                                  /* Validate arguments to be within range                  */
    opt_invalid = DEF_BIT_IS_SET_ANY(opt, ~OS_OPT_TIME_OPTS_MASK);
 80032ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80032d0:	f023 031e 	bic.w	r3, r3, #30
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	bf14      	ite	ne
 80032d8:	2301      	movne	r3, #1
 80032da:	2300      	moveq	r3, #0
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	767b      	strb	r3, [r7, #25]
    if (opt_invalid == DEF_YES) {
 80032e0:	7e7b      	ldrb	r3, [r7, #25]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d104      	bne.n	80032f0 <OSTimeDlyHMSM+0xc8>
       *p_err = OS_ERR_OPT_INVALID;
 80032e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e8:	f645 6225 	movw	r2, #24101	; 0x5e25
 80032ec:	801a      	strh	r2, [r3, #0]
        return;
 80032ee:	e086      	b.n	80033fe <OSTimeDlyHMSM+0x1d6>
    }

    opt_non_strict = DEF_BIT_IS_SET(opt, OS_OPT_TIME_HMSM_NON_STRICT);
 80032f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80032f2:	111b      	asrs	r3, r3, #4
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	763b      	strb	r3, [r7, #24]
    if (opt_non_strict != DEF_YES) {
 80032fc:	7e3b      	ldrb	r3, [r7, #24]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d020      	beq.n	8003344 <OSTimeDlyHMSM+0x11c>
         if (milli   > (CPU_INT32U)999u) {
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003308:	d304      	bcc.n	8003314 <OSTimeDlyHMSM+0xec>
            *p_err = OS_ERR_TIME_INVALID_MILLISECONDS;
 800330a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800330c:	f247 227b 	movw	r2, #29307	; 0x727b
 8003310:	801a      	strh	r2, [r3, #0]
             return;
 8003312:	e074      	b.n	80033fe <OSTimeDlyHMSM+0x1d6>
         }
         if (seconds > (CPU_INT16U)59u) {
 8003314:	897b      	ldrh	r3, [r7, #10]
 8003316:	2b3b      	cmp	r3, #59	; 0x3b
 8003318:	d904      	bls.n	8003324 <OSTimeDlyHMSM+0xfc>
            *p_err = OS_ERR_TIME_INVALID_SECONDS;
 800331a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800331c:	f247 227a 	movw	r2, #29306	; 0x727a
 8003320:	801a      	strh	r2, [r3, #0]
             return;
 8003322:	e06c      	b.n	80033fe <OSTimeDlyHMSM+0x1d6>
         }
         if (minutes > (CPU_INT16U)59u) {
 8003324:	89bb      	ldrh	r3, [r7, #12]
 8003326:	2b3b      	cmp	r3, #59	; 0x3b
 8003328:	d904      	bls.n	8003334 <OSTimeDlyHMSM+0x10c>
            *p_err = OS_ERR_TIME_INVALID_MINUTES;
 800332a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800332c:	f247 2279 	movw	r2, #29305	; 0x7279
 8003330:	801a      	strh	r2, [r3, #0]
             return;
 8003332:	e064      	b.n	80033fe <OSTimeDlyHMSM+0x1d6>
         }
         if (hours   > (CPU_INT16U)99u) {
 8003334:	89fb      	ldrh	r3, [r7, #14]
 8003336:	2b63      	cmp	r3, #99	; 0x63
 8003338:	d917      	bls.n	800336a <OSTimeDlyHMSM+0x142>
            *p_err = OS_ERR_TIME_INVALID_HOURS;
 800333a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333c:	f247 2278 	movw	r2, #29304	; 0x7278
 8003340:	801a      	strh	r2, [r3, #0]
             return;
 8003342:	e05c      	b.n	80033fe <OSTimeDlyHMSM+0x1d6>
         }
    } else {
         if (minutes > (CPU_INT16U)9999u) {
 8003344:	89bb      	ldrh	r3, [r7, #12]
 8003346:	f242 720f 	movw	r2, #9999	; 0x270f
 800334a:	4293      	cmp	r3, r2
 800334c:	d904      	bls.n	8003358 <OSTimeDlyHMSM+0x130>
            *p_err = OS_ERR_TIME_INVALID_MINUTES;
 800334e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003350:	f247 2279 	movw	r2, #29305	; 0x7279
 8003354:	801a      	strh	r2, [r3, #0]
             return;
 8003356:	e052      	b.n	80033fe <OSTimeDlyHMSM+0x1d6>
         }
         if (hours   > (CPU_INT16U)999u) {
 8003358:	89fb      	ldrh	r3, [r7, #14]
 800335a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800335e:	d304      	bcc.n	800336a <OSTimeDlyHMSM+0x142>
            *p_err = OS_ERR_TIME_INVALID_HOURS;
 8003360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003362:	f247 2278 	movw	r2, #29304	; 0x7278
 8003366:	801a      	strh	r2, [r3, #0]
             return;
 8003368:	e049      	b.n	80033fe <OSTimeDlyHMSM+0x1d6>
    }
#endif

                                                            /* Compute the total number of clock ticks required..     */
                                                            /* .. (rounded to the nearest tick)                       */
    tick_rate = OSCfg_TickRate_Hz;
 800336a:	4b28      	ldr	r3, [pc, #160]	; (800340c <OSTimeDlyHMSM+0x1e4>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	617b      	str	r3, [r7, #20]
    ticks     = ((OS_TICK)hours * (OS_TICK)3600u + (OS_TICK)minutes * (OS_TICK)60u + (OS_TICK)seconds) * tick_rate
 8003370:	89fb      	ldrh	r3, [r7, #14]
 8003372:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8003376:	fb02 f103 	mul.w	r1, r2, r3
 800337a:	89ba      	ldrh	r2, [r7, #12]
 800337c:	4613      	mov	r3, r2
 800337e:	011b      	lsls	r3, r3, #4
 8003380:	1a9b      	subs	r3, r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	18ca      	adds	r2, r1, r3
 8003386:	897b      	ldrh	r3, [r7, #10]
 8003388:	4413      	add	r3, r2
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	fb02 f203 	mul.w	r2, r2, r3
              + (tick_rate * ((OS_TICK)milli + (OS_TICK)500u / tick_rate)) / (OS_TICK)1000u;
 8003390:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	fbb1 f1f3 	udiv	r1, r1, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	440b      	add	r3, r1
 800339e:	6979      	ldr	r1, [r7, #20]
 80033a0:	fb01 f303 	mul.w	r3, r1, r3
 80033a4:	491a      	ldr	r1, [pc, #104]	; (8003410 <OSTimeDlyHMSM+0x1e8>)
 80033a6:	fba1 1303 	umull	r1, r3, r1, r3
 80033aa:	099b      	lsrs	r3, r3, #6
    ticks     = ((OS_TICK)hours * (OS_TICK)3600u + (OS_TICK)minutes * (OS_TICK)60u + (OS_TICK)seconds) * tick_rate
 80033ac:	4413      	add	r3, r2
 80033ae:	613b      	str	r3, [r7, #16]

    if (ticks > (OS_TICK)0u) {
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d01f      	beq.n	80033f6 <OSTimeDlyHMSM+0x1ce>
        OS_CRITICAL_ENTER();
 80033b6:	f7fc ff93 	bl	80002e0 <CPU_SR_Save>
 80033ba:	61f8      	str	r0, [r7, #28]
        OS_TickListInsertDly(OSTCBCurPtr,
 80033bc:	4b15      	ldr	r3, [pc, #84]	; (8003414 <OSTimeDlyHMSM+0x1ec>)
 80033be:	6818      	ldr	r0, [r3, #0]
 80033c0:	8b7a      	ldrh	r2, [r7, #26]
 80033c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c4:	6939      	ldr	r1, [r7, #16]
 80033c6:	f7ff fcc1 	bl	8002d4c <OS_TickListInsertDly>
                             ticks,
                             opt_time,
                             p_err);
        if (*p_err != OS_ERR_NONE) {
 80033ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033cc:	881b      	ldrh	r3, [r3, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <OSTimeDlyHMSM+0x1b2>
             OS_CRITICAL_EXIT_NO_SCHED();
 80033d2:	69f8      	ldr	r0, [r7, #28]
 80033d4:	f7fc ff88 	bl	80002e8 <CPU_SR_Restore>
             return;
 80033d8:	e011      	b.n	80033fe <OSTimeDlyHMSM+0x1d6>
        }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_DLY(ticks);                           /* Record the event.                                      */
#endif
        OS_RdyListRemove(OSTCBCurPtr);                      /* Remove current task from ready list                    */
 80033da:	4b0e      	ldr	r3, [pc, #56]	; (8003414 <OSTimeDlyHMSM+0x1ec>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4618      	mov	r0, r3
 80033e0:	f001 fa5c 	bl	800489c <OS_RdyListRemove>
        OS_CRITICAL_EXIT_NO_SCHED();
 80033e4:	69f8      	ldr	r0, [r7, #28]
 80033e6:	f7fc ff7f 	bl	80002e8 <CPU_SR_Restore>
        OSSched();                                          /* Find next task to run!                                 */
 80033ea:	f000 fd63 	bl	8003eb4 <OSSched>
       *p_err = OS_ERR_NONE;
 80033ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f0:	2200      	movs	r2, #0
 80033f2:	801a      	strh	r2, [r3, #0]
 80033f4:	e003      	b.n	80033fe <OSTimeDlyHMSM+0x1d6>
    } else {
       *p_err = OS_ERR_TIME_ZERO_DLY;
 80033f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f8:	f247 227e 	movw	r2, #29310	; 0x727e
 80033fc:	801a      	strh	r2, [r3, #0]
    }
}
 80033fe:	3720      	adds	r7, #32
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	2000219e 	.word	0x2000219e
 8003408:	20001f08 	.word	0x20001f08
 800340c:	0800ea00 	.word	0x0800ea00
 8003410:	10624dd3 	.word	0x10624dd3
 8003414:	20002174 	.word	0x20002174

08003418 <OSTimeTick>:
* Returns    : none
************************************************************************************************************************
*/

void  OSTimeTick (void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
#if OS_CFG_ISR_POST_DEFERRED_EN > 0u
    CPU_TS  ts;
#endif


    OSTimeTickHook();                                       /* Call user definable hook                               */
 800341e:	f002 fe1f 	bl	8006060 <OSTimeTickHook>
                (CPU_TS     ) ts,
                (OS_ERR    *)&err);

#else

   (void)OSTaskSemPost((OS_TCB *)&OSTickTaskTCB,            /* Signal tick task                                       */
 8003422:	1dbb      	adds	r3, r7, #6
 8003424:	461a      	mov	r2, r3
 8003426:	2100      	movs	r1, #0
 8003428:	480c      	ldr	r0, [pc, #48]	; (800345c <OSTimeTick+0x44>)
 800342a:	f001 fe71 	bl	8005110 <OSTaskSemPost>
#if OS_CFG_SCHED_ROUND_ROBIN_EN > 0u
    OS_SchedRoundRobin(&OSRdyList[OSPrioCur]);
#endif

#if OS_CFG_TMR_EN > 0u
    OSTmrUpdateCtr--;
 800342e:	4b0c      	ldr	r3, [pc, #48]	; (8003460 <OSTimeTick+0x48>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	3b01      	subs	r3, #1
 8003434:	4a0a      	ldr	r2, [pc, #40]	; (8003460 <OSTimeTick+0x48>)
 8003436:	6013      	str	r3, [r2, #0]
    if (OSTmrUpdateCtr == (OS_CTR)0u) {
 8003438:	4b09      	ldr	r3, [pc, #36]	; (8003460 <OSTimeTick+0x48>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d109      	bne.n	8003454 <OSTimeTick+0x3c>
        OSTmrUpdateCtr = OSTmrUpdateCnt;
 8003440:	4b08      	ldr	r3, [pc, #32]	; (8003464 <OSTimeTick+0x4c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a06      	ldr	r2, [pc, #24]	; (8003460 <OSTimeTick+0x48>)
 8003446:	6013      	str	r3, [r2, #0]
        OSTaskSemPost((OS_TCB *)&OSTmrTaskTCB,              /* Signal timer task                                      */
 8003448:	1dbb      	adds	r3, r7, #6
 800344a:	461a      	mov	r2, r3
 800344c:	2100      	movs	r1, #0
 800344e:	4806      	ldr	r0, [pc, #24]	; (8003468 <OSTimeTick+0x50>)
 8003450:	f001 fe5e 	bl	8005110 <OSTaskSemPost>
                      (OS_ERR *)&err);
    }
#endif

#endif
}
 8003454:	bf00      	nop
 8003456:	3708      	adds	r7, #8
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	200020ac 	.word	0x200020ac
 8003460:	20002480 	.word	0x20002480
 8003464:	20002470 	.word	0x20002470
 8003468:	200021a4 	.word	0x200021a4

0800346c <OS_PrioInit>:
* Note       : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_PrioInit (void)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
    CPU_DATA  i;


                                                            /* Clear the bitmap table ... no task is ready            */
    for (i = 0u; i < OS_PRIO_TBL_SIZE; i++) {
 8003472:	2300      	movs	r3, #0
 8003474:	607b      	str	r3, [r7, #4]
 8003476:	e007      	b.n	8003488 <OS_PrioInit+0x1c>
         OSPrioTbl[i] = (CPU_DATA)0;
 8003478:	4a07      	ldr	r2, [pc, #28]	; (8003498 <OS_PrioInit+0x2c>)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2100      	movs	r1, #0
 800347e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (i = 0u; i < OS_PRIO_TBL_SIZE; i++) {
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	3301      	adds	r3, #1
 8003486:	607b      	str	r3, [r7, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d0f4      	beq.n	8003478 <OS_PrioInit+0xc>
    }
}
 800348e:	bf00      	nop
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	bc80      	pop	{r7}
 8003496:	4770      	bx	lr
 8003498:	2000330c 	.word	0x2000330c

0800349c <OS_PrioGetHighest>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

OS_PRIO  OS_PrioGetHighest (void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
    CPU_DATA  *p_tbl;
    OS_PRIO    prio;


    prio  = (OS_PRIO)0;
 80034a2:	2300      	movs	r3, #0
 80034a4:	70fb      	strb	r3, [r7, #3]
    p_tbl = &OSPrioTbl[0];
 80034a6:	4b0e      	ldr	r3, [pc, #56]	; (80034e0 <OS_PrioGetHighest+0x44>)
 80034a8:	607b      	str	r3, [r7, #4]
    while (*p_tbl == (CPU_DATA)0) {                         /* Search the bitmap table for the highest priority       */
 80034aa:	e005      	b.n	80034b8 <OS_PrioGetHighest+0x1c>
        prio += DEF_INT_CPU_NBR_BITS;                       /* Compute the step of each CPU_DATA entry                */
 80034ac:	78fb      	ldrb	r3, [r7, #3]
 80034ae:	3320      	adds	r3, #32
 80034b0:	70fb      	strb	r3, [r7, #3]
        p_tbl++;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	3304      	adds	r3, #4
 80034b6:	607b      	str	r3, [r7, #4]
    while (*p_tbl == (CPU_DATA)0) {                         /* Search the bitmap table for the highest priority       */
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0f5      	beq.n	80034ac <OS_PrioGetHighest+0x10>
    }
    prio += (OS_PRIO)CPU_CntLeadZeros(*p_tbl);              /* Find the position of the first bit set at the entry    */
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7fc ff16 	bl	80002f6 <CPU_CntLeadZeros>
 80034ca:	4603      	mov	r3, r0
 80034cc:	b2da      	uxtb	r2, r3
 80034ce:	78fb      	ldrb	r3, [r7, #3]
 80034d0:	4413      	add	r3, r2
 80034d2:	70fb      	strb	r3, [r7, #3]
    return (prio);
 80034d4:	78fb      	ldrb	r3, [r7, #3]
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	2000330c 	.word	0x2000330c

080034e4 <OS_PrioInsert>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_PrioInsert (OS_PRIO  prio)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b087      	sub	sp, #28
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	4603      	mov	r3, r0
 80034ec:	71fb      	strb	r3, [r7, #7]
    CPU_DATA  bit;
    CPU_DATA  bit_nbr;
    OS_PRIO   ix;


    ix             = prio / DEF_INT_CPU_NBR_BITS;
 80034ee:	79fb      	ldrb	r3, [r7, #7]
 80034f0:	095b      	lsrs	r3, r3, #5
 80034f2:	75fb      	strb	r3, [r7, #23]
    bit_nbr        = (CPU_DATA)prio & (DEF_INT_CPU_NBR_BITS - 1u);
 80034f4:	79fb      	ldrb	r3, [r7, #7]
 80034f6:	f003 031f 	and.w	r3, r3, #31
 80034fa:	613b      	str	r3, [r7, #16]
    bit            = 1u;
 80034fc:	2301      	movs	r3, #1
 80034fe:	60fb      	str	r3, [r7, #12]
    bit          <<= (DEF_INT_CPU_NBR_BITS - 1u) - bit_nbr;
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	f1c3 031f 	rsb	r3, r3, #31
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	60fb      	str	r3, [r7, #12]
    OSPrioTbl[ix] |= bit;
 800350e:	7dfb      	ldrb	r3, [r7, #23]
 8003510:	4a06      	ldr	r2, [pc, #24]	; (800352c <OS_PrioInsert+0x48>)
 8003512:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003516:	7dfb      	ldrb	r3, [r7, #23]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	430a      	orrs	r2, r1
 800351c:	4903      	ldr	r1, [pc, #12]	; (800352c <OS_PrioInsert+0x48>)
 800351e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003522:	bf00      	nop
 8003524:	371c      	adds	r7, #28
 8003526:	46bd      	mov	sp, r7
 8003528:	bc80      	pop	{r7}
 800352a:	4770      	bx	lr
 800352c:	2000330c 	.word	0x2000330c

08003530 <OS_PrioRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_PrioRemove (OS_PRIO  prio)
{
 8003530:	b480      	push	{r7}
 8003532:	b087      	sub	sp, #28
 8003534:	af00      	add	r7, sp, #0
 8003536:	4603      	mov	r3, r0
 8003538:	71fb      	strb	r3, [r7, #7]
    CPU_DATA  bit;
    CPU_DATA  bit_nbr;
    OS_PRIO   ix;


    ix             = prio / DEF_INT_CPU_NBR_BITS;
 800353a:	79fb      	ldrb	r3, [r7, #7]
 800353c:	095b      	lsrs	r3, r3, #5
 800353e:	75fb      	strb	r3, [r7, #23]
    bit_nbr        = (CPU_DATA)prio & (DEF_INT_CPU_NBR_BITS - 1u);
 8003540:	79fb      	ldrb	r3, [r7, #7]
 8003542:	f003 031f 	and.w	r3, r3, #31
 8003546:	613b      	str	r3, [r7, #16]
    bit            = 1u;
 8003548:	2301      	movs	r3, #1
 800354a:	60fb      	str	r3, [r7, #12]
    bit          <<= (DEF_INT_CPU_NBR_BITS - 1u) - bit_nbr;
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	f1c3 031f 	rsb	r3, r3, #31
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	60fb      	str	r3, [r7, #12]
    OSPrioTbl[ix] &= ~bit;
 800355a:	7dfb      	ldrb	r3, [r7, #23]
 800355c:	4a07      	ldr	r2, [pc, #28]	; (800357c <OS_PrioRemove+0x4c>)
 800355e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	43da      	mvns	r2, r3
 8003566:	7dfb      	ldrb	r3, [r7, #23]
 8003568:	400a      	ands	r2, r1
 800356a:	4904      	ldr	r1, [pc, #16]	; (800357c <OS_PrioRemove+0x4c>)
 800356c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003570:	bf00      	nop
 8003572:	371c      	adds	r7, #28
 8003574:	46bd      	mov	sp, r7
 8003576:	bc80      	pop	{r7}
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	2000330c 	.word	0x2000330c

08003580 <OSStatReset>:
* Returns    : none
************************************************************************************************************************
*/

void  OSStatReset (OS_ERR  *p_err)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
#endif
#if (OS_CFG_Q_EN > 0u)
    OS_Q        *p_q;
#endif
#endif
    CPU_SR_ALLOC();
 8003588:	2300      	movs	r3, #0
 800358a:	60fb      	str	r3, [r7, #12]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    CPU_CRITICAL_ENTER();
 800358c:	f7fc fea8 	bl	80002e0 <CPU_SR_Save>
 8003590:	60f8      	str	r0, [r7, #12]
    OSIntQTaskTimeMax     = (CPU_TS    )0;                  /* Reset the task execution times                         */
    OSIntQNbrEntriesMax   = (OS_OBJ_QTY)0;                  /* Reset the queue maximum number of entries              */
#endif

#if OS_CFG_STAT_TASK_EN > 0u
    OSStatTaskCPUUsageMax = 0u;
 8003592:	4b3f      	ldr	r3, [pc, #252]	; (8003690 <OSStatReset+0x110>)
 8003594:	2200      	movs	r2, #0
 8003596:	801a      	strh	r2, [r3, #0]
    OSStatTaskTimeMax     = (CPU_TS)0;
 8003598:	4b3e      	ldr	r3, [pc, #248]	; (8003694 <OSStatReset+0x114>)
 800359a:	2200      	movs	r2, #0
 800359c:	601a      	str	r2, [r3, #0]
#endif

    OSTickTaskTimeMax     = (CPU_TS)0;
 800359e:	4b3e      	ldr	r3, [pc, #248]	; (8003698 <OSStatReset+0x118>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]

#if OS_CFG_TMR_EN > 0u
    OSTmrTaskTimeMax      = (CPU_TS)0;
 80035a4:	4b3d      	ldr	r3, [pc, #244]	; (800369c <OSStatReset+0x11c>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	601a      	str	r2, [r3, #0]
#ifdef CPU_CFG_INT_DIS_MEAS_EN
    OSIntDisTimeMax       = (CPU_TS)0;                      /* Reset the maximum interrupt disable time               */
#endif

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
    OSSchedLockTimeMax    = (CPU_TS)0;                      /* Reset the maximum scheduler lock time                  */
 80035aa:	4b3d      	ldr	r3, [pc, #244]	; (80036a0 <OSStatReset+0x120>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	601a      	str	r2, [r3, #0]
#endif

#if ((OS_MSG_EN > 0u) && (OS_CFG_DBG_EN > 0u))
    OSMsgPool.NbrUsedMax  = 0u;
 80035b0:	4b3c      	ldr	r3, [pc, #240]	; (80036a4 <OSStatReset+0x124>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	811a      	strh	r2, [r3, #8]
#endif
    CPU_CRITICAL_EXIT();
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f7fc fe96 	bl	80002e8 <CPU_SR_Restore>

#if OS_CFG_DBG_EN > 0u
    CPU_CRITICAL_ENTER();
 80035bc:	f7fc fe90 	bl	80002e0 <CPU_SR_Save>
 80035c0:	60f8      	str	r0, [r7, #12]
    p_tcb = OSTaskDbgListPtr;
 80035c2:	4b39      	ldr	r3, [pc, #228]	; (80036a8 <OSStatReset+0x128>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	617b      	str	r3, [r7, #20]
    CPU_CRITICAL_EXIT();
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f7fc fe8d 	bl	80002e8 <CPU_SR_Restore>
    while (p_tcb != (OS_TCB *)0) {                          /* Reset per-Task statistics                              */
 80035ce:	e034      	b.n	800363a <OSStatReset+0xba>
        CPU_CRITICAL_ENTER();
 80035d0:	f7fc fe86 	bl	80002e0 <CPU_SR_Save>
 80035d4:	60f8      	str	r0, [r7, #12]
#ifdef CPU_CFG_INT_DIS_MEAS_EN
        p_tcb->IntDisTimeMax    = (CPU_TS      )0;
#endif

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
        p_tcb->SchedLockTimeMax = (CPU_TS      )0;
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	2200      	movs	r2, #0
 80035da:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
#endif

#if OS_CFG_TASK_PROFILE_EN > 0u
#if OS_CFG_TASK_Q_EN > 0u
        p_tcb->MsgQPendTimeMax  = (CPU_TS      )0;
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	2200      	movs	r2, #0
 80035e2:	675a      	str	r2, [r3, #116]	; 0x74
#endif
        p_tcb->SemPendTimeMax   = (CPU_TS      )0;
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        p_tcb->CtxSwCtr         = (OS_CTR      )0;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        p_tcb->CPUUsage         = (OS_CPU_USAGE)0;
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
        p_tcb->CPUUsageMax      = (OS_CPU_USAGE)0;
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	2200      	movs	r2, #0
 8003600:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
        p_tcb->CyclesTotal      = (OS_CYCLES   )0;
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	2200      	movs	r2, #0
 8003608:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        p_tcb->CyclesTotalPrev  = (OS_CYCLES   )0;
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	2200      	movs	r2, #0
 8003610:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        p_tcb->CyclesStart      =  OS_TS_GET();
 8003614:	f002 fe40 	bl	8006298 <CPU_TS_TmrRd>
 8003618:	4602      	mov	r2, r0
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif

#if OS_CFG_TASK_Q_EN > 0u
        p_msg_q                 = &p_tcb->MsgQ;
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	3360      	adds	r3, #96	; 0x60
 8003624:	60bb      	str	r3, [r7, #8]
        p_msg_q->NbrEntriesMax  = (OS_MSG_QTY  )0;
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	2200      	movs	r2, #0
 800362a:	819a      	strh	r2, [r3, #12]
#endif
        p_tcb                   = p_tcb->DbgNextPtr;
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003632:	617b      	str	r3, [r7, #20]
        CPU_CRITICAL_EXIT();
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f7fc fe57 	bl	80002e8 <CPU_SR_Restore>
    while (p_tcb != (OS_TCB *)0) {                          /* Reset per-Task statistics                              */
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1c7      	bne.n	80035d0 <OSStatReset+0x50>
    }
#endif

#if (OS_CFG_Q_EN > 0u) && (OS_CFG_DBG_EN > 0u)
    CPU_CRITICAL_ENTER();
 8003640:	f7fc fe4e 	bl	80002e0 <CPU_SR_Save>
 8003644:	60f8      	str	r0, [r7, #12]
    p_q = OSQDbgListPtr;
 8003646:	4b19      	ldr	r3, [pc, #100]	; (80036ac <OSStatReset+0x12c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	613b      	str	r3, [r7, #16]
    CPU_CRITICAL_EXIT();
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f7fc fe4b 	bl	80002e8 <CPU_SR_Restore>
    while (p_q != (OS_Q *)0) {                              /* Reset message queues statistics                        */
 8003652:	e00e      	b.n	8003672 <OSStatReset+0xf2>
        CPU_CRITICAL_ENTER();
 8003654:	f7fc fe44 	bl	80002e0 <CPU_SR_Save>
 8003658:	60f8      	str	r0, [r7, #12]
        p_msg_q                = &p_q->MsgQ;
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	3320      	adds	r3, #32
 800365e:	60bb      	str	r3, [r7, #8]
        p_msg_q->NbrEntriesMax = (OS_MSG_QTY)0;
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	2200      	movs	r2, #0
 8003664:	819a      	strh	r2, [r3, #12]
        p_q                    = p_q->DbgNextPtr;
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	613b      	str	r3, [r7, #16]
        CPU_CRITICAL_EXIT();
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f7fc fe3b 	bl	80002e8 <CPU_SR_Restore>
    while (p_q != (OS_Q *)0) {                              /* Reset message queues statistics                        */
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1ed      	bne.n	8003654 <OSStatReset+0xd4>
    }
#endif

    OS_TickListResetPeak();                                 /* Reset tick wheel statistics                            */
 8003678:	f7ff fc50 	bl	8002f1c <OS_TickListResetPeak>

#if OS_CFG_TMR_EN > 0u
    OS_TmrResetPeak();
 800367c:	f7fe fc28 	bl	8001ed0 <OS_TmrResetPeak>
#endif


   *p_err = OS_ERR_NONE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	801a      	strh	r2, [r3, #0]
}
 8003686:	bf00      	nop
 8003688:	3718      	adds	r7, #24
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	2000217a 	.word	0x2000217a
 8003694:	20001f10 	.word	0x20001f10
 8003698:	20002468 	.word	0x20002468
 800369c:	2000218c 	.word	0x2000218c
 80036a0:	20002394 	.word	0x20002394
 80036a4:	20002264 	.word	0x20002264
 80036a8:	20002188 	.word	0x20002188
 80036ac:	20002330 	.word	0x20002330

080036b0 <OSStatTaskCPUUsageInit>:
* Returns    : none
************************************************************************************************************************
*/

void  OSStatTaskCPUUsageInit (OS_ERR  *p_err)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
    OS_ERR   err;
    OS_TICK  dly;
    CPU_SR_ALLOC();
 80036b8:	2300      	movs	r3, #0
 80036ba:	613b      	str	r3, [r7, #16]
        return;
    }
#endif

#if ((OS_CFG_TMR_EN > 0u) && (OS_CFG_TASK_SUSPEND_EN > 0u))
    OSTaskSuspend(&OSTmrTaskTCB, &err);
 80036bc:	f107 030e 	add.w	r3, r7, #14
 80036c0:	4619      	mov	r1, r3
 80036c2:	4832      	ldr	r0, [pc, #200]	; (800378c <OSStatTaskCPUUsageInit+0xdc>)
 80036c4:	f001 fdc0 	bl	8005248 <OSTaskSuspend>
    if (err != OS_ERR_NONE) {
 80036c8:	89fb      	ldrh	r3, [r7, #14]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <OSStatTaskCPUUsageInit+0x26>
       *p_err = err;
 80036ce:	89fa      	ldrh	r2, [r7, #14]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	801a      	strh	r2, [r3, #0]
        return;
 80036d4:	e056      	b.n	8003784 <OSStatTaskCPUUsageInit+0xd4>
    }
#endif

    OSTimeDly((OS_TICK )2,                                  /* Synchronize with clock tick                            */
 80036d6:	f107 030e 	add.w	r3, r7, #14
 80036da:	461a      	mov	r2, r3
 80036dc:	2100      	movs	r1, #0
 80036de:	2002      	movs	r0, #2
 80036e0:	f7ff fd36 	bl	8003150 <OSTimeDly>
              (OS_OPT  )OS_OPT_TIME_DLY,
              (OS_ERR *)&err);
    if (err != OS_ERR_NONE) {
 80036e4:	89fb      	ldrh	r3, [r7, #14]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <OSStatTaskCPUUsageInit+0x42>
       *p_err = err;
 80036ea:	89fa      	ldrh	r2, [r7, #14]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	801a      	strh	r2, [r3, #0]
        return;
 80036f0:	e048      	b.n	8003784 <OSStatTaskCPUUsageInit+0xd4>
    }
    CPU_CRITICAL_ENTER();
 80036f2:	f7fc fdf5 	bl	80002e0 <CPU_SR_Save>
 80036f6:	6138      	str	r0, [r7, #16]
    OSStatTaskCtr = (OS_TICK)0;                             /* Clear idle counter                                     */
 80036f8:	4b25      	ldr	r3, [pc, #148]	; (8003790 <OSStatTaskCPUUsageInit+0xe0>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	601a      	str	r2, [r3, #0]
    CPU_CRITICAL_EXIT();
 80036fe:	6938      	ldr	r0, [r7, #16]
 8003700:	f7fc fdf2 	bl	80002e8 <CPU_SR_Restore>

    dly = (OS_TICK)0;
 8003704:	2300      	movs	r3, #0
 8003706:	617b      	str	r3, [r7, #20]
    if (OSCfg_TickRate_Hz > OSCfg_StatTaskRate_Hz) {
 8003708:	4b22      	ldr	r3, [pc, #136]	; (8003794 <OSStatTaskCPUUsageInit+0xe4>)
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	4b22      	ldr	r3, [pc, #136]	; (8003798 <OSStatTaskCPUUsageInit+0xe8>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	429a      	cmp	r2, r3
 8003712:	d906      	bls.n	8003722 <OSStatTaskCPUUsageInit+0x72>
        dly = (OS_TICK)(OSCfg_TickRate_Hz / OSCfg_StatTaskRate_Hz);
 8003714:	4b1f      	ldr	r3, [pc, #124]	; (8003794 <OSStatTaskCPUUsageInit+0xe4>)
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	4b1f      	ldr	r3, [pc, #124]	; (8003798 <OSStatTaskCPUUsageInit+0xe8>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003720:	617b      	str	r3, [r7, #20]
    }
    if (dly == (OS_TICK)0) {
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d106      	bne.n	8003736 <OSStatTaskCPUUsageInit+0x86>
        dly =  (OS_TICK)(OSCfg_TickRate_Hz / (OS_RATE_HZ)10);
 8003728:	4b1a      	ldr	r3, [pc, #104]	; (8003794 <OSStatTaskCPUUsageInit+0xe4>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a1b      	ldr	r2, [pc, #108]	; (800379c <OSStatTaskCPUUsageInit+0xec>)
 800372e:	fba2 2303 	umull	r2, r3, r2, r3
 8003732:	08db      	lsrs	r3, r3, #3
 8003734:	617b      	str	r3, [r7, #20]
    }

    OSTimeDly(dly,                                          /* Determine MAX. idle counter value                      */
 8003736:	f107 030e 	add.w	r3, r7, #14
 800373a:	461a      	mov	r2, r3
 800373c:	2100      	movs	r1, #0
 800373e:	6978      	ldr	r0, [r7, #20]
 8003740:	f7ff fd06 	bl	8003150 <OSTimeDly>
              OS_OPT_TIME_DLY,
              &err);

#if ((OS_CFG_TMR_EN > 0u) && (OS_CFG_TASK_SUSPEND_EN > 0u))
    OSTaskResume(&OSTmrTaskTCB, &err);
 8003744:	f107 030e 	add.w	r3, r7, #14
 8003748:	4619      	mov	r1, r3
 800374a:	4810      	ldr	r0, [pc, #64]	; (800378c <OSStatTaskCPUUsageInit+0xdc>)
 800374c:	f001 fbbe 	bl	8004ecc <OSTaskResume>
    if (err != OS_ERR_NONE) {
 8003750:	89fb      	ldrh	r3, [r7, #14]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <OSStatTaskCPUUsageInit+0xae>
       *p_err = err;
 8003756:	89fa      	ldrh	r2, [r7, #14]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	801a      	strh	r2, [r3, #0]
        return;
 800375c:	e012      	b.n	8003784 <OSStatTaskCPUUsageInit+0xd4>
    }
#endif

    CPU_CRITICAL_ENTER();
 800375e:	f7fc fdbf 	bl	80002e0 <CPU_SR_Save>
 8003762:	6138      	str	r0, [r7, #16]
    OSStatTaskTimeMax = (CPU_TS)0;
 8003764:	4b0e      	ldr	r3, [pc, #56]	; (80037a0 <OSStatTaskCPUUsageInit+0xf0>)
 8003766:	2200      	movs	r2, #0
 8003768:	601a      	str	r2, [r3, #0]

    OSStatTaskCtrMax  = OSStatTaskCtr;                      /* Store maximum idle counter count                       */
 800376a:	4b09      	ldr	r3, [pc, #36]	; (8003790 <OSStatTaskCPUUsageInit+0xe0>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a0d      	ldr	r2, [pc, #52]	; (80037a4 <OSStatTaskCPUUsageInit+0xf4>)
 8003770:	6013      	str	r3, [r2, #0]
    OSStatTaskRdy     = OS_STATE_RDY;
 8003772:	4b0d      	ldr	r3, [pc, #52]	; (80037a8 <OSStatTaskCPUUsageInit+0xf8>)
 8003774:	2201      	movs	r2, #1
 8003776:	701a      	strb	r2, [r3, #0]
    CPU_CRITICAL_EXIT();
 8003778:	6938      	ldr	r0, [r7, #16]
 800377a:	f7fc fdb5 	bl	80002e8 <CPU_SR_Restore>
   *p_err             = OS_ERR_NONE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	801a      	strh	r2, [r3, #0]
}
 8003784:	3718      	adds	r7, #24
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	200021a4 	.word	0x200021a4
 8003790:	20001f14 	.word	0x20001f14
 8003794:	0800ea00 	.word	0x0800ea00
 8003798:	0800e9ec 	.word	0x0800e9ec
 800379c:	cccccccd 	.word	0xcccccccd
 80037a0:	20001f10 	.word	0x20001f10
 80037a4:	20002370 	.word	0x20002370
 80037a8:	2000209d 	.word	0x2000209d

080037ac <OS_StatTask>:
*              4) This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_StatTask (void  *p_arg)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b090      	sub	sp, #64	; 0x40
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
    OS_TICK      ctr_div;
    OS_ERR       err;
    OS_TICK      dly;
    CPU_TS       ts_start;
    CPU_TS       ts_end;
    CPU_SR_ALLOC();
 80037b4:	2300      	movs	r3, #0
 80037b6:	61bb      	str	r3, [r7, #24]



    (void)&p_arg;                                           /* Prevent compiler warning for not using 'p_arg'         */
    while (OSStatTaskRdy != DEF_TRUE) {
 80037b8:	e008      	b.n	80037cc <OS_StatTask+0x20>
        OSTimeDly(2u * OSCfg_StatTaskRate_Hz,               /* Wait until statistic task is ready                     */
 80037ba:	4b84      	ldr	r3, [pc, #528]	; (80039cc <OS_StatTask+0x220>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	f107 020a 	add.w	r2, r7, #10
 80037c4:	2100      	movs	r1, #0
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7ff fcc2 	bl	8003150 <OSTimeDly>
    while (OSStatTaskRdy != DEF_TRUE) {
 80037cc:	4b80      	ldr	r3, [pc, #512]	; (80039d0 <OS_StatTask+0x224>)
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d1f2      	bne.n	80037ba <OS_StatTask+0xe>
                  OS_OPT_TIME_DLY,
                  &err);
    }
    OSStatReset(&err);                                      /* Reset statistics                                       */
 80037d4:	f107 030a 	add.w	r3, r7, #10
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff fed1 	bl	8003580 <OSStatReset>

    dly = (OS_TICK)0;                                       /* Compute statistic task sleep delay                     */
 80037de:	2300      	movs	r3, #0
 80037e0:	61fb      	str	r3, [r7, #28]
    if (OSCfg_TickRate_Hz > OSCfg_StatTaskRate_Hz) {
 80037e2:	4b7c      	ldr	r3, [pc, #496]	; (80039d4 <OS_StatTask+0x228>)
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	4b79      	ldr	r3, [pc, #484]	; (80039cc <OS_StatTask+0x220>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d906      	bls.n	80037fc <OS_StatTask+0x50>
        dly = (OS_TICK)(OSCfg_TickRate_Hz / OSCfg_StatTaskRate_Hz);
 80037ee:	4b79      	ldr	r3, [pc, #484]	; (80039d4 <OS_StatTask+0x228>)
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	4b76      	ldr	r3, [pc, #472]	; (80039cc <OS_StatTask+0x220>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fa:	61fb      	str	r3, [r7, #28]
    }
    if (dly == (OS_TICK)0) {
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d106      	bne.n	8003810 <OS_StatTask+0x64>
        dly =  (OS_TICK)(OSCfg_TickRate_Hz / (OS_RATE_HZ)10);
 8003802:	4b74      	ldr	r3, [pc, #464]	; (80039d4 <OS_StatTask+0x228>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a74      	ldr	r2, [pc, #464]	; (80039d8 <OS_StatTask+0x22c>)
 8003808:	fba2 2303 	umull	r2, r3, r2, r3
 800380c:	08db      	lsrs	r3, r3, #3
 800380e:	61fb      	str	r3, [r7, #28]
    }

    while (DEF_ON) {
        ts_start        = OS_TS_GET();
 8003810:	f002 fd42 	bl	8006298 <CPU_TS_TmrRd>
 8003814:	6178      	str	r0, [r7, #20]
#ifdef  CPU_CFG_INT_DIS_MEAS_EN
        OSIntDisTimeMax = CPU_IntDisMeasMaxGet();
#endif

        CPU_CRITICAL_ENTER();                               /* ----------------- OVERALL CPU USAGE ------------------ */
 8003816:	f7fc fd63 	bl	80002e0 <CPU_SR_Save>
 800381a:	61b8      	str	r0, [r7, #24]
        OSStatTaskCtrRun   = OSStatTaskCtr;                 /* Obtain the of the stat counter for the past .1 second  */
 800381c:	4b6f      	ldr	r3, [pc, #444]	; (80039dc <OS_StatTask+0x230>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a6f      	ldr	r2, [pc, #444]	; (80039e0 <OS_StatTask+0x234>)
 8003822:	6013      	str	r3, [r2, #0]
        OSStatTaskCtr      = (OS_TICK)0;                    /* Reset the stat counter for the next .1 second          */
 8003824:	4b6d      	ldr	r3, [pc, #436]	; (80039dc <OS_StatTask+0x230>)
 8003826:	2200      	movs	r2, #0
 8003828:	601a      	str	r2, [r3, #0]
        CPU_CRITICAL_EXIT();
 800382a:	69b8      	ldr	r0, [r7, #24]
 800382c:	f7fc fd5c 	bl	80002e8 <CPU_SR_Restore>

        if (OSStatTaskCtrMax > OSStatTaskCtrRun) {          /* Compute CPU Usage with best resolution                 */
 8003830:	4b6c      	ldr	r3, [pc, #432]	; (80039e4 <OS_StatTask+0x238>)
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	4b6a      	ldr	r3, [pc, #424]	; (80039e0 <OS_StatTask+0x234>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	429a      	cmp	r2, r3
 800383a:	d94f      	bls.n	80038dc <OS_StatTask+0x130>
            if (OSStatTaskCtrMax < 400000u) {                                        /*            1 to       400,000 */
 800383c:	4b69      	ldr	r3, [pc, #420]	; (80039e4 <OS_StatTask+0x238>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a69      	ldr	r2, [pc, #420]	; (80039e8 <OS_StatTask+0x23c>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d805      	bhi.n	8003852 <OS_StatTask+0xa6>
                ctr_mult = 10000u;
 8003846:	f242 7310 	movw	r3, #10000	; 0x2710
 800384a:	627b      	str	r3, [r7, #36]	; 0x24
                ctr_div  =     1u;
 800384c:	2301      	movs	r3, #1
 800384e:	623b      	str	r3, [r7, #32]
 8003850:	e024      	b.n	800389c <OS_StatTask+0xf0>
            } else if (OSStatTaskCtrMax <   4000000u) {                              /*      400,000 to     4,000,000 */
 8003852:	4b64      	ldr	r3, [pc, #400]	; (80039e4 <OS_StatTask+0x238>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a65      	ldr	r2, [pc, #404]	; (80039ec <OS_StatTask+0x240>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d805      	bhi.n	8003868 <OS_StatTask+0xbc>
                ctr_mult =  1000u;
 800385c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003860:	627b      	str	r3, [r7, #36]	; 0x24
                ctr_div  =    10u;
 8003862:	230a      	movs	r3, #10
 8003864:	623b      	str	r3, [r7, #32]
 8003866:	e019      	b.n	800389c <OS_StatTask+0xf0>
            } else if (OSStatTaskCtrMax <  40000000u) {                              /*    4,000,000 to    40,000,000 */
 8003868:	4b5e      	ldr	r3, [pc, #376]	; (80039e4 <OS_StatTask+0x238>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a60      	ldr	r2, [pc, #384]	; (80039f0 <OS_StatTask+0x244>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d804      	bhi.n	800387c <OS_StatTask+0xd0>
                ctr_mult =   100u;
 8003872:	2364      	movs	r3, #100	; 0x64
 8003874:	627b      	str	r3, [r7, #36]	; 0x24
                ctr_div  =   100u;
 8003876:	2364      	movs	r3, #100	; 0x64
 8003878:	623b      	str	r3, [r7, #32]
 800387a:	e00f      	b.n	800389c <OS_StatTask+0xf0>
            } else if (OSStatTaskCtrMax < 400000000u) {                              /*   40,000,000 to   400,000,000 */
 800387c:	4b59      	ldr	r3, [pc, #356]	; (80039e4 <OS_StatTask+0x238>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a5c      	ldr	r2, [pc, #368]	; (80039f4 <OS_StatTask+0x248>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d805      	bhi.n	8003892 <OS_StatTask+0xe6>
                ctr_mult =    10u;
 8003886:	230a      	movs	r3, #10
 8003888:	627b      	str	r3, [r7, #36]	; 0x24
                ctr_div  =  1000u;
 800388a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800388e:	623b      	str	r3, [r7, #32]
 8003890:	e004      	b.n	800389c <OS_StatTask+0xf0>
            } else {                                                                 /*  400,000,000 and up           */
                ctr_mult =     1u;
 8003892:	2301      	movs	r3, #1
 8003894:	627b      	str	r3, [r7, #36]	; 0x24
                ctr_div  = 10000u;
 8003896:	f242 7310 	movw	r3, #10000	; 0x2710
 800389a:	623b      	str	r3, [r7, #32]
            }
            ctr_max            = OSStatTaskCtrMax / ctr_div;
 800389c:	4b51      	ldr	r3, [pc, #324]	; (80039e4 <OS_StatTask+0x238>)
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	6a3b      	ldr	r3, [r7, #32]
 80038a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a6:	613b      	str	r3, [r7, #16]
            OSStatTaskCPUUsage = (OS_CPU_USAGE)((OS_TICK)10000u - ctr_mult * OSStatTaskCtrRun / ctr_max);
 80038a8:	4b4d      	ldr	r3, [pc, #308]	; (80039e0 <OS_StatTask+0x234>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ae:	fb02 f203 	mul.w	r2, r2, r3
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 80038be:	3310      	adds	r3, #16
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	4b4d      	ldr	r3, [pc, #308]	; (80039f8 <OS_StatTask+0x24c>)
 80038c4:	801a      	strh	r2, [r3, #0]
            if (OSStatTaskCPUUsageMax < OSStatTaskCPUUsage) {
 80038c6:	4b4d      	ldr	r3, [pc, #308]	; (80039fc <OS_StatTask+0x250>)
 80038c8:	881a      	ldrh	r2, [r3, #0]
 80038ca:	4b4b      	ldr	r3, [pc, #300]	; (80039f8 <OS_StatTask+0x24c>)
 80038cc:	881b      	ldrh	r3, [r3, #0]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d208      	bcs.n	80038e4 <OS_StatTask+0x138>
                OSStatTaskCPUUsageMax = OSStatTaskCPUUsage;
 80038d2:	4b49      	ldr	r3, [pc, #292]	; (80039f8 <OS_StatTask+0x24c>)
 80038d4:	881a      	ldrh	r2, [r3, #0]
 80038d6:	4b49      	ldr	r3, [pc, #292]	; (80039fc <OS_StatTask+0x250>)
 80038d8:	801a      	strh	r2, [r3, #0]
 80038da:	e003      	b.n	80038e4 <OS_StatTask+0x138>
            }
        } else {
            OSStatTaskCPUUsage = (OS_CPU_USAGE)10000u;
 80038dc:	4b46      	ldr	r3, [pc, #280]	; (80039f8 <OS_StatTask+0x24c>)
 80038de:	f242 7210 	movw	r2, #10000	; 0x2710
 80038e2:	801a      	strh	r2, [r3, #0]
        }

        OSStatTaskHook();                                   /* Invoke user definable hook                             */
 80038e4:	f002 faba 	bl	8005e5c <OSStatTaskHook>


#if OS_CFG_DBG_EN > 0u
#if OS_CFG_TASK_PROFILE_EN > 0u
        cycles_total = (OS_CYCLES)0;
 80038e8:	2300      	movs	r3, #0
 80038ea:	63bb      	str	r3, [r7, #56]	; 0x38

        CPU_CRITICAL_ENTER();
 80038ec:	f7fc fcf8 	bl	80002e0 <CPU_SR_Save>
 80038f0:	61b8      	str	r0, [r7, #24]
        p_tcb = OSTaskDbgListPtr;
 80038f2:	4b43      	ldr	r3, [pc, #268]	; (8003a00 <OS_StatTask+0x254>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	62bb      	str	r3, [r7, #40]	; 0x28
        CPU_CRITICAL_EXIT();
 80038f8:	69b8      	ldr	r0, [r7, #24]
 80038fa:	f7fc fcf5 	bl	80002e8 <CPU_SR_Restore>
        while (p_tcb != (OS_TCB *)0) {                      /* ----------------- TOTAL CYCLES COUNT ----------------- */
 80038fe:	e01f      	b.n	8003940 <OS_StatTask+0x194>
            OS_CRITICAL_ENTER();
 8003900:	f7fc fcee 	bl	80002e0 <CPU_SR_Save>
 8003904:	61b8      	str	r0, [r7, #24]
            p_tcb->CyclesTotalPrev =  p_tcb->CyclesTotal;   /* Save accumulated # cycles into a temp variable         */
 8003906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003908:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800390c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
            p_tcb->CyclesTotal     = (OS_CYCLES)0;          /* Reset total cycles for task for next run               */
 8003912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003914:	2200      	movs	r2, #0
 8003916:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            OS_CRITICAL_EXIT();
 800391a:	69b8      	ldr	r0, [r7, #24]
 800391c:	f7fc fce4 	bl	80002e8 <CPU_SR_Restore>

            cycles_total          += p_tcb->CyclesTotalPrev;/* Perform sum of all task # cycles                       */
 8003920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003922:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003926:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003928:	4413      	add	r3, r2
 800392a:	63bb      	str	r3, [r7, #56]	; 0x38

            CPU_CRITICAL_ENTER();
 800392c:	f7fc fcd8 	bl	80002e0 <CPU_SR_Save>
 8003930:	61b8      	str	r0, [r7, #24]
            p_tcb                  = p_tcb->DbgNextPtr;
 8003932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003934:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003938:	62bb      	str	r3, [r7, #40]	; 0x28
            CPU_CRITICAL_EXIT();
 800393a:	69b8      	ldr	r0, [r7, #24]
 800393c:	f7fc fcd4 	bl	80002e8 <CPU_SR_Restore>
        while (p_tcb != (OS_TCB *)0) {                      /* ----------------- TOTAL CYCLES COUNT ----------------- */
 8003940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1dc      	bne.n	8003900 <OS_StatTask+0x154>
#endif


#if OS_CFG_TASK_PROFILE_EN > 0u
                                                            /* ------------- INDIVIDUAL TASK CPU USAGE -------------- */
        if (cycles_total > (OS_CYCLES)0u) {                                          /* 'cycles_total' scaling ...    */
 8003946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003948:	2b00      	cmp	r3, #0
 800394a:	d031      	beq.n	80039b0 <OS_StatTask+0x204>
            if (cycles_total < 400000u) {                                            /*            1 to       400,000 */
 800394c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800394e:	4a26      	ldr	r2, [pc, #152]	; (80039e8 <OS_StatTask+0x23c>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d805      	bhi.n	8003960 <OS_StatTask+0x1b4>
                cycles_mult = 10000u;
 8003954:	f242 7310 	movw	r3, #10000	; 0x2710
 8003958:	633b      	str	r3, [r7, #48]	; 0x30
                cycles_div  =     1u;
 800395a:	2301      	movs	r3, #1
 800395c:	637b      	str	r3, [r7, #52]	; 0x34
 800395e:	e021      	b.n	80039a4 <OS_StatTask+0x1f8>
            } else if (cycles_total <   4000000u) {                                  /*      400,000 to     4,000,000 */
 8003960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003962:	4a22      	ldr	r2, [pc, #136]	; (80039ec <OS_StatTask+0x240>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d805      	bhi.n	8003974 <OS_StatTask+0x1c8>
                cycles_mult =  1000u;
 8003968:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800396c:	633b      	str	r3, [r7, #48]	; 0x30
                cycles_div  =    10u;
 800396e:	230a      	movs	r3, #10
 8003970:	637b      	str	r3, [r7, #52]	; 0x34
 8003972:	e017      	b.n	80039a4 <OS_StatTask+0x1f8>
            } else if (cycles_total <  40000000u) {                                  /*    4,000,000 to    40,000,000 */
 8003974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003976:	4a1e      	ldr	r2, [pc, #120]	; (80039f0 <OS_StatTask+0x244>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d804      	bhi.n	8003986 <OS_StatTask+0x1da>
                cycles_mult =   100u;
 800397c:	2364      	movs	r3, #100	; 0x64
 800397e:	633b      	str	r3, [r7, #48]	; 0x30
                cycles_div  =   100u;
 8003980:	2364      	movs	r3, #100	; 0x64
 8003982:	637b      	str	r3, [r7, #52]	; 0x34
 8003984:	e00e      	b.n	80039a4 <OS_StatTask+0x1f8>
            } else if (cycles_total < 400000000u) {                                  /*   40,000,000 to   400,000,000 */
 8003986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003988:	4a1a      	ldr	r2, [pc, #104]	; (80039f4 <OS_StatTask+0x248>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d805      	bhi.n	800399a <OS_StatTask+0x1ee>
                cycles_mult =    10u;
 800398e:	230a      	movs	r3, #10
 8003990:	633b      	str	r3, [r7, #48]	; 0x30
                cycles_div  =  1000u;
 8003992:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003996:	637b      	str	r3, [r7, #52]	; 0x34
 8003998:	e004      	b.n	80039a4 <OS_StatTask+0x1f8>
            } else {                                                                 /*  400,000,000 and up           */
                cycles_mult =     1u;
 800399a:	2301      	movs	r3, #1
 800399c:	633b      	str	r3, [r7, #48]	; 0x30
                cycles_div  = 10000u;
 800399e:	f242 7310 	movw	r3, #10000	; 0x2710
 80039a2:	637b      	str	r3, [r7, #52]	; 0x34
            }
            cycles_max  = cycles_total / cycles_div;
 80039a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039ae:	e003      	b.n	80039b8 <OS_StatTask+0x20c>
        } else {
            cycles_mult = 0u;
 80039b0:	2300      	movs	r3, #0
 80039b2:	633b      	str	r3, [r7, #48]	; 0x30
            cycles_max  = 1u;
 80039b4:	2301      	movs	r3, #1
 80039b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif
        CPU_CRITICAL_ENTER();
 80039b8:	f7fc fc92 	bl	80002e0 <CPU_SR_Save>
 80039bc:	61b8      	str	r0, [r7, #24]
        p_tcb = OSTaskDbgListPtr;
 80039be:	4b10      	ldr	r3, [pc, #64]	; (8003a00 <OS_StatTask+0x254>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	62bb      	str	r3, [r7, #40]	; 0x28
        CPU_CRITICAL_EXIT();
 80039c4:	69b8      	ldr	r0, [r7, #24]
 80039c6:	f7fc fc8f 	bl	80002e8 <CPU_SR_Restore>
        while (p_tcb != (OS_TCB *)0) {
 80039ca:	e050      	b.n	8003a6e <OS_StatTask+0x2c2>
 80039cc:	0800e9ec 	.word	0x0800e9ec
 80039d0:	2000209d 	.word	0x2000209d
 80039d4:	0800ea00 	.word	0x0800ea00
 80039d8:	cccccccd 	.word	0xcccccccd
 80039dc:	20001f14 	.word	0x20001f14
 80039e0:	20002384 	.word	0x20002384
 80039e4:	20002370 	.word	0x20002370
 80039e8:	00061a7f 	.word	0x00061a7f
 80039ec:	003d08ff 	.word	0x003d08ff
 80039f0:	026259ff 	.word	0x026259ff
 80039f4:	17d783ff 	.word	0x17d783ff
 80039f8:	2000219c 	.word	0x2000219c
 80039fc:	2000217a 	.word	0x2000217a
 8003a00:	20002188 	.word	0x20002188
#if OS_CFG_TASK_PROFILE_EN > 0u                             /* Compute execution time of each task                    */
            usage = (OS_CPU_USAGE)(cycles_mult * p_tcb->CyclesTotalPrev / cycles_max);
 8003a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a0c:	fb02 f203 	mul.w	r2, r2, r3
 8003a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a16:	87fb      	strh	r3, [r7, #62]	; 0x3e
            if (usage > 10000u) {
 8003a18:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003a1a:	f242 7210 	movw	r2, #10000	; 0x2710
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d902      	bls.n	8003a28 <OS_StatTask+0x27c>
                usage = 10000u;
 8003a22:	f242 7310 	movw	r3, #10000	; 0x2710
 8003a26:	87fb      	strh	r3, [r7, #62]	; 0x3e
            }
            p_tcb->CPUUsage = usage;
 8003a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8003a2c:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
            if (p_tcb->CPUUsageMax < usage) {               /* Detect peak CPU usage                                  */
 8003a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a32:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8003a36:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d903      	bls.n	8003a44 <OS_StatTask+0x298>
                p_tcb->CPUUsageMax = usage;
 8003a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8003a40:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
            }
#endif

#if OS_CFG_STAT_TASK_STK_CHK_EN > 0u
            OSTaskStkChk( p_tcb,                            /* Compute stack usage of active tasks only               */
 8003a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a46:	f103 01ac 	add.w	r1, r3, #172	; 0xac
 8003a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4c:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 8003a50:	f107 030a 	add.w	r3, r7, #10
 8003a54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a56:	f001 fb7f 	bl	8005158 <OSTaskStkChk>
                         &p_tcb->StkFree,
                         &p_tcb->StkUsed,
                         &err);
#endif

            CPU_CRITICAL_ENTER();
 8003a5a:	f7fc fc41 	bl	80002e0 <CPU_SR_Save>
 8003a5e:	61b8      	str	r0, [r7, #24]
            p_tcb = p_tcb->DbgNextPtr;
 8003a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a62:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003a66:	62bb      	str	r3, [r7, #40]	; 0x28
            CPU_CRITICAL_EXIT();
 8003a68:	69b8      	ldr	r0, [r7, #24]
 8003a6a:	f7fc fc3d 	bl	80002e8 <CPU_SR_Restore>
        while (p_tcb != (OS_TCB *)0) {
 8003a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1c7      	bne.n	8003a04 <OS_StatTask+0x258>
        }
#endif

        if (OSStatResetFlag == DEF_TRUE) {                  /* Check if need to reset statistics                      */
 8003a74:	4b10      	ldr	r3, [pc, #64]	; (8003ab8 <OS_StatTask+0x30c>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d107      	bne.n	8003a8c <OS_StatTask+0x2e0>
            OSStatResetFlag  = DEF_FALSE;
 8003a7c:	4b0e      	ldr	r3, [pc, #56]	; (8003ab8 <OS_StatTask+0x30c>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	701a      	strb	r2, [r3, #0]
            OSStatReset(&err);
 8003a82:	f107 030a 	add.w	r3, r7, #10
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7ff fd7a 	bl	8003580 <OSStatReset>
        }

        ts_end = OS_TS_GET() - ts_start;                    /* Measure execution time of statistic task               */
 8003a8c:	f002 fc04 	bl	8006298 <CPU_TS_TmrRd>
 8003a90:	4602      	mov	r2, r0
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	60fb      	str	r3, [r7, #12]
        if (OSStatTaskTimeMax < ts_end) {
 8003a98:	4b08      	ldr	r3, [pc, #32]	; (8003abc <OS_StatTask+0x310>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d902      	bls.n	8003aa8 <OS_StatTask+0x2fc>
            OSStatTaskTimeMax = ts_end;
 8003aa2:	4a06      	ldr	r2, [pc, #24]	; (8003abc <OS_StatTask+0x310>)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6013      	str	r3, [r2, #0]
        }

        OSTimeDly(dly,
 8003aa8:	f107 030a 	add.w	r3, r7, #10
 8003aac:	461a      	mov	r2, r3
 8003aae:	2100      	movs	r1, #0
 8003ab0:	69f8      	ldr	r0, [r7, #28]
 8003ab2:	f7ff fb4d 	bl	8003150 <OSTimeDly>
        ts_start        = OS_TS_GET();
 8003ab6:	e6ab      	b.n	8003810 <OS_StatTask+0x64>
 8003ab8:	20002398 	.word	0x20002398
 8003abc:	20001f10 	.word	0x20001f10

08003ac0 <OS_StatTaskInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_StatTaskInit (OS_ERR  *p_err)
{
 8003ac0:	b590      	push	{r4, r7, lr}
 8003ac2:	b08d      	sub	sp, #52	; 0x34
 8003ac4:	af0a      	add	r7, sp, #40	; 0x28
 8003ac6:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    OSStatTaskCtr    = (OS_TICK)0;
 8003ac8:	4b25      	ldr	r3, [pc, #148]	; (8003b60 <OS_StatTaskInit+0xa0>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	601a      	str	r2, [r3, #0]
    OSStatTaskCtrRun = (OS_TICK)0;
 8003ace:	4b25      	ldr	r3, [pc, #148]	; (8003b64 <OS_StatTaskInit+0xa4>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	601a      	str	r2, [r3, #0]
    OSStatTaskCtrMax = (OS_TICK)0;
 8003ad4:	4b24      	ldr	r3, [pc, #144]	; (8003b68 <OS_StatTaskInit+0xa8>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	601a      	str	r2, [r3, #0]
    OSStatTaskRdy    = OS_STATE_NOT_RDY;                    /* Statistic task is not ready                            */
 8003ada:	4b24      	ldr	r3, [pc, #144]	; (8003b6c <OS_StatTaskInit+0xac>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	701a      	strb	r2, [r3, #0]
    OSStatResetFlag  = DEF_FALSE;
 8003ae0:	4b23      	ldr	r3, [pc, #140]	; (8003b70 <OS_StatTaskInit+0xb0>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	701a      	strb	r2, [r3, #0]

                                                            /* ---------------- CREATE THE STAT TASK ---------------- */
    if (OSCfg_StatTaskStkBasePtr == (CPU_STK *)0) {
 8003ae6:	4b23      	ldr	r3, [pc, #140]	; (8003b74 <OS_StatTaskInit+0xb4>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d104      	bne.n	8003af8 <OS_StatTaskInit+0x38>
       *p_err = OS_ERR_STAT_STK_INVALID;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f646 622b 	movw	r2, #28203	; 0x6e2b
 8003af4:	801a      	strh	r2, [r3, #0]
        return;
 8003af6:	e02f      	b.n	8003b58 <OS_StatTaskInit+0x98>
    }

    if (OSCfg_StatTaskStkSize < OSCfg_StkSizeMin) {
 8003af8:	4b1f      	ldr	r3, [pc, #124]	; (8003b78 <OS_StatTaskInit+0xb8>)
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	4b1f      	ldr	r3, [pc, #124]	; (8003b7c <OS_StatTaskInit+0xbc>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d204      	bcs.n	8003b0e <OS_StatTaskInit+0x4e>
       *p_err = OS_ERR_STAT_STK_SIZE_INVALID;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f646 622c 	movw	r2, #28204	; 0x6e2c
 8003b0a:	801a      	strh	r2, [r3, #0]
        return;
 8003b0c:	e024      	b.n	8003b58 <OS_StatTaskInit+0x98>
    }

    if (OSCfg_StatTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {
 8003b0e:	4b1c      	ldr	r3, [pc, #112]	; (8003b80 <OS_StatTaskInit+0xc0>)
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	2b1e      	cmp	r3, #30
 8003b14:	d904      	bls.n	8003b20 <OS_StatTaskInit+0x60>
       *p_err = OS_ERR_STAT_PRIO_INVALID;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f646 622a 	movw	r2, #28202	; 0x6e2a
 8003b1c:	801a      	strh	r2, [r3, #0]
        return;
 8003b1e:	e01b      	b.n	8003b58 <OS_StatTaskInit+0x98>
    }

    OSTaskCreate((OS_TCB     *)&OSStatTaskTCB,
 8003b20:	4b17      	ldr	r3, [pc, #92]	; (8003b80 <OS_StatTaskInit+0xc0>)
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	4a13      	ldr	r2, [pc, #76]	; (8003b74 <OS_StatTaskInit+0xb4>)
 8003b26:	6812      	ldr	r2, [r2, #0]
 8003b28:	4916      	ldr	r1, [pc, #88]	; (8003b84 <OS_StatTaskInit+0xc4>)
 8003b2a:	6809      	ldr	r1, [r1, #0]
 8003b2c:	4812      	ldr	r0, [pc, #72]	; (8003b78 <OS_StatTaskInit+0xb8>)
 8003b2e:	6800      	ldr	r0, [r0, #0]
 8003b30:	687c      	ldr	r4, [r7, #4]
 8003b32:	9408      	str	r4, [sp, #32]
 8003b34:	2403      	movs	r4, #3
 8003b36:	9407      	str	r4, [sp, #28]
 8003b38:	2400      	movs	r4, #0
 8003b3a:	9406      	str	r4, [sp, #24]
 8003b3c:	2400      	movs	r4, #0
 8003b3e:	9405      	str	r4, [sp, #20]
 8003b40:	2400      	movs	r4, #0
 8003b42:	9404      	str	r4, [sp, #16]
 8003b44:	9003      	str	r0, [sp, #12]
 8003b46:	9102      	str	r1, [sp, #8]
 8003b48:	9201      	str	r2, [sp, #4]
 8003b4a:	9300      	str	r3, [sp, #0]
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	4a0e      	ldr	r2, [pc, #56]	; (8003b88 <OS_StatTaskInit+0xc8>)
 8003b50:	490e      	ldr	r1, [pc, #56]	; (8003b8c <OS_StatTaskInit+0xcc>)
 8003b52:	480f      	ldr	r0, [pc, #60]	; (8003b90 <OS_StatTaskInit+0xd0>)
 8003b54:	f001 f8bc 	bl	8004cd0 <OSTaskCreate>
                 (OS_MSG_QTY  )0,
                 (OS_TICK     )0,
                 (void       *)0,
                 (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
                 (OS_ERR     *)p_err);
}
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd90      	pop	{r4, r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	20001f14 	.word	0x20001f14
 8003b64:	20002384 	.word	0x20002384
 8003b68:	20002370 	.word	0x20002370
 8003b6c:	2000209d 	.word	0x2000209d
 8003b70:	20002398 	.word	0x20002398
 8003b74:	0800e9f0 	.word	0x0800e9f0
 8003b78:	0800e9f8 	.word	0x0800e9f8
 8003b7c:	0800e9fc 	.word	0x0800e9fc
 8003b80:	0800e9e8 	.word	0x0800e9e8
 8003b84:	0800e9f4 	.word	0x0800e9f4
 8003b88:	080037ad 	.word	0x080037ad
 8003b8c:	0800e7b4 	.word	0x0800e7b4
 8003b90:	200023a0 	.word	0x200023a0

08003b94 <OS_FlagInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_FlagInit (OS_ERR  *p_err)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSFlagDbgListPtr = (OS_FLAG_GRP *)0;
 8003b9c:	4b06      	ldr	r3, [pc, #24]	; (8003bb8 <OS_FlagInit+0x24>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	601a      	str	r2, [r3, #0]
#endif

    OSFlagQty        = (OS_OBJ_QTY   )0;
 8003ba2:	4b06      	ldr	r3, [pc, #24]	; (8003bbc <OS_FlagInit+0x28>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	801a      	strh	r2, [r3, #0]
   *p_err            = OS_ERR_NONE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	801a      	strh	r2, [r3, #0]
}
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bc80      	pop	{r7}
 8003bb6:	4770      	bx	lr
 8003bb8:	20002390 	.word	0x20002390
 8003bbc:	2000238c 	.word	0x2000238c

08003bc0 <OSInit>:
* Returns    : none
************************************************************************************************************************
*/

void  OSInit (OS_ERR  *p_err)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    OSInitHook();                                           /* Call port specific initialization code                 */
 8003bc8:	f002 f92c 	bl	8005e24 <OSInitHook>

    OSIntNestingCtr                 = (OS_NESTING_CTR)0;    /* Clear the interrupt nesting counter                    */
 8003bcc:	4b60      	ldr	r3, [pc, #384]	; (8003d50 <OSInit+0x190>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	701a      	strb	r2, [r3, #0]

    OSRunning                       =  OS_STATE_OS_STOPPED; /* Indicate that multitasking not started                 */
 8003bd2:	4b60      	ldr	r3, [pc, #384]	; (8003d54 <OSInit+0x194>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	701a      	strb	r2, [r3, #0]

    OSSchedLockNestingCtr           = (OS_NESTING_CTR)0;    /* Clear the scheduling lock counter                      */
 8003bd8:	4b5f      	ldr	r3, [pc, #380]	; (8003d58 <OSInit+0x198>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	701a      	strb	r2, [r3, #0]

    OSTCBCurPtr                     = (OS_TCB *)0;          /* Initialize OS_TCB pointers to a known state            */
 8003bde:	4b5f      	ldr	r3, [pc, #380]	; (8003d5c <OSInit+0x19c>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]
    OSTCBHighRdyPtr                 = (OS_TCB *)0;
 8003be4:	4b5e      	ldr	r3, [pc, #376]	; (8003d60 <OSInit+0x1a0>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	601a      	str	r2, [r3, #0]

    OSPrioCur                       = (OS_PRIO)0;           /* Initialize priority variables to a known state         */
 8003bea:	4b5e      	ldr	r3, [pc, #376]	; (8003d64 <OSInit+0x1a4>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	701a      	strb	r2, [r3, #0]
    OSPrioHighRdy                   = (OS_PRIO)0;
 8003bf0:	4b5d      	ldr	r3, [pc, #372]	; (8003d68 <OSInit+0x1a8>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	701a      	strb	r2, [r3, #0]
    OSPrioSaved                     = (OS_PRIO)0;
 8003bf6:	4b5d      	ldr	r3, [pc, #372]	; (8003d6c <OSInit+0x1ac>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	701a      	strb	r2, [r3, #0]

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
    OSSchedLockTimeBegin            = (CPU_TS)0;
 8003bfc:	4b5c      	ldr	r3, [pc, #368]	; (8003d70 <OSInit+0x1b0>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	601a      	str	r2, [r3, #0]
    OSSchedLockTimeMax              = (CPU_TS)0;
 8003c02:	4b5c      	ldr	r3, [pc, #368]	; (8003d74 <OSInit+0x1b4>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]
    OSSchedLockTimeMaxCur           = (CPU_TS)0;
 8003c08:	4b5b      	ldr	r3, [pc, #364]	; (8003d78 <OSInit+0x1b8>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	601a      	str	r2, [r3, #0]
#if OS_CFG_SCHED_ROUND_ROBIN_EN > 0u
    OSSchedRoundRobinEn             = DEF_FALSE;
    OSSchedRoundRobinDfltTimeQuanta = OSCfg_TickRate_Hz / 10u;
#endif

    if (OSCfg_ISRStkSize > (CPU_STK_SIZE)0) {
 8003c0e:	4b5b      	ldr	r3, [pc, #364]	; (8003d7c <OSInit+0x1bc>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d015      	beq.n	8003c42 <OSInit+0x82>
        p_stk = OSCfg_ISRStkBasePtr;                        /* Clear exception stack for stack checking.              */
 8003c16:	4b5a      	ldr	r3, [pc, #360]	; (8003d80 <OSInit+0x1c0>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	60fb      	str	r3, [r7, #12]
        if (p_stk != (CPU_STK *)0) {
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00f      	beq.n	8003c42 <OSInit+0x82>
            size  = OSCfg_ISRStkSize;
 8003c22:	4b56      	ldr	r3, [pc, #344]	; (8003d7c <OSInit+0x1bc>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	60bb      	str	r3, [r7, #8]
            while (size > (CPU_STK_SIZE)0) {
 8003c28:	e008      	b.n	8003c3c <OSInit+0x7c>
                size--;
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	60bb      	str	r3, [r7, #8]
               *p_stk = (CPU_STK)0;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	601a      	str	r2, [r3, #0]
                p_stk++;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	3304      	adds	r3, #4
 8003c3a:	60fb      	str	r3, [r7, #12]
            while (size > (CPU_STK_SIZE)0) {
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1f3      	bne.n	8003c2a <OSInit+0x6a>
            }
        }
    }

#if OS_CFG_APP_HOOKS_EN > 0u
    OS_AppTaskCreateHookPtr = (OS_APP_HOOK_TCB )0;          /* Clear application hook pointers                        */
 8003c42:	4b50      	ldr	r3, [pc, #320]	; (8003d84 <OSInit+0x1c4>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	601a      	str	r2, [r3, #0]
    OS_AppTaskDelHookPtr    = (OS_APP_HOOK_TCB )0;
 8003c48:	4b4f      	ldr	r3, [pc, #316]	; (8003d88 <OSInit+0x1c8>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	601a      	str	r2, [r3, #0]
    OS_AppTaskReturnHookPtr = (OS_APP_HOOK_TCB )0;
 8003c4e:	4b4f      	ldr	r3, [pc, #316]	; (8003d8c <OSInit+0x1cc>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	601a      	str	r2, [r3, #0]

    OS_AppIdleTaskHookPtr   = (OS_APP_HOOK_VOID)0;
 8003c54:	4b4e      	ldr	r3, [pc, #312]	; (8003d90 <OSInit+0x1d0>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	601a      	str	r2, [r3, #0]
    OS_AppStatTaskHookPtr   = (OS_APP_HOOK_VOID)0;
 8003c5a:	4b4e      	ldr	r3, [pc, #312]	; (8003d94 <OSInit+0x1d4>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	601a      	str	r2, [r3, #0]
    OS_AppTaskSwHookPtr     = (OS_APP_HOOK_VOID)0;
 8003c60:	4b4d      	ldr	r3, [pc, #308]	; (8003d98 <OSInit+0x1d8>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	601a      	str	r2, [r3, #0]
    OS_AppTimeTickHookPtr   = (OS_APP_HOOK_VOID)0;
 8003c66:	4b4d      	ldr	r3, [pc, #308]	; (8003d9c <OSInit+0x1dc>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]
#endif

#if OS_CFG_TASK_REG_TBL_SIZE > 0u
    OSTaskRegNextAvailID    = (OS_REG_ID)0;
 8003c6c:	4b4c      	ldr	r3, [pc, #304]	; (8003da0 <OSInit+0x1e0>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	701a      	strb	r2, [r3, #0]
#endif

    OS_PrioInit();                                          /* Initialize the priority bitmap table                   */
 8003c72:	f7ff fbfb 	bl	800346c <OS_PrioInit>

    OS_RdyListInit();                                       /* Initialize the Ready List                              */
 8003c76:	f000 fd4f 	bl	8004718 <OS_RdyListInit>

    
#if OS_CFG_FLAG_EN > 0u                                     /* Initialize the Event Flag module                       */
    OS_FlagInit(p_err);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7ff ff8a 	bl	8003b94 <OS_FlagInit>
    if (*p_err != OS_ERR_NONE) {
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	881b      	ldrh	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d14a      	bne.n	8003d1e <OSInit+0x15e>
    }
#endif


#if OS_CFG_MEM_EN > 0u                                      /* Initialize the Memory Manager module                   */
    OS_MemInit(p_err);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f7fe fb19 	bl	80022c0 <OS_MemInit>
    if (*p_err != OS_ERR_NONE) {
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	881b      	ldrh	r3, [r3, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d145      	bne.n	8003d22 <OSInit+0x162>
    }
#endif


#if (OS_MSG_EN) > 0u                                        /* Initialize the free list of OS_MSGs                    */
    OS_MsgPoolInit(p_err);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 feb4 	bl	8004a04 <OS_MsgPoolInit>
    if (*p_err != OS_ERR_NONE) {
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	881b      	ldrh	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d140      	bne.n	8003d26 <OSInit+0x166>
    }
#endif


#if OS_CFG_MUTEX_EN > 0u                                    /* Initialize the Mutex Manager module                    */
    OS_MutexInit(p_err);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f7fe fe93 	bl	80029d0 <OS_MutexInit>
    if (*p_err != OS_ERR_NONE) {
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	881b      	ldrh	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d13b      	bne.n	8003d2a <OSInit+0x16a>
    }
#endif


#if OS_CFG_Q_EN > 0u
    OS_QInit(p_err);                                        /* Initialize the Message Queue Manager module            */
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f002 f82a 	bl	8005d0c <OS_QInit>
    if (*p_err != OS_ERR_NONE) {
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	881b      	ldrh	r3, [r3, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d136      	bne.n	8003d2e <OSInit+0x16e>
    }
#endif


#if OS_CFG_SEM_EN > 0u                                      /* Initialize the Semaphore Manager module                */
    OS_SemInit(p_err);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7fe fef3 	bl	8002aac <OS_SemInit>
    if (*p_err != OS_ERR_NONE) {
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	881b      	ldrh	r3, [r3, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d131      	bne.n	8003d32 <OSInit+0x172>
        return;
    }
#endif


    OS_TaskInit(p_err);                                     /* Initialize the task manager                            */
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f001 fb02 	bl	80052d8 <OS_TaskInit>
    if (*p_err != OS_ERR_NONE) {
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	881b      	ldrh	r3, [r3, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d12c      	bne.n	8003d36 <OSInit+0x176>
        return;
    }
#endif

    
    OS_IdleTaskInit(p_err);                                 /* Initialize the Idle Task                               */
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 fa21 	bl	8004124 <OS_IdleTaskInit>
    if (*p_err != OS_ERR_NONE) {
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	881b      	ldrh	r3, [r3, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d127      	bne.n	8003d3a <OSInit+0x17a>
        return;
    }


    OS_TickTaskInit(p_err);                                 /* Initialize the Tick Task                               */
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7fe ff2c 	bl	8002b48 <OS_TickTaskInit>
    if (*p_err != OS_ERR_NONE) {
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	881b      	ldrh	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d122      	bne.n	8003d3e <OSInit+0x17e>
        return;
    }


#if OS_CFG_STAT_TASK_EN > 0u                                /* Initialize the Statistic Task                          */
    OS_StatTaskInit(p_err);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f7ff fee1 	bl	8003ac0 <OS_StatTaskInit>
    if (*p_err != OS_ERR_NONE) {
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	881b      	ldrh	r3, [r3, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d11d      	bne.n	8003d42 <OSInit+0x182>
    }
#endif


#if OS_CFG_TMR_EN > 0u                                      /* Initialize the Timer Manager module                    */
    OS_TmrInit(p_err);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7fe f846 	bl	8001d98 <OS_TmrInit>
    if (*p_err != OS_ERR_NONE) {
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	881b      	ldrh	r3, [r3, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d118      	bne.n	8003d46 <OSInit+0x186>
    }
#endif


#if OS_CFG_DBG_EN > 0u
    OS_Dbg_Init();
 8003d14:	f7fe faea 	bl	80022ec <OS_Dbg_Init>
#endif


    OSCfg_Init();
 8003d18:	f7fe fede 	bl	8002ad8 <OSCfg_Init>
 8003d1c:	e014      	b.n	8003d48 <OSInit+0x188>
        return;
 8003d1e:	bf00      	nop
 8003d20:	e012      	b.n	8003d48 <OSInit+0x188>
        return;
 8003d22:	bf00      	nop
 8003d24:	e010      	b.n	8003d48 <OSInit+0x188>
        return;
 8003d26:	bf00      	nop
 8003d28:	e00e      	b.n	8003d48 <OSInit+0x188>
        return;
 8003d2a:	bf00      	nop
 8003d2c:	e00c      	b.n	8003d48 <OSInit+0x188>
        return;
 8003d2e:	bf00      	nop
 8003d30:	e00a      	b.n	8003d48 <OSInit+0x188>
        return;
 8003d32:	bf00      	nop
 8003d34:	e008      	b.n	8003d48 <OSInit+0x188>
        return;
 8003d36:	bf00      	nop
 8003d38:	e006      	b.n	8003d48 <OSInit+0x188>
        return;
 8003d3a:	bf00      	nop
 8003d3c:	e004      	b.n	8003d48 <OSInit+0x188>
        return;
 8003d3e:	bf00      	nop
 8003d40:	e002      	b.n	8003d48 <OSInit+0x188>
        return;
 8003d42:	bf00      	nop
 8003d44:	e000      	b.n	8003d48 <OSInit+0x188>
        return;
 8003d46:	bf00      	nop
}
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	2000219e 	.word	0x2000219e
 8003d54:	20001f19 	.word	0x20001f19
 8003d58:	20001f08 	.word	0x20001f08
 8003d5c:	20002174 	.word	0x20002174
 8003d60:	20002180 	.word	0x20002180
 8003d64:	200020a8 	.word	0x200020a8
 8003d68:	2000209c 	.word	0x2000209c
 8003d6c:	2000217c 	.word	0x2000217c
 8003d70:	20002170 	.word	0x20002170
 8003d74:	20002394 	.word	0x20002394
 8003d78:	20002184 	.word	0x20002184
 8003d7c:	0800e9dc 	.word	0x0800e9dc
 8003d80:	0800e9d8 	.word	0x0800e9d8
 8003d84:	200020a4 	.word	0x200020a4
 8003d88:	20002190 	.word	0x20002190
 8003d8c:	20001f0c 	.word	0x20001f0c
 8003d90:	2000236c 	.word	0x2000236c
 8003d94:	20002388 	.word	0x20002388
 8003d98:	20002378 	.word	0x20002378
 8003d9c:	20002194 	.word	0x20002194
 8003da0:	20001f18 	.word	0x20001f18

08003da4 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 250 levels deep.
************************************************************************************************************************
*/

void  OSIntEnter (void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Is OS running?                                         */
 8003da8:	4b0a      	ldr	r3, [pc, #40]	; (8003dd4 <OSIntEnter+0x30>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d10a      	bne.n	8003dc6 <OSIntEnter+0x22>
        return;                                             /* No                                                     */
    }

    if (OSIntNestingCtr >= (OS_NESTING_CTR)250u) {          /* Have we nested past 250 levels?                        */
 8003db0:	4b09      	ldr	r3, [pc, #36]	; (8003dd8 <OSIntEnter+0x34>)
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	2bf9      	cmp	r3, #249	; 0xf9
 8003db6:	d808      	bhi.n	8003dca <OSIntEnter+0x26>
        return;                                             /* Yes                                                    */
    }

    OSIntNestingCtr++;                                      /* Increment ISR nesting level                            */
 8003db8:	4b07      	ldr	r3, [pc, #28]	; (8003dd8 <OSIntEnter+0x34>)
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	4b05      	ldr	r3, [pc, #20]	; (8003dd8 <OSIntEnter+0x34>)
 8003dc2:	701a      	strb	r2, [r3, #0]
 8003dc4:	e002      	b.n	8003dcc <OSIntEnter+0x28>
        return;                                             /* No                                                     */
 8003dc6:	bf00      	nop
 8003dc8:	e000      	b.n	8003dcc <OSIntEnter+0x28>
        return;                                             /* Yes                                                    */
 8003dca:	bf00      	nop
}
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bc80      	pop	{r7}
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	20001f19 	.word	0x20001f19
 8003dd8:	2000219e 	.word	0x2000219e

08003ddc <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OSSchedLock())
************************************************************************************************************************
*/

void  OSIntExit (void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
 8003de2:	2300      	movs	r3, #0
 8003de4:	607b      	str	r3, [r7, #4]



    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Has the OS started?                                    */
 8003de6:	4b2b      	ldr	r3, [pc, #172]	; (8003e94 <OSIntExit+0xb8>)
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d14e      	bne.n	8003e8c <OSIntExit+0xb0>
        return;                                             /* No                                                     */
    }

    CPU_INT_DIS();
 8003dee:	f7fc fa77 	bl	80002e0 <CPU_SR_Save>
 8003df2:	6078      	str	r0, [r7, #4]
    if (OSIntNestingCtr == (OS_NESTING_CTR)0) {             /* Prevent OSIntNestingCtr from wrapping                  */
 8003df4:	4b28      	ldr	r3, [pc, #160]	; (8003e98 <OSIntExit+0xbc>)
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d103      	bne.n	8003e04 <OSIntExit+0x28>
        CPU_INT_EN();
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7fc fa73 	bl	80002e8 <CPU_SR_Restore>
        return;
 8003e02:	e044      	b.n	8003e8e <OSIntExit+0xb2>
    }
    OSIntNestingCtr--;
 8003e04:	4b24      	ldr	r3, [pc, #144]	; (8003e98 <OSIntExit+0xbc>)
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	4b22      	ldr	r3, [pc, #136]	; (8003e98 <OSIntExit+0xbc>)
 8003e0e:	701a      	strb	r2, [r3, #0]
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* ISRs still nested?                                     */
 8003e10:	4b21      	ldr	r3, [pc, #132]	; (8003e98 <OSIntExit+0xbc>)
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <OSIntExit+0x44>
        CPU_INT_EN();                                       /* Yes                                                    */
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f7fc fa65 	bl	80002e8 <CPU_SR_Restore>
        return;
 8003e1e:	e036      	b.n	8003e8e <OSIntExit+0xb2>
    }

    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {        /* Scheduler still locked?                                */
 8003e20:	4b1e      	ldr	r3, [pc, #120]	; (8003e9c <OSIntExit+0xc0>)
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d003      	beq.n	8003e30 <OSIntExit+0x54>
        CPU_INT_EN();                                       /* Yes                                                    */
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f7fc fa5d 	bl	80002e8 <CPU_SR_Restore>
        return;
 8003e2e:	e02e      	b.n	8003e8e <OSIntExit+0xb2>
    }

    OSPrioHighRdy   = OS_PrioGetHighest();                  /* Find highest priority                                  */
 8003e30:	f7ff fb34 	bl	800349c <OS_PrioGetHighest>
 8003e34:	4603      	mov	r3, r0
 8003e36:	461a      	mov	r2, r3
 8003e38:	4b19      	ldr	r3, [pc, #100]	; (8003ea0 <OSIntExit+0xc4>)
 8003e3a:	701a      	strb	r2, [r3, #0]
    OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;     /* Get highest priority task ready-to-run                 */
 8003e3c:	4b18      	ldr	r3, [pc, #96]	; (8003ea0 <OSIntExit+0xc4>)
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	4619      	mov	r1, r3
 8003e42:	4a18      	ldr	r2, [pc, #96]	; (8003ea4 <OSIntExit+0xc8>)
 8003e44:	460b      	mov	r3, r1
 8003e46:	005b      	lsls	r3, r3, #1
 8003e48:	440b      	add	r3, r1
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4413      	add	r3, r2
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a15      	ldr	r2, [pc, #84]	; (8003ea8 <OSIntExit+0xcc>)
 8003e52:	6013      	str	r3, [r2, #0]
    if (OSTCBHighRdyPtr == OSTCBCurPtr) {                   /* Current task still the highest priority?               */
 8003e54:	4b14      	ldr	r3, [pc, #80]	; (8003ea8 <OSIntExit+0xcc>)
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	4b14      	ldr	r3, [pc, #80]	; (8003eac <OSIntExit+0xd0>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d103      	bne.n	8003e68 <OSIntExit+0x8c>
        CPU_INT_EN();                                       /* Yes                                                    */
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f7fc fa41 	bl	80002e8 <CPU_SR_Restore>
        return;
 8003e66:	e012      	b.n	8003e8e <OSIntExit+0xb2>
    }

#if OS_CFG_TASK_PROFILE_EN > 0u
    OSTCBHighRdyPtr->CtxSwCtr++;                            /* Inc. # of context switches for this new task           */
 8003e68:	4b0f      	ldr	r3, [pc, #60]	; (8003ea8 <OSIntExit+0xcc>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003e70:	3201      	adds	r2, #1
 8003e72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#endif
    OSTaskCtxSwCtr++;                                       /* Keep track of the total number of ctx switches         */
 8003e76:	4b0e      	ldr	r3, [pc, #56]	; (8003eb0 <OSIntExit+0xd4>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	4a0c      	ldr	r2, [pc, #48]	; (8003eb0 <OSIntExit+0xd4>)
 8003e7e:	6013      	str	r3, [r2, #0]

#if defined(OS_CFG_TLS_TBL_SIZE) && (OS_CFG_TLS_TBL_SIZE > 0u)
    OS_TLS_TaskSw();
#endif

    OSIntCtxSw();                                           /* Perform interrupt level ctx switch                     */
 8003e80:	f7fc f9fb 	bl	800027a <OSIntCtxSw>

    CPU_INT_EN();
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f7fc fa2f 	bl	80002e8 <CPU_SR_Restore>
 8003e8a:	e000      	b.n	8003e8e <OSIntExit+0xb2>
        return;                                             /* No                                                     */
 8003e8c:	bf00      	nop
}
 8003e8e:	3708      	adds	r7, #8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	20001f19 	.word	0x20001f19
 8003e98:	2000219e 	.word	0x2000219e
 8003e9c:	20001f08 	.word	0x20001f08
 8003ea0:	2000209c 	.word	0x2000209c
 8003ea4:	20001f1c 	.word	0x20001f1c
 8003ea8:	20002180 	.word	0x20002180
 8003eac:	20002174 	.word	0x20002174
 8003eb0:	20002198 	.word	0x20002198

08003eb4 <OSSched>:
* Note(s)    : 1) Rescheduling is prevented when the scheduler is locked (see OSSchedLock())
************************************************************************************************************************
*/

void  OSSched (void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
 8003eba:	2300      	movs	r3, #0
 8003ebc:	607b      	str	r3, [r7, #4]



    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* ISRs still nested?                                     */
 8003ebe:	4b20      	ldr	r3, [pc, #128]	; (8003f40 <OSSched+0x8c>)
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d136      	bne.n	8003f34 <OSSched+0x80>
        return;                                             /* Yes ... only schedule when no nested ISRs              */
    }

    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {        /* Scheduler locked?                                      */
 8003ec6:	4b1f      	ldr	r3, [pc, #124]	; (8003f44 <OSSched+0x90>)
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d134      	bne.n	8003f38 <OSSched+0x84>
        return;                                             /* Yes                                                    */
    }

    CPU_INT_DIS();
 8003ece:	f7fc fa07 	bl	80002e0 <CPU_SR_Save>
 8003ed2:	6078      	str	r0, [r7, #4]
    OSPrioHighRdy   = OS_PrioGetHighest();                  /* Find the highest priority ready                        */
 8003ed4:	f7ff fae2 	bl	800349c <OS_PrioGetHighest>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	461a      	mov	r2, r3
 8003edc:	4b1a      	ldr	r3, [pc, #104]	; (8003f48 <OSSched+0x94>)
 8003ede:	701a      	strb	r2, [r3, #0]
    OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;
 8003ee0:	4b19      	ldr	r3, [pc, #100]	; (8003f48 <OSSched+0x94>)
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	4a19      	ldr	r2, [pc, #100]	; (8003f4c <OSSched+0x98>)
 8003ee8:	460b      	mov	r3, r1
 8003eea:	005b      	lsls	r3, r3, #1
 8003eec:	440b      	add	r3, r1
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4413      	add	r3, r2
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a16      	ldr	r2, [pc, #88]	; (8003f50 <OSSched+0x9c>)
 8003ef6:	6013      	str	r3, [r2, #0]
    if (OSTCBHighRdyPtr == OSTCBCurPtr) {                   /* Current task is still highest priority task?           */
 8003ef8:	4b15      	ldr	r3, [pc, #84]	; (8003f50 <OSSched+0x9c>)
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	4b15      	ldr	r3, [pc, #84]	; (8003f54 <OSSched+0xa0>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d103      	bne.n	8003f0c <OSSched+0x58>
        CPU_INT_EN();                                       /* Yes ... no need to context switch                      */
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f7fc f9ef 	bl	80002e8 <CPU_SR_Restore>
        return;
 8003f0a:	e016      	b.n	8003f3a <OSSched+0x86>
    }

#if OS_CFG_TASK_PROFILE_EN > 0u
    OSTCBHighRdyPtr->CtxSwCtr++;                            /* Inc. # of context switches to this task                */
 8003f0c:	4b10      	ldr	r3, [pc, #64]	; (8003f50 <OSSched+0x9c>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003f14:	3201      	adds	r2, #1
 8003f16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#endif
    OSTaskCtxSwCtr++;                                       /* Increment context switch counter                       */
 8003f1a:	4b0f      	ldr	r3, [pc, #60]	; (8003f58 <OSSched+0xa4>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	3301      	adds	r3, #1
 8003f20:	4a0d      	ldr	r2, [pc, #52]	; (8003f58 <OSSched+0xa4>)
 8003f22:	6013      	str	r3, [r2, #0]

#if defined(OS_CFG_TLS_TBL_SIZE) && (OS_CFG_TLS_TBL_SIZE > 0u)
    OS_TLS_TaskSw();
#endif

    OS_TASK_SW();                                           /* Perform a task level context switch                    */
 8003f24:	f7fc f9a4 	bl	8000270 <OSCtxSw>
    CPU_INT_EN();
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7fc f9dd 	bl	80002e8 <CPU_SR_Restore>

#ifdef OS_TASK_SW_SYNC
    OS_TASK_SW_SYNC();
 8003f2e:	f3bf 8f6f 	isb	sy
 8003f32:	e002      	b.n	8003f3a <OSSched+0x86>
        return;                                             /* Yes ... only schedule when no nested ISRs              */
 8003f34:	bf00      	nop
 8003f36:	e000      	b.n	8003f3a <OSSched+0x86>
        return;                                             /* Yes                                                    */
 8003f38:	bf00      	nop
#endif
}
 8003f3a:	3708      	adds	r7, #8
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	2000219e 	.word	0x2000219e
 8003f44:	20001f08 	.word	0x20001f08
 8003f48:	2000209c 	.word	0x2000209c
 8003f4c:	20001f1c 	.word	0x20001f1c
 8003f50:	20002180 	.word	0x20002180
 8003f54:	20002174 	.word	0x20002174
 8003f58:	20002198 	.word	0x20002198

08003f5c <OSSchedLock>:
*                 call to OSSchedLock() you MUST have a call to OSSchedUnlock().
************************************************************************************************************************
*/

void  OSSchedLock (OS_ERR  *p_err)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
    CPU_SR_ALLOC();
 8003f64:	2300      	movs	r3, #0
 8003f66:	60fb      	str	r3, [r7, #12]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 8003f68:	4b17      	ldr	r3, [pc, #92]	; (8003fc8 <OSSchedLock+0x6c>)
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d004      	beq.n	8003f7a <OSSchedLock+0x1e>
       *p_err = OS_ERR_SCHED_LOCK_ISR;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f646 5262 	movw	r2, #28002	; 0x6d62
 8003f76:	801a      	strh	r2, [r3, #0]
        return;
 8003f78:	e022      	b.n	8003fc0 <OSSchedLock+0x64>
    }
#endif

    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Make sure multitasking is running                      */
 8003f7a:	4b14      	ldr	r3, [pc, #80]	; (8003fcc <OSSchedLock+0x70>)
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d004      	beq.n	8003f8c <OSSchedLock+0x30>
       *p_err = OS_ERR_OS_NOT_RUNNING;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f645 6289 	movw	r2, #24201	; 0x5e89
 8003f88:	801a      	strh	r2, [r3, #0]
        return;
 8003f8a:	e019      	b.n	8003fc0 <OSSchedLock+0x64>
    }

    if (OSSchedLockNestingCtr >= (OS_NESTING_CTR)250u) {    /* Prevent OSSchedLockNestingCtr overflowing              */
 8003f8c:	4b10      	ldr	r3, [pc, #64]	; (8003fd0 <OSSchedLock+0x74>)
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	2bf9      	cmp	r3, #249	; 0xf9
 8003f92:	d904      	bls.n	8003f9e <OSSchedLock+0x42>
       *p_err = OS_ERR_LOCK_NESTING_OVF;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f245 2209 	movw	r2, #21001	; 0x5209
 8003f9a:	801a      	strh	r2, [r3, #0]
        return;
 8003f9c:	e010      	b.n	8003fc0 <OSSchedLock+0x64>
    }

    CPU_CRITICAL_ENTER();
 8003f9e:	f7fc f99f 	bl	80002e0 <CPU_SR_Save>
 8003fa2:	60f8      	str	r0, [r7, #12]
    OSSchedLockNestingCtr++;                                /* Increment lock nesting level                           */
 8003fa4:	4b0a      	ldr	r3, [pc, #40]	; (8003fd0 <OSSchedLock+0x74>)
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	b2da      	uxtb	r2, r3
 8003fac:	4b08      	ldr	r3, [pc, #32]	; (8003fd0 <OSSchedLock+0x74>)
 8003fae:	701a      	strb	r2, [r3, #0]
#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
    OS_SchedLockTimeMeasStart();
 8003fb0:	f000 fccc 	bl	800494c <OS_SchedLockTimeMeasStart>
#endif
    CPU_CRITICAL_EXIT();
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f7fc f997 	bl	80002e8 <CPU_SR_Restore>
   *p_err = OS_ERR_NONE;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	801a      	strh	r2, [r3, #0]
}
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	2000219e 	.word	0x2000219e
 8003fcc:	20001f19 	.word	0x20001f19
 8003fd0:	20001f08 	.word	0x20001f08

08003fd4 <OSSchedUnlock>:
*                 OSSchedLock() you MUST have a call to OSSchedUnlock().
************************************************************************************************************************
*/

void  OSSchedUnlock (OS_ERR  *p_err)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
    CPU_SR_ALLOC();
 8003fdc:	2300      	movs	r3, #0
 8003fde:	60fb      	str	r3, [r7, #12]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 8003fe0:	4b1e      	ldr	r3, [pc, #120]	; (800405c <OSSchedUnlock+0x88>)
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d004      	beq.n	8003ff2 <OSSchedUnlock+0x1e>
       *p_err = OS_ERR_SCHED_UNLOCK_ISR;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f646 5265 	movw	r2, #28005	; 0x6d65
 8003fee:	801a      	strh	r2, [r3, #0]
        return;
 8003ff0:	e030      	b.n	8004054 <OSSchedUnlock+0x80>
    }
#endif

    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Make sure multitasking is running                      */
 8003ff2:	4b1b      	ldr	r3, [pc, #108]	; (8004060 <OSSchedUnlock+0x8c>)
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d004      	beq.n	8004004 <OSSchedUnlock+0x30>
       *p_err = OS_ERR_OS_NOT_RUNNING;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f645 6289 	movw	r2, #24201	; 0x5e89
 8004000:	801a      	strh	r2, [r3, #0]
        return;
 8004002:	e027      	b.n	8004054 <OSSchedUnlock+0x80>
    }

    if (OSSchedLockNestingCtr == (OS_NESTING_CTR)0) {       /* See if the scheduler is locked                         */
 8004004:	4b17      	ldr	r3, [pc, #92]	; (8004064 <OSSchedUnlock+0x90>)
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d104      	bne.n	8004016 <OSSchedUnlock+0x42>
       *p_err = OS_ERR_SCHED_NOT_LOCKED;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f646 5264 	movw	r2, #28004	; 0x6d64
 8004012:	801a      	strh	r2, [r3, #0]
        return;
 8004014:	e01e      	b.n	8004054 <OSSchedUnlock+0x80>
    }

    CPU_CRITICAL_ENTER();
 8004016:	f7fc f963 	bl	80002e0 <CPU_SR_Save>
 800401a:	60f8      	str	r0, [r7, #12]
    OSSchedLockNestingCtr--;                                /* Decrement lock nesting level                           */
 800401c:	4b11      	ldr	r3, [pc, #68]	; (8004064 <OSSchedUnlock+0x90>)
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	3b01      	subs	r3, #1
 8004022:	b2da      	uxtb	r2, r3
 8004024:	4b0f      	ldr	r3, [pc, #60]	; (8004064 <OSSchedUnlock+0x90>)
 8004026:	701a      	strb	r2, [r3, #0]
    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {
 8004028:	4b0e      	ldr	r3, [pc, #56]	; (8004064 <OSSchedUnlock+0x90>)
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d007      	beq.n	8004040 <OSSchedUnlock+0x6c>
        CPU_CRITICAL_EXIT();                                /* Scheduler is still locked                              */
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f7fc f959 	bl	80002e8 <CPU_SR_Restore>
       *p_err = OS_ERR_SCHED_LOCKED;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f646 5263 	movw	r2, #28003	; 0x6d63
 800403c:	801a      	strh	r2, [r3, #0]
        return;
 800403e:	e009      	b.n	8004054 <OSSchedUnlock+0x80>
    }

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
    OS_SchedLockTimeMeasStop();
 8004040:	f000 fc96 	bl	8004970 <OS_SchedLockTimeMeasStop>
#endif

    CPU_CRITICAL_EXIT();                                    /* Scheduler should be re-enabled                         */
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f7fc f94f 	bl	80002e8 <CPU_SR_Restore>
    OSSched();                                              /* Run the scheduler                                      */
 800404a:	f7ff ff33 	bl	8003eb4 <OSSched>
   *p_err = OS_ERR_NONE;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	801a      	strh	r2, [r3, #0]
}
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	2000219e 	.word	0x2000219e
 8004060:	20001f19 	.word	0x20001f19
 8004064:	20001f08 	.word	0x20001f08

08004068 <OSStart>:
*              2) OSStart() is not supposed to return.  If it does, that would be considered a fatal error.
************************************************************************************************************************
*/

void  OSStart (OS_ERR  *p_err)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    if (OSRunning == OS_STATE_OS_STOPPED) {
 8004070:	4b17      	ldr	r3, [pc, #92]	; (80040d0 <OSStart+0x68>)
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d123      	bne.n	80040c0 <OSStart+0x58>
        OSPrioHighRdy   = OS_PrioGetHighest();              /* Find the highest priority                              */
 8004078:	f7ff fa10 	bl	800349c <OS_PrioGetHighest>
 800407c:	4603      	mov	r3, r0
 800407e:	461a      	mov	r2, r3
 8004080:	4b14      	ldr	r3, [pc, #80]	; (80040d4 <OSStart+0x6c>)
 8004082:	701a      	strb	r2, [r3, #0]
        OSPrioCur       = OSPrioHighRdy;
 8004084:	4b13      	ldr	r3, [pc, #76]	; (80040d4 <OSStart+0x6c>)
 8004086:	781a      	ldrb	r2, [r3, #0]
 8004088:	4b13      	ldr	r3, [pc, #76]	; (80040d8 <OSStart+0x70>)
 800408a:	701a      	strb	r2, [r3, #0]
        OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;
 800408c:	4b11      	ldr	r3, [pc, #68]	; (80040d4 <OSStart+0x6c>)
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	4619      	mov	r1, r3
 8004092:	4a12      	ldr	r2, [pc, #72]	; (80040dc <OSStart+0x74>)
 8004094:	460b      	mov	r3, r1
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	440b      	add	r3, r1
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a0f      	ldr	r2, [pc, #60]	; (80040e0 <OSStart+0x78>)
 80040a2:	6013      	str	r3, [r2, #0]
        OSTCBCurPtr     = OSTCBHighRdyPtr;
 80040a4:	4b0e      	ldr	r3, [pc, #56]	; (80040e0 <OSStart+0x78>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a0e      	ldr	r2, [pc, #56]	; (80040e4 <OSStart+0x7c>)
 80040aa:	6013      	str	r3, [r2, #0]
        OSRunning       = OS_STATE_OS_RUNNING;
 80040ac:	4b08      	ldr	r3, [pc, #32]	; (80040d0 <OSStart+0x68>)
 80040ae:	2201      	movs	r2, #1
 80040b0:	701a      	strb	r2, [r3, #0]
        OSStartHighRdy();                                   /* Execute target specific code to start task             */
 80040b2:	f7fc f8a5 	bl	8000200 <OSStartHighRdy>
       *p_err           = OS_ERR_FATAL_RETURN;              /* OSStart() is not supposed to return                    */
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f643 2299 	movw	r2, #15001	; 0x3a99
 80040bc:	801a      	strh	r2, [r3, #0]
    } else {
       *p_err           = OS_ERR_OS_RUNNING;                /* OS is already running                                  */
    }
}
 80040be:	e003      	b.n	80040c8 <OSStart+0x60>
       *p_err           = OS_ERR_OS_RUNNING;                /* OS is already running                                  */
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f645 628a 	movw	r2, #24202	; 0x5e8a
 80040c6:	801a      	strh	r2, [r3, #0]
}
 80040c8:	bf00      	nop
 80040ca:	3708      	adds	r7, #8
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	20001f19 	.word	0x20001f19
 80040d4:	2000209c 	.word	0x2000209c
 80040d8:	200020a8 	.word	0x200020a8
 80040dc:	20001f1c 	.word	0x20001f1c
 80040e0:	20002180 	.word	0x20002180
 80040e4:	20002174 	.word	0x20002174

080040e8 <OS_IdleTask>:
*              3) This hook has been added to allow you to do such things as STOP the CPU to conserve power.
************************************************************************************************************************
*/

void  OS_IdleTask (void  *p_arg)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
    CPU_SR_ALLOC();
 80040f0:	2300      	movs	r3, #0
 80040f2:	60fb      	str	r3, [r7, #12]


    (void)&p_arg;                                           /* Prevent compiler warning for not using 'p_arg'         */

    while (DEF_ON) {
        CPU_CRITICAL_ENTER();
 80040f4:	f7fc f8f4 	bl	80002e0 <CPU_SR_Save>
 80040f8:	60f8      	str	r0, [r7, #12]
        OSIdleTaskCtr++;
 80040fa:	4b08      	ldr	r3, [pc, #32]	; (800411c <OS_IdleTask+0x34>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	3301      	adds	r3, #1
 8004100:	4a06      	ldr	r2, [pc, #24]	; (800411c <OS_IdleTask+0x34>)
 8004102:	6013      	str	r3, [r2, #0]
#if OS_CFG_STAT_TASK_EN > 0u
        OSStatTaskCtr++;
 8004104:	4b06      	ldr	r3, [pc, #24]	; (8004120 <OS_IdleTask+0x38>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	3301      	adds	r3, #1
 800410a:	4a05      	ldr	r2, [pc, #20]	; (8004120 <OS_IdleTask+0x38>)
 800410c:	6013      	str	r3, [r2, #0]
#endif
        CPU_CRITICAL_EXIT();
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f7fc f8ea 	bl	80002e8 <CPU_SR_Restore>

        OSIdleTaskHook();                                   /* Call user definable HOOK                               */
 8004114:	f001 fe78 	bl	8005e08 <OSIdleTaskHook>
        CPU_CRITICAL_ENTER();
 8004118:	e7ec      	b.n	80040f4 <OS_IdleTask+0xc>
 800411a:	bf00      	nop
 800411c:	20002380 	.word	0x20002380
 8004120:	20001f14 	.word	0x20001f14

08004124 <OS_IdleTaskInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_IdleTaskInit (OS_ERR  *p_err)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b08c      	sub	sp, #48	; 0x30
 8004128:	af0a      	add	r7, sp, #40	; 0x28
 800412a:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    OSIdleTaskCtr = (OS_IDLE_CTR)0;
 800412c:	4b10      	ldr	r3, [pc, #64]	; (8004170 <OS_IdleTaskInit+0x4c>)
 800412e:	2200      	movs	r2, #0
 8004130:	601a      	str	r2, [r3, #0]
                                                            /* ---------------- CREATE THE IDLE TASK ---------------- */
    OSTaskCreate((OS_TCB     *)&OSIdleTaskTCB,
 8004132:	4b10      	ldr	r3, [pc, #64]	; (8004174 <OS_IdleTaskInit+0x50>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a10      	ldr	r2, [pc, #64]	; (8004178 <OS_IdleTaskInit+0x54>)
 8004138:	6812      	ldr	r2, [r2, #0]
 800413a:	4910      	ldr	r1, [pc, #64]	; (800417c <OS_IdleTaskInit+0x58>)
 800413c:	6809      	ldr	r1, [r1, #0]
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	9008      	str	r0, [sp, #32]
 8004142:	200b      	movs	r0, #11
 8004144:	9007      	str	r0, [sp, #28]
 8004146:	2000      	movs	r0, #0
 8004148:	9006      	str	r0, [sp, #24]
 800414a:	2000      	movs	r0, #0
 800414c:	9005      	str	r0, [sp, #20]
 800414e:	2000      	movs	r0, #0
 8004150:	9004      	str	r0, [sp, #16]
 8004152:	9103      	str	r1, [sp, #12]
 8004154:	9202      	str	r2, [sp, #8]
 8004156:	9301      	str	r3, [sp, #4]
 8004158:	231f      	movs	r3, #31
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	2300      	movs	r3, #0
 800415e:	4a08      	ldr	r2, [pc, #32]	; (8004180 <OS_IdleTaskInit+0x5c>)
 8004160:	4908      	ldr	r1, [pc, #32]	; (8004184 <OS_IdleTaskInit+0x60>)
 8004162:	4809      	ldr	r0, [pc, #36]	; (8004188 <OS_IdleTaskInit+0x64>)
 8004164:	f000 fdb4 	bl	8004cd0 <OSTaskCreate>
                 (OS_MSG_QTY  )0u,
                 (OS_TICK     )0u,
                 (void       *)0,
                 (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR | OS_OPT_TASK_NO_TLS),
                 (OS_ERR     *)p_err);
}
 8004168:	bf00      	nop
 800416a:	3708      	adds	r7, #8
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	20002380 	.word	0x20002380
 8004174:	0800e9cc 	.word	0x0800e9cc
 8004178:	0800e9d0 	.word	0x0800e9d0
 800417c:	0800e9d4 	.word	0x0800e9d4
 8004180:	080040e9 	.word	0x080040e9
 8004184:	0800e7c8 	.word	0x0800e7c8
 8004188:	20002270 	.word	0x20002270

0800418c <OS_Pend>:

void  OS_Pend (OS_PEND_DATA  *p_pend_data,
               OS_PEND_OBJ   *p_obj,
               OS_STATE       pending_on,
               OS_TICK        timeout)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b086      	sub	sp, #24
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	603b      	str	r3, [r7, #0]
 8004198:	4613      	mov	r3, r2
 800419a:	71fb      	strb	r3, [r7, #7]
    OS_PEND_LIST  *p_pend_list;



    OSTCBCurPtr->PendOn     = pending_on;                    /* Resource not available, wait until it is              */
 800419c:	4b1b      	ldr	r3, [pc, #108]	; (800420c <OS_Pend+0x80>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	79fa      	ldrb	r2, [r7, #7]
 80041a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    OSTCBCurPtr->PendStatus = OS_STATUS_PEND_OK;
 80041a6:	4b19      	ldr	r3, [pc, #100]	; (800420c <OS_Pend+0x80>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    OS_TaskBlock(OSTCBCurPtr,                                /* Block the task and add it to the tick list if needed  */
 80041b0:	4b16      	ldr	r3, [pc, #88]	; (800420c <OS_Pend+0x80>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6839      	ldr	r1, [r7, #0]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f000 fc04 	bl	80049c4 <OS_TaskBlock>
                 timeout);

    if (p_obj != (OS_PEND_OBJ *)0) {                         /* Add the current task to the pend list ...             */
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d011      	beq.n	80041e6 <OS_Pend+0x5a>
        p_pend_list             = &p_obj->PendList;          /* ... if there is an object to pend on                  */
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	3308      	adds	r3, #8
 80041c6:	617b      	str	r3, [r7, #20]
        p_pend_data->PendObjPtr = p_obj;                     /* Save the pointer to the object pending on             */
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	68ba      	ldr	r2, [r7, #8]
 80041cc:	60da      	str	r2, [r3, #12]
        OS_PendDataInit((OS_TCB       *)OSTCBCurPtr,         /* Initialize the remaining field                        */
 80041ce:	4b0f      	ldr	r3, [pc, #60]	; (800420c <OS_Pend+0x80>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2201      	movs	r2, #1
 80041d4:	68f9      	ldr	r1, [r7, #12]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 f81a 	bl	8004210 <OS_PendDataInit>
                        (OS_PEND_DATA *)p_pend_data,
                        (OS_OBJ_QTY    )1);
        OS_PendListInsertPrio(p_pend_list,                   /* Insert in the pend list in priority order             */
 80041dc:	68f9      	ldr	r1, [r7, #12]
 80041de:	6978      	ldr	r0, [r7, #20]
 80041e0:	f000 f8eb 	bl	80043ba <OS_PendListInsertPrio>
 80041e4:	e008      	b.n	80041f8 <OS_Pend+0x6c>
                              p_pend_data);
    } else {
        OSTCBCurPtr->PendDataTblEntries = (OS_OBJ_QTY    )0; /* If no object being pended on the clear these fields   */
 80041e6:	4b09      	ldr	r3, [pc, #36]	; (800420c <OS_Pend+0x80>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        OSTCBCurPtr->PendDataTblPtr     = (OS_PEND_DATA *)0; /* ... in the TCB                                        */
 80041f0:	4b06      	ldr	r3, [pc, #24]	; (800420c <OS_Pend+0x80>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2200      	movs	r2, #0
 80041f6:	631a      	str	r2, [r3, #48]	; 0x30
    }
#if OS_CFG_DBG_EN > 0u
    OS_PendDbgNameAdd(p_obj,
 80041f8:	4b04      	ldr	r3, [pc, #16]	; (800420c <OS_Pend+0x80>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4619      	mov	r1, r3
 80041fe:	68b8      	ldr	r0, [r7, #8]
 8004200:	f000 f83c 	bl	800427c <OS_PendDbgNameAdd>
                      OSTCBCurPtr);
#endif
}
 8004204:	bf00      	nop
 8004206:	3718      	adds	r7, #24
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	20002174 	.word	0x20002174

08004210 <OS_PendDataInit>:
*/

void  OS_PendDataInit (OS_TCB        *p_tcb,
                       OS_PEND_DATA  *p_pend_data_tbl,
                       OS_OBJ_QTY     tbl_size)
{
 8004210:	b480      	push	{r7}
 8004212:	b087      	sub	sp, #28
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	4613      	mov	r3, r2
 800421c:	80fb      	strh	r3, [r7, #6]
    OS_OBJ_QTY  i;



    p_tcb->PendDataTblEntries = tbl_size;                   /* Link the TCB to the beginning of the table             */
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	88fa      	ldrh	r2, [r7, #6]
 8004222:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    p_tcb->PendDataTblPtr     = p_pend_data_tbl;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	68ba      	ldr	r2, [r7, #8]
 800422a:	631a      	str	r2, [r3, #48]	; 0x30

    for (i = 0u; i < tbl_size; i++) {
 800422c:	2300      	movs	r3, #0
 800422e:	82fb      	strh	r3, [r7, #22]
 8004230:	e01a      	b.n	8004268 <OS_PendDataInit+0x58>
        p_pend_data_tbl->NextPtr    = (OS_PEND_DATA *)0;    /* Initialize all the fields                              */
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	2200      	movs	r2, #0
 8004236:	605a      	str	r2, [r3, #4]
        p_pend_data_tbl->PrevPtr    = (OS_PEND_DATA *)0;
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	2200      	movs	r2, #0
 800423c:	601a      	str	r2, [r3, #0]
        p_pend_data_tbl->RdyObjPtr  = (OS_PEND_OBJ  *)0;
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	2200      	movs	r2, #0
 8004242:	611a      	str	r2, [r3, #16]
        p_pend_data_tbl->RdyMsgPtr  = (void         *)0;
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	2200      	movs	r2, #0
 8004248:	615a      	str	r2, [r3, #20]
        p_pend_data_tbl->RdyMsgSize = (OS_MSG_SIZE   )0;
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	2200      	movs	r2, #0
 800424e:	831a      	strh	r2, [r3, #24]
        p_pend_data_tbl->RdyTS      = (CPU_TS        )0;
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	2200      	movs	r2, #0
 8004254:	61da      	str	r2, [r3, #28]
        p_pend_data_tbl->TCBPtr     = p_tcb;                /* Every entry points back to the TCB of the task         */
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	609a      	str	r2, [r3, #8]
        p_pend_data_tbl++;
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	3320      	adds	r3, #32
 8004260:	60bb      	str	r3, [r7, #8]
    for (i = 0u; i < tbl_size; i++) {
 8004262:	8afb      	ldrh	r3, [r7, #22]
 8004264:	3301      	adds	r3, #1
 8004266:	82fb      	strh	r3, [r7, #22]
 8004268:	8afa      	ldrh	r2, [r7, #22]
 800426a:	88fb      	ldrh	r3, [r7, #6]
 800426c:	429a      	cmp	r2, r3
 800426e:	d3e0      	bcc.n	8004232 <OS_PendDataInit+0x22>
    }
}
 8004270:	bf00      	nop
 8004272:	371c      	adds	r7, #28
 8004274:	46bd      	mov	sp, r7
 8004276:	bc80      	pop	{r7}
 8004278:	4770      	bx	lr
	...

0800427c <OS_PendDbgNameAdd>:


#if OS_CFG_DBG_EN > 0u
void  OS_PendDbgNameAdd (OS_PEND_OBJ  *p_obj,
                         OS_TCB       *p_tcb)
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
    OS_PEND_LIST  *p_pend_list;
    OS_PEND_DATA  *p_pend_data;
    OS_TCB        *p_tcb1;


    if (p_obj != (OS_PEND_OBJ *)0) {
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d012      	beq.n	80042b2 <OS_PendDbgNameAdd+0x36>
        p_tcb->DbgNamePtr =  p_obj->NamePtr;                /* Task pending on this object ... save name in TCB       */
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
        p_pend_list       = &p_obj->PendList;               /* Find name of HP task pending on this object ...        */
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	3308      	adds	r3, #8
 800429a:	617b      	str	r3, [r7, #20]
        p_pend_data       =  p_pend_list->HeadPtr;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	613b      	str	r3, [r7, #16]
        p_tcb1            =  p_pend_data->TCBPtr;
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	60fb      	str	r3, [r7, #12]
        p_obj->DbgNamePtr = p_tcb1->NamePtr;                /* ... Save in object                                     */
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6a1a      	ldr	r2, [r3, #32]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	61da      	str	r2, [r3, #28]
            default:
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)" ");
                 break;
        }
    }
}
 80042b0:	e016      	b.n	80042e0 <OS_PendDbgNameAdd+0x64>
        switch (p_tcb->PendOn) {
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d002      	beq.n	80042c2 <OS_PendDbgNameAdd+0x46>
 80042bc:	2b07      	cmp	r3, #7
 80042be:	d005      	beq.n	80042cc <OS_PendDbgNameAdd+0x50>
 80042c0:	e009      	b.n	80042d6 <OS_PendDbgNameAdd+0x5a>
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)"Task Q");
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	4a09      	ldr	r2, [pc, #36]	; (80042ec <OS_PendDbgNameAdd+0x70>)
 80042c6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
                 break;
 80042ca:	e009      	b.n	80042e0 <OS_PendDbgNameAdd+0x64>
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)"Task Sem");
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	4a08      	ldr	r2, [pc, #32]	; (80042f0 <OS_PendDbgNameAdd+0x74>)
 80042d0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
                 break;
 80042d4:	e004      	b.n	80042e0 <OS_PendDbgNameAdd+0x64>
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)" ");
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	4a06      	ldr	r2, [pc, #24]	; (80042f4 <OS_PendDbgNameAdd+0x78>)
 80042da:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
                 break;
 80042de:	bf00      	nop
}
 80042e0:	bf00      	nop
 80042e2:	371c      	adds	r7, #28
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bc80      	pop	{r7}
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	0800e7dc 	.word	0x0800e7dc
 80042f0:	0800e7e4 	.word	0x0800e7e4
 80042f4:	0800e7f0 	.word	0x0800e7f0

080042f8 <OS_PendDbgNameRemove>:



void  OS_PendDbgNameRemove (OS_PEND_OBJ  *p_obj,
                            OS_TCB       *p_tcb)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b087      	sub	sp, #28
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
    OS_PEND_LIST  *p_pend_list;
    OS_PEND_DATA  *p_pend_data;
    OS_TCB        *p_tcb1;


    p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)" ");          /* Remove name of object pended on for readied task       */
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	4a0d      	ldr	r2, [pc, #52]	; (800433c <OS_PendDbgNameRemove+0x44>)
 8004306:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    p_pend_list       = &p_obj->PendList;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	3308      	adds	r3, #8
 800430e:	617b      	str	r3, [r7, #20]
    p_pend_data       =  p_pend_list->HeadPtr;
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	613b      	str	r3, [r7, #16]
    if (p_pend_data  != (OS_PEND_DATA *)0) {
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d007      	beq.n	800432c <OS_PendDbgNameRemove+0x34>
        p_tcb1            = p_pend_data->TCBPtr;
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	60fb      	str	r3, [r7, #12]
        p_obj->DbgNamePtr = p_tcb1->NamePtr;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6a1a      	ldr	r2, [r3, #32]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	61da      	str	r2, [r3, #28]
    } else {
        p_obj->DbgNamePtr = (CPU_CHAR *)((void *)" ");      /* No other task pending on object                        */
    }
}
 800432a:	e002      	b.n	8004332 <OS_PendDbgNameRemove+0x3a>
        p_obj->DbgNamePtr = (CPU_CHAR *)((void *)" ");      /* No other task pending on object                        */
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a03      	ldr	r2, [pc, #12]	; (800433c <OS_PendDbgNameRemove+0x44>)
 8004330:	61da      	str	r2, [r3, #28]
}
 8004332:	bf00      	nop
 8004334:	371c      	adds	r7, #28
 8004336:	46bd      	mov	sp, r7
 8004338:	bc80      	pop	{r7}
 800433a:	4770      	bx	lr
 800433c:	0800e7f0 	.word	0x0800e7f0

08004340 <OS_PendListChangePrio>:
*              2) It's assumed that the TCB contains the NEW priority in its .Prio field.
************************************************************************************************************************
*/

void  OS_PendListChangePrio (OS_TCB   *p_tcb)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
    OS_PEND_DATA   *p_pend_data;
    OS_PEND_LIST   *p_pend_list;
    OS_PEND_OBJ    *p_obj;


    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to first wait list entry                 */
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434c:	613b      	str	r3, [r7, #16]
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get the number of pend list task is in         */
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004354:	82fb      	strh	r3, [r7, #22]

    while (n_pend_list > 0u) {
 8004356:	e017      	b.n	8004388 <OS_PendListChangePrio+0x48>
        p_obj       =  p_pend_data->PendObjPtr;                     /* Get pointer to pend list                       */
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	60fb      	str	r3, [r7, #12]
        p_pend_list = &p_obj->PendList;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	3308      	adds	r3, #8
 8004362:	60bb      	str	r3, [r7, #8]
        if (p_pend_list->NbrEntries > 1u) {                         /* Only move if multiple entries in the list      */
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	891b      	ldrh	r3, [r3, #8]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d907      	bls.n	800437c <OS_PendListChangePrio+0x3c>
            OS_PendListRemove1(p_pend_list,                         /* Remove entry from current position             */
 800436c:	6939      	ldr	r1, [r7, #16]
 800436e:	68b8      	ldr	r0, [r7, #8]
 8004370:	f000 f8c0 	bl	80044f4 <OS_PendListRemove1>
                               p_pend_data);
            OS_PendListInsertPrio(p_pend_list,                      /* INSERT it back in the list                     */
 8004374:	6939      	ldr	r1, [r7, #16]
 8004376:	68b8      	ldr	r0, [r7, #8]
 8004378:	f000 f81f 	bl	80043ba <OS_PendListInsertPrio>
                                  p_pend_data);
        }
        p_pend_data++;                                              /* Point to next wait list                        */
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	3320      	adds	r3, #32
 8004380:	613b      	str	r3, [r7, #16]
        n_pend_list--;
 8004382:	8afb      	ldrh	r3, [r7, #22]
 8004384:	3b01      	subs	r3, #1
 8004386:	82fb      	strh	r3, [r7, #22]
    while (n_pend_list > 0u) {
 8004388:	8afb      	ldrh	r3, [r7, #22]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1e4      	bne.n	8004358 <OS_PendListChangePrio+0x18>
    }
}
 800438e:	bf00      	nop
 8004390:	3718      	adds	r7, #24
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <OS_PendListInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application must not call it.
************************************************************************************************************************
*/

void  OS_PendListInit (OS_PEND_LIST  *p_pend_list)
{
 8004396:	b480      	push	{r7}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
    p_pend_list->HeadPtr    = (OS_PEND_DATA *)0;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]
    p_pend_list->TailPtr    = (OS_PEND_DATA *)0;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	605a      	str	r2, [r3, #4]
    p_pend_list->NbrEntries = (OS_OBJ_QTY    )0;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	811a      	strh	r2, [r3, #8]
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bc80      	pop	{r7}
 80043b8:	4770      	bx	lr

080043ba <OS_PendListInsertPrio>:
************************************************************************************************************************
*/

void  OS_PendListInsertPrio (OS_PEND_LIST  *p_pend_list,
                             OS_PEND_DATA  *p_pend_data)
{
 80043ba:	b480      	push	{r7}
 80043bc:	b089      	sub	sp, #36	; 0x24
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
 80043c2:	6039      	str	r1, [r7, #0]
    OS_PEND_DATA  *p_pend_data_prev;
    OS_PEND_DATA  *p_pend_data_next;



    p_tcb = p_pend_data->TCBPtr;                                      /* Obtain the priority of the task to insert    */
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	61bb      	str	r3, [r7, #24]
    prio  = p_tcb->Prio;
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80043d0:	75fb      	strb	r3, [r7, #23]
    if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0) {                   /* CASE 0: Insert when there are no entries     */
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	891b      	ldrh	r3, [r3, #8]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10f      	bne.n	80043fa <OS_PendListInsertPrio+0x40>
        p_pend_list->NbrEntries = (OS_OBJ_QTY)1;                      /*         This is the first entry              */
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	811a      	strh	r2, [r3, #8]
        p_pend_data->NextPtr    = (OS_PEND_DATA *)0;                  /*         No other OS_PEND_DATAs in the list   */
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	2200      	movs	r2, #0
 80043e4:	605a      	str	r2, [r3, #4]
        p_pend_data->PrevPtr    = (OS_PEND_DATA *)0;
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]
        p_pend_list->HeadPtr    = p_pend_data;                        /*                                              */
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	601a      	str	r2, [r3, #0]
        p_pend_list->TailPtr    = p_pend_data;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	683a      	ldr	r2, [r7, #0]
 80043f6:	605a      	str	r2, [r3, #4]
                p_pend_data_prev->NextPtr  = p_pend_data;
                p_pend_data_next->PrevPtr  = p_pend_data;
            }
        }
    }
}
 80043f8:	e04d      	b.n	8004496 <OS_PendListInsertPrio+0xdc>
        p_pend_list->NbrEntries++;                                    /* CASE 1: One more OS_PEND_DATA in the list    */
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	891b      	ldrh	r3, [r3, #8]
 80043fe:	3301      	adds	r3, #1
 8004400:	b29a      	uxth	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	811a      	strh	r2, [r3, #8]
        p_pend_data_next = p_pend_list->HeadPtr;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	61fb      	str	r3, [r7, #28]
        while (p_pend_data_next != (OS_PEND_DATA *)0) {               /*         Find the position where to insert    */
 800440c:	e00b      	b.n	8004426 <OS_PendListInsertPrio+0x6c>
            p_tcb_next   = p_pend_data_next->TCBPtr;
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	613b      	str	r3, [r7, #16]
            if (prio < p_tcb_next->Prio) {
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800441a:	7dfa      	ldrb	r2, [r7, #23]
 800441c:	429a      	cmp	r2, r3
 800441e:	d306      	bcc.n	800442e <OS_PendListInsertPrio+0x74>
                p_pend_data_next = p_pend_data_next->NextPtr;         /*         Not Found, follow the list           */
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	61fb      	str	r3, [r7, #28]
        while (p_pend_data_next != (OS_PEND_DATA *)0) {               /*         Find the position where to insert    */
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1f0      	bne.n	800440e <OS_PendListInsertPrio+0x54>
 800442c:	e000      	b.n	8004430 <OS_PendListInsertPrio+0x76>
                break;                                                /*         Found! ... insert BEFORE current     */
 800442e:	bf00      	nop
        if (p_pend_data_next == (OS_PEND_DATA *)0) {                  /*         TCB to insert is lower in prio       */
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10f      	bne.n	8004456 <OS_PendListInsertPrio+0x9c>
            p_pend_data->NextPtr      = (OS_PEND_DATA *)0;            /*         ... insert at the tail.              */
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	2200      	movs	r2, #0
 800443a:	605a      	str	r2, [r3, #4]
            p_pend_data_prev          = p_pend_list->TailPtr;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	60fb      	str	r3, [r7, #12]
            p_pend_data->PrevPtr      = p_pend_data_prev;
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	601a      	str	r2, [r3, #0]
            p_pend_data_prev->NextPtr = p_pend_data;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	605a      	str	r2, [r3, #4]
            p_pend_list->TailPtr      = p_pend_data;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	605a      	str	r2, [r3, #4]
}
 8004454:	e01f      	b.n	8004496 <OS_PendListInsertPrio+0xdc>
            if (p_pend_data_next->PrevPtr == (OS_PEND_DATA *)0) {     /*         Is new TCB highest priority?         */
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10c      	bne.n	8004478 <OS_PendListInsertPrio+0xbe>
                p_pend_data_next->PrevPtr  = p_pend_data;             /*         Yes, insert as new Head of list      */
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	683a      	ldr	r2, [r7, #0]
 8004462:	601a      	str	r2, [r3, #0]
                p_pend_data->PrevPtr       = (OS_PEND_DATA *)0;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	2200      	movs	r2, #0
 8004468:	601a      	str	r2, [r3, #0]
                p_pend_data->NextPtr       = p_pend_data_next;
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	69fa      	ldr	r2, [r7, #28]
 800446e:	605a      	str	r2, [r3, #4]
                p_pend_list->HeadPtr       = p_pend_data;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	601a      	str	r2, [r3, #0]
}
 8004476:	e00e      	b.n	8004496 <OS_PendListInsertPrio+0xdc>
                p_pend_data_prev           = p_pend_data_next->PrevPtr;/*        No,  insert in between two entries   */
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	60fb      	str	r3, [r7, #12]
                p_pend_data->PrevPtr       = p_pend_data_prev;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	601a      	str	r2, [r3, #0]
                p_pend_data->NextPtr       = p_pend_data_next;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	69fa      	ldr	r2, [r7, #28]
 8004488:	605a      	str	r2, [r3, #4]
                p_pend_data_prev->NextPtr  = p_pend_data;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	605a      	str	r2, [r3, #4]
                p_pend_data_next->PrevPtr  = p_pend_data;
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	601a      	str	r2, [r3, #0]
}
 8004496:	bf00      	nop
 8004498:	3724      	adds	r7, #36	; 0x24
 800449a:	46bd      	mov	sp, r7
 800449c:	bc80      	pop	{r7}
 800449e:	4770      	bx	lr

080044a0 <OS_PendListRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_PendListRemove (OS_TCB  *p_tcb)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
    OS_PEND_LIST   *p_pend_list;
    OS_PEND_OBJ    *p_obj;



    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to the first OS_PEND_DATA to remove      */
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ac:	613b      	str	r3, [r7, #16]
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get number of entries in the table             */
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044b4:	82fb      	strh	r3, [r7, #22]

    while (n_pend_list > (OS_OBJ_QTY)0) {
 80044b6:	e00f      	b.n	80044d8 <OS_PendListRemove+0x38>
        p_obj       =  p_pend_data->PendObjPtr;                     /* Get pointer to pend list                       */
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	60fb      	str	r3, [r7, #12]
        p_pend_list = &p_obj->PendList;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	3308      	adds	r3, #8
 80044c2:	60bb      	str	r3, [r7, #8]
        OS_PendListRemove1(p_pend_list,
 80044c4:	6939      	ldr	r1, [r7, #16]
 80044c6:	68b8      	ldr	r0, [r7, #8]
 80044c8:	f000 f814 	bl	80044f4 <OS_PendListRemove1>
                           p_pend_data);
        p_pend_data++;
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	3320      	adds	r3, #32
 80044d0:	613b      	str	r3, [r7, #16]
        n_pend_list--;
 80044d2:	8afb      	ldrh	r3, [r7, #22]
 80044d4:	3b01      	subs	r3, #1
 80044d6:	82fb      	strh	r3, [r7, #22]
    while (n_pend_list > (OS_OBJ_QTY)0) {
 80044d8:	8afb      	ldrh	r3, [r7, #22]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1ec      	bne.n	80044b8 <OS_PendListRemove+0x18>
    }
    p_tcb->PendDataTblEntries = (OS_OBJ_QTY    )0;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    p_tcb->PendDataTblPtr     = (OS_PEND_DATA *)0;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	631a      	str	r2, [r3, #48]	; 0x30
}
 80044ec:	bf00      	nop
 80044ee:	3718      	adds	r7, #24
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <OS_PendListRemove1>:
************************************************************************************************************************
*/

void  OS_PendListRemove1 (OS_PEND_LIST  *p_pend_list,
                          OS_PEND_DATA  *p_pend_data)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
    OS_PEND_DATA  *p_prev;
    OS_PEND_DATA  *p_next;



    if (p_pend_list->NbrEntries == 1u) {
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	891b      	ldrh	r3, [r3, #8]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d106      	bne.n	8004514 <OS_PendListRemove1+0x20>
        p_pend_list->HeadPtr = (OS_PEND_DATA *)0;           /* Only one entry in the pend list                        */
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]
        p_pend_list->TailPtr = (OS_PEND_DATA *)0;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	605a      	str	r2, [r3, #4]
 8004512:	e027      	b.n	8004564 <OS_PendListRemove1+0x70>

    } else if (p_pend_data->PrevPtr == (OS_PEND_DATA *)0) { /* See if entry is at the head of the list                */
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d109      	bne.n	8004530 <OS_PendListRemove1+0x3c>
        p_next               = p_pend_data->NextPtr;        /* Yes                                                    */
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	60bb      	str	r3, [r7, #8]
        p_next->PrevPtr      = (OS_PEND_DATA *)0;
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]
        p_pend_list->HeadPtr = p_next;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	601a      	str	r2, [r3, #0]
 800452e:	e019      	b.n	8004564 <OS_PendListRemove1+0x70>

    } else if (p_pend_data->NextPtr == (OS_PEND_DATA *)0) { /* See if entry is at the tail of the list                */
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d109      	bne.n	800454c <OS_PendListRemove1+0x58>
        p_prev               = p_pend_data->PrevPtr;        /* Yes                                                    */
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	60fb      	str	r3, [r7, #12]
        p_prev->NextPtr      = (OS_PEND_DATA *)0;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	605a      	str	r2, [r3, #4]
        p_pend_list->TailPtr = p_prev;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	605a      	str	r2, [r3, #4]
 800454a:	e00b      	b.n	8004564 <OS_PendListRemove1+0x70>

    } else {
        p_prev               = p_pend_data->PrevPtr;        /* Remove from inside the list                            */
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	60fb      	str	r3, [r7, #12]
        p_next               = p_pend_data->NextPtr;
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	60bb      	str	r3, [r7, #8]
        p_prev->NextPtr      = p_next;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	605a      	str	r2, [r3, #4]
        p_next->PrevPtr      = p_prev;
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	601a      	str	r2, [r3, #0]
    }
    p_pend_list->NbrEntries--;                              /* One less entry in the list                             */
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	891b      	ldrh	r3, [r3, #8]
 8004568:	3b01      	subs	r3, #1
 800456a:	b29a      	uxth	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	811a      	strh	r2, [r3, #8]
    p_pend_data->NextPtr = (OS_PEND_DATA *)0;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	2200      	movs	r2, #0
 8004574:	605a      	str	r2, [r3, #4]
    p_pend_data->PrevPtr = (OS_PEND_DATA *)0;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	2200      	movs	r2, #0
 800457a:	601a      	str	r2, [r3, #0]
}
 800457c:	bf00      	nop
 800457e:	3714      	adds	r7, #20
 8004580:	46bd      	mov	sp, r7
 8004582:	bc80      	pop	{r7}
 8004584:	4770      	bx	lr
	...

08004588 <OS_Post>:
void  OS_Post (OS_PEND_OBJ  *p_obj,
               OS_TCB       *p_tcb,
               void         *p_void,
               OS_MSG_SIZE   msg_size,
               CPU_TS        ts)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af02      	add	r7, sp, #8
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
 8004594:	807b      	strh	r3, [r7, #2]
    switch (p_tcb->TaskState) {
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800459c:	2b07      	cmp	r3, #7
 800459e:	f200 8086 	bhi.w	80046ae <OS_Post+0x126>
 80045a2:	a201      	add	r2, pc, #4	; (adr r2, 80045a8 <OS_Post+0x20>)
 80045a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a8:	080046af 	.word	0x080046af
 80045ac:	080046af 	.word	0x080046af
 80045b0:	080045c9 	.word	0x080045c9
 80045b4:	080045c9 	.word	0x080045c9
 80045b8:	080046af 	.word	0x080046af
 80045bc:	080046af 	.word	0x080046af
 80045c0:	0800463f 	.word	0x0800463f
 80045c4:	0800463f 	.word	0x0800463f
        case OS_TASK_STATE_DLY_SUSPENDED:                        /* Cannot Post a suspended task that was also dly'd  */
             break;

        case OS_TASK_STATE_PEND:
        case OS_TASK_STATE_PEND_TIMEOUT:
             if (p_tcb->PendOn == OS_TASK_PEND_ON_MULTI) {
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80045ce:	2b03      	cmp	r3, #3
 80045d0:	d109      	bne.n	80045e6 <OS_Post+0x5e>
                 OS_Post1(p_obj,                                 /* Indicate which object was posted to               */
 80045d2:	887a      	ldrh	r2, [r7, #2]
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	9300      	str	r3, [sp, #0]
 80045d8:	4613      	mov	r3, r2
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	68b9      	ldr	r1, [r7, #8]
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f000 f86a 	bl	80046b8 <OS_Post1>
 80045e4:	e009      	b.n	80045fa <OS_Post+0x72>
                          p_void,
                          msg_size,
                          ts);
             } else {
#if (OS_MSG_EN > 0u)
                 p_tcb->MsgPtr  = p_void;                        /* Deposit message in OS_TCB of task waiting         */
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	659a      	str	r2, [r3, #88]	; 0x58
                 p_tcb->MsgSize = msg_size;                      /* ... assuming posting a message                    */
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	887a      	ldrh	r2, [r7, #2]
 80045f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
#endif
                 p_tcb->TS      = ts;
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	649a      	str	r2, [r3, #72]	; 0x48
             }
             if (p_obj != (OS_PEND_OBJ *)0) {
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d006      	beq.n	800460e <OS_Post+0x86>
                 OS_PendListRemove(p_tcb);                       /* Remove task from wait list(s)                     */
 8004600:	68b8      	ldr	r0, [r7, #8]
 8004602:	f7ff ff4d 	bl	80044a0 <OS_PendListRemove>
#if OS_CFG_DBG_EN > 0u
                 OS_PendDbgNameRemove(p_obj,
 8004606:	68b9      	ldr	r1, [r7, #8]
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f7ff fe75 	bl	80042f8 <OS_PendDbgNameRemove>
                                      p_tcb);
#endif
             }
             if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT) {
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004614:	2b03      	cmp	r3, #3
 8004616:	d102      	bne.n	800461e <OS_Post+0x96>
                 OS_TickListRemove(p_tcb);                       /* Remove from tick list                             */
 8004618:	68b8      	ldr	r0, [r7, #8]
 800461a:	f7fe fc1b 	bl	8002e54 <OS_TickListRemove>
             }
             OS_RdyListInsert(p_tcb);                            /* Insert the task in the ready list                 */
 800461e:	68b8      	ldr	r0, [r7, #8]
 8004620:	f000 f89e 	bl	8004760 <OS_RdyListInsert>
             p_tcb->TaskState  = OS_TASK_STATE_RDY;
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             p_tcb->PendStatus = OS_STATUS_PEND_OK;              /* Clear pend status                                 */
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
             p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;        /* Indicate no longer pending                        */
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
             break;
 800463c:	e038      	b.n	80046b0 <OS_Post+0x128>

        case OS_TASK_STATE_PEND_SUSPENDED:
        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
             if (p_tcb->PendOn == OS_TASK_PEND_ON_MULTI) {
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004644:	2b03      	cmp	r3, #3
 8004646:	d109      	bne.n	800465c <OS_Post+0xd4>
                 OS_Post1(p_obj,                                 /* Indicate which object was posted to               */
 8004648:	887a      	ldrh	r2, [r7, #2]
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	9300      	str	r3, [sp, #0]
 800464e:	4613      	mov	r3, r2
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	68b9      	ldr	r1, [r7, #8]
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f000 f82f 	bl	80046b8 <OS_Post1>
 800465a:	e009      	b.n	8004670 <OS_Post+0xe8>
                          p_void,
                          msg_size,
                          ts);
             } else {
#if (OS_MSG_EN > 0u)
                 p_tcb->MsgPtr  = p_void;                        /* Deposit message in OS_TCB of task waiting         */
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	659a      	str	r2, [r3, #88]	; 0x58
                 p_tcb->MsgSize = msg_size;                      /* ... assuming posting a message                    */
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	887a      	ldrh	r2, [r7, #2]
 8004666:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
#endif
                 p_tcb->TS      = ts;
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	649a      	str	r2, [r3, #72]	; 0x48
             }
             if (p_obj != (OS_PEND_OBJ *)0) {
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d006      	beq.n	8004684 <OS_Post+0xfc>
                 OS_PendListRemove(p_tcb);                       /* Remove task from wait list(s)                     */
 8004676:	68b8      	ldr	r0, [r7, #8]
 8004678:	f7ff ff12 	bl	80044a0 <OS_PendListRemove>
#if OS_CFG_DBG_EN > 0u
                 OS_PendDbgNameRemove(p_obj,
 800467c:	68b9      	ldr	r1, [r7, #8]
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f7ff fe3a 	bl	80042f8 <OS_PendDbgNameRemove>
                                      p_tcb);
#endif
             }
             if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED) {
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800468a:	2b07      	cmp	r3, #7
 800468c:	d102      	bne.n	8004694 <OS_Post+0x10c>
                 OS_TickListRemove(p_tcb);                       /* Cancel any timeout                                */
 800468e:	68b8      	ldr	r0, [r7, #8]
 8004690:	f7fe fbe0 	bl	8002e54 <OS_TickListRemove>
             }
             p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	2204      	movs	r2, #4
 8004698:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             p_tcb->PendStatus = OS_STATUS_PEND_OK;              /* Clear pend status                                 */
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
             p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;        /* Indicate no longer pending                        */
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
             break;
 80046ac:	e000      	b.n	80046b0 <OS_Post+0x128>

        default:
             break;
 80046ae:	bf00      	nop
    }
}
 80046b0:	bf00      	nop
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <OS_Post1>:
void  OS_Post1 (OS_PEND_OBJ  *p_obj,
                OS_TCB       *p_tcb,
                void         *p_void,
                OS_MSG_SIZE   msg_size,
                CPU_TS        ts)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b087      	sub	sp, #28
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
 80046c4:	807b      	strh	r3, [r7, #2]
    OS_OBJ_QTY      n_pend_list;                                    /* Number of pend lists                           */
    OS_PEND_DATA   *p_pend_data;



    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to the first OS_PEND_DATA to remove      */
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ca:	613b      	str	r3, [r7, #16]
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get number of entries in the table             */
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046d2:	82fb      	strh	r3, [r7, #22]

    while (n_pend_list > (OS_OBJ_QTY)0) {                           /* Mark posted object in OS_PEND_DATA table       */
 80046d4:	e017      	b.n	8004706 <OS_Post1+0x4e>
        if (p_obj == p_pend_data->PendObjPtr) {                     /* Did we find the object posted to?              */
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d10c      	bne.n	80046fa <OS_Post1+0x42>
            p_pend_data->RdyObjPtr  = p_obj;                        /* Yes, indicate the object in the .RdyObjPtr     */
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	611a      	str	r2, [r3, #16]
            p_pend_data->RdyMsgPtr  = p_void;                       /*      store the message posted                  */
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	615a      	str	r2, [r3, #20]
            p_pend_data->RdyMsgSize = msg_size;                     /*      store the size of the message posted      */
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	887a      	ldrh	r2, [r7, #2]
 80046f0:	831a      	strh	r2, [r3, #24]
            p_pend_data->RdyTS      = ts;                           /*      save the timestamp of the post            */
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	6a3a      	ldr	r2, [r7, #32]
 80046f6:	61da      	str	r2, [r3, #28]
            break;
 80046f8:	e008      	b.n	800470c <OS_Post1+0x54>
        }
        p_pend_data++;
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	3320      	adds	r3, #32
 80046fe:	613b      	str	r3, [r7, #16]
        n_pend_list--;
 8004700:	8afb      	ldrh	r3, [r7, #22]
 8004702:	3b01      	subs	r3, #1
 8004704:	82fb      	strh	r3, [r7, #22]
    while (n_pend_list > (OS_OBJ_QTY)0) {                           /* Mark posted object in OS_PEND_DATA table       */
 8004706:	8afb      	ldrh	r3, [r7, #22]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1e4      	bne.n	80046d6 <OS_Post1+0x1e>
    }
}
 800470c:	bf00      	nop
 800470e:	371c      	adds	r7, #28
 8004710:	46bd      	mov	sp, r7
 8004712:	bc80      	pop	{r7}
 8004714:	4770      	bx	lr
	...

08004718 <OS_RdyListInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_RdyListInit (void)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
    OS_PRIO       i;
    OS_RDY_LIST  *p_rdy_list;



    for (i = 0u; i < OS_CFG_PRIO_MAX; i++) {                /* Initialize the array of OS_RDY_LIST at each priority   */
 800471e:	2300      	movs	r3, #0
 8004720:	71fb      	strb	r3, [r7, #7]
 8004722:	e013      	b.n	800474c <OS_RdyListInit+0x34>
        p_rdy_list = &OSRdyList[i];
 8004724:	79fa      	ldrb	r2, [r7, #7]
 8004726:	4613      	mov	r3, r2
 8004728:	005b      	lsls	r3, r3, #1
 800472a:	4413      	add	r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	4a0b      	ldr	r2, [pc, #44]	; (800475c <OS_RdyListInit+0x44>)
 8004730:	4413      	add	r3, r2
 8004732:	603b      	str	r3, [r7, #0]
        p_rdy_list->NbrEntries = (OS_OBJ_QTY)0;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	2200      	movs	r2, #0
 8004738:	811a      	strh	r2, [r3, #8]
        p_rdy_list->HeadPtr    = (OS_TCB   *)0;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	2200      	movs	r2, #0
 800473e:	601a      	str	r2, [r3, #0]
        p_rdy_list->TailPtr    = (OS_TCB   *)0;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	2200      	movs	r2, #0
 8004744:	605a      	str	r2, [r3, #4]
    for (i = 0u; i < OS_CFG_PRIO_MAX; i++) {                /* Initialize the array of OS_RDY_LIST at each priority   */
 8004746:	79fb      	ldrb	r3, [r7, #7]
 8004748:	3301      	adds	r3, #1
 800474a:	71fb      	strb	r3, [r7, #7]
 800474c:	79fb      	ldrb	r3, [r7, #7]
 800474e:	2b1f      	cmp	r3, #31
 8004750:	d9e8      	bls.n	8004724 <OS_RdyListInit+0xc>
    }
}
 8004752:	bf00      	nop
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	bc80      	pop	{r7}
 800475a:	4770      	bx	lr
 800475c:	20001f1c 	.word	0x20001f1c

08004760 <OS_RdyListInsert>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_RdyListInsert (OS_TCB  *p_tcb)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
    OS_PrioInsert(p_tcb->Prio);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800476e:	4618      	mov	r0, r3
 8004770:	f7fe feb8 	bl	80034e4 <OS_PrioInsert>
    if (p_tcb->Prio == OSPrioCur) {                         /* Are we readying a task at the same prio?               */
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 800477a:	4b07      	ldr	r3, [pc, #28]	; (8004798 <OS_RdyListInsert+0x38>)
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	429a      	cmp	r2, r3
 8004780:	d103      	bne.n	800478a <OS_RdyListInsert+0x2a>
        OS_RdyListInsertTail(p_tcb);                        /* Yes, insert readied task at the end of the list        */
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 f84a 	bl	800481c <OS_RdyListInsertTail>
    }

#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_READY(p_tcb);                         /* Record the event.                                      */
#endif
}
 8004788:	e002      	b.n	8004790 <OS_RdyListInsert+0x30>
        OS_RdyListInsertHead(p_tcb);                        /* No,  insert readied task at the beginning of the list  */
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f806 	bl	800479c <OS_RdyListInsertHead>
}
 8004790:	bf00      	nop
 8004792:	3708      	adds	r7, #8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	200020a8 	.word	0x200020a8

0800479c <OS_RdyListInsertHead>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListInsertHead (OS_TCB  *p_tcb)
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
    OS_RDY_LIST  *p_rdy_list;
    OS_TCB       *p_tcb2;



    p_rdy_list = &OSRdyList[p_tcb->Prio];
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80047aa:	461a      	mov	r2, r3
 80047ac:	4613      	mov	r3, r2
 80047ae:	005b      	lsls	r3, r3, #1
 80047b0:	4413      	add	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4a18      	ldr	r2, [pc, #96]	; (8004818 <OS_RdyListInsertHead+0x7c>)
 80047b6:	4413      	add	r3, r2
 80047b8:	60fb      	str	r3, [r7, #12]
    if (p_rdy_list->NbrEntries == (OS_OBJ_QTY)0) {          /* CASE 0: Insert when there are no entries               */
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	891b      	ldrh	r3, [r3, #8]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10f      	bne.n	80047e2 <OS_RdyListInsertHead+0x46>
        p_rdy_list->NbrEntries =  (OS_OBJ_QTY)1;            /*         This is the first entry                        */
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2201      	movs	r2, #1
 80047c6:	811a      	strh	r2, [r3, #8]
        p_tcb->NextPtr         =  (OS_TCB   *)0;            /*         No other OS_TCBs in the list                   */
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	60da      	str	r2, [r3, #12]
        p_tcb->PrevPtr         =  (OS_TCB   *)0;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	611a      	str	r2, [r3, #16]
        p_rdy_list->HeadPtr    =  p_tcb;                    /*         Both list pointers point to this OS_TCB        */
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	601a      	str	r2, [r3, #0]
        p_rdy_list->TailPtr    =  p_tcb;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	605a      	str	r2, [r3, #4]
        p_tcb->PrevPtr         = (OS_TCB    *)0;
        p_tcb2                 = p_rdy_list->HeadPtr;       /*         Adjust old head of list's links                */
        p_tcb2->PrevPtr        = p_tcb;
        p_rdy_list->HeadPtr    = p_tcb;
    }
}
 80047e0:	e015      	b.n	800480e <OS_RdyListInsertHead+0x72>
        p_rdy_list->NbrEntries++;                           /*         One more OS_TCB in the list                    */
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	891b      	ldrh	r3, [r3, #8]
 80047e6:	3301      	adds	r3, #1
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	811a      	strh	r2, [r3, #8]
        p_tcb->NextPtr         = p_rdy_list->HeadPtr;       /*         Adjust new OS_TCBs links                       */
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	60da      	str	r2, [r3, #12]
        p_tcb->PrevPtr         = (OS_TCB    *)0;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	611a      	str	r2, [r3, #16]
        p_tcb2                 = p_rdy_list->HeadPtr;       /*         Adjust old head of list's links                */
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	60bb      	str	r3, [r7, #8]
        p_tcb2->PrevPtr        = p_tcb;
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	611a      	str	r2, [r3, #16]
        p_rdy_list->HeadPtr    = p_tcb;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	601a      	str	r2, [r3, #0]
}
 800480e:	bf00      	nop
 8004810:	3714      	adds	r7, #20
 8004812:	46bd      	mov	sp, r7
 8004814:	bc80      	pop	{r7}
 8004816:	4770      	bx	lr
 8004818:	20001f1c 	.word	0x20001f1c

0800481c <OS_RdyListInsertTail>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListInsertTail (OS_TCB  *p_tcb)
{
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
    OS_RDY_LIST  *p_rdy_list;
    OS_TCB       *p_tcb2;



    p_rdy_list = &OSRdyList[p_tcb->Prio];
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800482a:	461a      	mov	r2, r3
 800482c:	4613      	mov	r3, r2
 800482e:	005b      	lsls	r3, r3, #1
 8004830:	4413      	add	r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4a18      	ldr	r2, [pc, #96]	; (8004898 <OS_RdyListInsertTail+0x7c>)
 8004836:	4413      	add	r3, r2
 8004838:	60fb      	str	r3, [r7, #12]
    if (p_rdy_list->NbrEntries == (OS_OBJ_QTY)0) {          /* CASE 0: Insert when there are no entries               */
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	891b      	ldrh	r3, [r3, #8]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d10f      	bne.n	8004862 <OS_RdyListInsertTail+0x46>
        p_rdy_list->NbrEntries  = (OS_OBJ_QTY)1;            /*         This is the first entry                        */
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2201      	movs	r2, #1
 8004846:	811a      	strh	r2, [r3, #8]
        p_tcb->NextPtr          = (OS_TCB   *)0;            /*         No other OS_TCBs in the list                   */
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	60da      	str	r2, [r3, #12]
        p_tcb->PrevPtr          = (OS_TCB   *)0;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	611a      	str	r2, [r3, #16]
        p_rdy_list->HeadPtr     = p_tcb;                    /*         Both list pointers point to this OS_TCB        */
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	601a      	str	r2, [r3, #0]
        p_rdy_list->TailPtr     = p_tcb;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	605a      	str	r2, [r3, #4]
        p_tcb2                  = p_rdy_list->TailPtr;
        p_tcb->PrevPtr          = p_tcb2;
        p_tcb2->NextPtr         = p_tcb;                    /*         Adjust old tail of list's links                */
        p_rdy_list->TailPtr     = p_tcb;
    }
}
 8004860:	e014      	b.n	800488c <OS_RdyListInsertTail+0x70>
        p_rdy_list->NbrEntries++;                           /*         One more OS_TCB in the list                    */
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	891b      	ldrh	r3, [r3, #8]
 8004866:	3301      	adds	r3, #1
 8004868:	b29a      	uxth	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	811a      	strh	r2, [r3, #8]
        p_tcb->NextPtr          = (OS_TCB   *)0;            /*         Adjust new OS_TCBs links                       */
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	60da      	str	r2, [r3, #12]
        p_tcb2                  = p_rdy_list->TailPtr;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	60bb      	str	r3, [r7, #8]
        p_tcb->PrevPtr          = p_tcb2;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	611a      	str	r2, [r3, #16]
        p_tcb2->NextPtr         = p_tcb;                    /*         Adjust old tail of list's links                */
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	60da      	str	r2, [r3, #12]
        p_rdy_list->TailPtr     = p_tcb;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	605a      	str	r2, [r3, #4]
}
 800488c:	bf00      	nop
 800488e:	3714      	adds	r7, #20
 8004890:	46bd      	mov	sp, r7
 8004892:	bc80      	pop	{r7}
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	20001f1c 	.word	0x20001f1c

0800489c <OS_RdyListRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListRemove (OS_TCB  *p_tcb)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
    OS_TCB       *p_tcb1;
    OS_TCB       *p_tcb2;



    p_rdy_list = &OSRdyList[p_tcb->Prio];
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80048aa:	461a      	mov	r2, r3
 80048ac:	4613      	mov	r3, r2
 80048ae:	005b      	lsls	r3, r3, #1
 80048b0:	4413      	add	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4a24      	ldr	r2, [pc, #144]	; (8004948 <OS_RdyListRemove+0xac>)
 80048b6:	4413      	add	r3, r2
 80048b8:	617b      	str	r3, [r7, #20]
    p_tcb1     = p_tcb->PrevPtr;                            /* Point to next and previous OS_TCB in the list          */
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	613b      	str	r3, [r7, #16]
    p_tcb2     = p_tcb->NextPtr;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	60fb      	str	r3, [r7, #12]
    if (p_tcb1 == (OS_TCB *)0) {                            /* Was the OS_TCB to remove was at the head?              */
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d11f      	bne.n	800490c <OS_RdyListRemove+0x70>
        if (p_tcb2 == (OS_TCB *)0) {                        /* Yes, was it the only OS_TCB?                           */
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10f      	bne.n	80048f2 <OS_RdyListRemove+0x56>
            p_rdy_list->NbrEntries = (OS_OBJ_QTY)0;         /*      Yes, no more entries                              */
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	2200      	movs	r2, #0
 80048d6:	811a      	strh	r2, [r3, #8]
            p_rdy_list->HeadPtr    = (OS_TCB   *)0;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	2200      	movs	r2, #0
 80048dc:	601a      	str	r2, [r3, #0]
            p_rdy_list->TailPtr    = (OS_TCB   *)0;
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	2200      	movs	r2, #0
 80048e2:	605a      	str	r2, [r3, #4]
            OS_PrioRemove(p_tcb->Prio);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7fe fe20 	bl	8003530 <OS_PrioRemove>
 80048f0:	e01f      	b.n	8004932 <OS_RdyListRemove+0x96>
        } else {
            p_rdy_list->NbrEntries--;                       /*      No,  one less entry                               */
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	891b      	ldrh	r3, [r3, #8]
 80048f6:	3b01      	subs	r3, #1
 80048f8:	b29a      	uxth	r2, r3
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	811a      	strh	r2, [r3, #8]
            p_tcb2->PrevPtr        = (OS_TCB   *)0;         /*           adjust back link of new list head            */
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	611a      	str	r2, [r3, #16]
            p_rdy_list->HeadPtr    = p_tcb2;                /*           adjust OS_RDY_LIST's new head                */
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	e012      	b.n	8004932 <OS_RdyListRemove+0x96>
        }
    } else {
        p_rdy_list->NbrEntries--;                           /* No,  one less entry                                    */
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	891b      	ldrh	r3, [r3, #8]
 8004910:	3b01      	subs	r3, #1
 8004912:	b29a      	uxth	r2, r3
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	811a      	strh	r2, [r3, #8]
        p_tcb1->NextPtr = p_tcb2;
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	60da      	str	r2, [r3, #12]
        if (p_tcb2 == (OS_TCB *)0) {
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d103      	bne.n	800492c <OS_RdyListRemove+0x90>
            p_rdy_list->TailPtr = p_tcb1;                   /*      Removing the TCB at the tail, adj the tail ptr    */
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	605a      	str	r2, [r3, #4]
 800492a:	e002      	b.n	8004932 <OS_RdyListRemove+0x96>
        } else {
            p_tcb2->PrevPtr     = p_tcb1;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	611a      	str	r2, [r3, #16]
        }
    }
    p_tcb->PrevPtr = (OS_TCB *)0;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	611a      	str	r2, [r3, #16]
    p_tcb->NextPtr = (OS_TCB *)0;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	60da      	str	r2, [r3, #12]

#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_TASK_SUSPEND(p_tcb);                           /* Record the event.                                      */
#endif
}
 800493e:	bf00      	nop
 8004940:	3718      	adds	r7, #24
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	20001f1c 	.word	0x20001f1c

0800494c <OS_SchedLockTimeMeasStart>:
************************************************************************************************************************
*/

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
void  OS_SchedLockTimeMeasStart (void)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	af00      	add	r7, sp, #0
    if (OSSchedLockNestingCtr == 1u) {
 8004950:	4b05      	ldr	r3, [pc, #20]	; (8004968 <OS_SchedLockTimeMeasStart+0x1c>)
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d104      	bne.n	8004962 <OS_SchedLockTimeMeasStart+0x16>
        OSSchedLockTimeBegin = CPU_TS_TmrRd();
 8004958:	f001 fc9e 	bl	8006298 <CPU_TS_TmrRd>
 800495c:	4602      	mov	r2, r0
 800495e:	4b03      	ldr	r3, [pc, #12]	; (800496c <OS_SchedLockTimeMeasStart+0x20>)
 8004960:	601a      	str	r2, [r3, #0]
    }
}
 8004962:	bf00      	nop
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	20001f08 	.word	0x20001f08
 800496c:	20002170 	.word	0x20002170

08004970 <OS_SchedLockTimeMeasStop>:




void  OS_SchedLockTimeMeasStop (void)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
    CPU_TS_TMR  delta;


    if (OSSchedLockNestingCtr == (OS_NESTING_CTR)0) {       /* Make sure we fully un-nested scheduler lock            */
 8004976:	4b0f      	ldr	r3, [pc, #60]	; (80049b4 <OS_SchedLockTimeMeasStop+0x44>)
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d116      	bne.n	80049ac <OS_SchedLockTimeMeasStop+0x3c>
        delta = CPU_TS_TmrRd()                              /* Compute the delta time between begin and end           */
 800497e:	f001 fc8b 	bl	8006298 <CPU_TS_TmrRd>
 8004982:	4602      	mov	r2, r0
              - OSSchedLockTimeBegin;
 8004984:	4b0c      	ldr	r3, [pc, #48]	; (80049b8 <OS_SchedLockTimeMeasStop+0x48>)
 8004986:	681b      	ldr	r3, [r3, #0]
        delta = CPU_TS_TmrRd()                              /* Compute the delta time between begin and end           */
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	607b      	str	r3, [r7, #4]
        if (OSSchedLockTimeMax    < delta) {                /* Detect peak value                                      */
 800498c:	4b0b      	ldr	r3, [pc, #44]	; (80049bc <OS_SchedLockTimeMeasStop+0x4c>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	429a      	cmp	r2, r3
 8004994:	d902      	bls.n	800499c <OS_SchedLockTimeMeasStop+0x2c>
            OSSchedLockTimeMax    = delta;
 8004996:	4a09      	ldr	r2, [pc, #36]	; (80049bc <OS_SchedLockTimeMeasStop+0x4c>)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6013      	str	r3, [r2, #0]
        }
        if (OSSchedLockTimeMaxCur < delta) {                /* Detect peak value (for resettable value)               */
 800499c:	4b08      	ldr	r3, [pc, #32]	; (80049c0 <OS_SchedLockTimeMeasStop+0x50>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d902      	bls.n	80049ac <OS_SchedLockTimeMeasStop+0x3c>
            OSSchedLockTimeMaxCur = delta;
 80049a6:	4a06      	ldr	r2, [pc, #24]	; (80049c0 <OS_SchedLockTimeMeasStop+0x50>)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6013      	str	r3, [r2, #0]
        }
    }
}
 80049ac:	bf00      	nop
 80049ae:	3708      	adds	r7, #8
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	20001f08 	.word	0x20001f08
 80049b8:	20002170 	.word	0x20002170
 80049bc:	20002394 	.word	0x20002394
 80049c0:	20002184 	.word	0x20002184

080049c4 <OS_TaskBlock>:
************************************************************************************************************************
*/

void  OS_TaskBlock (OS_TCB   *p_tcb,
                    OS_TICK   timeout)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
    if (timeout > (OS_TICK)0) {                             /* Add task to tick list if timeout non zero               */
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d009      	beq.n	80049e8 <OS_TaskBlock+0x24>
        OS_TickListInsert(&OSTickListTimeout, p_tcb, timeout);
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	6879      	ldr	r1, [r7, #4]
 80049d8:	4809      	ldr	r0, [pc, #36]	; (8004a00 <OS_TaskBlock+0x3c>)
 80049da:	f7fe f921 	bl	8002c20 <OS_TickListInsert>
        p_tcb->TaskState = OS_TASK_STATE_PEND_TIMEOUT;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2203      	movs	r2, #3
 80049e2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 80049e6:	e003      	b.n	80049f0 <OS_TaskBlock+0x2c>
    } else {
        p_tcb->TaskState = OS_TASK_STATE_PEND;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2202      	movs	r2, #2
 80049ec:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    }
    OS_RdyListRemove(p_tcb);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f7ff ff53 	bl	800489c <OS_RdyListRemove>
}
 80049f6:	bf00      	nop
 80049f8:	3708      	adds	r7, #8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	20002484 	.word	0x20002484

08004a04 <OS_MsgPoolInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MsgPoolInit (OS_ERR  *p_err)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b087      	sub	sp, #28
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (OSCfg_MsgPoolBasePtr == (OS_MSG *)0) {
 8004a0c:	4b2d      	ldr	r3, [pc, #180]	; (8004ac4 <OS_MsgPoolInit+0xc0>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d104      	bne.n	8004a1e <OS_MsgPoolInit+0x1a>
       *p_err = OS_ERR_MSG_POOL_NULL_PTR;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f245 721e 	movw	r2, #22302	; 0x571e
 8004a1a:	801a      	strh	r2, [r3, #0]
        return;
 8004a1c:	e04e      	b.n	8004abc <OS_MsgPoolInit+0xb8>
    }
    if (OSCfg_MsgPoolSize == (OS_MSG_QTY)0) {
 8004a1e:	4b2a      	ldr	r3, [pc, #168]	; (8004ac8 <OS_MsgPoolInit+0xc4>)
 8004a20:	881b      	ldrh	r3, [r3, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d104      	bne.n	8004a30 <OS_MsgPoolInit+0x2c>
       *p_err = OS_ERR_MSG_POOL_EMPTY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f245 721d 	movw	r2, #22301	; 0x571d
 8004a2c:	801a      	strh	r2, [r3, #0]
        return;
 8004a2e:	e045      	b.n	8004abc <OS_MsgPoolInit+0xb8>
    }
#endif

    p_msg1 = OSCfg_MsgPoolBasePtr;
 8004a30:	4b24      	ldr	r3, [pc, #144]	; (8004ac4 <OS_MsgPoolInit+0xc0>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	617b      	str	r3, [r7, #20]
    p_msg2 = OSCfg_MsgPoolBasePtr;
 8004a36:	4b23      	ldr	r3, [pc, #140]	; (8004ac4 <OS_MsgPoolInit+0xc0>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	613b      	str	r3, [r7, #16]
    p_msg2++;
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	3310      	adds	r3, #16
 8004a40:	613b      	str	r3, [r7, #16]
    loops  = OSCfg_MsgPoolSize - 1u;
 8004a42:	4b21      	ldr	r3, [pc, #132]	; (8004ac8 <OS_MsgPoolInit+0xc4>)
 8004a44:	881b      	ldrh	r3, [r3, #0]
 8004a46:	3b01      	subs	r3, #1
 8004a48:	81bb      	strh	r3, [r7, #12]
    for (i = 0u; i < loops; i++) {                          /* Init. list of free OS_MSGs                             */
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	81fb      	strh	r3, [r7, #14]
 8004a4e:	e014      	b.n	8004a7a <OS_MsgPoolInit+0x76>
        p_msg1->NextPtr = p_msg2;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	601a      	str	r2, [r3, #0]
        p_msg1->MsgPtr  = (void      *)0;
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	605a      	str	r2, [r3, #4]
        p_msg1->MsgSize = (OS_MSG_SIZE)0u;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	811a      	strh	r2, [r3, #8]
        p_msg1->MsgTS   = (CPU_TS     )0u;
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	2200      	movs	r2, #0
 8004a66:	60da      	str	r2, [r3, #12]
        p_msg1++;
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	3310      	adds	r3, #16
 8004a6c:	617b      	str	r3, [r7, #20]
        p_msg2++;
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	3310      	adds	r3, #16
 8004a72:	613b      	str	r3, [r7, #16]
    for (i = 0u; i < loops; i++) {                          /* Init. list of free OS_MSGs                             */
 8004a74:	89fb      	ldrh	r3, [r7, #14]
 8004a76:	3301      	adds	r3, #1
 8004a78:	81fb      	strh	r3, [r7, #14]
 8004a7a:	89fa      	ldrh	r2, [r7, #14]
 8004a7c:	89bb      	ldrh	r3, [r7, #12]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d3e6      	bcc.n	8004a50 <OS_MsgPoolInit+0x4c>
    }
    p_msg1->NextPtr = (OS_MSG    *)0;                       /* Last OS_MSG                                            */
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	2200      	movs	r2, #0
 8004a86:	601a      	str	r2, [r3, #0]
    p_msg1->MsgPtr  = (void      *)0;
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	605a      	str	r2, [r3, #4]
    p_msg1->MsgSize = (OS_MSG_SIZE)0u;
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	2200      	movs	r2, #0
 8004a92:	811a      	strh	r2, [r3, #8]
    p_msg1->MsgTS   = (CPU_TS     )0u;
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	2200      	movs	r2, #0
 8004a98:	60da      	str	r2, [r3, #12]

    OSMsgPool.NextPtr    =  OSCfg_MsgPoolBasePtr;
 8004a9a:	4b0a      	ldr	r3, [pc, #40]	; (8004ac4 <OS_MsgPoolInit+0xc0>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a0b      	ldr	r2, [pc, #44]	; (8004acc <OS_MsgPoolInit+0xc8>)
 8004aa0:	6013      	str	r3, [r2, #0]
    OSMsgPool.NbrFree    =  OSCfg_MsgPoolSize;
 8004aa2:	4b09      	ldr	r3, [pc, #36]	; (8004ac8 <OS_MsgPoolInit+0xc4>)
 8004aa4:	881a      	ldrh	r2, [r3, #0]
 8004aa6:	4b09      	ldr	r3, [pc, #36]	; (8004acc <OS_MsgPoolInit+0xc8>)
 8004aa8:	809a      	strh	r2, [r3, #4]
    OSMsgPool.NbrUsed    = (OS_MSG_QTY)0;
 8004aaa:	4b08      	ldr	r3, [pc, #32]	; (8004acc <OS_MsgPoolInit+0xc8>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	80da      	strh	r2, [r3, #6]
#if OS_CFG_DBG_EN > 0u
    OSMsgPool.NbrUsedMax = (OS_MSG_QTY)0;
 8004ab0:	4b06      	ldr	r3, [pc, #24]	; (8004acc <OS_MsgPoolInit+0xc8>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	811a      	strh	r2, [r3, #8]
#endif
   *p_err                =  OS_ERR_NONE;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	801a      	strh	r2, [r3, #0]
}
 8004abc:	371c      	adds	r7, #28
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bc80      	pop	{r7}
 8004ac2:	4770      	bx	lr
 8004ac4:	0800e9e4 	.word	0x0800e9e4
 8004ac8:	0800e9e0 	.word	0x0800e9e0
 8004acc:	20002264 	.word	0x20002264

08004ad0 <OS_MsgQInit>:
************************************************************************************************************************
*/

void  OS_MsgQInit (OS_MSG_Q    *p_msg_q,
                   OS_MSG_QTY   size)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	460b      	mov	r3, r1
 8004ada:	807b      	strh	r3, [r7, #2]
    p_msg_q->NbrEntriesSize = (OS_MSG_QTY)size;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	887a      	ldrh	r2, [r7, #2]
 8004ae0:	811a      	strh	r2, [r3, #8]
    p_msg_q->NbrEntries     = (OS_MSG_QTY)0;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	815a      	strh	r2, [r3, #10]
#if OS_CFG_DBG_EN > 0u
    p_msg_q->NbrEntriesMax  = (OS_MSG_QTY)0;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	819a      	strh	r2, [r3, #12]
#endif
    p_msg_q->InPtr          = (OS_MSG   *)0;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	601a      	str	r2, [r3, #0]
    p_msg_q->OutPtr         = (OS_MSG   *)0;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	605a      	str	r2, [r3, #4]
}
 8004afa:	bf00      	nop
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bc80      	pop	{r7}
 8004b02:	4770      	bx	lr

08004b04 <OS_MsgQGet>:

void  *OS_MsgQGet (OS_MSG_Q     *p_msg_q,
                   OS_MSG_SIZE  *p_msg_size,
                   CPU_TS       *p_ts,
                   OS_ERR       *p_err)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b087      	sub	sp, #28
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
 8004b10:	603b      	str	r3, [r7, #0]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return ((void *)0);
    }
#endif

    if (p_msg_q->NbrEntries == (OS_MSG_QTY)0) {             /* Is the queue empty?                                    */
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	895b      	ldrh	r3, [r3, #10]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10e      	bne.n	8004b38 <OS_MsgQGet+0x34>
       *p_msg_size = (OS_MSG_SIZE)0;                        /* Yes                                                    */
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	801a      	strh	r2, [r3, #0]
        if (p_ts != (CPU_TS *)0) {
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d002      	beq.n	8004b2c <OS_MsgQGet+0x28>
           *p_ts  = (CPU_TS  )0;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	601a      	str	r2, [r3, #0]
        }
       *p_err = OS_ERR_Q_EMPTY;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	f246 5292 	movw	r2, #26002	; 0x6592
 8004b32:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 8004b34:	2300      	movs	r3, #0
 8004b36:	e03c      	b.n	8004bb2 <OS_MsgQGet+0xae>
    }

    p_msg           = p_msg_q->OutPtr;                      /* No, get the next message to extract from the queue     */
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	617b      	str	r3, [r7, #20]
    p_void          = p_msg->MsgPtr;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	613b      	str	r3, [r7, #16]
   *p_msg_size      = p_msg->MsgSize;
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	891a      	ldrh	r2, [r3, #8]
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	801a      	strh	r2, [r3, #0]
    if (p_ts != (CPU_TS *)0) {
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d003      	beq.n	8004b5a <OS_MsgQGet+0x56>
       *p_ts  = p_msg->MsgTS;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	68da      	ldr	r2, [r3, #12]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	601a      	str	r2, [r3, #0]
    }

    p_msg_q->OutPtr = p_msg->NextPtr;                       /* Point to next message to extract                       */
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	605a      	str	r2, [r3, #4]

    if (p_msg_q->OutPtr == (OS_MSG *)0) {                   /* Are there any more messages in the queue?              */
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d106      	bne.n	8004b78 <OS_MsgQGet+0x74>
        p_msg_q->InPtr      = (OS_MSG   *)0;                /* No                                                     */
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	601a      	str	r2, [r3, #0]
        p_msg_q->NbrEntries = (OS_MSG_QTY)0;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	815a      	strh	r2, [r3, #10]
 8004b76:	e005      	b.n	8004b84 <OS_MsgQGet+0x80>
    } else {
        p_msg_q->NbrEntries--;                              /* Yes, One less message in the queue                     */
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	895b      	ldrh	r3, [r3, #10]
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	815a      	strh	r2, [r3, #10]
    }

    p_msg->NextPtr    = OSMsgPool.NextPtr;                  /* Return message control block to free list              */
 8004b84:	4b0d      	ldr	r3, [pc, #52]	; (8004bbc <OS_MsgQGet+0xb8>)
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	601a      	str	r2, [r3, #0]
    OSMsgPool.NextPtr = p_msg;
 8004b8c:	4a0b      	ldr	r2, [pc, #44]	; (8004bbc <OS_MsgQGet+0xb8>)
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	6013      	str	r3, [r2, #0]
    OSMsgPool.NbrFree++;
 8004b92:	4b0a      	ldr	r3, [pc, #40]	; (8004bbc <OS_MsgQGet+0xb8>)
 8004b94:	889b      	ldrh	r3, [r3, #4]
 8004b96:	3301      	adds	r3, #1
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	4b08      	ldr	r3, [pc, #32]	; (8004bbc <OS_MsgQGet+0xb8>)
 8004b9c:	809a      	strh	r2, [r3, #4]
    OSMsgPool.NbrUsed--;
 8004b9e:	4b07      	ldr	r3, [pc, #28]	; (8004bbc <OS_MsgQGet+0xb8>)
 8004ba0:	88db      	ldrh	r3, [r3, #6]
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	4b05      	ldr	r3, [pc, #20]	; (8004bbc <OS_MsgQGet+0xb8>)
 8004ba8:	80da      	strh	r2, [r3, #6]

   *p_err             = OS_ERR_NONE;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	2200      	movs	r2, #0
 8004bae:	801a      	strh	r2, [r3, #0]
    return (p_void);
 8004bb0:	693b      	ldr	r3, [r7, #16]
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	371c      	adds	r7, #28
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bc80      	pop	{r7}
 8004bba:	4770      	bx	lr
 8004bbc:	20002264 	.word	0x20002264

08004bc0 <OS_MsgQPut>:
                  void         *p_void,
                  OS_MSG_SIZE   msg_size,
                  OS_OPT        opt,
                  CPU_TS        ts,
                  OS_ERR       *p_err)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b087      	sub	sp, #28
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	4611      	mov	r1, r2
 8004bcc:	461a      	mov	r2, r3
 8004bce:	460b      	mov	r3, r1
 8004bd0:	80fb      	strh	r3, [r7, #6]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	80bb      	strh	r3, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    if (p_msg_q->NbrEntries >= p_msg_q->NbrEntriesSize) {
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	895a      	ldrh	r2, [r3, #10]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	891b      	ldrh	r3, [r3, #8]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d304      	bcc.n	8004bec <OS_MsgQPut+0x2c>
       *p_err = OS_ERR_Q_MAX;                               /* Message queue cannot accept any more messages          */
 8004be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be4:	f246 5293 	movw	r2, #26003	; 0x6593
 8004be8:	801a      	strh	r2, [r3, #0]
        return;
 8004bea:	e06b      	b.n	8004cc4 <OS_MsgQPut+0x104>
    }

    if (OSMsgPool.NbrFree == (OS_MSG_QTY)0) {
 8004bec:	4b37      	ldr	r3, [pc, #220]	; (8004ccc <OS_MsgQPut+0x10c>)
 8004bee:	889b      	ldrh	r3, [r3, #4]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d104      	bne.n	8004bfe <OS_MsgQPut+0x3e>
       *p_err = OS_ERR_MSG_POOL_EMPTY;                      /* No more OS_MSG to use                                  */
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf6:	f245 721d 	movw	r2, #22301	; 0x571d
 8004bfa:	801a      	strh	r2, [r3, #0]
        return;
 8004bfc:	e062      	b.n	8004cc4 <OS_MsgQPut+0x104>
    }

    p_msg             = OSMsgPool.NextPtr;                  /* Remove message control block from free list            */
 8004bfe:	4b33      	ldr	r3, [pc, #204]	; (8004ccc <OS_MsgQPut+0x10c>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	617b      	str	r3, [r7, #20]
    OSMsgPool.NextPtr = p_msg->NextPtr;
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a30      	ldr	r2, [pc, #192]	; (8004ccc <OS_MsgQPut+0x10c>)
 8004c0a:	6013      	str	r3, [r2, #0]
    OSMsgPool.NbrFree--;
 8004c0c:	4b2f      	ldr	r3, [pc, #188]	; (8004ccc <OS_MsgQPut+0x10c>)
 8004c0e:	889b      	ldrh	r3, [r3, #4]
 8004c10:	3b01      	subs	r3, #1
 8004c12:	b29a      	uxth	r2, r3
 8004c14:	4b2d      	ldr	r3, [pc, #180]	; (8004ccc <OS_MsgQPut+0x10c>)
 8004c16:	809a      	strh	r2, [r3, #4]
    OSMsgPool.NbrUsed++;
 8004c18:	4b2c      	ldr	r3, [pc, #176]	; (8004ccc <OS_MsgQPut+0x10c>)
 8004c1a:	88db      	ldrh	r3, [r3, #6]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	4b2a      	ldr	r3, [pc, #168]	; (8004ccc <OS_MsgQPut+0x10c>)
 8004c22:	80da      	strh	r2, [r3, #6]

#if OS_CFG_DBG_EN > 0u
    if (OSMsgPool.NbrUsedMax < OSMsgPool.NbrUsed) {
 8004c24:	4b29      	ldr	r3, [pc, #164]	; (8004ccc <OS_MsgQPut+0x10c>)
 8004c26:	891a      	ldrh	r2, [r3, #8]
 8004c28:	4b28      	ldr	r3, [pc, #160]	; (8004ccc <OS_MsgQPut+0x10c>)
 8004c2a:	88db      	ldrh	r3, [r3, #6]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d203      	bcs.n	8004c38 <OS_MsgQPut+0x78>
        OSMsgPool.NbrUsedMax = OSMsgPool.NbrUsed;
 8004c30:	4b26      	ldr	r3, [pc, #152]	; (8004ccc <OS_MsgQPut+0x10c>)
 8004c32:	88da      	ldrh	r2, [r3, #6]
 8004c34:	4b25      	ldr	r3, [pc, #148]	; (8004ccc <OS_MsgQPut+0x10c>)
 8004c36:	811a      	strh	r2, [r3, #8]
    }
#endif

    if (p_msg_q->NbrEntries == (OS_MSG_QTY)0) {             /* Is this first message placed in the queue?             */
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	895b      	ldrh	r3, [r3, #10]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10c      	bne.n	8004c5a <OS_MsgQPut+0x9a>
        p_msg_q->InPtr         = p_msg;                     /* Yes                                                    */
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	601a      	str	r2, [r3, #0]
        p_msg_q->OutPtr        = p_msg;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	697a      	ldr	r2, [r7, #20]
 8004c4a:	605a      	str	r2, [r3, #4]
        p_msg_q->NbrEntries    = (OS_MSG_QTY)1;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	815a      	strh	r2, [r3, #10]
        p_msg->NextPtr         = (OS_MSG *)0;
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	2200      	movs	r2, #0
 8004c56:	601a      	str	r2, [r3, #0]
 8004c58:	e01e      	b.n	8004c98 <OS_MsgQPut+0xd8>
    } else {                                                /* No                                                     */
        if ((opt & OS_OPT_POST_LIFO) == OS_OPT_POST_FIFO) { /* Is it FIFO or LIFO?                                    */
 8004c5a:	88bb      	ldrh	r3, [r7, #4]
 8004c5c:	f003 0310 	and.w	r3, r3, #16
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d10c      	bne.n	8004c7e <OS_MsgQPut+0xbe>
            p_msg_in           = p_msg_q->InPtr;            /* FIFO, add to the head                                  */
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	613b      	str	r3, [r7, #16]
            p_msg_in->NextPtr  = p_msg;
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	601a      	str	r2, [r3, #0]
            p_msg_q->InPtr     = p_msg;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	601a      	str	r2, [r3, #0]
            p_msg->NextPtr     = (OS_MSG *)0;
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	601a      	str	r2, [r3, #0]
 8004c7c:	e006      	b.n	8004c8c <OS_MsgQPut+0xcc>
        } else {
            p_msg->NextPtr     = p_msg_q->OutPtr;           /* LIFO, add to the tail                                  */
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	601a      	str	r2, [r3, #0]
            p_msg_q->OutPtr    = p_msg;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	605a      	str	r2, [r3, #4]
        }
        p_msg_q->NbrEntries++;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	895b      	ldrh	r3, [r3, #10]
 8004c90:	3301      	adds	r3, #1
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	815a      	strh	r2, [r3, #10]
    }

#if OS_CFG_DBG_EN > 0u
    if (p_msg_q->NbrEntriesMax < p_msg_q->NbrEntries) {
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	899a      	ldrh	r2, [r3, #12]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	895b      	ldrh	r3, [r3, #10]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d203      	bcs.n	8004cac <OS_MsgQPut+0xec>
        p_msg_q->NbrEntriesMax = p_msg_q->NbrEntries;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	895a      	ldrh	r2, [r3, #10]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	819a      	strh	r2, [r3, #12]
    }
#endif

    p_msg->MsgPtr  = p_void;                                /* Deposit message in the message queue entry             */
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	605a      	str	r2, [r3, #4]
    p_msg->MsgSize = msg_size;
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	88fa      	ldrh	r2, [r7, #6]
 8004cb6:	811a      	strh	r2, [r3, #8]
    p_msg->MsgTS   = ts;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	6a3a      	ldr	r2, [r7, #32]
 8004cbc:	60da      	str	r2, [r3, #12]
   *p_err          = OS_ERR_NONE;
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	801a      	strh	r2, [r3, #0]
}
 8004cc4:	371c      	adds	r7, #28
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bc80      	pop	{r7}
 8004cca:	4770      	bx	lr
 8004ccc:	20002264 	.word	0x20002264

08004cd0 <OSTaskCreate>:
                    OS_MSG_QTY     q_size,
                    OS_TICK        time_quanta,
                    void          *p_ext,
                    OS_OPT         opt,
                    OS_ERR        *p_err)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b08c      	sub	sp, #48	; 0x30
 8004cd4:	af02      	add	r7, sp, #8
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]
 8004cdc:	603b      	str	r3, [r7, #0]
    OS_TLS_ID      id;
#endif

    CPU_STK       *p_sp;
    CPU_STK       *p_stk_limit;
    CPU_SR_ALLOC();
 8004cde:	2300      	movs	r3, #0
 8004ce0:	61bb      	str	r3, [r7, #24]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* ---------- CANNOT CREATE A TASK FROM AN ISR ---------- */
 8004ce2:	4b75      	ldr	r3, [pc, #468]	; (8004eb8 <OSTaskCreate+0x1e8>)
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d004      	beq.n	8004cf4 <OSTaskCreate+0x24>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_CREATE_FAILED(p_tcb);                 /* Record the event.                                      */
#endif
       *p_err = OS_ERR_TASK_CREATE_ISR;
 8004cea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cec:	f247 124a 	movw	r2, #29002	; 0x714a
 8004cf0:	801a      	strh	r2, [r3, #0]
        return;
 8004cf2:	e0dd      	b.n	8004eb0 <OSTaskCreate+0x1e0>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u                                  /* ---------------- VALIDATE ARGUMENTS ------------------ */
    if (p_tcb == (OS_TCB *)0) {                             /* User must supply a valid OS_TCB                        */
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d104      	bne.n	8004d04 <OSTaskCreate+0x34>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_CREATE_FAILED(p_tcb);                 /* Record the event.                                      */
#endif
       *p_err = OS_ERR_TCB_INVALID;
 8004cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cfc:	f247 12ad 	movw	r2, #29101	; 0x71ad
 8004d00:	801a      	strh	r2, [r3, #0]
        return;
 8004d02:	e0d5      	b.n	8004eb0 <OSTaskCreate+0x1e0>
    }
    if (p_task == (OS_TASK_PTR)0) {                         /* User must supply a valid task                          */
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d104      	bne.n	8004d14 <OSTaskCreate+0x44>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_CREATE_FAILED(p_tcb);                 /* Record the event.                                      */
#endif
       *p_err = OS_ERR_TASK_INVALID;
 8004d0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d0c:	f247 124f 	movw	r2, #29007	; 0x714f
 8004d10:	801a      	strh	r2, [r3, #0]
        return;
 8004d12:	e0cd      	b.n	8004eb0 <OSTaskCreate+0x1e0>
    }
    if (p_stk_base == (CPU_STK *)0) {                       /* User must supply a valid stack base address            */
 8004d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d104      	bne.n	8004d24 <OSTaskCreate+0x54>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_CREATE_FAILED(p_tcb);                 /* Record the event.                                      */
#endif
       *p_err = OS_ERR_STK_INVALID;
 8004d1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d1c:	f646 622f 	movw	r2, #28207	; 0x6e2f
 8004d20:	801a      	strh	r2, [r3, #0]
        return;
 8004d22:	e0c5      	b.n	8004eb0 <OSTaskCreate+0x1e0>
    }
    if (stk_size < OSCfg_StkSizeMin) {                      /* User must supply a valid minimum stack size            */
 8004d24:	4b65      	ldr	r3, [pc, #404]	; (8004ebc <OSTaskCreate+0x1ec>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d204      	bcs.n	8004d38 <OSTaskCreate+0x68>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_CREATE_FAILED(p_tcb);                 /* Record the event.                                      */
#endif
       *p_err = OS_ERR_STK_SIZE_INVALID;
 8004d2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d30:	f646 6230 	movw	r2, #28208	; 0x6e30
 8004d34:	801a      	strh	r2, [r3, #0]
        return;
 8004d36:	e0bb      	b.n	8004eb0 <OSTaskCreate+0x1e0>
    }
    if (stk_limit >= stk_size) {                            /* User must supply a valid stack limit                   */
 8004d38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d304      	bcc.n	8004d4a <OSTaskCreate+0x7a>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_CREATE_FAILED(p_tcb);                 /* Record the event.                                      */
#endif
       *p_err = OS_ERR_STK_LIMIT_INVALID;
 8004d40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d42:	f646 6231 	movw	r2, #28209	; 0x6e31
 8004d46:	801a      	strh	r2, [r3, #0]
        return;
 8004d48:	e0b2      	b.n	8004eb0 <OSTaskCreate+0x1e0>
    }
    if (prio >= OS_CFG_PRIO_MAX) {                          /* Priority must be within 0 and OS_CFG_PRIO_MAX-1        */
 8004d4a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004d4e:	2b1f      	cmp	r3, #31
 8004d50:	d904      	bls.n	8004d5c <OSTaskCreate+0x8c>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_CREATE_FAILED(p_tcb);                 /* Record the event.                                      */
#endif
       *p_err = OS_ERR_PRIO_INVALID;
 8004d52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d54:	f246 2273 	movw	r2, #25203	; 0x6273
 8004d58:	801a      	strh	r2, [r3, #0]
        return;
 8004d5a:	e0a9      	b.n	8004eb0 <OSTaskCreate+0x1e0>
            return;
        }
    }
#endif

    if (prio == (OS_CFG_PRIO_MAX - 1u)) {
 8004d5c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004d60:	2b1f      	cmp	r3, #31
 8004d62:	d108      	bne.n	8004d76 <OSTaskCreate+0xa6>
        if (p_tcb != &OSIdleTaskTCB) {
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	4a56      	ldr	r2, [pc, #344]	; (8004ec0 <OSTaskCreate+0x1f0>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d004      	beq.n	8004d76 <OSTaskCreate+0xa6>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
            TRACE_OS_TASK_CREATE_FAILED(p_tcb);             /* Record the event.                                      */
#endif
           *p_err = OS_ERR_PRIO_INVALID;                    /* Not allowed to use same priority as idle task          */
 8004d6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d6e:	f246 2273 	movw	r2, #25203	; 0x6273
 8004d72:	801a      	strh	r2, [r3, #0]
            return;
 8004d74:	e09c      	b.n	8004eb0 <OSTaskCreate+0x1e0>
        }
    }

    OS_TaskInitTCB(p_tcb);                                  /* Initialize the TCB to default values                   */
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	f000 faca 	bl	8005310 <OS_TaskInitTCB>

   *p_err = OS_ERR_NONE;
 8004d7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d7e:	2200      	movs	r2, #0
 8004d80:	801a      	strh	r2, [r3, #0]
                                                            /* --------------- CLEAR THE TASK'S STACK --------------- */
    if ((opt & OS_OPT_TASK_STK_CHK) != (OS_OPT)0) {         /* See if stack checking has been enabled                 */
 8004d82:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d017      	beq.n	8004dbe <OSTaskCreate+0xee>
        if ((opt & OS_OPT_TASK_STK_CLR) != (OS_OPT)0) {     /* See if stack needs to be cleared                       */
 8004d8e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d011      	beq.n	8004dbe <OSTaskCreate+0xee>
            p_sp = p_stk_base;
 8004d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d9c:	61fb      	str	r3, [r7, #28]
            for (i = 0u; i < stk_size; i++) {               /* Stack grows from HIGH to LOW memory                    */
 8004d9e:	2300      	movs	r3, #0
 8004da0:	627b      	str	r3, [r7, #36]	; 0x24
 8004da2:	e008      	b.n	8004db6 <OSTaskCreate+0xe6>
               *p_sp = (CPU_STK)0;                          /* Clear from bottom of stack and up!                     */
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	2200      	movs	r2, #0
 8004da8:	601a      	str	r2, [r3, #0]
                p_sp++;
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	3304      	adds	r3, #4
 8004dae:	61fb      	str	r3, [r7, #28]
            for (i = 0u; i < stk_size; i++) {               /* Stack grows from HIGH to LOW memory                    */
 8004db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db2:	3301      	adds	r3, #1
 8004db4:	627b      	str	r3, [r7, #36]	; 0x24
 8004db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d3f2      	bcc.n	8004da4 <OSTaskCreate+0xd4>
            }
        }
    }
                                                            /* ------- INITIALIZE THE STACK FRAME OF THE TASK ------- */
#if (CPU_CFG_STK_GROWTH == CPU_STK_GROWTH_HI_TO_LO)
    p_stk_limit = p_stk_base + stk_limit;
 8004dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dc4:	4413      	add	r3, r2
 8004dc6:	617b      	str	r3, [r7, #20]
#else
    p_stk_limit = p_stk_base + (stk_size - 1u) - stk_limit;
#endif

    p_sp = OSTaskStkInit(p_task,
 8004dc8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004dcc:	9301      	str	r3, [sp, #4]
 8004dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dd0:	9300      	str	r3, [sp, #0]
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dd6:	6839      	ldr	r1, [r7, #0]
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f001 f871 	bl	8005ec0 <OSTaskStkInit>
 8004dde:	61f8      	str	r0, [r7, #28]
                         stk_size,
                         opt);

                                                            /* -------------- INITIALIZE THE TCB FIELDS ------------- */
#if OS_CFG_DBG_EN > 0u
    p_tcb->TaskEntryAddr = p_task;                          /* Save task entry point address                          */
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	629a      	str	r2, [r3, #40]	; 0x28
    p_tcb->TaskEntryArg  = p_arg;                           /* Save task entry argument                               */
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	683a      	ldr	r2, [r7, #0]
 8004dea:	62da      	str	r2, [r3, #44]	; 0x2c
#endif

#if OS_CFG_DBG_EN > 0u
    p_tcb->NamePtr       = p_name;                          /* Save task name                                         */
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	68ba      	ldr	r2, [r7, #8]
 8004df0:	621a      	str	r2, [r3, #32]
#else
    (void)&p_name;
#endif

    p_tcb->Prio          = prio;                            /* Save the task's priority                               */
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8004df8:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

#if OS_CFG_MUTEX_EN > 0u
    p_tcb->BasePrio      = prio;                            /* Set the base priority                                  */
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8004e02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
#endif

    p_tcb->StkPtr        = p_sp;                            /* Save the new top-of-stack pointer                      */
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	69fa      	ldr	r2, [r7, #28]
 8004e0a:	601a      	str	r2, [r3, #0]
#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u))
    p_tcb->StkLimitPtr   = p_stk_limit;                     /* Save the stack limit pointer                           */
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	609a      	str	r2, [r3, #8]
    }
#else
    (void)&time_quanta;
#endif

    p_tcb->ExtPtr        = p_ext;                           /* Save pointer to TCB extension                          */
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e16:	605a      	str	r2, [r3, #4]
#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u))
    p_tcb->StkBasePtr    = p_stk_base;                      /* Save pointer to the base address of the stack          */
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e1c:	625a      	str	r2, [r3, #36]	; 0x24
    p_tcb->StkSize       = stk_size;                        /* Save the stack size (in number of CPU_STK elements)    */
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e22:	641a      	str	r2, [r3, #64]	; 0x40
#endif
    p_tcb->Opt           = opt;                             /* Save task options                                      */
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8004e2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if OS_CFG_TASK_REG_TBL_SIZE > 0u
    for (reg_nbr = 0u; reg_nbr < OS_CFG_TASK_REG_TBL_SIZE; reg_nbr++) {
 8004e2e:	2300      	movs	r3, #0
 8004e30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e34:	e00b      	b.n	8004e4e <OSTaskCreate+0x17e>
        p_tcb->RegTbl[reg_nbr] = (OS_REG)0;
 8004e36:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	321e      	adds	r2, #30
 8004e3e:	2100      	movs	r1, #0
 8004e40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (reg_nbr = 0u; reg_nbr < OS_CFG_TASK_REG_TBL_SIZE; reg_nbr++) {
 8004e44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e48:	3301      	adds	r3, #1
 8004e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d0ef      	beq.n	8004e36 <OSTaskCreate+0x166>
    }
#endif

#if OS_CFG_TASK_Q_EN > 0u
    OS_MsgQInit(&p_tcb->MsgQ,                               /* Initialize the task's message queue                    */
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	3360      	adds	r3, #96	; 0x60
 8004e5a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004e5e:	4611      	mov	r1, r2
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7ff fe35 	bl	8004ad0 <OS_MsgQInit>
                q_size);
#else
    (void)&q_size;
#endif

    OSTaskCreateHook(p_tcb);                                /* Call user defined hook                                 */
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f001 f806 	bl	8005e78 <OSTaskCreateHook>
        p_tcb->TLS_Tbl[id] = (OS_TLS)0;
    }
    OS_TLS_TaskCreate(p_tcb);                               /* Call TLS hook                                          */
#endif
                                                            /* --------------- ADD TASK TO READY LIST --------------- */
    OS_CRITICAL_ENTER();
 8004e6c:	f7fb fa38 	bl	80002e0 <CPU_SR_Save>
 8004e70:	61b8      	str	r0, [r7, #24]
    OS_PrioInsert(p_tcb->Prio);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7fe fb33 	bl	80034e4 <OS_PrioInsert>
    OS_RdyListInsertTail(p_tcb);
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f7ff fccc 	bl	800481c <OS_RdyListInsertTail>

#if OS_CFG_DBG_EN > 0u
    OS_TaskDbgListAdd(p_tcb);
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f000 fa01 	bl	800528c <OS_TaskDbgListAdd>
#endif

    OSTaskQty++;                                            /* Increment the #tasks counter                           */
 8004e8a:	4b0e      	ldr	r3, [pc, #56]	; (8004ec4 <OSTaskCreate+0x1f4>)
 8004e8c:	881b      	ldrh	r3, [r3, #0]
 8004e8e:	3301      	adds	r3, #1
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	4b0c      	ldr	r3, [pc, #48]	; (8004ec4 <OSTaskCreate+0x1f4>)
 8004e94:	801a      	strh	r2, [r3, #0]

    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Return if multitasking has not started                 */
 8004e96:	4b0c      	ldr	r3, [pc, #48]	; (8004ec8 <OSTaskCreate+0x1f8>)
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d003      	beq.n	8004ea6 <OSTaskCreate+0x1d6>
        OS_CRITICAL_EXIT();
 8004e9e:	69b8      	ldr	r0, [r7, #24]
 8004ea0:	f7fb fa22 	bl	80002e8 <CPU_SR_Restore>
        return;
 8004ea4:	e004      	b.n	8004eb0 <OSTaskCreate+0x1e0>
    }

    OS_CRITICAL_EXIT_NO_SCHED();
 8004ea6:	69b8      	ldr	r0, [r7, #24]
 8004ea8:	f7fb fa1e 	bl	80002e8 <CPU_SR_Restore>

    OSSched();
 8004eac:	f7ff f802 	bl	8003eb4 <OSSched>
}
 8004eb0:	3728      	adds	r7, #40	; 0x28
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	2000219e 	.word	0x2000219e
 8004ebc:	0800e9fc 	.word	0x0800e9fc
 8004ec0:	20002270 	.word	0x20002270
 8004ec4:	200021a0 	.word	0x200021a0
 8004ec8:	20001f19 	.word	0x20001f19

08004ecc <OSTaskResume>:
*/

#if OS_CFG_TASK_SUSPEND_EN > 0u
void  OSTaskResume (OS_TCB  *p_tcb,
                    OS_ERR  *p_err)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
    CPU_SR_ALLOC();
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	60fb      	str	r3, [r7, #12]
    }
#endif

#if (OS_CFG_ISR_POST_DEFERRED_EN   == 0u) && \
    (OS_CFG_CALLED_FROM_ISR_CHK_EN >  0u)
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 8004eda:	4b13      	ldr	r3, [pc, #76]	; (8004f28 <OSTaskResume+0x5c>)
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d004      	beq.n	8004eec <OSTaskResume+0x20>
       *p_err = OS_ERR_TASK_RESUME_ISR;
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	f247 1255 	movw	r2, #29013	; 0x7155
 8004ee8:	801a      	strh	r2, [r3, #0]
        return;
 8004eea:	e019      	b.n	8004f20 <OSTaskResume+0x54>
    }
#endif


    CPU_CRITICAL_ENTER();
 8004eec:	f7fb f9f8 	bl	80002e0 <CPU_SR_Save>
 8004ef0:	60f8      	str	r0, [r7, #12]
#if OS_CFG_ARG_CHK_EN > 0u
    if ((p_tcb == (OS_TCB *)0) ||                           /* We cannot resume 'self'                                */
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d004      	beq.n	8004f02 <OSTaskResume+0x36>
        (p_tcb == OSTCBCurPtr)) {
 8004ef8:	4b0c      	ldr	r3, [pc, #48]	; (8004f2c <OSTaskResume+0x60>)
 8004efa:	681b      	ldr	r3, [r3, #0]
    if ((p_tcb == (OS_TCB *)0) ||                           /* We cannot resume 'self'                                */
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d107      	bne.n	8004f12 <OSTaskResume+0x46>
        CPU_CRITICAL_EXIT();
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f7fb f9f0 	bl	80002e8 <CPU_SR_Restore>
       *p_err  = OS_ERR_TASK_RESUME_SELF;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	f247 1257 	movw	r2, #29015	; 0x7157
 8004f0e:	801a      	strh	r2, [r3, #0]
        return;
 8004f10:	e006      	b.n	8004f20 <OSTaskResume+0x54>
    }
#endif
    CPU_CRITICAL_EXIT();
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f7fb f9e8 	bl	80002e8 <CPU_SR_Restore>
                    (OS_ERR    *)p_err);
        return;
    }
#endif

    OS_TaskResume(p_tcb, p_err);
 8004f18:	6839      	ldr	r1, [r7, #0]
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 fac6 	bl	80054ac <OS_TaskResume>

#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_TASK_RESUME(p_tcb);                            /* Record the event.                                      */
#endif
}
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	2000219e 	.word	0x2000219e
 8004f2c:	20002174 	.word	0x20002174

08004f30 <OSTaskSemPend>:

OS_SEM_CTR  OSTaskSemPend (OS_TICK   timeout,
                           OS_OPT    opt,
                           CPU_TS   *p_ts,
                           OS_ERR   *p_err)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	607a      	str	r2, [r7, #4]
 8004f3a:	603b      	str	r3, [r7, #0]
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	817b      	strh	r3, [r7, #10]
    OS_SEM_CTR    ctr;
    CPU_SR_ALLOC();
 8004f40:	2300      	movs	r3, #0
 8004f42:	617b      	str	r3, [r7, #20]
        return ((OS_SEM_CTR)0);
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 8004f44:	4b6f      	ldr	r3, [pc, #444]	; (8005104 <OSTaskSemPend+0x1d4>)
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d005      	beq.n	8004f58 <OSTaskSemPend+0x28>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_SEM_PEND_FAILED(OSTCBCurPtr);         /* Record the event.                                      */
#endif
       *p_err = OS_ERR_PEND_ISR;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	f246 12ae 	movw	r2, #25006	; 0x61ae
 8004f52:	801a      	strh	r2, [r3, #0]
        return ((OS_SEM_CTR)0);
 8004f54:	2300      	movs	r3, #0
 8004f56:	e0d0      	b.n	80050fa <OSTaskSemPend+0x1ca>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    switch (opt) {                                          /* Validate 'opt'                                         */
 8004f58:	897b      	ldrh	r3, [r7, #10]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d008      	beq.n	8004f70 <OSTaskSemPend+0x40>
 8004f5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f62:	d005      	beq.n	8004f70 <OSTaskSemPend+0x40>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_TASK_SEM_PEND_FAILED(OSTCBCurPtr);    /* Record the event.                                      */
#endif
            *p_err = OS_ERR_OPT_INVALID;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	f645 6225 	movw	r2, #24101	; 0x5e25
 8004f6a:	801a      	strh	r2, [r3, #0]
             return ((OS_SEM_CTR)0);
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	e0c4      	b.n	80050fa <OSTaskSemPend+0x1ca>
             break;
 8004f70:	bf00      	nop
    }
#endif

    if (p_ts != (CPU_TS *)0) {
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d002      	beq.n	8004f7e <OSTaskSemPend+0x4e>
       *p_ts  = (CPU_TS  )0;                                /* Initialize the returned timestamp                      */
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	601a      	str	r2, [r3, #0]
    }

    CPU_CRITICAL_ENTER();
 8004f7e:	f7fb f9af 	bl	80002e0 <CPU_SR_Save>
 8004f82:	6178      	str	r0, [r7, #20]
    if (OSTCBCurPtr->SemCtr > (OS_SEM_CTR)0) {              /* See if task already been signaled                      */
 8004f84:	4b60      	ldr	r3, [pc, #384]	; (8005108 <OSTaskSemPend+0x1d8>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d035      	beq.n	8004ffa <OSTaskSemPend+0xca>
        OSTCBCurPtr->SemCtr--;
 8004f8e:	4b5e      	ldr	r3, [pc, #376]	; (8005108 <OSTaskSemPend+0x1d8>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f94:	3a01      	subs	r2, #1
 8004f96:	64da      	str	r2, [r3, #76]	; 0x4c
        ctr    = OSTCBCurPtr->SemCtr;
 8004f98:	4b5b      	ldr	r3, [pc, #364]	; (8005108 <OSTaskSemPend+0x1d8>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f9e:	613b      	str	r3, [r7, #16]
        if (p_ts != (CPU_TS *)0) {
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d004      	beq.n	8004fb0 <OSTaskSemPend+0x80>
           *p_ts  = OSTCBCurPtr->TS;
 8004fa6:	4b58      	ldr	r3, [pc, #352]	; (8005108 <OSTaskSemPend+0x1d8>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	601a      	str	r2, [r3, #0]
        }
#if OS_CFG_TASK_PROFILE_EN > 0u
        OSTCBCurPtr->SemPendTime = OS_TS_GET() - OSTCBCurPtr->TS;
 8004fb0:	f001 f972 	bl	8006298 <CPU_TS_TmrRd>
 8004fb4:	4601      	mov	r1, r0
 8004fb6:	4b54      	ldr	r3, [pc, #336]	; (8005108 <OSTaskSemPend+0x1d8>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fbc:	4b52      	ldr	r3, [pc, #328]	; (8005108 <OSTaskSemPend+0x1d8>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	1a8a      	subs	r2, r1, r2
 8004fc2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        if (OSTCBCurPtr->SemPendTimeMax < OSTCBCurPtr->SemPendTime) {
 8004fc6:	4b50      	ldr	r3, [pc, #320]	; (8005108 <OSTaskSemPend+0x1d8>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004fce:	4b4e      	ldr	r3, [pc, #312]	; (8005108 <OSTaskSemPend+0x1d8>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d207      	bcs.n	8004fea <OSTaskSemPend+0xba>
            OSTCBCurPtr->SemPendTimeMax = OSTCBCurPtr->SemPendTime;
 8004fda:	4b4b      	ldr	r3, [pc, #300]	; (8005108 <OSTaskSemPend+0x1d8>)
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	4b4a      	ldr	r3, [pc, #296]	; (8005108 <OSTaskSemPend+0x1d8>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 8004fe6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        }
#endif
        CPU_CRITICAL_EXIT();
 8004fea:	6978      	ldr	r0, [r7, #20]
 8004fec:	f7fb f97c 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_SEM_PEND(OSTCBCurPtr);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_NONE;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	801a      	strh	r2, [r3, #0]
        return (ctr);
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	e07f      	b.n	80050fa <OSTaskSemPend+0x1ca>
    }

    if ((opt & OS_OPT_PEND_NON_BLOCKING) != (OS_OPT)0) {    /* Caller wants to block if not available?                */
 8004ffa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	da08      	bge.n	8005014 <OSTaskSemPend+0xe4>
        CPU_CRITICAL_EXIT();        
 8005002:	6978      	ldr	r0, [r7, #20]
 8005004:	f7fb f970 	bl	80002e8 <CPU_SR_Restore>
       *p_err = OS_ERR_PEND_WOULD_BLOCK;                    /* No                                                     */
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	f246 12b0 	movw	r2, #25008	; 0x61b0
 800500e:	801a      	strh	r2, [r3, #0]
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_SEM_PEND_FAILED(OSTCBCurPtr);         /* Record the event.                                      */
#endif
        return ((OS_SEM_CTR)0);
 8005010:	2300      	movs	r3, #0
 8005012:	e072      	b.n	80050fa <OSTaskSemPend+0x1ca>
    } else {                                                /* Yes                                                    */
        if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {    /* Can't pend when the scheduler is locked                */
 8005014:	4b3d      	ldr	r3, [pc, #244]	; (800510c <OSTaskSemPend+0x1dc>)
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d008      	beq.n	800502e <OSTaskSemPend+0xfe>
            CPU_CRITICAL_EXIT();
 800501c:	6978      	ldr	r0, [r7, #20]
 800501e:	f7fb f963 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
            TRACE_OS_TASK_SEM_PEND_FAILED(OSTCBCurPtr);     /* Record the event.                                      */
#endif
           *p_err = OS_ERR_SCHED_LOCKED;
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	f646 5263 	movw	r2, #28003	; 0x6d63
 8005028:	801a      	strh	r2, [r3, #0]
            return ((OS_SEM_CTR)0);
 800502a:	2300      	movs	r3, #0
 800502c:	e065      	b.n	80050fa <OSTaskSemPend+0x1ca>
        }
    }
                                                            /* Lock the scheduler/re-enable interrupts                */
    OS_CRITICAL_ENTER_CPU_EXIT();
    OS_Pend((OS_PEND_DATA *)0,                              /* Block task pending on Signal                           */
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2207      	movs	r2, #7
 8005032:	2100      	movs	r1, #0
 8005034:	2000      	movs	r0, #0
 8005036:	f7ff f8a9 	bl	800418c <OS_Pend>
            (OS_PEND_OBJ  *)0,
            (OS_STATE      )OS_TASK_PEND_ON_TASK_SEM,
            (OS_TICK       )timeout);
    OS_CRITICAL_EXIT_NO_SCHED();
 800503a:	6978      	ldr	r0, [r7, #20]
 800503c:	f7fb f954 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_TASK_SEM_PEND_BLOCK(OSTCBCurPtr);              /* Record the event.                                      */
#endif
    OSSched();                                              /* Find next highest priority task ready to run           */
 8005040:	f7fe ff38 	bl	8003eb4 <OSSched>

    CPU_CRITICAL_ENTER();
 8005044:	f7fb f94c 	bl	80002e0 <CPU_SR_Save>
 8005048:	6178      	str	r0, [r7, #20]
    switch (OSTCBCurPtr->PendStatus) {                      /* See if we timed-out or aborted                         */
 800504a:	4b2f      	ldr	r3, [pc, #188]	; (8005108 <OSTaskSemPend+0x1d8>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005052:	2b01      	cmp	r3, #1
 8005054:	d02c      	beq.n	80050b0 <OSTaskSemPend+0x180>
 8005056:	2b03      	cmp	r3, #3
 8005058:	d037      	beq.n	80050ca <OSTaskSemPend+0x19a>
 800505a:	2b00      	cmp	r3, #0
 800505c:	d140      	bne.n	80050e0 <OSTaskSemPend+0x1b0>
        case OS_STATUS_PEND_OK:
             if (p_ts != (CPU_TS *)0) {
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d021      	beq.n	80050a8 <OSTaskSemPend+0x178>
                *p_ts                    =  OSTCBCurPtr->TS;
 8005064:	4b28      	ldr	r3, [pc, #160]	; (8005108 <OSTaskSemPend+0x1d8>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	601a      	str	r2, [r3, #0]
#if OS_CFG_TASK_PROFILE_EN > 0u
                OSTCBCurPtr->SemPendTime = OS_TS_GET() - OSTCBCurPtr->TS;
 800506e:	f001 f913 	bl	8006298 <CPU_TS_TmrRd>
 8005072:	4601      	mov	r1, r0
 8005074:	4b24      	ldr	r3, [pc, #144]	; (8005108 <OSTaskSemPend+0x1d8>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800507a:	4b23      	ldr	r3, [pc, #140]	; (8005108 <OSTaskSemPend+0x1d8>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	1a8a      	subs	r2, r1, r2
 8005080:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
                if (OSTCBCurPtr->SemPendTimeMax < OSTCBCurPtr->SemPendTime) {
 8005084:	4b20      	ldr	r3, [pc, #128]	; (8005108 <OSTaskSemPend+0x1d8>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800508c:	4b1e      	ldr	r3, [pc, #120]	; (8005108 <OSTaskSemPend+0x1d8>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005094:	429a      	cmp	r2, r3
 8005096:	d207      	bcs.n	80050a8 <OSTaskSemPend+0x178>
                    OSTCBCurPtr->SemPendTimeMax = OSTCBCurPtr->SemPendTime;
 8005098:	4b1b      	ldr	r3, [pc, #108]	; (8005108 <OSTaskSemPend+0x1d8>)
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	4b1a      	ldr	r3, [pc, #104]	; (8005108 <OSTaskSemPend+0x1d8>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 80050a4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#endif
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_TASK_SEM_PEND(OSTCBCurPtr);           /* Record the event.                                      */
#endif
            *p_err = OS_ERR_NONE;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	2200      	movs	r2, #0
 80050ac:	801a      	strh	r2, [r3, #0]
             break;
 80050ae:	e01c      	b.n	80050ea <OSTaskSemPend+0x1ba>

        case OS_STATUS_PEND_ABORT:
             if (p_ts != (CPU_TS *)0) {
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d004      	beq.n	80050c0 <OSTaskSemPend+0x190>
                *p_ts  =  OSTCBCurPtr->TS;
 80050b6:	4b14      	ldr	r3, [pc, #80]	; (8005108 <OSTaskSemPend+0x1d8>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_TASK_SEM_PEND_FAILED(OSTCBCurPtr);    /* Record the event.                                      */
#endif
            *p_err = OS_ERR_PEND_ABORT;                     /* Indicate that we aborted                               */
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	f246 12a9 	movw	r2, #25001	; 0x61a9
 80050c6:	801a      	strh	r2, [r3, #0]
             break;
 80050c8:	e00f      	b.n	80050ea <OSTaskSemPend+0x1ba>

        case OS_STATUS_PEND_TIMEOUT:
             if (p_ts != (CPU_TS *)0) {
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d002      	beq.n	80050d6 <OSTaskSemPend+0x1a6>
                *p_ts  = (CPU_TS  )0;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_TASK_SEM_PEND_FAILED(OSTCBCurPtr);    /* Record the event.                                      */
#endif
            *p_err = OS_ERR_TIMEOUT;                        /* Indicate that we didn't get event within TO            */
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	f247 22d9 	movw	r2, #29401	; 0x72d9
 80050dc:	801a      	strh	r2, [r3, #0]
             break;
 80050de:	e004      	b.n	80050ea <OSTaskSemPend+0x1ba>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_TASK_SEM_PEND_FAILED(OSTCBCurPtr);    /* Record the event.                                      */
#endif
            *p_err = OS_ERR_STATUS_INVALID;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	f646 622e 	movw	r2, #28206	; 0x6e2e
 80050e6:	801a      	strh	r2, [r3, #0]
             break;
 80050e8:	bf00      	nop
    }
    ctr = OSTCBCurPtr->SemCtr;
 80050ea:	4b07      	ldr	r3, [pc, #28]	; (8005108 <OSTaskSemPend+0x1d8>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050f0:	613b      	str	r3, [r7, #16]
    CPU_CRITICAL_EXIT();
 80050f2:	6978      	ldr	r0, [r7, #20]
 80050f4:	f7fb f8f8 	bl	80002e8 <CPU_SR_Restore>
    return (ctr);
 80050f8:	693b      	ldr	r3, [r7, #16]
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3718      	adds	r7, #24
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	2000219e 	.word	0x2000219e
 8005108:	20002174 	.word	0x20002174
 800510c:	20001f08 	.word	0x20001f08

08005110 <OSTaskSemPost>:
*/

OS_SEM_CTR  OSTaskSemPost (OS_TCB  *p_tcb,
                           OS_OPT   opt,
                           OS_ERR  *p_err)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	460b      	mov	r3, r1
 800511a:	607a      	str	r2, [r7, #4]
 800511c:	817b      	strh	r3, [r7, #10]
        return ((OS_SEM_CTR)0);
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    switch (opt) {                                          /* Validate 'opt'                                         */
 800511e:	897b      	ldrh	r3, [r7, #10]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d008      	beq.n	8005136 <OSTaskSemPost+0x26>
 8005124:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005128:	d005      	beq.n	8005136 <OSTaskSemPost+0x26>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_TASK_SEM_POST_FAILED(p_tcb);          /* Record the event.                                      */
#endif
            *p_err =  OS_ERR_OPT_INVALID;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f645 6225 	movw	r2, #24101	; 0x5e25
 8005130:	801a      	strh	r2, [r3, #0]
             return ((OS_SEM_CTR)0u);
 8005132:	2300      	movs	r3, #0
 8005134:	e00b      	b.n	800514e <OSTaskSemPost+0x3e>
             break;
 8005136:	bf00      	nop
    }
#endif

    ts = OS_TS_GET();                                       /* Get timestamp                                          */
 8005138:	f001 f8ae 	bl	8006298 <CPU_TS_TmrRd>
 800513c:	6178      	str	r0, [r7, #20]

#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_TASK_SEM_POST(p_tcb);                          /* Record the event.                                      */
#endif

    ctr = OS_TaskSemPost(p_tcb,
 800513e:	8979      	ldrh	r1, [r7, #10]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f000 fa57 	bl	80055f8 <OS_TaskSemPost>
 800514a:	6138      	str	r0, [r7, #16]
                         opt,
                         ts,
                         p_err);

    return (ctr);
 800514c:	693b      	ldr	r3, [r7, #16]
}
 800514e:	4618      	mov	r0, r3
 8005150:	3718      	adds	r7, #24
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
	...

08005158 <OSTaskStkChk>:
#if OS_CFG_STAT_TASK_STK_CHK_EN > 0u
void  OSTaskStkChk (OS_TCB        *p_tcb,
                    CPU_STK_SIZE  *p_free,
                    CPU_STK_SIZE  *p_used,
                    OS_ERR        *p_err)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b088      	sub	sp, #32
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
 8005164:	603b      	str	r3, [r7, #0]
    CPU_STK_SIZE  free_stk;
    CPU_STK      *p_stk;
    CPU_SR_ALLOC();
 8005166:	2300      	movs	r3, #0
 8005168:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* See if trying to check stack from ISR                  */
 800516a:	4b35      	ldr	r3, [pc, #212]	; (8005240 <OSTaskStkChk+0xe8>)
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d004      	beq.n	800517c <OSTaskStkChk+0x24>
       *p_err = OS_ERR_TASK_STK_CHK_ISR;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	f247 1259 	movw	r2, #29017	; 0x7159
 8005178:	801a      	strh	r2, [r3, #0]
        return;
 800517a:	e05e      	b.n	800523a <OSTaskStkChk+0xe2>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_free == (CPU_STK_SIZE*)0) {                       /* User must specify valid destinations for the sizes     */
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d104      	bne.n	800518c <OSTaskStkChk+0x34>
       *p_err  = OS_ERR_PTR_INVALID;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	f246 22d5 	movw	r2, #25301	; 0x62d5
 8005188:	801a      	strh	r2, [r3, #0]
        return;
 800518a:	e056      	b.n	800523a <OSTaskStkChk+0xe2>
    }

    if (p_used == (CPU_STK_SIZE*)0) {
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d104      	bne.n	800519c <OSTaskStkChk+0x44>
       *p_err  = OS_ERR_PTR_INVALID;
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	f246 22d5 	movw	r2, #25301	; 0x62d5
 8005198:	801a      	strh	r2, [r3, #0]
        return;
 800519a:	e04e      	b.n	800523a <OSTaskStkChk+0xe2>
    }
#endif

    CPU_CRITICAL_ENTER();
 800519c:	f7fb f8a0 	bl	80002e0 <CPU_SR_Save>
 80051a0:	6178      	str	r0, [r7, #20]
    if (p_tcb == (OS_TCB *)0) {                             /* Check the stack of the current task?                   */
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d102      	bne.n	80051ae <OSTaskStkChk+0x56>
        p_tcb = OSTCBCurPtr;                                /* Yes                                                    */
 80051a8:	4b26      	ldr	r3, [pc, #152]	; (8005244 <OSTaskStkChk+0xec>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	60fb      	str	r3, [r7, #12]
    }

    if (p_tcb->StkPtr == (CPU_STK*)0) {                     /* Make sure task exist                                   */
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d10d      	bne.n	80051d2 <OSTaskStkChk+0x7a>
        CPU_CRITICAL_EXIT();
 80051b6:	6978      	ldr	r0, [r7, #20]
 80051b8:	f7fb f896 	bl	80002e8 <CPU_SR_Restore>
       *p_free = (CPU_STK_SIZE)0;
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	2200      	movs	r2, #0
 80051c0:	601a      	str	r2, [r3, #0]
       *p_used = (CPU_STK_SIZE)0;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	601a      	str	r2, [r3, #0]
       *p_err  =  OS_ERR_TASK_NOT_EXIST;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	f247 1252 	movw	r2, #29010	; 0x7152
 80051ce:	801a      	strh	r2, [r3, #0]
        return;
 80051d0:	e033      	b.n	800523a <OSTaskStkChk+0xe2>
    }

    if ((p_tcb->Opt & OS_OPT_TASK_STK_CHK) == (OS_OPT)0) {  /* Make sure stack checking option is set                 */
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80051d8:	f003 0301 	and.w	r3, r3, #1
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d10d      	bne.n	80051fc <OSTaskStkChk+0xa4>
        CPU_CRITICAL_EXIT();
 80051e0:	6978      	ldr	r0, [r7, #20]
 80051e2:	f7fb f881 	bl	80002e8 <CPU_SR_Restore>
       *p_free = (CPU_STK_SIZE)0;
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	2200      	movs	r2, #0
 80051ea:	601a      	str	r2, [r3, #0]
       *p_used = (CPU_STK_SIZE)0;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	601a      	str	r2, [r3, #0]
       *p_err  =  OS_ERR_TASK_OPT;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	f247 1254 	movw	r2, #29012	; 0x7154
 80051f8:	801a      	strh	r2, [r3, #0]
        return;
 80051fa:	e01e      	b.n	800523a <OSTaskStkChk+0xe2>
    }
    CPU_CRITICAL_EXIT();
 80051fc:	6978      	ldr	r0, [r7, #20]
 80051fe:	f7fb f873 	bl	80002e8 <CPU_SR_Restore>

    free_stk  = 0u;
 8005202:	2300      	movs	r3, #0
 8005204:	61fb      	str	r3, [r7, #28]
#if CPU_CFG_STK_GROWTH == CPU_STK_GROWTH_HI_TO_LO
    p_stk = p_tcb->StkBasePtr;                              /* Start at the lowest memory and go up                   */
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	61bb      	str	r3, [r7, #24]
    while (*p_stk == (CPU_STK)0) {                          /* Compute the number of zero entries on the stk          */
 800520c:	e005      	b.n	800521a <OSTaskStkChk+0xc2>
        p_stk++;
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	3304      	adds	r3, #4
 8005212:	61bb      	str	r3, [r7, #24]
        free_stk++;
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	3301      	adds	r3, #1
 8005218:	61fb      	str	r3, [r7, #28]
    while (*p_stk == (CPU_STK)0) {                          /* Compute the number of zero entries on the stk          */
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d0f5      	beq.n	800520e <OSTaskStkChk+0xb6>
    while (*p_stk == (CPU_STK)0) {
        free_stk++;
        p_stk--;
    }
#endif
   *p_free = free_stk;
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	69fa      	ldr	r2, [r7, #28]
 8005226:	601a      	str	r2, [r3, #0]
   *p_used = (p_tcb->StkSize - free_stk);                   /* Compute number of entries used on the stack            */
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	1ad2      	subs	r2, r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	601a      	str	r2, [r3, #0]
   *p_err  = OS_ERR_NONE;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	2200      	movs	r2, #0
 8005238:	801a      	strh	r2, [r3, #0]
}
 800523a:	3720      	adds	r7, #32
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	2000219e 	.word	0x2000219e
 8005244:	20002174 	.word	0x20002174

08005248 <OSTaskSuspend>:
*/

#if OS_CFG_TASK_SUSPEND_EN > 0u
void   OSTaskSuspend (OS_TCB  *p_tcb,
                      OS_ERR  *p_err)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
    }
#endif

#if (OS_CFG_ISR_POST_DEFERRED_EN   == 0u) && \
    (OS_CFG_CALLED_FROM_ISR_CHK_EN >  0u)
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 8005252:	4b0c      	ldr	r3, [pc, #48]	; (8005284 <OSTaskSuspend+0x3c>)
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d004      	beq.n	8005264 <OSTaskSuspend+0x1c>
       *p_err = OS_ERR_TASK_SUSPEND_ISR;
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	f247 125d 	movw	r2, #29021	; 0x715d
 8005260:	801a      	strh	r2, [r3, #0]
        return;
 8005262:	e00c      	b.n	800527e <OSTaskSuspend+0x36>
    }
#endif

    if (p_tcb == &OSIdleTaskTCB) {                          /* Make sure not suspending the idle task                 */
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a08      	ldr	r2, [pc, #32]	; (8005288 <OSTaskSuspend+0x40>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d104      	bne.n	8005276 <OSTaskSuspend+0x2e>
       *p_err = OS_ERR_TASK_SUSPEND_IDLE;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	f247 125b 	movw	r2, #29019	; 0x715b
 8005272:	801a      	strh	r2, [r3, #0]
        return;
 8005274:	e003      	b.n	800527e <OSTaskSuspend+0x36>
                    (OS_ERR    *)p_err);
        return;
    }
#endif

    OS_TaskSuspend(p_tcb, p_err);
 8005276:	6839      	ldr	r1, [r7, #0]
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 fa51 	bl	8005720 <OS_TaskSuspend>
}
 800527e:	3708      	adds	r7, #8
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	2000219e 	.word	0x2000219e
 8005288:	20002270 	.word	0x20002270

0800528c <OS_TaskDbgListAdd>:
************************************************************************************************************************
*/

#if OS_CFG_DBG_EN > 0u
void  OS_TaskDbgListAdd (OS_TCB  *p_tcb)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
    p_tcb->DbgPrevPtr                = (OS_TCB *)0;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    if (OSTaskDbgListPtr == (OS_TCB *)0) {
 800529c:	4b0d      	ldr	r3, [pc, #52]	; (80052d4 <OS_TaskDbgListAdd+0x48>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d104      	bne.n	80052ae <OS_TaskDbgListAdd+0x22>
        p_tcb->DbgNextPtr            = (OS_TCB *)0;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80052ac:	e009      	b.n	80052c2 <OS_TaskDbgListAdd+0x36>
    } else {
        p_tcb->DbgNextPtr            =  OSTaskDbgListPtr;
 80052ae:	4b09      	ldr	r3, [pc, #36]	; (80052d4 <OS_TaskDbgListAdd+0x48>)
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        OSTaskDbgListPtr->DbgPrevPtr =  p_tcb;
 80052b8:	4b06      	ldr	r3, [pc, #24]	; (80052d4 <OS_TaskDbgListAdd+0x48>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    }
    OSTaskDbgListPtr                 =  p_tcb;
 80052c2:	4a04      	ldr	r2, [pc, #16]	; (80052d4 <OS_TaskDbgListAdd+0x48>)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6013      	str	r3, [r2, #0]
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bc80      	pop	{r7}
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	20002188 	.word	0x20002188

080052d8 <OS_TaskInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TaskInit (OS_ERR  *p_err)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSTaskDbgListPtr = (OS_TCB      *)0;
 80052e0:	4b08      	ldr	r3, [pc, #32]	; (8005304 <OS_TaskInit+0x2c>)
 80052e2:	2200      	movs	r2, #0
 80052e4:	601a      	str	r2, [r3, #0]
#endif

    OSTaskQty        = (OS_OBJ_QTY   )0;                    /* Clear the number of tasks                              */
 80052e6:	4b08      	ldr	r3, [pc, #32]	; (8005308 <OS_TaskInit+0x30>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	801a      	strh	r2, [r3, #0]
    OSTaskCtxSwCtr   = (OS_CTX_SW_CTR)0;                    /* Clear the context switch counter                       */
 80052ec:	4b07      	ldr	r3, [pc, #28]	; (800530c <OS_TaskInit+0x34>)
 80052ee:	2200      	movs	r2, #0
 80052f0:	601a      	str	r2, [r3, #0]

   *p_err            = OS_ERR_NONE;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	801a      	strh	r2, [r3, #0]
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bc80      	pop	{r7}
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	20002188 	.word	0x20002188
 8005308:	200021a0 	.word	0x200021a0
 800530c:	20002198 	.word	0x20002198

08005310 <OS_TaskInitTCB>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TaskInitTCB (OS_TCB  *p_tcb)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
#if OS_CFG_TASK_PROFILE_EN > 0u
    CPU_TS      ts;
#endif


    p_tcb->StkPtr             = (CPU_STK       *)0;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	601a      	str	r2, [r3, #0]
#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u))
    p_tcb->StkLimitPtr        = (CPU_STK       *)0;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	609a      	str	r2, [r3, #8]
#endif

    p_tcb->ExtPtr             = (void          *)0;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	605a      	str	r2, [r3, #4]

    p_tcb->NextPtr            = (OS_TCB        *)0;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	60da      	str	r2, [r3, #12]
    p_tcb->PrevPtr            = (OS_TCB        *)0;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	611a      	str	r2, [r3, #16]

    p_tcb->TickNextPtr        = (OS_TCB        *)0;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	615a      	str	r2, [r3, #20]
    p_tcb->TickPrevPtr        = (OS_TCB        *)0;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	619a      	str	r2, [r3, #24]
    p_tcb->TickListPtr        = (OS_TICK_LIST  *)0;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	61da      	str	r2, [r3, #28]

#if OS_CFG_DBG_EN > 0u
    p_tcb->NamePtr            = (CPU_CHAR      *)((void *)"?Task");
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a56      	ldr	r2, [pc, #344]	; (80054a4 <OS_TaskInitTCB+0x194>)
 800534c:	621a      	str	r2, [r3, #32]
#endif

#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u))
    p_tcb->StkBasePtr         = (CPU_STK       *)0;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	625a      	str	r2, [r3, #36]	; 0x24
#endif

#if OS_CFG_DBG_EN > 0u
    p_tcb->TaskEntryAddr      = (OS_TASK_PTR    )0;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	629a      	str	r2, [r3, #40]	; 0x28
    p_tcb->TaskEntryArg       = (void          *)0;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif

#if (OS_CFG_PEND_MULTI_EN > 0u)
    p_tcb->PendDataTblPtr     = (OS_PEND_DATA  *)0;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	631a      	str	r2, [r3, #48]	; 0x30
    p_tcb->PendDataTblEntries = (OS_OBJ_QTY     )0u;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
#endif

    p_tcb->TS                 = (CPU_TS         )0u;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	649a      	str	r2, [r3, #72]	; 0x48

#if (OS_MSG_EN > 0u)
    p_tcb->MsgPtr             = (void          *)0;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	659a      	str	r2, [r3, #88]	; 0x58
    p_tcb->MsgSize            = (OS_MSG_SIZE    )0u;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
#endif

#if OS_CFG_TASK_Q_EN > 0u
    OS_MsgQInit(&p_tcb->MsgQ,
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	3360      	adds	r3, #96	; 0x60
 8005386:	2100      	movs	r1, #0
 8005388:	4618      	mov	r0, r3
 800538a:	f7ff fba1 	bl	8004ad0 <OS_MsgQInit>
                (OS_MSG_QTY)0u);
#if OS_CFG_TASK_PROFILE_EN > 0u
    p_tcb->MsgQPendTime       = (CPU_TS         )0u;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	671a      	str	r2, [r3, #112]	; 0x70
    p_tcb->MsgQPendTimeMax    = (CPU_TS         )0u;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	675a      	str	r2, [r3, #116]	; 0x74
#endif
#endif

#if OS_CFG_FLAG_EN > 0u
    p_tcb->FlagsPend          = (OS_FLAGS       )0u;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	67da      	str	r2, [r3, #124]	; 0x7c
    p_tcb->FlagsOpt           = (OS_OPT         )0u;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
    p_tcb->FlagsRdy           = (OS_FLAGS       )0u;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

#if OS_CFG_TASK_REG_TBL_SIZE > 0u
    for (reg_id = 0u; reg_id < OS_CFG_TASK_REG_TBL_SIZE; reg_id++) {
 80053b0:	2300      	movs	r3, #0
 80053b2:	73fb      	strb	r3, [r7, #15]
 80053b4:	e008      	b.n	80053c8 <OS_TaskInitTCB+0xb8>
        p_tcb->RegTbl[reg_id] = (OS_REG)0u;
 80053b6:	7bfa      	ldrb	r2, [r7, #15]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	321e      	adds	r2, #30
 80053bc:	2100      	movs	r1, #0
 80053be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (reg_id = 0u; reg_id < OS_CFG_TASK_REG_TBL_SIZE; reg_id++) {
 80053c2:	7bfb      	ldrb	r3, [r7, #15]
 80053c4:	3301      	adds	r3, #1
 80053c6:	73fb      	strb	r3, [r7, #15]
 80053c8:	7bfb      	ldrb	r3, [r7, #15]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d0f3      	beq.n	80053b6 <OS_TaskInitTCB+0xa6>
    for (id = 0u; id < OS_CFG_TLS_TBL_SIZE; id++) {
        p_tcb->TLS_Tbl[id]    = (OS_TLS)0;
    }
#endif

    p_tcb->SemCtr             = (OS_SEM_CTR     )0u;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	64da      	str	r2, [r3, #76]	; 0x4c
#if OS_CFG_TASK_PROFILE_EN > 0u
    p_tcb->SemPendTime        = (CPU_TS         )0u;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    p_tcb->SemPendTimeMax     = (CPU_TS         )0u;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#endif

#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u))
    p_tcb->StkSize            = (CPU_STK_SIZE   )0u;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	641a      	str	r2, [r3, #64]	; 0x40
#endif


#if OS_CFG_TASK_SUSPEND_EN > 0u
    p_tcb->SuspendCtr         = (OS_NESTING_CTR )0u;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
#endif

#if OS_CFG_STAT_TASK_STK_CHK_EN > 0u
    p_tcb->StkFree            = (CPU_STK_SIZE   )0u;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    p_tcb->StkUsed            = (CPU_STK_SIZE   )0u;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
#endif

    p_tcb->Opt                = (OS_OPT         )0u;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    p_tcb->TickRemain         = (OS_TICK        )0u;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	651a      	str	r2, [r3, #80]	; 0x50
    p_tcb->TickCtrPrev        = (OS_TICK        )0u;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	655a      	str	r2, [r3, #84]	; 0x54
    p_tcb->TimeQuanta         = (OS_TICK        )0u;
    p_tcb->TimeQuantaCtr      = (OS_TICK        )0u;
#endif

#if OS_CFG_TASK_PROFILE_EN > 0u
    p_tcb->CPUUsage           = (OS_CPU_USAGE   )0u;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    p_tcb->CPUUsageMax        = (OS_CPU_USAGE   )0u;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
    p_tcb->CtxSwCtr           = (OS_CTX_SW_CTR  )0u;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    p_tcb->CyclesDelta        = (CPU_TS         )0u;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ts                        = OS_TS_GET();                /* Read the current timestamp and save                    */
 8005436:	f000 ff2f 	bl	8006298 <CPU_TS_TmrRd>
 800543a:	60b8      	str	r0, [r7, #8]
    p_tcb->CyclesStart        = ts;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	68ba      	ldr	r2, [r7, #8]
 8005440:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    p_tcb->CyclesTotal        = (OS_CYCLES      )0u;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif
#ifdef CPU_CFG_INT_DIS_MEAS_EN
    p_tcb->IntDisTimeMax      = (CPU_TS         )0u;
#endif
#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
    p_tcb->SchedLockTimeMax   = (CPU_TS         )0u;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
#endif

    p_tcb->PendOn             = (OS_STATE       )OS_TASK_PEND_ON_NOTHING;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    p_tcb->PendStatus         = (OS_STATUS      )OS_STATUS_PEND_OK;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    p_tcb->TaskState          = (OS_STATE       )OS_TASK_STATE_RDY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

    p_tcb->Prio               = (OS_PRIO        )OS_PRIO_INIT;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2220      	movs	r2, #32
 8005470:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
#if OS_CFG_MUTEX_EN > 0u
    p_tcb->BasePrio           = (OS_PRIO        )OS_PRIO_INIT;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2220      	movs	r2, #32
 8005478:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    p_tcb->MutexGrpHeadPtr    = (OS_MUTEX      *)0;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	63da      	str	r2, [r3, #60]	; 0x3c
#endif

#if OS_CFG_DBG_EN > 0u
    p_tcb->DbgPrevPtr         = (OS_TCB        *)0;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    p_tcb->DbgNextPtr         = (OS_TCB        *)0;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    p_tcb->DbgNamePtr         = (CPU_CHAR      *)((void *)" ");
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a04      	ldr	r2, [pc, #16]	; (80054a8 <OS_TaskInitTCB+0x198>)
 8005496:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
#endif
}
 800549a:	bf00      	nop
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	0800e7f4 	.word	0x0800e7f4
 80054a8:	0800e7fc 	.word	0x0800e7fc

080054ac <OS_TaskResume>:
*/

#if OS_CFG_TASK_SUSPEND_EN > 0u
void  OS_TaskResume (OS_TCB  *p_tcb,
                     OS_ERR  *p_err)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
    CPU_SR_ALLOC();
 80054b6:	2300      	movs	r3, #0
 80054b8:	60fb      	str	r3, [r7, #12]


    CPU_CRITICAL_ENTER();
 80054ba:	f7fa ff11 	bl	80002e0 <CPU_SR_Save>
 80054be:	60f8      	str	r0, [r7, #12]
   *p_err  = OS_ERR_NONE;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	2200      	movs	r2, #0
 80054c4:	801a      	strh	r2, [r3, #0]
    switch (p_tcb->TaskState) {
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80054cc:	2b07      	cmp	r3, #7
 80054ce:	d872      	bhi.n	80055b6 <OS_TaskResume+0x10a>
 80054d0:	a201      	add	r2, pc, #4	; (adr r2, 80054d8 <OS_TaskResume+0x2c>)
 80054d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d6:	bf00      	nop
 80054d8:	080054f9 	.word	0x080054f9
 80054dc:	080054f9 	.word	0x080054f9
 80054e0:	080054f9 	.word	0x080054f9
 80054e4:	080054f9 	.word	0x080054f9
 80054e8:	08005509 	.word	0x08005509
 80054ec:	08005539 	.word	0x08005539
 80054f0:	08005563 	.word	0x08005563
 80054f4:	0800558d 	.word	0x0800558d
        case OS_TASK_STATE_RDY:
        case OS_TASK_STATE_DLY:
        case OS_TASK_STATE_PEND:
        case OS_TASK_STATE_PEND_TIMEOUT:
             CPU_CRITICAL_EXIT();
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f7fa fef5 	bl	80002e8 <CPU_SR_Restore>
            *p_err = OS_ERR_TASK_NOT_SUSPENDED;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	f247 1253 	movw	r2, #29011	; 0x7153
 8005504:	801a      	strh	r2, [r3, #0]
             break;
 8005506:	e05e      	b.n	80055c6 <OS_TaskResume+0x11a>

        case OS_TASK_STATE_SUSPENDED:
             OS_CRITICAL_ENTER_CPU_EXIT();
             p_tcb->SuspendCtr--;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800550e:	3b01      	subs	r3, #1
 8005510:	b2da      	uxtb	r2, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             if (p_tcb->SuspendCtr == (OS_NESTING_CTR)0) {
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800551e:	2b00      	cmp	r3, #0
 8005520:	d106      	bne.n	8005530 <OS_TaskResume+0x84>
                 p_tcb->TaskState = OS_TASK_STATE_RDY;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                 OS_RdyListInsert(p_tcb);                            /* Insert the task in the ready list                      */
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f7ff f918 	bl	8004760 <OS_RdyListInsert>
             }
             OS_CRITICAL_EXIT_NO_SCHED();
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f7fa fed9 	bl	80002e8 <CPU_SR_Restore>
             break;
 8005536:	e046      	b.n	80055c6 <OS_TaskResume+0x11a>

        case OS_TASK_STATE_DLY_SUSPENDED:
             p_tcb->SuspendCtr--;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800553e:	3b01      	subs	r3, #1
 8005540:	b2da      	uxtb	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             if (p_tcb->SuspendCtr == (OS_NESTING_CTR)0) {
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800554e:	2b00      	cmp	r3, #0
 8005550:	d103      	bne.n	800555a <OS_TaskResume+0xae>
                 p_tcb->TaskState = OS_TASK_STATE_DLY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             }
             CPU_CRITICAL_EXIT();
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f7fa fec4 	bl	80002e8 <CPU_SR_Restore>
             break;
 8005560:	e031      	b.n	80055c6 <OS_TaskResume+0x11a>

        case OS_TASK_STATE_PEND_SUSPENDED:
             p_tcb->SuspendCtr--;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8005568:	3b01      	subs	r3, #1
 800556a:	b2da      	uxtb	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             if (p_tcb->SuspendCtr == (OS_NESTING_CTR)0) {
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8005578:	2b00      	cmp	r3, #0
 800557a:	d103      	bne.n	8005584 <OS_TaskResume+0xd8>
                 p_tcb->TaskState = OS_TASK_STATE_PEND;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2202      	movs	r2, #2
 8005580:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             }
             CPU_CRITICAL_EXIT();
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f7fa feaf 	bl	80002e8 <CPU_SR_Restore>
             break;
 800558a:	e01c      	b.n	80055c6 <OS_TaskResume+0x11a>

        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
             p_tcb->SuspendCtr--;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8005592:	3b01      	subs	r3, #1
 8005594:	b2da      	uxtb	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             if (p_tcb->SuspendCtr == (OS_NESTING_CTR)0) {
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d103      	bne.n	80055ae <OS_TaskResume+0x102>
                 p_tcb->TaskState = OS_TASK_STATE_PEND_TIMEOUT;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2203      	movs	r2, #3
 80055aa:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             }
             CPU_CRITICAL_EXIT();
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f7fa fe9a 	bl	80002e8 <CPU_SR_Restore>
             break;
 80055b4:	e007      	b.n	80055c6 <OS_TaskResume+0x11a>

        default:
             CPU_CRITICAL_EXIT();
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f7fa fe96 	bl	80002e8 <CPU_SR_Restore>
            *p_err = OS_ERR_STATE_INVALID;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	f646 622d 	movw	r2, #28205	; 0x6e2d
 80055c2:	801a      	strh	r2, [r3, #0]
             return;
 80055c4:	e001      	b.n	80055ca <OS_TaskResume+0x11e>
    }

    OSSched();
 80055c6:	f7fe fc75 	bl	8003eb4 <OSSched>
}
 80055ca:	3710      	adds	r7, #16
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <OS_TaskReturn>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TaskReturn (void)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
    OS_ERR  err;



    OSTaskReturnHook(OSTCBCurPtr);                          /* Call hook to let user decide on what to do             */
 80055d6:	4b06      	ldr	r3, [pc, #24]	; (80055f0 <OS_TaskReturn+0x20>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4618      	mov	r0, r3
 80055dc:	f000 fc5e 	bl	8005e9c <OSTaskReturnHook>
#if OS_CFG_TASK_DEL_EN > 0u
    OSTaskDel((OS_TCB *)0,                                  /* Delete task if it accidentally returns!                */
              (OS_ERR *)&err);
#else
    for (;;) {
        OSTimeDly((OS_TICK )OSCfg_TickRate_Hz,
 80055e0:	4b04      	ldr	r3, [pc, #16]	; (80055f4 <OS_TaskReturn+0x24>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	1dba      	adds	r2, r7, #6
 80055e6:	2100      	movs	r1, #0
 80055e8:	4618      	mov	r0, r3
 80055ea:	f7fd fdb1 	bl	8003150 <OSTimeDly>
 80055ee:	e7f7      	b.n	80055e0 <OS_TaskReturn+0x10>
 80055f0:	20002174 	.word	0x20002174
 80055f4:	0800ea00 	.word	0x0800ea00

080055f8 <OS_TaskSemPost>:

OS_SEM_CTR  OS_TaskSemPost (OS_TCB  *p_tcb,
                            OS_OPT   opt,
                            CPU_TS   ts,
                            OS_ERR  *p_err)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b088      	sub	sp, #32
 80055fc:	af02      	add	r7, sp, #8
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	607a      	str	r2, [r7, #4]
 8005602:	603b      	str	r3, [r7, #0]
 8005604:	460b      	mov	r3, r1
 8005606:	817b      	strh	r3, [r7, #10]
    OS_SEM_CTR  ctr;
    CPU_SR_ALLOC();
 8005608:	2300      	movs	r3, #0
 800560a:	613b      	str	r3, [r7, #16]



    OS_CRITICAL_ENTER();
 800560c:	f7fa fe68 	bl	80002e0 <CPU_SR_Save>
 8005610:	6138      	str	r0, [r7, #16]
    if (p_tcb == (OS_TCB *)0) {                             /* Post signal to 'self'?                                 */
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d102      	bne.n	800561e <OS_TaskSemPost+0x26>
        p_tcb = OSTCBCurPtr;
 8005618:	4b40      	ldr	r3, [pc, #256]	; (800571c <OS_TaskSemPost+0x124>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	60fb      	str	r3, [r7, #12]
    }
    p_tcb->TS = ts;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	649a      	str	r2, [r3, #72]	; 0x48
   *p_err     = OS_ERR_NONE;                                /* Assume we won't have any errors                        */
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	2200      	movs	r2, #0
 8005628:	801a      	strh	r2, [r3, #0]
    switch (p_tcb->TaskState) {
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005630:	2b07      	cmp	r3, #7
 8005632:	d863      	bhi.n	80056fc <OS_TaskSemPost+0x104>
 8005634:	a201      	add	r2, pc, #4	; (adr r2, 800563c <OS_TaskSemPost+0x44>)
 8005636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800563a:	bf00      	nop
 800563c:	0800565d 	.word	0x0800565d
 8005640:	0800565d 	.word	0x0800565d
 8005644:	08005693 	.word	0x08005693
 8005648:	08005693 	.word	0x08005693
 800564c:	0800565d 	.word	0x0800565d
 8005650:	0800565d 	.word	0x0800565d
 8005654:	08005693 	.word	0x08005693
 8005658:	08005693 	.word	0x08005693
                          return ((OS_SEM_CTR)0);
                      }
                      break;

                 case 4u:
                      if (p_tcb->SemCtr == DEF_INT_32U_MAX_VAL) {
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005660:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005664:	d108      	bne.n	8005678 <OS_TaskSemPost+0x80>
                          OS_CRITICAL_EXIT();
 8005666:	6938      	ldr	r0, [r7, #16]
 8005668:	f7fa fe3e 	bl	80002e8 <CPU_SR_Restore>
                         *p_err = OS_ERR_SEM_OVF;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	f646 52c5 	movw	r2, #28101	; 0x6dc5
 8005672:	801a      	strh	r2, [r3, #0]
                          return ((OS_SEM_CTR)0);
 8005674:	2300      	movs	r3, #0
 8005676:	e04d      	b.n	8005714 <OS_TaskSemPost+0x11c>
                      }
                      break;
 8005678:	bf00      	nop

                 default:
                      break;
             }
             p_tcb->SemCtr++;                               /* Task signaled is not pending on anything               */
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800567e:	1c5a      	adds	r2, r3, #1
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	64da      	str	r2, [r3, #76]	; 0x4c
             ctr = p_tcb->SemCtr;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005688:	617b      	str	r3, [r7, #20]
             OS_CRITICAL_EXIT();
 800568a:	6938      	ldr	r0, [r7, #16]
 800568c:	f7fa fe2c 	bl	80002e8 <CPU_SR_Restore>
             break;
 8005690:	e03f      	b.n	8005712 <OS_TaskSemPost+0x11a>

        case OS_TASK_STATE_PEND:
        case OS_TASK_STATE_PEND_TIMEOUT:
        case OS_TASK_STATE_PEND_SUSPENDED:
        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
             if (p_tcb->PendOn == OS_TASK_PEND_ON_TASK_SEM) {   /* Is task signaled waiting for a signal?             */
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005698:	2b07      	cmp	r3, #7
 800569a:	d114      	bne.n	80056c6 <OS_TaskSemPost+0xce>
                 OS_Post((OS_PEND_OBJ *)0,                      /*      Task is pending on signal                     */
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	9300      	str	r3, [sp, #0]
 80056a0:	2300      	movs	r3, #0
 80056a2:	2200      	movs	r2, #0
 80056a4:	68f9      	ldr	r1, [r7, #12]
 80056a6:	2000      	movs	r0, #0
 80056a8:	f7fe ff6e 	bl	8004588 <OS_Post>
                         (OS_TCB      *)p_tcb,
                         (void        *)0,
                         (OS_MSG_SIZE  )0u,
                         (CPU_TS       )ts);
                 ctr = p_tcb->SemCtr;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056b0:	617b      	str	r3, [r7, #20]
                 OS_CRITICAL_EXIT_NO_SCHED();
 80056b2:	6938      	ldr	r0, [r7, #16]
 80056b4:	f7fa fe18 	bl	80002e8 <CPU_SR_Restore>
                 if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0) {
 80056b8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	db27      	blt.n	8005710 <OS_TaskSemPost+0x118>
                     OSSched();                                 /* Run the scheduler                                  */
 80056c0:	f7fe fbf8 	bl	8003eb4 <OSSched>
                 }
                 p_tcb->SemCtr++;                           /* No,  Task signaled is NOT pending on semaphore ...     */
                 ctr = p_tcb->SemCtr;                       /*      ... it must be waiting on something else          */
                 OS_CRITICAL_EXIT();
             }
             break;
 80056c4:	e024      	b.n	8005710 <OS_TaskSemPost+0x118>
                          if (p_tcb->SemCtr == DEF_INT_32U_MAX_VAL) {
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056ce:	d108      	bne.n	80056e2 <OS_TaskSemPost+0xea>
                              OS_CRITICAL_EXIT();
 80056d0:	6938      	ldr	r0, [r7, #16]
 80056d2:	f7fa fe09 	bl	80002e8 <CPU_SR_Restore>
                             *p_err = OS_ERR_SEM_OVF;
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	f646 52c5 	movw	r2, #28101	; 0x6dc5
 80056dc:	801a      	strh	r2, [r3, #0]
                              return ((OS_SEM_CTR)0);
 80056de:	2300      	movs	r3, #0
 80056e0:	e018      	b.n	8005714 <OS_TaskSemPost+0x11c>
                          break;
 80056e2:	bf00      	nop
                 p_tcb->SemCtr++;                           /* No,  Task signaled is NOT pending on semaphore ...     */
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056e8:	1c5a      	adds	r2, r3, #1
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	64da      	str	r2, [r3, #76]	; 0x4c
                 ctr = p_tcb->SemCtr;                       /*      ... it must be waiting on something else          */
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056f2:	617b      	str	r3, [r7, #20]
                 OS_CRITICAL_EXIT();
 80056f4:	6938      	ldr	r0, [r7, #16]
 80056f6:	f7fa fdf7 	bl	80002e8 <CPU_SR_Restore>
             break;
 80056fa:	e009      	b.n	8005710 <OS_TaskSemPost+0x118>

        default:
             OS_CRITICAL_EXIT();
 80056fc:	6938      	ldr	r0, [r7, #16]
 80056fe:	f7fa fdf3 	bl	80002e8 <CPU_SR_Restore>
            *p_err = OS_ERR_STATE_INVALID;
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	f646 622d 	movw	r2, #28205	; 0x6e2d
 8005708:	801a      	strh	r2, [r3, #0]
             ctr   = (OS_SEM_CTR)0;
 800570a:	2300      	movs	r3, #0
 800570c:	617b      	str	r3, [r7, #20]
             break;
 800570e:	e000      	b.n	8005712 <OS_TaskSemPost+0x11a>
             break;
 8005710:	bf00      	nop
    }
    return (ctr);
 8005712:	697b      	ldr	r3, [r7, #20]
}
 8005714:	4618      	mov	r0, r3
 8005716:	3718      	adds	r7, #24
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}
 800571c:	20002174 	.word	0x20002174

08005720 <OS_TaskSuspend>:
*/

#if OS_CFG_TASK_SUSPEND_EN > 0u
void  OS_TaskSuspend (OS_TCB  *p_tcb,
                      OS_ERR  *p_err)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
    CPU_SR_ALLOC();
 800572a:	2300      	movs	r3, #0
 800572c:	60fb      	str	r3, [r7, #12]


    CPU_CRITICAL_ENTER();
 800572e:	f7fa fdd7 	bl	80002e0 <CPU_SR_Save>
 8005732:	60f8      	str	r0, [r7, #12]
    if (p_tcb == (OS_TCB *)0) {                             /* See if specified to suspend self                       */
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d102      	bne.n	8005740 <OS_TaskSuspend+0x20>
        p_tcb = OSTCBCurPtr;
 800573a:	4b3d      	ldr	r3, [pc, #244]	; (8005830 <OS_TaskSuspend+0x110>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	607b      	str	r3, [r7, #4]
    }

    if (p_tcb == OSTCBCurPtr) {
 8005740:	4b3b      	ldr	r3, [pc, #236]	; (8005830 <OS_TaskSuspend+0x110>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	429a      	cmp	r2, r3
 8005748:	d10b      	bne.n	8005762 <OS_TaskSuspend+0x42>
        if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {    /* Can't suspend when the scheduler is locked             */
 800574a:	4b3a      	ldr	r3, [pc, #232]	; (8005834 <OS_TaskSuspend+0x114>)
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d007      	beq.n	8005762 <OS_TaskSuspend+0x42>
            CPU_CRITICAL_EXIT();
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f7fa fdc8 	bl	80002e8 <CPU_SR_Restore>
           *p_err = OS_ERR_SCHED_LOCKED;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	f646 5263 	movw	r2, #28003	; 0x6d63
 800575e:	801a      	strh	r2, [r3, #0]
            return;
 8005760:	e063      	b.n	800582a <OS_TaskSuspend+0x10a>
        }
    }

   *p_err = OS_ERR_NONE;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	2200      	movs	r2, #0
 8005766:	801a      	strh	r2, [r3, #0]
    switch (p_tcb->TaskState) {
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800576e:	2b07      	cmp	r3, #7
 8005770:	d851      	bhi.n	8005816 <OS_TaskSuspend+0xf6>
 8005772:	a201      	add	r2, pc, #4	; (adr r2, 8005778 <OS_TaskSuspend+0x58>)
 8005774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005778:	08005799 	.word	0x08005799
 800577c:	080057b7 	.word	0x080057b7
 8005780:	080057cf 	.word	0x080057cf
 8005784:	080057e7 	.word	0x080057e7
 8005788:	080057ff 	.word	0x080057ff
 800578c:	080057ff 	.word	0x080057ff
 8005790:	080057ff 	.word	0x080057ff
 8005794:	080057ff 	.word	0x080057ff
        case OS_TASK_STATE_RDY:
             OS_CRITICAL_ENTER_CPU_EXIT();
             p_tcb->TaskState  =  OS_TASK_STATE_SUSPENDED;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2204      	movs	r2, #4
 800579c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             p_tcb->SuspendCtr = (OS_NESTING_CTR)1;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             OS_RdyListRemove(p_tcb);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f7ff f877 	bl	800489c <OS_RdyListRemove>
             OS_CRITICAL_EXIT_NO_SCHED();
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f7fa fd9a 	bl	80002e8 <CPU_SR_Restore>
             break;
 80057b4:	e037      	b.n	8005826 <OS_TaskSuspend+0x106>

        case OS_TASK_STATE_DLY:
             p_tcb->TaskState  = OS_TASK_STATE_DLY_SUSPENDED;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2205      	movs	r2, #5
 80057ba:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             p_tcb->SuspendCtr = (OS_NESTING_CTR)1;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             CPU_CRITICAL_EXIT();
 80057c6:	68f8      	ldr	r0, [r7, #12]
 80057c8:	f7fa fd8e 	bl	80002e8 <CPU_SR_Restore>
             break;
 80057cc:	e02b      	b.n	8005826 <OS_TaskSuspend+0x106>

        case OS_TASK_STATE_PEND:
             p_tcb->TaskState  = OS_TASK_STATE_PEND_SUSPENDED;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2206      	movs	r2, #6
 80057d2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             p_tcb->SuspendCtr = (OS_NESTING_CTR)1;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             CPU_CRITICAL_EXIT();
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	f7fa fd82 	bl	80002e8 <CPU_SR_Restore>
             break;
 80057e4:	e01f      	b.n	8005826 <OS_TaskSuspend+0x106>

        case OS_TASK_STATE_PEND_TIMEOUT:
             p_tcb->TaskState  = OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2207      	movs	r2, #7
 80057ea:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             p_tcb->SuspendCtr = (OS_NESTING_CTR)1;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2201      	movs	r2, #1
 80057f2:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             CPU_CRITICAL_EXIT();
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f7fa fd76 	bl	80002e8 <CPU_SR_Restore>
             break;
 80057fc:	e013      	b.n	8005826 <OS_TaskSuspend+0x106>

        case OS_TASK_STATE_SUSPENDED:
        case OS_TASK_STATE_DLY_SUSPENDED:
        case OS_TASK_STATE_PEND_SUSPENDED:
        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
             p_tcb->SuspendCtr++;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8005804:	3301      	adds	r3, #1
 8005806:	b2da      	uxtb	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             CPU_CRITICAL_EXIT();
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f7fa fd6a 	bl	80002e8 <CPU_SR_Restore>
             break;
 8005814:	e007      	b.n	8005826 <OS_TaskSuspend+0x106>

        default:
             CPU_CRITICAL_EXIT();
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f7fa fd66 	bl	80002e8 <CPU_SR_Restore>
            *p_err = OS_ERR_STATE_INVALID;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	f646 622d 	movw	r2, #28205	; 0x6e2d
 8005822:	801a      	strh	r2, [r3, #0]
             return;
 8005824:	e001      	b.n	800582a <OS_TaskSuspend+0x10a>
    }

    OSSched();
 8005826:	f7fe fb45 	bl	8003eb4 <OSSched>
}
 800582a:	3710      	adds	r7, #16
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	20002174 	.word	0x20002174
 8005834:	20001f08 	.word	0x20001f08

08005838 <OS_TaskChangePrio>:
************************************************************************************************************************
*/

void  OS_TaskChangePrio(OS_TCB  *p_tcb,
                        OS_PRIO  prio_new)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	460b      	mov	r3, r1
 8005842:	70fb      	strb	r3, [r7, #3]
    OS_PRIO  prio_cur;
#endif


    do {
        p_tcb_owner = (OS_TCB *)0;
 8005844:	2300      	movs	r3, #0
 8005846:	60fb      	str	r3, [r7, #12]
#if OS_CFG_MUTEX_EN > 0
        prio_cur    = p_tcb->Prio;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800584e:	72fb      	strb	r3, [r7, #11]
#endif
        switch (p_tcb->TaskState) {
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005856:	2b07      	cmp	r3, #7
 8005858:	f200 808c 	bhi.w	8005974 <OS_TaskChangePrio+0x13c>
 800585c:	a201      	add	r2, pc, #4	; (adr r2, 8005864 <OS_TaskChangePrio+0x2c>)
 800585e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005862:	bf00      	nop
 8005864:	08005885 	.word	0x08005885
 8005868:	080058b9 	.word	0x080058b9
 800586c:	080058c3 	.word	0x080058c3
 8005870:	080058c3 	.word	0x080058c3
 8005874:	080058b9 	.word	0x080058b9
 8005878:	080058b9 	.word	0x080058b9
 800587c:	080058c3 	.word	0x080058c3
 8005880:	080058c3 	.word	0x080058c3
            case OS_TASK_STATE_RDY:
                 OS_RdyListRemove(p_tcb);                   /* Remove from current priority                           */
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f7ff f809 	bl	800489c <OS_RdyListRemove>
                 p_tcb->Prio = prio_new;                    /* Set new task priority                                  */
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	78fa      	ldrb	r2, [r7, #3]
 800588e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                 OS_PrioInsert(p_tcb->Prio);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8005898:	4618      	mov	r0, r3
 800589a:	f7fd fe23 	bl	80034e4 <OS_PrioInsert>
                 if (p_tcb == OSTCBCurPtr) {
 800589e:	4b37      	ldr	r3, [pc, #220]	; (800597c <OS_TaskChangePrio+0x144>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d103      	bne.n	80058b0 <OS_TaskChangePrio+0x78>
                     OS_RdyListInsertHead(p_tcb);
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f7fe ff77 	bl	800479c <OS_RdyListInsertHead>
                 } else {
                     OS_RdyListInsertTail(p_tcb);
                 }
                 break;
 80058ae:	e05a      	b.n	8005966 <OS_TaskChangePrio+0x12e>
                     OS_RdyListInsertTail(p_tcb);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f7fe ffb3 	bl	800481c <OS_RdyListInsertTail>
                 break;
 80058b6:	e056      	b.n	8005966 <OS_TaskChangePrio+0x12e>

            case OS_TASK_STATE_DLY:                         /* Nothing to do except change the priority in the OS_TCB */
            case OS_TASK_STATE_SUSPENDED:
            case OS_TASK_STATE_DLY_SUSPENDED:
                 p_tcb->Prio = prio_new;                    /* Set new task priority                                  */
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	78fa      	ldrb	r2, [r7, #3]
 80058bc:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                 break;
 80058c0:	e051      	b.n	8005966 <OS_TaskChangePrio+0x12e>

            case OS_TASK_STATE_PEND:
            case OS_TASK_STATE_PEND_TIMEOUT:
            case OS_TASK_STATE_PEND_SUSPENDED:
            case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
                 p_tcb->Prio = prio_new;                    /* Set new task priority                                  */
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	78fa      	ldrb	r2, [r7, #3]
 80058c6:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                 switch (p_tcb->PendOn) {                   /* What to do depends on what we are pending on           */
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80058d0:	3b01      	subs	r3, #1
 80058d2:	2b05      	cmp	r3, #5
 80058d4:	d843      	bhi.n	800595e <OS_TaskChangePrio+0x126>
 80058d6:	a201      	add	r2, pc, #4	; (adr r2, 80058dc <OS_TaskChangePrio+0xa4>)
 80058d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058dc:	080058f5 	.word	0x080058f5
 80058e0:	0800595f 	.word	0x0800595f
 80058e4:	080058f5 	.word	0x080058f5
 80058e8:	080058fd 	.word	0x080058fd
 80058ec:	080058f5 	.word	0x080058f5
 80058f0:	080058f5 	.word	0x080058f5
                     case OS_TASK_PEND_ON_FLAG:
                     case OS_TASK_PEND_ON_MULTI:
                     case OS_TASK_PEND_ON_Q:
                     case OS_TASK_PEND_ON_SEM:
                          OS_PendListChangePrio(p_tcb);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f7fe fd23 	bl	8004340 <OS_PendListChangePrio>
                          break;
 80058fa:	e033      	b.n	8005964 <OS_TaskChangePrio+0x12c>

                     case OS_TASK_PEND_ON_MUTEX:
#if OS_CFG_MUTEX_EN > 0
                          OS_PendListChangePrio(p_tcb);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f7fe fd1f 	bl	8004340 <OS_PendListChangePrio>
                          p_tcb_owner = ((OS_MUTEX *)p_tcb->PendDataTblPtr->PendObjPtr)->OwnerTCBPtr;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590a:	60fb      	str	r3, [r7, #12]
                          if (prio_cur > prio_new) {         /* Are we increasing the priority?                        */
 800590c:	7afa      	ldrb	r2, [r7, #11]
 800590e:	78fb      	ldrb	r3, [r7, #3]
 8005910:	429a      	cmp	r2, r3
 8005912:	d908      	bls.n	8005926 <OS_TaskChangePrio+0xee>
                              if (p_tcb_owner->Prio <= prio_new) {/* Yes, do we need to give this prio to the owner?   */
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800591a:	78fa      	ldrb	r2, [r7, #3]
 800591c:	429a      	cmp	r2, r3
 800591e:	d320      	bcc.n	8005962 <OS_TaskChangePrio+0x12a>
                                  p_tcb_owner = (OS_TCB *)0;
 8005920:	2300      	movs	r3, #0
 8005922:	60fb      	str	r3, [r7, #12]
#endif
                                  }
                              }
                          }
#endif
                         break;
 8005924:	e01d      	b.n	8005962 <OS_TaskChangePrio+0x12a>
                              if (p_tcb_owner->Prio == prio_cur) {/* No, is it required to check for a lower prio?     */
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800592c:	7afa      	ldrb	r2, [r7, #11]
 800592e:	429a      	cmp	r2, r3
 8005930:	d117      	bne.n	8005962 <OS_TaskChangePrio+0x12a>
                                  prio_new = OS_MutexGrpPrioFindHighest(p_tcb_owner);
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f7fd f88f 	bl	8002a56 <OS_MutexGrpPrioFindHighest>
 8005938:	4603      	mov	r3, r0
 800593a:	70fb      	strb	r3, [r7, #3]
                                  prio_new = prio_new > p_tcb_owner->BasePrio ? p_tcb_owner->BasePrio : prio_new;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005942:	78fa      	ldrb	r2, [r7, #3]
 8005944:	4293      	cmp	r3, r2
 8005946:	bf28      	it	cs
 8005948:	4613      	movcs	r3, r2
 800594a:	70fb      	strb	r3, [r7, #3]
                                  if (prio_new == p_tcb_owner->Prio) {
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8005952:	78fa      	ldrb	r2, [r7, #3]
 8005954:	429a      	cmp	r2, r3
 8005956:	d104      	bne.n	8005962 <OS_TaskChangePrio+0x12a>
                                      p_tcb_owner = (OS_TCB *)0;
 8005958:	2300      	movs	r3, #0
 800595a:	60fb      	str	r3, [r7, #12]
                         break;
 800595c:	e001      	b.n	8005962 <OS_TaskChangePrio+0x12a>

                     case OS_TASK_PEND_ON_TASK_Q:
                     case OS_TASK_PEND_ON_TASK_SEM:
                     default:
                          break;
 800595e:	bf00      	nop
 8005960:	e000      	b.n	8005964 <OS_TaskChangePrio+0x12c>
                         break;
 8005962:	bf00      	nop
                 }
                 break;
 8005964:	bf00      	nop

            default:
                 return;
        }
        p_tcb = p_tcb_owner;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	607b      	str	r3, [r7, #4]
    } while (p_tcb != (OS_TCB *)0);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2b00      	cmp	r3, #0
 800596e:	f47f af69 	bne.w	8005844 <OS_TaskChangePrio+0xc>
 8005972:	e000      	b.n	8005976 <OS_TaskChangePrio+0x13e>
                 return;
 8005974:	bf00      	nop
}
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	20002174 	.word	0x20002174

08005980 <OSQCreate>:
void  OSQCreate (OS_Q        *p_q,
                 CPU_CHAR    *p_name,
                 OS_MSG_QTY   max_qty,
                 OS_ERR      *p_err)

{
 8005980:	b580      	push	{r7, lr}
 8005982:	b086      	sub	sp, #24
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	603b      	str	r3, [r7, #0]
 800598c:	4613      	mov	r3, r2
 800598e:	80fb      	strh	r3, [r7, #6]
    CPU_SR_ALLOC();
 8005990:	2300      	movs	r3, #0
 8005992:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to be called from an ISR                   */
 8005994:	4b1f      	ldr	r3, [pc, #124]	; (8005a14 <OSQCreate+0x94>)
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d004      	beq.n	80059a6 <OSQCreate+0x26>
       *p_err = OS_ERR_CREATE_ISR;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	f642 62e1 	movw	r2, #12001	; 0x2ee1
 80059a2:	801a      	strh	r2, [r3, #0]
        return;
 80059a4:	e033      	b.n	8005a0e <OSQCreate+0x8e>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_q == (OS_Q *)0) {                                 /* Validate arguments                                     */
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d104      	bne.n	80059b6 <OSQCreate+0x36>
       *p_err = OS_ERR_OBJ_PTR_NULL;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	f645 52c3 	movw	r2, #24003	; 0x5dc3
 80059b2:	801a      	strh	r2, [r3, #0]
        return;
 80059b4:	e02b      	b.n	8005a0e <OSQCreate+0x8e>
    }
    if (max_qty == (OS_MSG_QTY)0) {                         /* Cannot specify a zero size queue                       */
 80059b6:	88fb      	ldrh	r3, [r7, #6]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d104      	bne.n	80059c6 <OSQCreate+0x46>
       *p_err = OS_ERR_Q_SIZE;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	f246 5294 	movw	r2, #26004	; 0x6594
 80059c2:	801a      	strh	r2, [r3, #0]
        return;
 80059c4:	e023      	b.n	8005a0e <OSQCreate+0x8e>
    }
#endif

    OS_CRITICAL_ENTER();
 80059c6:	f7fa fc8b 	bl	80002e0 <CPU_SR_Save>
 80059ca:	6178      	str	r0, [r7, #20]
#if OS_OBJ_TYPE_REQ > 0u
    p_q->Type    = OS_OBJ_TYPE_Q;                           /* Mark the data structure as a message queue             */
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	4a12      	ldr	r2, [pc, #72]	; (8005a18 <OSQCreate+0x98>)
 80059d0:	601a      	str	r2, [r3, #0]
#endif
#if OS_CFG_DBG_EN > 0u
    p_q->NamePtr = p_name;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	68ba      	ldr	r2, [r7, #8]
 80059d6:	605a      	str	r2, [r3, #4]
#else
    (void)&p_name;
#endif
    OS_MsgQInit(&p_q->MsgQ,                                 /* Initialize the queue                                   */
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	3320      	adds	r3, #32
 80059dc:	88fa      	ldrh	r2, [r7, #6]
 80059de:	4611      	mov	r1, r2
 80059e0:	4618      	mov	r0, r3
 80059e2:	f7ff f875 	bl	8004ad0 <OS_MsgQInit>
                max_qty);
    OS_PendListInit(&p_q->PendList);                        /* Initialize the waiting list                            */
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	3308      	adds	r3, #8
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7fe fcd3 	bl	8004396 <OS_PendListInit>

#if OS_CFG_DBG_EN > 0u
    OS_QDbgListAdd(p_q);
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f000 f965 	bl	8005cc0 <OS_QDbgListAdd>
#endif
    OSQQty++;                                               /* One more queue created                                 */
 80059f6:	4b09      	ldr	r3, [pc, #36]	; (8005a1c <OSQCreate+0x9c>)
 80059f8:	881b      	ldrh	r3, [r3, #0]
 80059fa:	3301      	adds	r3, #1
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	4b07      	ldr	r3, [pc, #28]	; (8005a1c <OSQCreate+0x9c>)
 8005a00:	801a      	strh	r2, [r3, #0]
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_Q_CREATE(p_q, p_name);                         /* Record the event.                                      */
#endif
    OS_CRITICAL_EXIT_NO_SCHED();
 8005a02:	6978      	ldr	r0, [r7, #20]
 8005a04:	f7fa fc70 	bl	80002e8 <CPU_SR_Restore>
   *p_err = OS_ERR_NONE;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	801a      	strh	r2, [r3, #0]
}
 8005a0e:	3718      	adds	r7, #24
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	2000219e 	.word	0x2000219e
 8005a18:	55455551 	.word	0x55455551
 8005a1c:	20002178 	.word	0x20002178

08005a20 <OSQPend>:
                OS_TICK       timeout,
                OS_OPT        opt,
                OS_MSG_SIZE  *p_msg_size,
                CPU_TS       *p_ts,
                OS_ERR       *p_err)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b08e      	sub	sp, #56	; 0x38
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	603b      	str	r3, [r7, #0]
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	80fb      	strh	r3, [r7, #6]
    OS_PEND_DATA  pend_data;
    void         *p_void;
    CPU_SR_ALLOC();
 8005a30:	2300      	movs	r3, #0
 8005a32:	633b      	str	r3, [r7, #48]	; 0x30
        return ((void *)0);
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 8005a34:	4b72      	ldr	r3, [pc, #456]	; (8005c00 <OSQPend+0x1e0>)
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d005      	beq.n	8005a48 <OSQPend+0x28>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_PEND_FAILED(p_q);                        /* Record the event.                                      */
#endif
       *p_err = OS_ERR_PEND_ISR;
 8005a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a3e:	f246 12ae 	movw	r2, #25006	; 0x61ae
 8005a42:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 8005a44:	2300      	movs	r3, #0
 8005a46:	e0d7      	b.n	8005bf8 <OSQPend+0x1d8>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_q == (OS_Q *)0) {                                 /* Validate arguments                                     */
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d105      	bne.n	8005a5a <OSQPend+0x3a>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_PEND_FAILED(p_q);                        /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_PTR_NULL;
 8005a4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a50:	f645 52c3 	movw	r2, #24003	; 0x5dc3
 8005a54:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 8005a56:	2300      	movs	r3, #0
 8005a58:	e0ce      	b.n	8005bf8 <OSQPend+0x1d8>
    }
    if (p_msg_size == (OS_MSG_SIZE *)0) {
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d105      	bne.n	8005a6c <OSQPend+0x4c>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_PEND_FAILED(p_q);                        /* Record the event.                                      */
#endif
       *p_err = OS_ERR_PTR_INVALID;
 8005a60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a62:	f246 22d5 	movw	r2, #25301	; 0x62d5
 8005a66:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 8005a68:	2300      	movs	r3, #0
 8005a6a:	e0c5      	b.n	8005bf8 <OSQPend+0x1d8>
    }
    switch (opt) {
 8005a6c:	88fb      	ldrh	r3, [r7, #6]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d008      	beq.n	8005a84 <OSQPend+0x64>
 8005a72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a76:	d005      	beq.n	8005a84 <OSQPend+0x64>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_Q_PEND_FAILED(p_q);                   /* Record the event.                                      */
#endif
            *p_err = OS_ERR_OPT_INVALID;
 8005a78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a7a:	f645 6225 	movw	r2, #24101	; 0x5e25
 8005a7e:	801a      	strh	r2, [r3, #0]
             return ((void *)0);
 8005a80:	2300      	movs	r3, #0
 8005a82:	e0b9      	b.n	8005bf8 <OSQPend+0x1d8>
             break;
 8005a84:	bf00      	nop
    }
#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_q->Type != OS_OBJ_TYPE_Q) {                       /* Make sure message queue was created                    */
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a5e      	ldr	r2, [pc, #376]	; (8005c04 <OSQPend+0x1e4>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d005      	beq.n	8005a9c <OSQPend+0x7c>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_PEND_FAILED(p_q);                        /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_TYPE;
 8005a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a92:	f645 52c4 	movw	r2, #24004	; 0x5dc4
 8005a96:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 8005a98:	2300      	movs	r3, #0
 8005a9a:	e0ad      	b.n	8005bf8 <OSQPend+0x1d8>
    }
#endif

    if (p_ts != (CPU_TS *)0) {
 8005a9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d002      	beq.n	8005aa8 <OSQPend+0x88>
       *p_ts  = (CPU_TS  )0;                                /* Initialize the returned timestamp                      */
 8005aa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	601a      	str	r2, [r3, #0]
    }

    CPU_CRITICAL_ENTER();
 8005aa8:	f7fa fc1a 	bl	80002e0 <CPU_SR_Save>
 8005aac:	6338      	str	r0, [r7, #48]	; 0x30
    p_void = OS_MsgQGet(&p_q->MsgQ,                         /* Any message waiting in the message queue?              */
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f103 0020 	add.w	r0, r3, #32
 8005ab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ab6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ab8:	6839      	ldr	r1, [r7, #0]
 8005aba:	f7ff f823 	bl	8004b04 <OS_MsgQGet>
 8005abe:	6378      	str	r0, [r7, #52]	; 0x34
                        p_msg_size,
                        p_ts,
                        p_err);
    if (*p_err == OS_ERR_NONE) {
 8005ac0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ac2:	881b      	ldrh	r3, [r3, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d104      	bne.n	8005ad2 <OSQPend+0xb2>
        CPU_CRITICAL_EXIT();
 8005ac8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005aca:	f7fa fc0d 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_PEND(p_q);                               /* Record the event.                                      */
#endif
        return (p_void);                                    /* Yes, Return message received                           */
 8005ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad0:	e092      	b.n	8005bf8 <OSQPend+0x1d8>
    }

    if ((opt & OS_OPT_PEND_NON_BLOCKING) != (OS_OPT)0) {    /* Caller wants to block if not available?                */
 8005ad2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	da08      	bge.n	8005aec <OSQPend+0xcc>
        CPU_CRITICAL_EXIT();
 8005ada:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005adc:	f7fa fc04 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_PEND_FAILED(p_q);                        /* Record the event.                                      */
#endif
       *p_err = OS_ERR_PEND_WOULD_BLOCK;                    /* No                                                     */
 8005ae0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ae2:	f246 12b0 	movw	r2, #25008	; 0x61b0
 8005ae6:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 8005ae8:	2300      	movs	r3, #0
 8005aea:	e085      	b.n	8005bf8 <OSQPend+0x1d8>
    } else {
        if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {    /* Can't pend when the scheduler is locked                */
 8005aec:	4b46      	ldr	r3, [pc, #280]	; (8005c08 <OSQPend+0x1e8>)
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d008      	beq.n	8005b06 <OSQPend+0xe6>
            CPU_CRITICAL_EXIT();
 8005af4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005af6:	f7fa fbf7 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
            TRACE_OS_Q_PEND_FAILED(p_q);                    /* Record the event.                                      */
#endif
           *p_err = OS_ERR_SCHED_LOCKED;
 8005afa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005afc:	f646 5263 	movw	r2, #28003	; 0x6d63
 8005b00:	801a      	strh	r2, [r3, #0]
            return ((void *)0);
 8005b02:	2300      	movs	r3, #0
 8005b04:	e078      	b.n	8005bf8 <OSQPend+0x1d8>
        }
    }
                                                            /* Lock the scheduler/re-enable interrupts                */
    OS_CRITICAL_ENTER_CPU_EXIT();
    OS_Pend(&pend_data,                                     /* Block task pending on Message Queue                    */
 8005b06:	f107 0010 	add.w	r0, r7, #16
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	2205      	movs	r2, #5
 8005b0e:	68f9      	ldr	r1, [r7, #12]
 8005b10:	f7fe fb3c 	bl	800418c <OS_Pend>
            (OS_PEND_OBJ *)((void *)p_q),
            OS_TASK_PEND_ON_Q,
            timeout);
    OS_CRITICAL_EXIT_NO_SCHED();
 8005b14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b16:	f7fa fbe7 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_Q_PEND_BLOCK(p_q);                             /* Record the event.                                      */
#endif
    OSSched();                                              /* Find the next highest priority task ready to run       */
 8005b1a:	f7fe f9cb 	bl	8003eb4 <OSSched>

    CPU_CRITICAL_ENTER();
 8005b1e:	f7fa fbdf 	bl	80002e0 <CPU_SR_Save>
 8005b22:	6338      	str	r0, [r7, #48]	; 0x30
    switch (OSTCBCurPtr->PendStatus) {
 8005b24:	4b39      	ldr	r3, [pc, #228]	; (8005c0c <OSQPend+0x1ec>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b2c:	2b03      	cmp	r3, #3
 8005b2e:	d855      	bhi.n	8005bdc <OSQPend+0x1bc>
 8005b30:	a201      	add	r2, pc, #4	; (adr r2, 8005b38 <OSQPend+0x118>)
 8005b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b36:	bf00      	nop
 8005b38:	08005b49 	.word	0x08005b49
 8005b3c:	08005b75 	.word	0x08005b75
 8005b40:	08005bb9 	.word	0x08005bb9
 8005b44:	08005b99 	.word	0x08005b99
        case OS_STATUS_PEND_OK:                             /* Extract message from TCB (Put there by Post)           */
             p_void     = OSTCBCurPtr->MsgPtr;
 8005b48:	4b30      	ldr	r3, [pc, #192]	; (8005c0c <OSQPend+0x1ec>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b4e:	637b      	str	r3, [r7, #52]	; 0x34
            *p_msg_size = OSTCBCurPtr->MsgSize;
 8005b50:	4b2e      	ldr	r3, [pc, #184]	; (8005c0c <OSQPend+0x1ec>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	801a      	strh	r2, [r3, #0]
             if (p_ts  != (CPU_TS *)0) {
 8005b5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d004      	beq.n	8005b6c <OSQPend+0x14c>
                *p_ts   =  OSTCBCurPtr->TS;
 8005b62:	4b2a      	ldr	r3, [pc, #168]	; (8005c0c <OSQPend+0x1ec>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b6a:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_Q_PEND(p_q);                          /* Record the event.                                      */
#endif
            *p_err      = OS_ERR_NONE;
 8005b6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b6e:	2200      	movs	r2, #0
 8005b70:	801a      	strh	r2, [r3, #0]
             break;
 8005b72:	e03d      	b.n	8005bf0 <OSQPend+0x1d0>

        case OS_STATUS_PEND_ABORT:                          /* Indicate that we aborted                               */
             p_void     = (void      *)0;
 8005b74:	2300      	movs	r3, #0
 8005b76:	637b      	str	r3, [r7, #52]	; 0x34
            *p_msg_size = (OS_MSG_SIZE)0;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	801a      	strh	r2, [r3, #0]
             if (p_ts  != (CPU_TS *)0) {
 8005b7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d004      	beq.n	8005b8e <OSQPend+0x16e>
                *p_ts   =  OSTCBCurPtr->TS;
 8005b84:	4b21      	ldr	r3, [pc, #132]	; (8005c0c <OSQPend+0x1ec>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b8c:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_Q_PEND_FAILED(p_q);                   /* Record the event.                                      */
#endif
            *p_err      = OS_ERR_PEND_ABORT;
 8005b8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b90:	f246 12a9 	movw	r2, #25001	; 0x61a9
 8005b94:	801a      	strh	r2, [r3, #0]
             break;
 8005b96:	e02b      	b.n	8005bf0 <OSQPend+0x1d0>

        case OS_STATUS_PEND_TIMEOUT:                        /* Indicate that we didn't get event within TO            */
             p_void     = (void      *)0;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	637b      	str	r3, [r7, #52]	; 0x34
            *p_msg_size = (OS_MSG_SIZE)0;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	801a      	strh	r2, [r3, #0]
             if (p_ts  != (CPU_TS *)0) {
 8005ba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d002      	beq.n	8005bae <OSQPend+0x18e>
                *p_ts   = (CPU_TS  )0;
 8005ba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005baa:	2200      	movs	r2, #0
 8005bac:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_Q_PEND_FAILED(p_q);                   /* Record the event.                                      */
#endif
            *p_err      = OS_ERR_TIMEOUT;
 8005bae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bb0:	f247 22d9 	movw	r2, #29401	; 0x72d9
 8005bb4:	801a      	strh	r2, [r3, #0]
             break;
 8005bb6:	e01b      	b.n	8005bf0 <OSQPend+0x1d0>

        case OS_STATUS_PEND_DEL:                            /* Indicate that object pended on has been deleted        */
             p_void     = (void      *)0;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	637b      	str	r3, [r7, #52]	; 0x34
            *p_msg_size = (OS_MSG_SIZE)0;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	801a      	strh	r2, [r3, #0]
             if (p_ts  != (CPU_TS *)0) {
 8005bc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d004      	beq.n	8005bd2 <OSQPend+0x1b2>
                *p_ts   =  OSTCBCurPtr->TS;
 8005bc8:	4b10      	ldr	r3, [pc, #64]	; (8005c0c <OSQPend+0x1ec>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005bce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bd0:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_Q_PEND_FAILED(p_q);                   /* Record the event.                                      */
#endif
            *p_err      = OS_ERR_OBJ_DEL;
 8005bd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bd4:	f645 52c2 	movw	r2, #24002	; 0x5dc2
 8005bd8:	801a      	strh	r2, [r3, #0]
             break;
 8005bda:	e009      	b.n	8005bf0 <OSQPend+0x1d0>

        default:
             p_void     = (void      *)0;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	637b      	str	r3, [r7, #52]	; 0x34
            *p_msg_size = (OS_MSG_SIZE)0;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	2200      	movs	r2, #0
 8005be4:	801a      	strh	r2, [r3, #0]
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_Q_PEND_FAILED(p_q);                   /* Record the event.                                      */
#endif
            *p_err      = OS_ERR_STATUS_INVALID;
 8005be6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005be8:	f646 622e 	movw	r2, #28206	; 0x6e2e
 8005bec:	801a      	strh	r2, [r3, #0]
             break;
 8005bee:	bf00      	nop
    }
    CPU_CRITICAL_EXIT();
 8005bf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bf2:	f7fa fb79 	bl	80002e8 <CPU_SR_Restore>
    return (p_void);
 8005bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3738      	adds	r7, #56	; 0x38
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	2000219e 	.word	0x2000219e
 8005c04:	55455551 	.word	0x55455551
 8005c08:	20001f08 	.word	0x20001f08
 8005c0c:	20002174 	.word	0x20002174

08005c10 <OSQPost>:
void  OSQPost (OS_Q         *p_q,
               void         *p_void,
               OS_MSG_SIZE   msg_size,
               OS_OPT        opt,
               OS_ERR       *p_err)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b088      	sub	sp, #32
 8005c14:	af02      	add	r7, sp, #8
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	4611      	mov	r1, r2
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	460b      	mov	r3, r1
 8005c20:	80fb      	strh	r3, [r7, #6]
 8005c22:	4613      	mov	r3, r2
 8005c24:	80bb      	strh	r3, [r7, #4]
        return;
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_q == (OS_Q *)0) {                                 /* Validate 'p_q'                                         */
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d104      	bne.n	8005c36 <OSQPost+0x26>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_POST_FAILED(p_q);                        /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_PTR_NULL;
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
 8005c2e:	f645 52c3 	movw	r2, #24003	; 0x5dc3
 8005c32:	801a      	strh	r2, [r3, #0]
        return;
 8005c34:	e03f      	b.n	8005cb6 <OSQPost+0xa6>
    }
    switch (opt) {                                          /* Validate 'opt'                                         */
 8005c36:	88bb      	ldrh	r3, [r7, #4]
 8005c38:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 8005c3c:	d022      	beq.n	8005c84 <OSQPost+0x74>
 8005c3e:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 8005c42:	dc07      	bgt.n	8005c54 <OSQPost+0x44>
 8005c44:	2b10      	cmp	r3, #16
 8005c46:	d01d      	beq.n	8005c84 <OSQPost+0x74>
 8005c48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c4c:	d01a      	beq.n	8005c84 <OSQPost+0x74>
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d018      	beq.n	8005c84 <OSQPost+0x74>
 8005c52:	e012      	b.n	8005c7a <OSQPost+0x6a>
 8005c54:	f248 0210 	movw	r2, #32784	; 0x8010
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d013      	beq.n	8005c84 <OSQPost+0x74>
 8005c5c:	f248 0210 	movw	r2, #32784	; 0x8010
 8005c60:	4293      	cmp	r3, r2
 8005c62:	dc03      	bgt.n	8005c6c <OSQPost+0x5c>
 8005c64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c68:	d00c      	beq.n	8005c84 <OSQPost+0x74>
 8005c6a:	e006      	b.n	8005c7a <OSQPost+0x6a>
 8005c6c:	f5b3 4f02 	cmp.w	r3, #33280	; 0x8200
 8005c70:	d008      	beq.n	8005c84 <OSQPost+0x74>
 8005c72:	f248 2210 	movw	r2, #33296	; 0x8210
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d004      	beq.n	8005c84 <OSQPost+0x74>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_Q_POST_FAILED(p_q);                   /* Record the event.                                      */
#endif
            *p_err =  OS_ERR_OPT_INVALID;
 8005c7a:	6a3b      	ldr	r3, [r7, #32]
 8005c7c:	f645 6225 	movw	r2, #24101	; 0x5e25
 8005c80:	801a      	strh	r2, [r3, #0]
             return;
 8005c82:	e018      	b.n	8005cb6 <OSQPost+0xa6>
             break;
 8005c84:	bf00      	nop
    }
#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_q->Type != OS_OBJ_TYPE_Q) {                       /* Make sure message queue was created                    */
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a0c      	ldr	r2, [pc, #48]	; (8005cbc <OSQPost+0xac>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d004      	beq.n	8005c9a <OSQPost+0x8a>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_POST_FAILED(p_q);                        /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_TYPE;
 8005c90:	6a3b      	ldr	r3, [r7, #32]
 8005c92:	f645 52c4 	movw	r2, #24004	; 0x5dc4
 8005c96:	801a      	strh	r2, [r3, #0]
        return;
 8005c98:	e00d      	b.n	8005cb6 <OSQPost+0xa6>
    }
#endif

    ts = OS_TS_GET();                                       /* Get timestamp                                          */
 8005c9a:	f000 fafd 	bl	8006298 <CPU_TS_TmrRd>
 8005c9e:	6178      	str	r0, [r7, #20]
    }
#endif
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_Q_POST(p_q);                                   /* Record the event.                                      */
#endif
    OS_QPost(p_q,
 8005ca0:	88b9      	ldrh	r1, [r7, #4]
 8005ca2:	88fa      	ldrh	r2, [r7, #6]
 8005ca4:	6a3b      	ldr	r3, [r7, #32]
 8005ca6:	9301      	str	r3, [sp, #4]
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	9300      	str	r3, [sp, #0]
 8005cac:	460b      	mov	r3, r1
 8005cae:	68b9      	ldr	r1, [r7, #8]
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f000 f841 	bl	8005d38 <OS_QPost>
             p_void,
             msg_size,
             opt,
             ts,
             p_err);
}
 8005cb6:	3718      	adds	r7, #24
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	55455551 	.word	0x55455551

08005cc0 <OS_QDbgListAdd>:
*/


#if OS_CFG_DBG_EN > 0u
void  OS_QDbgListAdd (OS_Q  *p_q)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
    p_q->DbgNamePtr               = (CPU_CHAR *)((void *)" ");
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a0e      	ldr	r2, [pc, #56]	; (8005d04 <OS_QDbgListAdd+0x44>)
 8005ccc:	61da      	str	r2, [r3, #28]
    p_q->DbgPrevPtr               = (OS_Q     *)0;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	615a      	str	r2, [r3, #20]
    if (OSQDbgListPtr == (OS_Q *)0) {
 8005cd4:	4b0c      	ldr	r3, [pc, #48]	; (8005d08 <OS_QDbgListAdd+0x48>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d103      	bne.n	8005ce4 <OS_QDbgListAdd+0x24>
        p_q->DbgNextPtr           = (OS_Q     *)0;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	619a      	str	r2, [r3, #24]
 8005ce2:	e007      	b.n	8005cf4 <OS_QDbgListAdd+0x34>
    } else {
        p_q->DbgNextPtr           =  OSQDbgListPtr;
 8005ce4:	4b08      	ldr	r3, [pc, #32]	; (8005d08 <OS_QDbgListAdd+0x48>)
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	619a      	str	r2, [r3, #24]
        OSQDbgListPtr->DbgPrevPtr =  p_q;
 8005cec:	4b06      	ldr	r3, [pc, #24]	; (8005d08 <OS_QDbgListAdd+0x48>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	615a      	str	r2, [r3, #20]
    }
    OSQDbgListPtr                 =  p_q;
 8005cf4:	4a04      	ldr	r2, [pc, #16]	; (8005d08 <OS_QDbgListAdd+0x48>)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6013      	str	r3, [r2, #0]
}
 8005cfa:	bf00      	nop
 8005cfc:	370c      	adds	r7, #12
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bc80      	pop	{r7}
 8005d02:	4770      	bx	lr
 8005d04:	0800e804 	.word	0x0800e804
 8005d08:	20002330 	.word	0x20002330

08005d0c <OS_QInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_QInit (OS_ERR  *p_err)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSQDbgListPtr = (OS_Q *)0;
 8005d14:	4b06      	ldr	r3, [pc, #24]	; (8005d30 <OS_QInit+0x24>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	601a      	str	r2, [r3, #0]
#endif

    OSQQty        = (OS_OBJ_QTY)0;
 8005d1a:	4b06      	ldr	r3, [pc, #24]	; (8005d34 <OS_QInit+0x28>)
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	801a      	strh	r2, [r3, #0]
   *p_err         = OS_ERR_NONE;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	801a      	strh	r2, [r3, #0]
}
 8005d26:	bf00      	nop
 8005d28:	370c      	adds	r7, #12
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bc80      	pop	{r7}
 8005d2e:	4770      	bx	lr
 8005d30:	20002330 	.word	0x20002330
 8005d34:	20002178 	.word	0x20002178

08005d38 <OS_QPost>:
                void         *p_void,
                OS_MSG_SIZE   msg_size,
                OS_OPT        opt,
                CPU_TS        ts,
                OS_ERR       *p_err)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b08c      	sub	sp, #48	; 0x30
 8005d3c:	af02      	add	r7, sp, #8
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	4611      	mov	r1, r2
 8005d44:	461a      	mov	r2, r3
 8005d46:	460b      	mov	r3, r1
 8005d48:	80fb      	strh	r3, [r7, #6]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	80bb      	strh	r3, [r7, #4]
    OS_OPT         post_type;
    OS_PEND_LIST  *p_pend_list;
    OS_PEND_DATA  *p_pend_data;
    OS_PEND_DATA  *p_pend_data_next;
    OS_TCB        *p_tcb;
    CPU_SR_ALLOC();
 8005d4e:	2300      	movs	r3, #0
 8005d50:	61fb      	str	r3, [r7, #28]



    OS_CRITICAL_ENTER();
 8005d52:	f7fa fac5 	bl	80002e0 <CPU_SR_Save>
 8005d56:	61f8      	str	r0, [r7, #28]
    p_pend_list = &p_q->PendList;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	3308      	adds	r3, #8
 8005d5c:	61bb      	str	r3, [r7, #24]
    if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0) {         /* Any task waiting on message queue?                     */
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	891b      	ldrh	r3, [r3, #8]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d11a      	bne.n	8005d9c <OS_QPost+0x64>
        if ((opt & OS_OPT_POST_LIFO) == (OS_OPT)0) {        /* Determine whether we post FIFO or LIFO                 */
 8005d66:	88bb      	ldrh	r3, [r7, #4]
 8005d68:	f003 0310 	and.w	r3, r3, #16
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d102      	bne.n	8005d76 <OS_QPost+0x3e>
            post_type = OS_OPT_POST_FIFO;
 8005d70:	2300      	movs	r3, #0
 8005d72:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005d74:	e001      	b.n	8005d7a <OS_QPost+0x42>
        } else {
            post_type = OS_OPT_POST_LIFO;
 8005d76:	2310      	movs	r3, #16
 8005d78:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
        OS_MsgQPut(&p_q->MsgQ,                              /* Place message in the message queue                     */
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f103 0020 	add.w	r0, r3, #32
 8005d80:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8005d82:	88fa      	ldrh	r2, [r7, #6]
 8005d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d86:	9301      	str	r3, [sp, #4]
 8005d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8a:	9300      	str	r3, [sp, #0]
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	68b9      	ldr	r1, [r7, #8]
 8005d90:	f7fe ff16 	bl	8004bc0 <OS_MsgQPut>
                   p_void,
                   msg_size,
                   post_type,
                   ts,
                   p_err);
        OS_CRITICAL_EXIT();
 8005d94:	69f8      	ldr	r0, [r7, #28]
 8005d96:	f7fa faa7 	bl	80002e8 <CPU_SR_Restore>
        return;
 8005d9a:	e031      	b.n	8005e00 <OS_QPost+0xc8>
    }

    if ((opt & OS_OPT_POST_ALL) != (OS_OPT)0) {             /* Post message to all tasks waiting?                     */
 8005d9c:	88bb      	ldrh	r3, [r7, #4]
 8005d9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d003      	beq.n	8005dae <OS_QPost+0x76>
        cnt = p_pend_list->NbrEntries;                      /* Yes                                                    */
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	891b      	ldrh	r3, [r3, #8]
 8005daa:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005dac:	e001      	b.n	8005db2 <OS_QPost+0x7a>
    } else {
        cnt = (OS_OBJ_QTY)1;                                /* No                                                     */
 8005dae:	2301      	movs	r3, #1
 8005db0:	84fb      	strh	r3, [r7, #38]	; 0x26
    }
    p_pend_data = p_pend_list->HeadPtr;
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	623b      	str	r3, [r7, #32]
    while (cnt > 0u) {
 8005db8:	e013      	b.n	8005de2 <OS_QPost+0xaa>
        p_tcb            = p_pend_data->TCBPtr;
 8005dba:	6a3b      	ldr	r3, [r7, #32]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	617b      	str	r3, [r7, #20]
        p_pend_data_next = p_pend_data->NextPtr;
 8005dc0:	6a3b      	ldr	r3, [r7, #32]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	613b      	str	r3, [r7, #16]
        OS_Post((OS_PEND_OBJ *)((void *)p_q),
 8005dc6:	88fa      	ldrh	r2, [r7, #6]
 8005dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dca:	9300      	str	r3, [sp, #0]
 8005dcc:	4613      	mov	r3, r2
 8005dce:	68ba      	ldr	r2, [r7, #8]
 8005dd0:	6979      	ldr	r1, [r7, #20]
 8005dd2:	68f8      	ldr	r0, [r7, #12]
 8005dd4:	f7fe fbd8 	bl	8004588 <OS_Post>
                p_tcb,
                p_void,
                msg_size,
                ts);
        p_pend_data = p_pend_data_next;
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	623b      	str	r3, [r7, #32]
        cnt--;
 8005ddc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005dde:	3b01      	subs	r3, #1
 8005de0:	84fb      	strh	r3, [r7, #38]	; 0x26
    while (cnt > 0u) {
 8005de2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1e8      	bne.n	8005dba <OS_QPost+0x82>
    }
    OS_CRITICAL_EXIT_NO_SCHED();
 8005de8:	69f8      	ldr	r0, [r7, #28]
 8005dea:	f7fa fa7d 	bl	80002e8 <CPU_SR_Restore>
    if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0) {
 8005dee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	db01      	blt.n	8005dfa <OS_QPost+0xc2>
        OSSched();                                          /* Run the scheduler                                      */
 8005df6:	f7fe f85d 	bl	8003eb4 <OSSched>
    }
   *p_err = OS_ERR_NONE;
 8005dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	801a      	strh	r2, [r3, #0]
}
 8005e00:	3728      	adds	r7, #40	; 0x28
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
	...

08005e08 <OSIdleTaskHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSIdleTaskHook (void)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	af00      	add	r7, sp, #0
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppIdleTaskHookPtr != (OS_APP_HOOK_VOID)0) {
 8005e0c:	4b04      	ldr	r3, [pc, #16]	; (8005e20 <OSIdleTaskHook+0x18>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d002      	beq.n	8005e1a <OSIdleTaskHook+0x12>
        (*OS_AppIdleTaskHookPtr)();
 8005e14:	4b02      	ldr	r3, [pc, #8]	; (8005e20 <OSIdleTaskHook+0x18>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4798      	blx	r3
    }
#endif
}
 8005e1a:	bf00      	nop
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	2000236c 	.word	0x2000236c

08005e24 <OSInitHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSInitHook (void)
{
 8005e24:	b480      	push	{r7}
 8005e26:	af00      	add	r7, sp, #0
                                                                    /* 8-byte align the ISR stack.                            */    
    OS_CPU_ExceptStkBase = (CPU_STK *)(OSCfg_ISRStkBasePtr + OSCfg_ISRStkSize);
 8005e28:	4b09      	ldr	r3, [pc, #36]	; (8005e50 <OSInitHook+0x2c>)
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	4b09      	ldr	r3, [pc, #36]	; (8005e54 <OSInitHook+0x30>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	4413      	add	r3, r2
 8005e34:	4a08      	ldr	r2, [pc, #32]	; (8005e58 <OSInitHook+0x34>)
 8005e36:	6013      	str	r3, [r2, #0]
    OS_CPU_ExceptStkBase = (CPU_STK *)((CPU_STK)(OS_CPU_ExceptStkBase) & 0xFFFFFFF8);
 8005e38:	4b07      	ldr	r3, [pc, #28]	; (8005e58 <OSInitHook+0x34>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f023 0307 	bic.w	r3, r3, #7
 8005e40:	461a      	mov	r2, r3
 8005e42:	4b05      	ldr	r3, [pc, #20]	; (8005e58 <OSInitHook+0x34>)
 8005e44:	601a      	str	r2, [r3, #0]
}
 8005e46:	bf00      	nop
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bc80      	pop	{r7}
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	0800e9d8 	.word	0x0800e9d8
 8005e54:	0800e9dc 	.word	0x0800e9dc
 8005e58:	20003310 	.word	0x20003310

08005e5c <OSStatTaskHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSStatTaskHook (void)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	af00      	add	r7, sp, #0
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppStatTaskHookPtr != (OS_APP_HOOK_VOID)0) {
 8005e60:	4b04      	ldr	r3, [pc, #16]	; (8005e74 <OSStatTaskHook+0x18>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d002      	beq.n	8005e6e <OSStatTaskHook+0x12>
        (*OS_AppStatTaskHookPtr)();
 8005e68:	4b02      	ldr	r3, [pc, #8]	; (8005e74 <OSStatTaskHook+0x18>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4798      	blx	r3
    }
#endif
}
 8005e6e:	bf00      	nop
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	20002388 	.word	0x20002388

08005e78 <OSTaskCreateHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSTaskCreateHook (OS_TCB  *p_tcb)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskCreateHookPtr != (OS_APP_HOOK_TCB)0) {
 8005e80:	4b05      	ldr	r3, [pc, #20]	; (8005e98 <OSTaskCreateHook+0x20>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d003      	beq.n	8005e90 <OSTaskCreateHook+0x18>
        (*OS_AppTaskCreateHookPtr)(p_tcb);
 8005e88:	4b03      	ldr	r3, [pc, #12]	; (8005e98 <OSTaskCreateHook+0x20>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	4798      	blx	r3
    }
#else
    (void)p_tcb;                                            /* Prevent compiler warning                               */
#endif
}
 8005e90:	bf00      	nop
 8005e92:	3708      	adds	r7, #8
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	200020a4 	.word	0x200020a4

08005e9c <OSTaskReturnHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSTaskReturnHook (OS_TCB  *p_tcb)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskReturnHookPtr != (OS_APP_HOOK_TCB)0) {
 8005ea4:	4b05      	ldr	r3, [pc, #20]	; (8005ebc <OSTaskReturnHook+0x20>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d003      	beq.n	8005eb4 <OSTaskReturnHook+0x18>
        (*OS_AppTaskReturnHookPtr)(p_tcb);
 8005eac:	4b03      	ldr	r3, [pc, #12]	; (8005ebc <OSTaskReturnHook+0x20>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	4798      	blx	r3
    }
#else
    (void)p_tcb;                                            /* Prevent compiler warning                               */
#endif
}
 8005eb4:	bf00      	nop
 8005eb6:	3708      	adds	r7, #8
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	20001f0c 	.word	0x20001f0c

08005ec0 <OSTaskStkInit>:
                         void          *p_arg,
                         CPU_STK       *p_stk_base,
                         CPU_STK       *p_stk_limit,
                         CPU_STK_SIZE   stk_size,
                         OS_OPT         opt)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b087      	sub	sp, #28
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	607a      	str	r2, [r7, #4]
 8005ecc:	603b      	str	r3, [r7, #0]
    CPU_STK    *p_stk;

    
    (void)opt;                                                  /* Prevent compiler warning                               */

    p_stk = &p_stk_base[stk_size];                              /* Load stack pointer                                     */
 8005ece:	6a3b      	ldr	r3, [r7, #32]
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	617b      	str	r3, [r7, #20]
                                                                /* Align the stack to 8-bytes.                            */
    p_stk = (CPU_STK *)((CPU_STK)(p_stk) & 0xFFFFFFF8);
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	f023 0307 	bic.w	r3, r3, #7
 8005ede:	617b      	str	r3, [r7, #20]
                                                                /* Registers stacked as if auto-saved on exception        */
    *--p_stk = (CPU_STK)0x01000000u;                            /* xPSR                                                   */
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	3b04      	subs	r3, #4
 8005ee4:	617b      	str	r3, [r7, #20]
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005eec:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)p_task;                                 /* Entry Point                                            */
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	3b04      	subs	r3, #4
 8005ef2:	617b      	str	r3, [r7, #20]
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)OS_TaskReturn;                          /* R14 (LR)                                               */
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	3b04      	subs	r3, #4
 8005efe:	617b      	str	r3, [r7, #20]
 8005f00:	4a30      	ldr	r2, [pc, #192]	; (8005fc4 <OSTaskStkInit+0x104>)
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x12121212u;                            /* R12                                                    */
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	3b04      	subs	r3, #4
 8005f0a:	617b      	str	r3, [r7, #20]
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 8005f12:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x03030303u;                            /* R3                                                     */
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	3b04      	subs	r3, #4
 8005f18:	617b      	str	r3, [r7, #20]
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 8005f20:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x02020202u;                            /* R2                                                     */
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	3b04      	subs	r3, #4
 8005f26:	617b      	str	r3, [r7, #20]
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 8005f2e:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)p_stk_limit;                            /* R1                                                     */
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	3b04      	subs	r3, #4
 8005f34:	617b      	str	r3, [r7, #20]
 8005f36:	683a      	ldr	r2, [r7, #0]
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)p_arg;                                  /* R0 : argument                                          */
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	3b04      	subs	r3, #4
 8005f40:	617b      	str	r3, [r7, #20]
 8005f42:	68ba      	ldr	r2, [r7, #8]
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	601a      	str	r2, [r3, #0]
                                                                /* Remaining registers saved on process stack             */
    *--p_stk = (CPU_STK)0x11111111u;                            /* R11                                                    */
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	3b04      	subs	r3, #4
 8005f4c:	617b      	str	r3, [r7, #20]
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8005f54:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x10101010u;                            /* R10                                                    */
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	3b04      	subs	r3, #4
 8005f5a:	617b      	str	r3, [r7, #20]
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 8005f62:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x09090909u;                            /* R9                                                     */
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	3b04      	subs	r3, #4
 8005f68:	617b      	str	r3, [r7, #20]
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 8005f70:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x08080808u;                            /* R8                                                     */
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	3b04      	subs	r3, #4
 8005f76:	617b      	str	r3, [r7, #20]
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 8005f7e:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x07070707u;                            /* R7                                                     */
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	3b04      	subs	r3, #4
 8005f84:	617b      	str	r3, [r7, #20]
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 8005f8c:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x06060606u;                            /* R6                                                     */
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	3b04      	subs	r3, #4
 8005f92:	617b      	str	r3, [r7, #20]
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 8005f9a:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x05050505u;                            /* R5                                                     */
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	3b04      	subs	r3, #4
 8005fa0:	617b      	str	r3, [r7, #20]
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 8005fa8:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x04040404u;                            /* R4                                                     */
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	3b04      	subs	r3, #4
 8005fae:	617b      	str	r3, [r7, #20]
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 8005fb6:	601a      	str	r2, [r3, #0]
        *--p_stk = (CPU_STK)0x3F800000u;                        /* S1                                                     */
        *--p_stk = (CPU_STK)0x00000000u;                        /* S0                                                     */
    }
#endif    

    return (p_stk);
 8005fb8:	697b      	ldr	r3, [r7, #20]
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	371c      	adds	r7, #28
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bc80      	pop	{r7}
 8005fc2:	4770      	bx	lr
 8005fc4:	080055d1 	.word	0x080055d1

08005fc8 <OSTaskSwHook>:
*                 to the task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/

void  OSTaskSwHook (void)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
        OS_CPU_FP_Reg_Pop(OSTCBHighRdyPtr->StkPtr);
    }
#endif    

#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskSwHookPtr != (OS_APP_HOOK_VOID)0) {
 8005fce:	4b20      	ldr	r3, [pc, #128]	; (8006050 <OSTaskSwHook+0x88>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d002      	beq.n	8005fdc <OSTaskSwHook+0x14>
        (*OS_AppTaskSwHookPtr)();
 8005fd6:	4b1e      	ldr	r3, [pc, #120]	; (8006050 <OSTaskSwHook+0x88>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4798      	blx	r3
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_TASK_SWITCHED_IN(OSTCBHighRdyPtr);             /* Record the event.                                      */
#endif

#if OS_CFG_TASK_PROFILE_EN > 0u
    ts = OS_TS_GET();
 8005fdc:	f000 f95c 	bl	8006298 <CPU_TS_TmrRd>
 8005fe0:	6078      	str	r0, [r7, #4]
    if (OSTCBCurPtr != OSTCBHighRdyPtr) {
 8005fe2:	4b1c      	ldr	r3, [pc, #112]	; (8006054 <OSTaskSwHook+0x8c>)
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	4b1c      	ldr	r3, [pc, #112]	; (8006058 <OSTaskSwHook+0x90>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d016      	beq.n	800601c <OSTaskSwHook+0x54>
        OSTCBCurPtr->CyclesDelta  = ts - OSTCBCurPtr->CyclesStart;
 8005fee:	4b19      	ldr	r3, [pc, #100]	; (8006054 <OSTaskSwHook+0x8c>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8005ff6:	4b17      	ldr	r3, [pc, #92]	; (8006054 <OSTaskSwHook+0x8c>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	6879      	ldr	r1, [r7, #4]
 8005ffc:	1a8a      	subs	r2, r1, r2
 8005ffe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        OSTCBCurPtr->CyclesTotal += (OS_CYCLES)OSTCBCurPtr->CyclesDelta;
 8006002:	4b14      	ldr	r3, [pc, #80]	; (8006054 <OSTaskSwHook+0x8c>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800600a:	4b12      	ldr	r3, [pc, #72]	; (8006054 <OSTaskSwHook+0x8c>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006012:	4b10      	ldr	r3, [pc, #64]	; (8006054 <OSTaskSwHook+0x8c>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	440a      	add	r2, r1
 8006018:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }

    OSTCBHighRdyPtr->CyclesStart = ts;
 800601c:	4b0e      	ldr	r3, [pc, #56]	; (8006058 <OSTaskSwHook+0x90>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }
#endif

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
                                                            /* Keep track of per-task scheduler lock time             */
    if (OSTCBCurPtr->SchedLockTimeMax < OSSchedLockTimeMaxCur) {
 8006026:	4b0b      	ldr	r3, [pc, #44]	; (8006054 <OSTaskSwHook+0x8c>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800602e:	4b0b      	ldr	r3, [pc, #44]	; (800605c <OSTaskSwHook+0x94>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	429a      	cmp	r2, r3
 8006034:	d205      	bcs.n	8006042 <OSTaskSwHook+0x7a>
        OSTCBCurPtr->SchedLockTimeMax = OSSchedLockTimeMaxCur;
 8006036:	4b07      	ldr	r3, [pc, #28]	; (8006054 <OSTaskSwHook+0x8c>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a08      	ldr	r2, [pc, #32]	; (800605c <OSTaskSwHook+0x94>)
 800603c:	6812      	ldr	r2, [r2, #0]
 800603e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }
    OSSchedLockTimeMaxCur = (CPU_TS)0;                      /* Reset the per-task value                               */
 8006042:	4b06      	ldr	r3, [pc, #24]	; (800605c <OSTaskSwHook+0x94>)
 8006044:	2200      	movs	r2, #0
 8006046:	601a      	str	r2, [r3, #0]
#endif
}
 8006048:	bf00      	nop
 800604a:	3708      	adds	r7, #8
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	20002378 	.word	0x20002378
 8006054:	20002174 	.word	0x20002174
 8006058:	20002180 	.word	0x20002180
 800605c:	20002184 	.word	0x20002184

08006060 <OSTimeTickHook>:
* Note(s)    : 1) This function is assumed to be called from the Tick ISR.
*********************************************************************************************************
*/

void  OSTimeTickHook (void)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	af00      	add	r7, sp, #0
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTimeTickHookPtr != (OS_APP_HOOK_VOID)0) {
 8006064:	4b04      	ldr	r3, [pc, #16]	; (8006078 <OSTimeTickHook+0x18>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d002      	beq.n	8006072 <OSTimeTickHook+0x12>
        (*OS_AppTimeTickHookPtr)();
 800606c:	4b02      	ldr	r3, [pc, #8]	; (8006078 <OSTimeTickHook+0x18>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4798      	blx	r3
    }
#endif
}
 8006072:	bf00      	nop
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	20002194 	.word	0x20002194

0800607c <OS_CPU_SysTickHandler>:
* Note(s)    : 1) This function MUST be placed on entry 15 of the Cortex-M4 vector table.
*********************************************************************************************************
*/

void  OS_CPU_SysTickHandler (void)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
 8006082:	2300      	movs	r3, #0
 8006084:	607b      	str	r3, [r7, #4]


    CPU_CRITICAL_ENTER();
 8006086:	f7fa f92b 	bl	80002e0 <CPU_SR_Save>
 800608a:	6078      	str	r0, [r7, #4]
    OSIntNestingCtr++;                                      /* Tell uC/OS-III that we are starting an ISR             */
 800608c:	4b08      	ldr	r3, [pc, #32]	; (80060b0 <OS_CPU_SysTickHandler+0x34>)
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	3301      	adds	r3, #1
 8006092:	b2da      	uxtb	r2, r3
 8006094:	4b06      	ldr	r3, [pc, #24]	; (80060b0 <OS_CPU_SysTickHandler+0x34>)
 8006096:	701a      	strb	r2, [r3, #0]
    CPU_CRITICAL_EXIT();
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f7fa f925 	bl	80002e8 <CPU_SR_Restore>

    OSTimeTick();                                           /* Call uC/OS-III's OSTimeTick()                          */
 800609e:	f7fd f9bb 	bl	8003418 <OSTimeTick>

    OSIntExit();                                            /* Tell uC/OS-III that we are leaving the ISR             */
 80060a2:	f7fd fe9b 	bl	8003ddc <OSIntExit>
}
 80060a6:	bf00      	nop
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	2000219e 	.word	0x2000219e

080060b4 <OS_CPU_SysTickInit>:
* Note(s)    : 1) This function MUST be called after OSStart() & after processor initialization.
*********************************************************************************************************
*/

void  OS_CPU_SysTickInit (CPU_INT32U  cnts)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
    CPU_INT32U  prio;


    CPU_REG_NVIC_ST_RELOAD = cnts - 1u;
 80060bc:	4a0f      	ldr	r2, [pc, #60]	; (80060fc <OS_CPU_SysTickInit+0x48>)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	3b01      	subs	r3, #1
 80060c2:	6013      	str	r3, [r2, #0]

                                                            /* Set SysTick handler prio.                              */
    prio                   = CPU_REG_NVIC_SHPRI3;
 80060c4:	4b0e      	ldr	r3, [pc, #56]	; (8006100 <OS_CPU_SysTickInit+0x4c>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	60fb      	str	r3, [r7, #12]
    prio                  &= DEF_BIT_FIELD(24, 0);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80060d0:	60fb      	str	r3, [r7, #12]
    prio                  |= DEF_BIT_MASK(OS_CPU_CFG_SYSTICK_PRIO, 24);

    CPU_REG_NVIC_SHPRI3    = prio;
 80060d2:	4a0b      	ldr	r2, [pc, #44]	; (8006100 <OS_CPU_SysTickInit+0x4c>)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6013      	str	r3, [r2, #0]

                                                            /* Enable timer.                                          */
    CPU_REG_NVIC_ST_CTRL  |= CPU_REG_NVIC_ST_CTRL_CLKSOURCE |
 80060d8:	4b0a      	ldr	r3, [pc, #40]	; (8006104 <OS_CPU_SysTickInit+0x50>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a09      	ldr	r2, [pc, #36]	; (8006104 <OS_CPU_SysTickInit+0x50>)
 80060de:	f043 0305 	orr.w	r3, r3, #5
 80060e2:	6013      	str	r3, [r2, #0]
                             CPU_REG_NVIC_ST_CTRL_ENABLE;
                                                            /* Enable timer interrupt.                                */
    CPU_REG_NVIC_ST_CTRL  |= CPU_REG_NVIC_ST_CTRL_TICKINT;
 80060e4:	4b07      	ldr	r3, [pc, #28]	; (8006104 <OS_CPU_SysTickInit+0x50>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a06      	ldr	r2, [pc, #24]	; (8006104 <OS_CPU_SysTickInit+0x50>)
 80060ea:	f043 0302 	orr.w	r3, r3, #2
 80060ee:	6013      	str	r3, [r2, #0]
}
 80060f0:	bf00      	nop
 80060f2:	3714      	adds	r7, #20
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bc80      	pop	{r7}
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	e000e014 	.word	0xe000e014
 8006100:	e000ed20 	.word	0xe000ed20
 8006104:	e000e010 	.word	0xe000e010

08006108 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	460b      	mov	r3, r1
 8006112:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8006114:	78fb      	ldrb	r3, [r7, #3]
 8006116:	2201      	movs	r2, #1
 8006118:	409a      	lsls	r2, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	605a      	str	r2, [r3, #4]
}
 800611e:	bf00      	nop
 8006120:	370c      	adds	r7, #12
 8006122:	46bd      	mov	sp, r7
 8006124:	bc80      	pop	{r7}
 8006126:	4770      	bx	lr

08006128 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	460b      	mov	r3, r1
 8006132:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8006134:	78fb      	ldrb	r3, [r7, #3]
 8006136:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800613a:	409a      	lsls	r2, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	605a      	str	r2, [r3, #4]
}
 8006140:	bf00      	nop
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	bc80      	pop	{r7}
 8006148:	4770      	bx	lr

0800614a <_mcp23s08_reset_ss>:
 *  @param XMC_GPIO_PORT_t *const port, const uint8_t pin
 *  @return on success this function returns MCP23S08_OK (0) otherwise it check
 *  the given port on validity
 */
uint8_t _mcp23s08_reset_ss(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b082      	sub	sp, #8
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
 8006152:	460b      	mov	r3, r1
 8006154:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));

  XMC_GPIO_SetOutputLow(port,pin);
 8006156:	78fb      	ldrb	r3, [r7, #3]
 8006158:	4619      	mov	r1, r3
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f7ff ffe4 	bl	8006128 <XMC_GPIO_SetOutputLow>

  return MCP23S08_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3708      	adds	r7, #8
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <_mcp23s08_set_ss>:
 *  @param XMC_GPIO_PORT_t *const port, const uint8_t pin
 *  @return on success this function returns MCP23S08_OK (0) otherwise it check
 *  the given port on validity
 */
uint8_t _mcp23s08_set_ss(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800616a:	b580      	push	{r7, lr}
 800616c:	b082      	sub	sp, #8
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
 8006172:	460b      	mov	r3, r1
 8006174:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));

  XMC_GPIO_SetOutputHigh(port,pin);
 8006176:	78fb      	ldrb	r3, [r7, #3]
 8006178:	4619      	mov	r1, r3
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f7ff ffc4 	bl	8006108 <XMC_GPIO_SetOutputHigh>

  return MCP23S08_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3708      	adds	r7, #8
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
	...

0800618c <_mcp23s08_reset>:
 *  @brief This function toggles the reset for the MCP23S08
 *  @param XMC_GPIO_PORT_t *const port, const uint8_t pin
 *  @return on success this function returns MCP23S08_OK (0)
 */
uint8_t _mcp23s08_reset(void)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	af00      	add	r7, sp, #0
  XMC_GPIO_SetOutputLow(MCP23S08_RESET);
 8006190:	210c      	movs	r1, #12
 8006192:	4805      	ldr	r0, [pc, #20]	; (80061a8 <_mcp23s08_reset+0x1c>)
 8006194:	f7ff ffc8 	bl	8006128 <XMC_GPIO_SetOutputLow>
  XMC_GPIO_SetOutputHigh(MCP23S08_RESET);
 8006198:	210c      	movs	r1, #12
 800619a:	4803      	ldr	r0, [pc, #12]	; (80061a8 <_mcp23s08_reset+0x1c>)
 800619c:	f7ff ffb4 	bl	8006108 <XMC_GPIO_SetOutputHigh>

  return MCP23S08_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	48028000 	.word	0x48028000

080061ac <_mcp23s08_reg_xfer>:
 *		   data ...... content of the register
 *		   rd_wr ..... read/write
 *  @return on success this function returns MCP23S08_OK (0)
 */
uint8_t _mcp23s08_reg_xfer(XMC_USIC_CH_t *const channel, uint8_t reg_name, uint8_t data, uint8_t rd_wr)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	4608      	mov	r0, r1
 80061b6:	4611      	mov	r1, r2
 80061b8:	461a      	mov	r2, r3
 80061ba:	4603      	mov	r3, r0
 80061bc:	70fb      	strb	r3, [r7, #3]
 80061be:	460b      	mov	r3, r1
 80061c0:	70bb      	strb	r3, [r7, #2]
 80061c2:	4613      	mov	r3, r2
 80061c4:	707b      	strb	r3, [r7, #1]
  uint8_t recv = 0, mcp23s08_addr_rd = 0;
 80061c6:	2300      	movs	r3, #0
 80061c8:	73fb      	strb	r3, [r7, #15]
 80061ca:	2300      	movs	r3, #0
 80061cc:	73bb      	strb	r3, [r7, #14]

  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if(rd_wr)
 80061ce:	787b      	ldrb	r3, [r7, #1]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d020      	beq.n	8006216 <_mcp23s08_reg_xfer+0x6a>
  {
	mcp23s08_addr_rd = mcp23s08_addr|MCP23S08_RD;
 80061d4:	4b1f      	ldr	r3, [pc, #124]	; (8006254 <_mcp23s08_reg_xfer+0xa8>)
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	f043 0301 	orr.w	r3, r3, #1
 80061dc:	73bb      	strb	r3, [r7, #14]

	_spi_transmit(channel,mcp23s08_addr_rd);
 80061de:	7bbb      	ldrb	r3, [r7, #14]
 80061e0:	4619      	mov	r1, r3
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 fc80 	bl	8006ae8 <_spi_transmit>
	_spi_receive(channel);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 fc9d 	bl	8006b28 <_spi_receive>

	_spi_transmit(channel,reg_name);
 80061ee:	78fb      	ldrb	r3, [r7, #3]
 80061f0:	4619      	mov	r1, r3
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 fc78 	bl	8006ae8 <_spi_transmit>
	_spi_receive(channel);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fc95 	bl	8006b28 <_spi_receive>

	_spi_transmit(channel,mcp23s08_nop);
 80061fe:	4b16      	ldr	r3, [pc, #88]	; (8006258 <_mcp23s08_reg_xfer+0xac>)
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	4619      	mov	r1, r3
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 fc6f 	bl	8006ae8 <_spi_transmit>
	recv = _spi_receive(channel);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 fc8c 	bl	8006b28 <_spi_receive>
 8006210:	4603      	mov	r3, r0
 8006212:	73fb      	strb	r3, [r7, #15]
 8006214:	e018      	b.n	8006248 <_mcp23s08_reg_xfer+0x9c>

  }
  else
  {
	_spi_transmit(channel,mcp23s08_addr);
 8006216:	4b0f      	ldr	r3, [pc, #60]	; (8006254 <_mcp23s08_reg_xfer+0xa8>)
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	4619      	mov	r1, r3
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 fc63 	bl	8006ae8 <_spi_transmit>
	_spi_receive(channel);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 fc80 	bl	8006b28 <_spi_receive>

	_spi_transmit(channel,reg_name);
 8006228:	78fb      	ldrb	r3, [r7, #3]
 800622a:	4619      	mov	r1, r3
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 fc5b 	bl	8006ae8 <_spi_transmit>
	_spi_receive(channel);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fc78 	bl	8006b28 <_spi_receive>

	_spi_transmit(channel,data);
 8006238:	78bb      	ldrb	r3, [r7, #2]
 800623a:	4619      	mov	r1, r3
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 fc53 	bl	8006ae8 <_spi_transmit>
	_spi_receive(channel);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 fc70 	bl	8006b28 <_spi_receive>
  }

  return recv;
 8006248:	7bfb      	ldrb	r3, [r7, #15]
}
 800624a:	4618      	mov	r0, r3
 800624c:	3710      	adds	r7, #16
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	20000000 	.word	0x20000000
 8006258:	20001824 	.word	0x20001824

0800625c <CPU_TS_TmrInit>:
 *
 *              See also CPU_TS_TmrRd()
 */
#if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
void  CPU_TS_TmrInit (void)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
	CPU_INT32U  fclk_freq;

	fclk_freq = BSP_SysClkFreqGet();
 8006262:	f000 f94f 	bl	8006504 <BSP_SysClkFreqGet>
 8006266:	6078      	str	r0, [r7, #4]

	CPU_BSP_REG_DEMCR  |= DEF_BIT_24;
 8006268:	4b09      	ldr	r3, [pc, #36]	; (8006290 <CPU_TS_TmrInit+0x34>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a08      	ldr	r2, [pc, #32]	; (8006290 <CPU_TS_TmrInit+0x34>)
 800626e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006272:	6013      	str	r3, [r2, #0]
	CPU_BSP_REG_DWT_CR |= DEF_BIT_00;
 8006274:	4b07      	ldr	r3, [pc, #28]	; (8006294 <CPU_TS_TmrInit+0x38>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a06      	ldr	r2, [pc, #24]	; (8006294 <CPU_TS_TmrInit+0x38>)
 800627a:	f043 0301 	orr.w	r3, r3, #1
 800627e:	6013      	str	r3, [r2, #0]

	CPU_TS_TmrFreqSet ( (CPU_TS_TMR_FREQ) fclk_freq);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f7fb fbd9 	bl	8001a38 <CPU_TS_TmrFreqSet>
}
 8006286:	bf00      	nop
 8006288:	3708      	adds	r7, #8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	e000edfc 	.word	0xe000edfc
 8006294:	e0001000 	.word	0xe0001000

08006298 <CPU_TS_TmrRd>:
 *             resolution inadequate to measure desired times.
 *
 */
#if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
CPU_TS_TMR  CPU_TS_TmrRd (void)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
	CPU_TS_TMR  ts_tmr_cnts;


	ts_tmr_cnts = (CPU_TS_TMR) CPU_BSP_REG_DWT_CYCCNT;
 800629e:	4b04      	ldr	r3, [pc, #16]	; (80062b0 <CPU_TS_TmrRd+0x18>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	607b      	str	r3, [r7, #4]

	return (ts_tmr_cnts);
 80062a4:	687b      	ldr	r3, [r7, #4]
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	370c      	adds	r7, #12
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bc80      	pop	{r7}
 80062ae:	4770      	bx	lr
 80062b0:	e0001004 	.word	0xe0001004

080062b4 <BSP_LowLevelInit>:
 * @note Problems with Branch prediction if accessing the flash via the cached
 *       memory interface. In this silicon(step A11), branch prediction has to
 *       be switched off by setting PCON.PBS = 1.
 */
void  BSP_LowLevelInit (void)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
	CPU_INT32U  reg_val;

	/* Disable Watchdog timer */
	DEF_BIT_CLR (BSP_REG_WDT_CTR, BSP_BIT_WDT_CTR_ENB);
 80062ba:	4b0d      	ldr	r3, [pc, #52]	; (80062f0 <BSP_LowLevelInit+0x3c>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a0c      	ldr	r2, [pc, #48]	; (80062f0 <BSP_LowLevelInit+0x3c>)
 80062c0:	f023 0301 	bic.w	r3, r3, #1
 80062c4:	6013      	str	r3, [r2, #0]
	DEF_BIT_SET (BSP_REG_PREF_PCON, BSP_BIT_PREF_PCON_PBS);
 80062c6:	4b0b      	ldr	r3, [pc, #44]	; (80062f4 <BSP_LowLevelInit+0x40>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a0a      	ldr	r2, [pc, #40]	; (80062f4 <BSP_LowLevelInit+0x40>)
 80062cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062d0:	6013      	str	r3, [r2, #0]

	reg_val = BSP_REG_FLASH0_FCON;
 80062d2:	4b09      	ldr	r3, [pc, #36]	; (80062f8 <BSP_LowLevelInit+0x44>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	607b      	str	r3, [r7, #4]
	reg_val = 0x3;
 80062d8:	2303      	movs	r3, #3
 80062da:	607b      	str	r3, [r7, #4]
	BSP_REG_FLASH0_FCON = reg_val;
 80062dc:	4a06      	ldr	r2, [pc, #24]	; (80062f8 <BSP_LowLevelInit+0x44>)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6013      	str	r3, [r2, #0]

	BSP_SysInit();
 80062e2:	f000 f80b 	bl	80062fc <BSP_SysInit>
}
 80062e6:	bf00      	nop
 80062e8:	3708      	adds	r7, #8
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	50008004 	.word	0x50008004
 80062f4:	58004000 	.word	0x58004000
 80062f8:	58002014 	.word	0x58002014

080062fc <BSP_SysInit>:
 *       result in multiple changes of the K2-Divider to avoid big frequency
 *       changes. Between the update of two K2-divider values 6 cycles of fpll
 *       should be waited.
 */
void  BSP_SysInit (void)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
	CPU_INT32U  reg_to;
	CPU_INT32U  reg;

	/* Set VCO and PLL power saving mode to normal behavior */
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON0, (BSP_BIT_PLLCON0_VCOPWD |
 8006302:	4b74      	ldr	r3, [pc, #464]	; (80064d4 <BSP_SysInit+0x1d8>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a73      	ldr	r2, [pc, #460]	; (80064d4 <BSP_SysInit+0x1d8>)
 8006308:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800630c:	f023 0302 	bic.w	r3, r3, #2
 8006310:	6013      	str	r3, [r2, #0]
					   BSP_BIT_PLLCON0_PLLPWD));

	reg = BSP_REG_SCU_OSCHPCTRL;
 8006312:	4b71      	ldr	r3, [pc, #452]	; (80064d8 <BSP_SysInit+0x1dc>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	603b      	str	r3, [r7, #0]
	/* Set Ext. Crystal mod; osc power saving isn't entered */
	DEF_BIT_CLR (reg, (BSP_BIT_OSCHPCTRL_MODE_MASK  |
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800631e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006322:	603b      	str	r3, [r7, #0]
			   BSP_BIT_OSCHPCTRL_OSCVAL_MASK));
	/* Cfg. foscref = fosc / (OSCVAL + 1) */
	DEF_BIT_SET (reg, BSP_BIT_OSCHPCTRL_OSCVAL);
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800632a:	603b      	str	r3, [r7, #0]
	BSP_REG_SCU_OSCHPCTRL = reg;
 800632c:	4a6a      	ldr	r2, [pc, #424]	; (80064d8 <BSP_SysInit+0x1dc>)
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	6013      	str	r3, [r2, #0]

	/* Set ext. osc as PLL input */
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON2, BSP_BIT_PLLCON2_PINSEL);
 8006332:	4b6a      	ldr	r3, [pc, #424]	; (80064dc <BSP_SysInit+0x1e0>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a69      	ldr	r2, [pc, #420]	; (80064dc <BSP_SysInit+0x1e0>)
 8006338:	f023 0301 	bic.w	r3, r3, #1
 800633c:	6013      	str	r3, [r2, #0]
	/* Restart osc watchdog of the PLL */
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_OSCRES);
 800633e:	4b65      	ldr	r3, [pc, #404]	; (80064d4 <BSP_SysInit+0x1d8>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a64      	ldr	r2, [pc, #400]	; (80064d4 <BSP_SysInit+0x1d8>)
 8006344:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006348:	6013      	str	r3, [r2, #0]
	/* Wait for stable OSC frequency */
	reg_to = BSP_REG_VAL_TO;
 800634a:	4b65      	ldr	r3, [pc, #404]	; (80064e0 <BSP_SysInit+0x1e4>)
 800634c:	607b      	str	r3, [r7, #4]
	while ( (DEF_BIT_IS_CLR (BSP_REG_SCU_PLLSTAT, (BSP_BIT_PLLSTAT_PLLLV |
 800634e:	e002      	b.n	8006356 <BSP_SysInit+0x5a>
						       BSP_BIT_PLLSTAT_PLLHV |
						       BSP_BIT_PLLSTAT_PLLSP))) &
		(reg_to > 0u)) {
		reg_to--;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	3b01      	subs	r3, #1
 8006354:	607b      	str	r3, [r7, #4]
	while ( (DEF_BIT_IS_CLR (BSP_REG_SCU_PLLSTAT, (BSP_BIT_PLLSTAT_PLLLV |
 8006356:	4b63      	ldr	r3, [pc, #396]	; (80064e4 <BSP_SysInit+0x1e8>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f403 7360 	and.w	r3, r3, #896	; 0x380
 800635e:	2b00      	cmp	r3, #0
 8006360:	d101      	bne.n	8006366 <BSP_SysInit+0x6a>
 8006362:	2301      	movs	r3, #1
 8006364:	e000      	b.n	8006368 <BSP_SysInit+0x6c>
 8006366:	2300      	movs	r3, #0
		(reg_to > 0u)) {
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	2a00      	cmp	r2, #0
 800636c:	bf14      	ite	ne
 800636e:	2201      	movne	r2, #1
 8006370:	2200      	moveq	r2, #0
 8006372:	b2d2      	uxtb	r2, r2
						       BSP_BIT_PLLSTAT_PLLSP))) &
 8006374:	4013      	ands	r3, r2
	while ( (DEF_BIT_IS_CLR (BSP_REG_SCU_PLLSTAT, (BSP_BIT_PLLSTAT_PLLLV |
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1ea      	bne.n	8006350 <BSP_SysInit+0x54>
	}
	if (reg_to == 0u) {
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d100      	bne.n	8006382 <BSP_SysInit+0x86>
		while (DEF_TRUE);
 8006380:	e7fe      	b.n	8006380 <BSP_SysInit+0x84>
	}
	/* ---------------- PLL CONFIGURATION ----------------- */
	/* Select OSC_FI as system clk */
	BSP_REG_SCU_SYSCLKCR = BSP_BIT_SYSCLKCR_OSC_FI;
 8006382:	4b59      	ldr	r3, [pc, #356]	; (80064e8 <BSP_SysInit+0x1ec>)
 8006384:	2200      	movs	r2, #0
 8006386:	601a      	str	r2, [r3, #0]
	/* PLL is bypassed */
	DEF_BIT_SET (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_VCOBYP);
 8006388:	4b52      	ldr	r3, [pc, #328]	; (80064d4 <BSP_SysInit+0x1d8>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a51      	ldr	r2, [pc, #324]	; (80064d4 <BSP_SysInit+0x1d8>)
 800638e:	f043 0301 	orr.w	r3, r3, #1
 8006392:	6013      	str	r3, [r2, #0]
	/* Disconnect OSC_HP from PLL */
	DEF_BIT_SET (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_FINDIS);
 8006394:	4b4f      	ldr	r3, [pc, #316]	; (80064d4 <BSP_SysInit+0x1d8>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a4e      	ldr	r2, [pc, #312]	; (80064d4 <BSP_SysInit+0x1d8>)
 800639a:	f043 0310 	orr.w	r3, r3, #16
 800639e:	6013      	str	r3, [r2, #0]

	/* fpll = (NDIV  * fosc) / (PDIV * K2DIV))              */
	/*      = (40 * 12MHz) / (1 * 20)) = 24MHz              */
	BSP_REG_SCU_PLLCON1 = ( ( (BSP_PLLCON1_K1DIV       - 1u) <<  0u)
 80063a0:	4b52      	ldr	r3, [pc, #328]	; (80064ec <BSP_SysInit+0x1f0>)
 80063a2:	4a53      	ldr	r2, [pc, #332]	; (80064f0 <BSP_SysInit+0x1f4>)
 80063a4:	601a      	str	r2, [r3, #0]
				| ( (BSP_PLLCON1_NDIV        - 1u) <<  8u)
				| ( (BSP_PLLCON1_K2DIV_STEP1 - 1u) << 16u)
				| ( (BSP_PLLCON1_PDIV        - 1u) << 24u));

	/* Keeps OSC clk conn. to VCO in case of Loss-of-lock */
	BSP_REG_SCU_PLLCON0 |= BSP_BIT_PLLCON0_OSCDISCDIS;
 80063a6:	4b4b      	ldr	r3, [pc, #300]	; (80064d4 <BSP_SysInit+0x1d8>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a4a      	ldr	r2, [pc, #296]	; (80064d4 <BSP_SysInit+0x1d8>)
 80063ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063b0:	6013      	str	r3, [r2, #0]
	/* Connect OSC_HP to PLL */
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_FINDIS);
 80063b2:	4b48      	ldr	r3, [pc, #288]	; (80064d4 <BSP_SysInit+0x1d8>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a47      	ldr	r2, [pc, #284]	; (80064d4 <BSP_SysInit+0x1d8>)
 80063b8:	f023 0310 	bic.w	r3, r3, #16
 80063bc:	6013      	str	r3, [r2, #0]
	/* Restart PLL lock detection */
	DEF_BIT_SET (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_RESLD);
 80063be:	4b45      	ldr	r3, [pc, #276]	; (80064d4 <BSP_SysInit+0x1d8>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a44      	ldr	r2, [pc, #272]	; (80064d4 <BSP_SysInit+0x1d8>)
 80063c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063c8:	6013      	str	r3, [r2, #0]

	/* Wait for PLL Lock */
	reg_to = BSP_REG_VAL_TO;
 80063ca:	4b45      	ldr	r3, [pc, #276]	; (80064e0 <BSP_SysInit+0x1e4>)
 80063cc:	607b      	str	r3, [r7, #4]
	while ( (DEF_BIT_IS_CLR (BSP_REG_SCU_PLLSTAT, BSP_BIT_PLLSTAT_VCOLOCK)) &
 80063ce:	e002      	b.n	80063d6 <BSP_SysInit+0xda>
		(reg_to > 0u)) {
		reg_to--;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	3b01      	subs	r3, #1
 80063d4:	607b      	str	r3, [r7, #4]
	while ( (DEF_BIT_IS_CLR (BSP_REG_SCU_PLLSTAT, BSP_BIT_PLLSTAT_VCOLOCK)) &
 80063d6:	4b43      	ldr	r3, [pc, #268]	; (80064e4 <BSP_SysInit+0x1e8>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 0304 	and.w	r3, r3, #4
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d101      	bne.n	80063e6 <BSP_SysInit+0xea>
 80063e2:	2301      	movs	r3, #1
 80063e4:	e000      	b.n	80063e8 <BSP_SysInit+0xec>
 80063e6:	2300      	movs	r3, #0
		(reg_to > 0u)) {
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	2a00      	cmp	r2, #0
 80063ec:	bf14      	ite	ne
 80063ee:	2201      	movne	r2, #1
 80063f0:	2200      	moveq	r2, #0
 80063f2:	b2d2      	uxtb	r2, r2
	while ( (DEF_BIT_IS_CLR (BSP_REG_SCU_PLLSTAT, BSP_BIT_PLLSTAT_VCOLOCK)) &
 80063f4:	4013      	ands	r3, r2
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1ea      	bne.n	80063d0 <BSP_SysInit+0xd4>
	}
	if (reg_to == 0u) {
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d100      	bne.n	8006402 <BSP_SysInit+0x106>
		while (DEF_TRUE);
 8006400:	e7fe      	b.n	8006400 <BSP_SysInit+0x104>
	}

	/* Normal opertaion, PLL is not bypassed */
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_VCOBYP);
 8006402:	4b34      	ldr	r3, [pc, #208]	; (80064d4 <BSP_SysInit+0x1d8>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a33      	ldr	r2, [pc, #204]	; (80064d4 <BSP_SysInit+0x1d8>)
 8006408:	f023 0301 	bic.w	r3, r3, #1
 800640c:	6013      	str	r3, [r2, #0]
	/* Enable MMC clock */
	DEF_BIT_SET (BSP_REG_SCU_CLKSET, BSP_BIT_CLKSET_MMCEN);
 800640e:	4b39      	ldr	r3, [pc, #228]	; (80064f4 <BSP_SysInit+0x1f8>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a38      	ldr	r2, [pc, #224]	; (80064f4 <BSP_SysInit+0x1f8>)
 8006414:	f043 0302 	orr.w	r3, r3, #2
 8006418:	6013      	str	r3, [r2, #0]
	/* fcpu = fsys */
	DEF_BIT_CLR (BSP_REG_SCU_CPUCLKCR, BSP_BIT_CPUCLKCR_CPUDIV);
 800641a:	4b37      	ldr	r3, [pc, #220]	; (80064f8 <BSP_SysInit+0x1fc>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a36      	ldr	r2, [pc, #216]	; (80064f8 <BSP_SysInit+0x1fc>)
 8006420:	f023 0301 	bic.w	r3, r3, #1
 8006424:	6013      	str	r3, [r2, #0]
	/* fpb  = fsys */
	DEF_BIT_CLR (BSP_REG_SCU_PBCLKCR,  BSP_BIT_PBCLKCR_PBDIV);
 8006426:	4b35      	ldr	r3, [pc, #212]	; (80064fc <BSP_SysInit+0x200>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a34      	ldr	r2, [pc, #208]	; (80064fc <BSP_SysInit+0x200>)
 800642c:	f023 0301 	bic.w	r3, r3, #1
 8006430:	6013      	str	r3, [r2, #0]
	/* fccu = fsys */
	DEF_BIT_CLR (BSP_REG_SCU_CCUCLKCR, BSP_BIT_CCUCLKCR_CCUDIV);
 8006432:	4b33      	ldr	r3, [pc, #204]	; (8006500 <BSP_SysInit+0x204>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a32      	ldr	r2, [pc, #200]	; (8006500 <BSP_SysInit+0x204>)
 8006438:	f023 0301 	bic.w	r3, r3, #1
 800643c:	6013      	str	r3, [r2, #0]
	/* Select PLL clock as system clk */
	BSP_REG_SCU_SYSCLKCR |= BSP_BIT_SYSCLKCR_PLL_CLK;
 800643e:	4b2a      	ldr	r3, [pc, #168]	; (80064e8 <BSP_SysInit+0x1ec>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a29      	ldr	r2, [pc, #164]	; (80064e8 <BSP_SysInit+0x1ec>)
 8006444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006448:	6013      	str	r3, [r2, #0]
	/* Wait between K2 divider updates */
	reg_to = BSP_REG_VAL_TO;
 800644a:	4b25      	ldr	r3, [pc, #148]	; (80064e0 <BSP_SysInit+0x1e4>)
 800644c:	607b      	str	r3, [r7, #4]
	while (reg_to > 0u) {
 800644e:	e002      	b.n	8006456 <BSP_SysInit+0x15a>
		reg_to--;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	3b01      	subs	r3, #1
 8006454:	607b      	str	r3, [r7, #4]
	while (reg_to > 0u) {
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1f9      	bne.n	8006450 <BSP_SysInit+0x154>
	}
	/* fpll = (NDIV  * fosc) / (PDIV * K2DIV)) */
	/*      = (40 * 12MHz) / (1 * 8)) = 60MHz  */
	reg  = (BSP_REG_SCU_PLLCON1 & ~BSP_PLLCON1_K2DIV_MASK);
 800645c:	4b23      	ldr	r3, [pc, #140]	; (80064ec <BSP_SysInit+0x1f0>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8006464:	603b      	str	r3, [r7, #0]
	reg |= ( (BSP_PLLCON1_K2DIV_STEP2 - 1u) << 16);
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800646c:	603b      	str	r3, [r7, #0]
	BSP_REG_SCU_PLLCON1 = reg;
 800646e:	4a1f      	ldr	r2, [pc, #124]	; (80064ec <BSP_SysInit+0x1f0>)
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	6013      	str	r3, [r2, #0]
	/* Wait between K2 divider updates */
	reg_to = BSP_REG_VAL_TO;
 8006474:	4b1a      	ldr	r3, [pc, #104]	; (80064e0 <BSP_SysInit+0x1e4>)
 8006476:	607b      	str	r3, [r7, #4]
	while (reg_to > 0u) {
 8006478:	e002      	b.n	8006480 <BSP_SysInit+0x184>
		reg_to--;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	3b01      	subs	r3, #1
 800647e:	607b      	str	r3, [r7, #4]
	while (reg_to > 0u) {
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d1f9      	bne.n	800647a <BSP_SysInit+0x17e>
	}

	/* fpll = (NDIV  * fosc) / (PDIV * K2DIV)) */
	/*      = (40 * 12MHz) / (1 * 5)) = 96MHz  */
	reg                 = (BSP_REG_SCU_PLLCON1 & ~BSP_PLLCON1_K2DIV_MASK);
 8006486:	4b19      	ldr	r3, [pc, #100]	; (80064ec <BSP_SysInit+0x1f0>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800648e:	603b      	str	r3, [r7, #0]
	reg                |= ( (BSP_PLLCON1_K2DIV_STEP3 - 1u) << 16);
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006496:	603b      	str	r3, [r7, #0]
	BSP_REG_SCU_PLLCON1 = reg;
 8006498:	4a14      	ldr	r2, [pc, #80]	; (80064ec <BSP_SysInit+0x1f0>)
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	6013      	str	r3, [r2, #0]
	/* Wait between K2 divider updates */
	reg_to = BSP_REG_VAL_TO;
 800649e:	4b10      	ldr	r3, [pc, #64]	; (80064e0 <BSP_SysInit+0x1e4>)
 80064a0:	607b      	str	r3, [r7, #4]
	while (reg_to > 0u) {
 80064a2:	e002      	b.n	80064aa <BSP_SysInit+0x1ae>
		reg_to--;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	3b01      	subs	r3, #1
 80064a8:	607b      	str	r3, [r7, #4]
	while (reg_to > 0u) {
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d1f9      	bne.n	80064a4 <BSP_SysInit+0x1a8>
	}
	/* fpll = (NDIV  * fosc) / (PDIV * K2DIV)) */
	/*      = (40 * 12MHz) / (1 * 4)) = 120MHz */
	reg                 = (BSP_REG_SCU_PLLCON1 & ~BSP_PLLCON1_K2DIV_MASK);
 80064b0:	4b0e      	ldr	r3, [pc, #56]	; (80064ec <BSP_SysInit+0x1f0>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80064b8:	603b      	str	r3, [r7, #0]
	reg                |= ( (BSP_PLLCON1_K2DIV_FINAL - 1u) << 16);
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80064c0:	603b      	str	r3, [r7, #0]
	BSP_REG_SCU_PLLCON1 = reg;
 80064c2:	4a0a      	ldr	r2, [pc, #40]	; (80064ec <BSP_SysInit+0x1f0>)
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	6013      	str	r3, [r2, #0]
}
 80064c8:	bf00      	nop
 80064ca:	370c      	adds	r7, #12
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bc80      	pop	{r7}
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	50004714 	.word	0x50004714
 80064d8:	50004704 	.word	0x50004704
 80064dc:	5000471c 	.word	0x5000471c
 80064e0:	0007ffff 	.word	0x0007ffff
 80064e4:	50004710 	.word	0x50004710
 80064e8:	5000460c 	.word	0x5000460c
 80064ec:	50004718 	.word	0x50004718
 80064f0:	00132700 	.word	0x00132700
 80064f4:	50004604 	.word	0x50004604
 80064f8:	50004610 	.word	0x50004610
 80064fc:	50004614 	.word	0x50004614
 8006500:	50004620 	.word	0x50004620

08006504 <BSP_SysClkFreqGet>:
 *
 * @brief This function is used to retrieve system or CPU clock frequency
 *
 */
CPU_INT32U BSP_SysClkFreqGet (void)
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
	CPU_INT08U  pll_p;
	CPU_INT08U  pll_k2;
	CPU_INT32U  cpu_freq;


	sysclk_src = (BSP_REG_SCU_SYSCLKCR & DEF_BIT_FIELD (2u, 16u)) >> 16u;
 800650a:	4b26      	ldr	r3, [pc, #152]	; (80065a4 <BSP_SysClkFreqGet+0xa0>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	0c1b      	lsrs	r3, r3, #16
 8006510:	b2db      	uxtb	r3, r3
 8006512:	f003 0303 	and.w	r3, r3, #3
 8006516:	72fb      	strb	r3, [r7, #11]
	sysclk_div = (BSP_REG_SCU_SYSCLKCR & DEF_BIT_FIELD (8u, 0u)) + 1u;
 8006518:	4b22      	ldr	r3, [pc, #136]	; (80065a4 <BSP_SysClkFreqGet+0xa0>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	b29b      	uxth	r3, r3
 800651e:	b2db      	uxtb	r3, r3
 8006520:	b29b      	uxth	r3, r3
 8006522:	3301      	adds	r3, #1
 8006524:	813b      	strh	r3, [r7, #8]

	switch (sysclk_src) {
 8006526:	7afb      	ldrb	r3, [r7, #11]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d002      	beq.n	8006532 <BSP_SysClkFreqGet+0x2e>
 800652c:	2b01      	cmp	r3, #1
 800652e:	d003      	beq.n	8006538 <BSP_SysClkFreqGet+0x34>
 8006530:	e022      	b.n	8006578 <BSP_SysClkFreqGet+0x74>
	case 0:
		/* Fast Internal Oscillator selected as system clk */
		cpu_freq = BSP_CFG_SYS_INT_OSC_FI_FREQ_HZ;
 8006532:	4b1d      	ldr	r3, [pc, #116]	; (80065a8 <BSP_SysClkFreqGet+0xa4>)
 8006534:	60fb      	str	r3, [r7, #12]
		break;
 8006536:	e021      	b.n	800657c <BSP_SysClkFreqGet+0x78>

	case 1:
		/* PLL clock is selected as system clk */
		cpu_freq = BSP_CFG_SYS_XTAL_OSC_FREQ_HZ;
 8006538:	4b1c      	ldr	r3, [pc, #112]	; (80065ac <BSP_SysClkFreqGet+0xa8>)
 800653a:	60fb      	str	r3, [r7, #12]
		pll_n    = (BSP_REG_SCU_PLLCON1 >>  8u) + 1u;
 800653c:	4b1c      	ldr	r3, [pc, #112]	; (80065b0 <BSP_SysClkFreqGet+0xac>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	0a1b      	lsrs	r3, r3, #8
 8006542:	b2db      	uxtb	r3, r3
 8006544:	3301      	adds	r3, #1
 8006546:	71fb      	strb	r3, [r7, #7]
		pll_p    = (BSP_REG_SCU_PLLCON1 >> 24u) + 1u;
 8006548:	4b19      	ldr	r3, [pc, #100]	; (80065b0 <BSP_SysClkFreqGet+0xac>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	0e1b      	lsrs	r3, r3, #24
 800654e:	b2db      	uxtb	r3, r3
 8006550:	3301      	adds	r3, #1
 8006552:	71bb      	strb	r3, [r7, #6]
		pll_k2   = (BSP_REG_SCU_PLLCON1 >> 16u) + 1u;
 8006554:	4b16      	ldr	r3, [pc, #88]	; (80065b0 <BSP_SysClkFreqGet+0xac>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	0c1b      	lsrs	r3, r3, #16
 800655a:	b2db      	uxtb	r3, r3
 800655c:	3301      	adds	r3, #1
 800655e:	717b      	strb	r3, [r7, #5]
		cpu_freq = ( (cpu_freq / pll_p) * pll_n) / pll_k2;
 8006560:	79bb      	ldrb	r3, [r7, #6]
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	fbb2 f3f3 	udiv	r3, r2, r3
 8006568:	79fa      	ldrb	r2, [r7, #7]
 800656a:	fb02 f203 	mul.w	r2, r2, r3
 800656e:	797b      	ldrb	r3, [r7, #5]
 8006570:	fbb2 f3f3 	udiv	r3, r2, r3
 8006574:	60fb      	str	r3, [r7, #12]
		break;
 8006576:	e001      	b.n	800657c <BSP_SysClkFreqGet+0x78>

	case 2:
	case 3:
	default:
		return ( (CPU_INT32U) 0u);
 8006578:	2300      	movs	r3, #0
 800657a:	e00e      	b.n	800659a <BSP_SysClkFreqGet+0x96>
	}
	cpu_freq /= sysclk_div;
 800657c:	893b      	ldrh	r3, [r7, #8]
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	fbb2 f3f3 	udiv	r3, r2, r3
 8006584:	60fb      	str	r3, [r7, #12]
	if (DEF_BIT_IS_SET (BSP_REG_SCU_CPUCLKCR, BSP_BIT_CPUCLKCR_CPUDIV)) {
 8006586:	4b0b      	ldr	r3, [pc, #44]	; (80065b4 <BSP_SysClkFreqGet+0xb0>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0301 	and.w	r3, r3, #1
 800658e:	2b01      	cmp	r3, #1
 8006590:	d102      	bne.n	8006598 <BSP_SysClkFreqGet+0x94>
		cpu_freq /= 2u;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	085b      	lsrs	r3, r3, #1
 8006596:	60fb      	str	r3, [r7, #12]
	}
	return (cpu_freq);
 8006598:	68fb      	ldr	r3, [r7, #12]
}
 800659a:	4618      	mov	r0, r3
 800659c:	3714      	adds	r7, #20
 800659e:	46bd      	mov	sp, r7
 80065a0:	bc80      	pop	{r7}
 80065a2:	4770      	bx	lr
 80065a4:	5000460c 	.word	0x5000460c
 80065a8:	016e3600 	.word	0x016e3600
 80065ac:	00b71b00 	.word	0x00b71b00
 80065b0:	50004718 	.word	0x50004718
 80065b4:	50004610 	.word	0x50004610

080065b8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	4603      	mov	r3, r0
 80065c0:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80065c2:	79fb      	ldrb	r3, [r7, #7]
 80065c4:	f003 031f 	and.w	r3, r3, #31
 80065c8:	2201      	movs	r2, #1
 80065ca:	fa02 f103 	lsl.w	r1, r2, r3
 80065ce:	4a05      	ldr	r2, [pc, #20]	; (80065e4 <NVIC_EnableIRQ+0x2c>)
 80065d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065d4:	095b      	lsrs	r3, r3, #5
 80065d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80065da:	bf00      	nop
 80065dc:	370c      	adds	r7, #12
 80065de:	46bd      	mov	sp, r7
 80065e0:	bc80      	pop	{r7}
 80065e2:	4770      	bx	lr
 80065e4:	e000e100 	.word	0xe000e100

080065e8 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	4603      	mov	r3, r0
 80065f0:	6039      	str	r1, [r7, #0]
 80065f2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80065f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	da0b      	bge.n	8006614 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	b2da      	uxtb	r2, r3
 8006600:	490c      	ldr	r1, [pc, #48]	; (8006634 <NVIC_SetPriority+0x4c>)
 8006602:	79fb      	ldrb	r3, [r7, #7]
 8006604:	f003 030f 	and.w	r3, r3, #15
 8006608:	3b04      	subs	r3, #4
 800660a:	0092      	lsls	r2, r2, #2
 800660c:	b2d2      	uxtb	r2, r2
 800660e:	440b      	add	r3, r1
 8006610:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8006612:	e009      	b.n	8006628 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	b2da      	uxtb	r2, r3
 8006618:	4907      	ldr	r1, [pc, #28]	; (8006638 <NVIC_SetPriority+0x50>)
 800661a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800661e:	0092      	lsls	r2, r2, #2
 8006620:	b2d2      	uxtb	r2, r2
 8006622:	440b      	add	r3, r1
 8006624:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	bc80      	pop	{r7}
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	e000ed00 	.word	0xe000ed00
 8006638:	e000e100 	.word	0xe000e100

0800663c <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR> 
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_CHECK_MODULE_PTR(module));
  module->GIDLC |= (uint32_t) CCU8_GIDLC_SPRB_Msk;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	60da      	str	r2, [r3, #12]
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	bc80      	pop	{r7}
 8006658:	4770      	bx	lr

0800665a <XMC_CCU8_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_DisableClock()<BR>  XMC_CCU8_EnableMultipleClocks()<BR>  XMC_CCU8_StartPrescaler()<BR>  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_EnableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_number)
{
 800665a:	b480      	push	{r7}
 800665c:	b083      	sub	sp, #12
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
 8006662:	460b      	mov	r3, r1
 8006664:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Module Pointer", XMC_CCU8_CHECK_MODULE_PTR(module));
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1 << slice_number);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	68da      	ldr	r2, [r3, #12]
 800666a:	78fb      	ldrb	r3, [r7, #3]
 800666c:	2101      	movs	r1, #1
 800666e:	fa01 f303 	lsl.w	r3, r1, r3
 8006672:	431a      	orrs	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	60da      	str	r2, [r3, #12]
}
 8006678:	bf00      	nop
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	bc80      	pop	{r7}
 8006680:	4770      	bx	lr

08006682 <XMC_CCU8_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StartTimer(XMC_CCU8_SLICE_t *const slice)
{
 8006682:	b480      	push	{r7}
 8006684:	b083      	sub	sp, #12
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU8_CHECK_SLICE_PTR(slice));
  slice->TCSET = CCU8_CC8_TCSET_TRBS_Msk;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2201      	movs	r2, #1
 800668e:	60da      	str	r2, [r3, #12]
}
 8006690:	bf00      	nop
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	bc80      	pop	{r7}
 8006698:	4770      	bx	lr

0800669a <XMC_CCU8_SLICE_EnableEvent>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_SetInterruptNode()<BR>  XMC_CCU8_SLICE_EnableMultipleEvents()<BR>  XMC_CCU8_SLICE_DisableEvent()<BR> 
 *  XMC_CCU8_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_EnableEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IRQ_ID_t event)
{
 800669a:	b480      	push	{r7}
 800669c:	b083      	sub	sp, #12
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
 80066a2:	460b      	mov	r3, r1
 80066a4:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU8_CHECK_SLICE_PTR(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80066ac:	78fb      	ldrb	r3, [r7, #3]
 80066ae:	2101      	movs	r1, #1
 80066b0:	fa01 f303 	lsl.w	r3, r1, r3
 80066b4:	431a      	orrs	r2, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 80066bc:	bf00      	nop
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bc80      	pop	{r7}
 80066c4:	4770      	bx	lr
	...

080066c8 <BSP_ConfigCCU8_Timer>:
  .output_level        = XMC_GPIO_OUTPUT_LEVEL_LOW,
	.output_strength     = XMC_GPIO_OUTPUT_STRENGTH_MEDIUM,
};

_Bool BSP_ConfigCCU8_Timer(void)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	af00      	add	r7, sp, #0
  /* Enable CCU8 module */
  XMC_CCU8_Init(MODULE_PTR, XMC_CCU8_SLICE_MCMS_ACTION_TRANSFER_PR_CR);
 80066cc:	2100      	movs	r1, #0
 80066ce:	483b      	ldr	r0, [pc, #236]	; (80067bc <BSP_ConfigCCU8_Timer+0xf4>)
 80066d0:	f001 fb0b 	bl	8007cea <XMC_CCU8_Init>
  /* Start the prescaler */
  XMC_CCU8_StartPrescaler(MODULE_PTR);
 80066d4:	4839      	ldr	r0, [pc, #228]	; (80067bc <BSP_ConfigCCU8_Timer+0xf4>)
 80066d6:	f7ff ffb1 	bl	800663c <XMC_CCU8_StartPrescaler>
  /* Ensure fCCU reaches CCU80 */
  XMC_CCU8_SetModuleClock(MODULE_PTR, XMC_CCU8_CLOCK_SCU);
 80066da:	2100      	movs	r1, #0
 80066dc:	4837      	ldr	r0, [pc, #220]	; (80067bc <BSP_ConfigCCU8_Timer+0xf4>)
 80066de:	f001 fb20 	bl	8007d22 <XMC_CCU8_SetModuleClock>
  /* Configure CCU8x_CC8y slice as timer */
  XMC_CCU8_SLICE_CompareInit(SLICE0_PTR, &g_timer_object_CCU8_CH1);
 80066e2:	4937      	ldr	r1, [pc, #220]	; (80067c0 <BSP_ConfigCCU8_Timer+0xf8>)
 80066e4:	4837      	ldr	r0, [pc, #220]	; (80067c4 <BSP_ConfigCCU8_Timer+0xfc>)
 80066e6:	f001 fb36 	bl	8007d56 <XMC_CCU8_SLICE_CompareInit>
  XMC_CCU8_SLICE_CompareInit(SLICE1_PTR, &g_timer_object_CCU8_CH1);
 80066ea:	4935      	ldr	r1, [pc, #212]	; (80067c0 <BSP_ConfigCCU8_Timer+0xf8>)
 80066ec:	4836      	ldr	r0, [pc, #216]	; (80067c8 <BSP_ConfigCCU8_Timer+0x100>)
 80066ee:	f001 fb32 	bl	8007d56 <XMC_CCU8_SLICE_CompareInit>

  /* Set period match value of the timer */
  XMC_CCU8_SLICE_SetTimerPeriodMatch(SLICE0_PTR, PWM_PERIOD_VALUE);
 80066f2:	f247 2170 	movw	r1, #29296	; 0x7270
 80066f6:	4833      	ldr	r0, [pc, #204]	; (80067c4 <BSP_ConfigCCU8_Timer+0xfc>)
 80066f8:	f001 fb67 	bl	8007dca <XMC_CCU8_SLICE_SetTimerPeriodMatch>
  XMC_CCU8_SLICE_SetTimerPeriodMatch(SLICE1_PTR, PWM_PERIOD_VALUE);
 80066fc:	f247 2170 	movw	r1, #29296	; 0x7270
 8006700:	4831      	ldr	r0, [pc, #196]	; (80067c8 <BSP_ConfigCCU8_Timer+0x100>)
 8006702:	f001 fb62 	bl	8007dca <XMC_CCU8_SLICE_SetTimerPeriodMatch>

  /* Set timer compare match value for channel 1 - 50% duty */
  XMC_CCU8_SLICE_SetTimerCompareMatch(SLICE0_PTR, XMC_CCU8_SLICE_COMPARE_CHANNEL_1, PWM_DEF_COMP_VALUE);
 8006706:	f643 1238 	movw	r2, #14648	; 0x3938
 800670a:	2100      	movs	r1, #0
 800670c:	482d      	ldr	r0, [pc, #180]	; (80067c4 <BSP_ConfigCCU8_Timer+0xfc>)
 800670e:	f001 fb6a 	bl	8007de6 <XMC_CCU8_SLICE_SetTimerCompareMatch>
  XMC_CCU8_SLICE_SetTimerCompareMatch(SLICE0_PTR, XMC_CCU8_SLICE_COMPARE_CHANNEL_2, PWM_DEF_COMP_VALUE);
 8006712:	f643 1238 	movw	r2, #14648	; 0x3938
 8006716:	2101      	movs	r1, #1
 8006718:	482a      	ldr	r0, [pc, #168]	; (80067c4 <BSP_ConfigCCU8_Timer+0xfc>)
 800671a:	f001 fb64 	bl	8007de6 <XMC_CCU8_SLICE_SetTimerCompareMatch>

  XMC_CCU8_SLICE_SetTimerCompareMatch(SLICE1_PTR, XMC_CCU8_SLICE_COMPARE_CHANNEL_2, PWM_DEF_COMP_VALUE);
 800671e:	f643 1238 	movw	r2, #14648	; 0x3938
 8006722:	2101      	movs	r1, #1
 8006724:	4828      	ldr	r0, [pc, #160]	; (80067c8 <BSP_ConfigCCU8_Timer+0x100>)
 8006726:	f001 fb5e 	bl	8007de6 <XMC_CCU8_SLICE_SetTimerCompareMatch>

  /* Transfer value from shadow timer registers to actual timer registers */
  XMC_CCU8_EnableShadowTransfer(MODULE_PTR, XMC_CCU8_SHADOW_TRANSFER_SLICE_0);
 800672a:	2101      	movs	r1, #1
 800672c:	4823      	ldr	r0, [pc, #140]	; (80067bc <BSP_ConfigCCU8_Timer+0xf4>)
 800672e:	f001 fb71 	bl	8007e14 <XMC_CCU8_EnableShadowTransfer>

  XMC_CCU8_EnableShadowTransfer(MODULE_PTR, XMC_CCU8_SHADOW_TRANSFER_SLICE_1);
 8006732:	2110      	movs	r1, #16
 8006734:	4821      	ldr	r0, [pc, #132]	; (80067bc <BSP_ConfigCCU8_Timer+0xf4>)
 8006736:	f001 fb6d 	bl	8007e14 <XMC_CCU8_EnableShadowTransfer>

  /* Configure events */
  /* Enable events: Period Match and Compare Match-Ch2 */
  XMC_CCU8_SLICE_EnableEvent(SLICE0_PTR, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1);
 800673a:	2102      	movs	r1, #2
 800673c:	4821      	ldr	r0, [pc, #132]	; (80067c4 <BSP_ConfigCCU8_Timer+0xfc>)
 800673e:	f7ff ffac 	bl	800669a <XMC_CCU8_SLICE_EnableEvent>
  XMC_CCU8_SLICE_EnableEvent(SLICE0_PTR, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2);
 8006742:	2104      	movs	r1, #4
 8006744:	481f      	ldr	r0, [pc, #124]	; (80067c4 <BSP_ConfigCCU8_Timer+0xfc>)
 8006746:	f7ff ffa8 	bl	800669a <XMC_CCU8_SLICE_EnableEvent>

  XMC_CCU8_SLICE_EnableEvent(SLICE1_PTR, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2);
 800674a:	2104      	movs	r1, #4
 800674c:	481e      	ldr	r0, [pc, #120]	; (80067c8 <BSP_ConfigCCU8_Timer+0x100>)
 800674e:	f7ff ffa4 	bl	800669a <XMC_CCU8_SLICE_EnableEvent>

  /* Connect event to SR0 and SR2 */
  XMC_CCU8_SLICE_SetInterruptNode(SLICE0_PTR, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH, XMC_CCU8_SLICE_SR_ID_0);
 8006752:	2200      	movs	r2, #0
 8006754:	2100      	movs	r1, #0
 8006756:	481b      	ldr	r0, [pc, #108]	; (80067c4 <BSP_ConfigCCU8_Timer+0xfc>)
 8006758:	f001 fb6c 	bl	8007e34 <XMC_CCU8_SLICE_SetInterruptNode>
  XMC_CCU8_SLICE_SetInterruptNode(SLICE0_PTR, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH, XMC_CCU8_SLICE_SR_ID_2);
 800675c:	2202      	movs	r2, #2
 800675e:	2100      	movs	r1, #0
 8006760:	4818      	ldr	r0, [pc, #96]	; (80067c4 <BSP_ConfigCCU8_Timer+0xfc>)
 8006762:	f001 fb67 	bl	8007e34 <XMC_CCU8_SLICE_SetInterruptNode>

  XMC_CCU8_SLICE_SetInterruptNode(SLICE1_PTR, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH, XMC_CCU8_SLICE_SR_ID_2);
 8006766:	2202      	movs	r2, #2
 8006768:	2100      	movs	r1, #0
 800676a:	4817      	ldr	r0, [pc, #92]	; (80067c8 <BSP_ConfigCCU8_Timer+0x100>)
 800676c:	f001 fb62 	bl	8007e34 <XMC_CCU8_SLICE_SetInterruptNode>

  /* Configure NVIC */
  /* Set priority */
  NVIC_SetPriority(CCU80_0_IRQn, 5U);
 8006770:	2105      	movs	r1, #5
 8006772:	203c      	movs	r0, #60	; 0x3c
 8006774:	f7ff ff38 	bl	80065e8 <NVIC_SetPriority>
  NVIC_SetPriority(CCU80_2_IRQn, 4U);
 8006778:	2104      	movs	r1, #4
 800677a:	203e      	movs	r0, #62	; 0x3e
 800677c:	f7ff ff34 	bl	80065e8 <NVIC_SetPriority>

  NVIC_SetPriority(CCU80_3_IRQn, 3U);
 8006780:	2103      	movs	r1, #3
 8006782:	203f      	movs	r0, #63	; 0x3f
 8006784:	f7ff ff30 	bl	80065e8 <NVIC_SetPriority>
  /* Enable IRQ */
  NVIC_EnableIRQ(CCU80_0_IRQn);
 8006788:	203c      	movs	r0, #60	; 0x3c
 800678a:	f7ff ff15 	bl	80065b8 <NVIC_EnableIRQ>
  NVIC_EnableIRQ(CCU80_2_IRQn);
 800678e:	203e      	movs	r0, #62	; 0x3e
 8006790:	f7ff ff12 	bl	80065b8 <NVIC_EnableIRQ>

  NVIC_EnableIRQ(CCU80_3_IRQn);
 8006794:	203f      	movs	r0, #63	; 0x3f
 8006796:	f7ff ff0f 	bl	80065b8 <NVIC_EnableIRQ>
   /*Initializes the GPIO*/
  // XMC_GPIO_Init(PORT0_5, &PWM_1_gpio_out_config);
  // XMC_GPIO_Init(PORT0_10, &PWM_1_gpio_out_config);
  // XMC_GPIO_Init(PORT0_9, &PWM_1_gpio_out_config);
  /* Get the slice out of idle mode */
  XMC_CCU8_EnableClock(MODULE_PTR, SLICE0_NUMBER);
 800679a:	2100      	movs	r1, #0
 800679c:	4807      	ldr	r0, [pc, #28]	; (80067bc <BSP_ConfigCCU8_Timer+0xf4>)
 800679e:	f7ff ff5c 	bl	800665a <XMC_CCU8_EnableClock>

  XMC_CCU8_EnableClock(MODULE_PTR, SLICE1_NUMBER);
 80067a2:	2101      	movs	r1, #1
 80067a4:	4805      	ldr	r0, [pc, #20]	; (80067bc <BSP_ConfigCCU8_Timer+0xf4>)
 80067a6:	f7ff ff58 	bl	800665a <XMC_CCU8_EnableClock>
  /* Start the timer */
  XMC_CCU8_SLICE_StartTimer(SLICE0_PTR);
 80067aa:	4806      	ldr	r0, [pc, #24]	; (80067c4 <BSP_ConfigCCU8_Timer+0xfc>)
 80067ac:	f7ff ff69 	bl	8006682 <XMC_CCU8_SLICE_StartTimer>

  XMC_CCU8_SLICE_StartTimer(SLICE1_PTR);
 80067b0:	4805      	ldr	r0, [pc, #20]	; (80067c8 <BSP_ConfigCCU8_Timer+0x100>)
 80067b2:	f7ff ff66 	bl	8006682 <XMC_CCU8_SLICE_StartTimer>

  return true;
 80067b6:	2301      	movs	r3, #1
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	40020000 	.word	0x40020000
 80067c0:	20000004 	.word	0x20000004
 80067c4:	40020100 	.word	0x40020100
 80067c8:	40020200 	.word	0x40020200

080067cc <NVIC_EnableIRQ>:
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	4603      	mov	r3, r0
 80067d4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80067d6:	79fb      	ldrb	r3, [r7, #7]
 80067d8:	f003 031f 	and.w	r3, r3, #31
 80067dc:	2201      	movs	r2, #1
 80067de:	fa02 f103 	lsl.w	r1, r2, r3
 80067e2:	4a05      	ldr	r2, [pc, #20]	; (80067f8 <NVIC_EnableIRQ+0x2c>)
 80067e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067e8:	095b      	lsrs	r3, r3, #5
 80067ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80067ee:	bf00      	nop
 80067f0:	370c      	adds	r7, #12
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bc80      	pop	{r7}
 80067f6:	4770      	bx	lr
 80067f8:	e000e100 	.word	0xe000e100

080067fc <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	460b      	mov	r3, r1
 8006806:	70fb      	strb	r3, [r7, #3]
 8006808:	4613      	mov	r3, r2
 800680a:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 800680c:	78fb      	ldrb	r3, [r7, #3]
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	3306      	adds	r3, #6
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	4413      	add	r3, r2
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	f023 0107 	bic.w	r1, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 800681c:	78ba      	ldrb	r2, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 800681e:	78fb      	ldrb	r3, [r7, #3]
 8006820:	430a      	orrs	r2, r1
 8006822:	6879      	ldr	r1, [r7, #4]
 8006824:	3306      	adds	r3, #6
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	440b      	add	r3, r1
 800682a:	605a      	str	r2, [r3, #4]
}
 800682c:	bf00      	nop
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	bc80      	pop	{r7}
 8006834:	4770      	bx	lr

08006836 <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
 8006836:	b480      	push	{r7}
 8006838:	b083      	sub	sp, #12
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006842:	f023 030f 	bic.w	r3, r3, #15
 8006846:	f043 0202 	orr.w	r2, r3, #2
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800684e:	bf00      	nop
 8006850:	370c      	adds	r7, #12
 8006852:	46bd      	mov	sp, r7
 8006854:	bc80      	pop	{r7}
 8006856:	4770      	bx	lr

08006858 <XMC_UART_CH_SetInterruptNodePointer>:
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                         const uint8_t service_request)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	460b      	mov	r3, r1
 8006862:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetInterruptNodePointer(channel, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL, 
 8006864:	78fb      	ldrb	r3, [r7, #3]
 8006866:	461a      	mov	r2, r3
 8006868:	2110      	movs	r1, #16
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f001 fe2e 	bl	80084cc <XMC_USIC_CH_SetInterruptNodePointer>
                                              (uint32_t)service_request);
}
 8006870:	bf00      	nop
 8006872:	3708      	adds	r7, #8
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <XMC_UART_CH_SetInputSource>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_EnableInputInversion() \n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_UART_CH_INPUT_t input, const uint8_t source)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	460b      	mov	r3, r1
 8006882:	70fb      	strb	r3, [r7, #3]
 8006884:	4613      	mov	r3, r2
 8006886:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = 0U;
 8006888:	78fb      	ldrb	r3, [r7, #3]
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	3306      	adds	r3, #6
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	4413      	add	r3, r2
 8006892:	2200      	movs	r2, #0
 8006894:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 8006896:	78ba      	ldrb	r2, [r7, #2]
 8006898:	78fb      	ldrb	r3, [r7, #3]
 800689a:	4619      	mov	r1, r3
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f7ff ffad 	bl	80067fc <XMC_USIC_CH_SetInputSource>
}
 80068a2:	bf00      	nop
 80068a4:	3708      	adds	r7, #8
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
	...

080068ac <BSP_UART_Init>:
/**
 * @brief  Initialize UART1 CH1 - Tx=P0.1, Rx=P0.0, 9600-8N1
 * @return true on success, false otherwise
 */
_Bool BSP_UART_Init (void)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	af00      	add	r7, sp, #0

	XMC_UART_CH_Init (XMC_UART1_CH1, &uart_config);
 80068b0:	4917      	ldr	r1, [pc, #92]	; (8006910 <BSP_UART_Init+0x64>)
 80068b2:	4818      	ldr	r0, [pc, #96]	; (8006914 <BSP_UART_Init+0x68>)
 80068b4:	f001 fb4c 	bl	8007f50 <XMC_UART_CH_Init>
	XMC_UART_CH_Init (XMC_UART1_CH0, &uart_config);
 80068b8:	4915      	ldr	r1, [pc, #84]	; (8006910 <BSP_UART_Init+0x64>)
 80068ba:	4817      	ldr	r0, [pc, #92]	; (8006918 <BSP_UART_Init+0x6c>)
 80068bc:	f001 fb48 	bl	8007f50 <XMC_UART_CH_Init>
	XMC_UART_CH_SetInputSource (XMC_UART1_CH1, XMC_UART_CH_INPUT_RXD, 
 80068c0:	2203      	movs	r2, #3
 80068c2:	2100      	movs	r1, #0
 80068c4:	4813      	ldr	r0, [pc, #76]	; (8006914 <BSP_UART_Init+0x68>)
 80068c6:	f7ff ffd7 	bl	8006878 <XMC_UART_CH_SetInputSource>
	                            USIC1_C1_DX0_P0_0);

	XMC_UART_CH_SetInterruptNodePointer	(XMC_UART1_CH1, 0) ;
 80068ca:	2100      	movs	r1, #0
 80068cc:	4811      	ldr	r0, [pc, #68]	; (8006914 <BSP_UART_Init+0x68>)
 80068ce:	f7ff ffc3 	bl	8006858 <XMC_UART_CH_SetInterruptNodePointer>
	XMC_UART_CH_EnableEvent (XMC_UART1_CH1, XMC_UART_CH_EVENT_STANDARD_RECEIVE);
 80068d2:	4912      	ldr	r1, [pc, #72]	; (800691c <BSP_UART_Init+0x70>)
 80068d4:	480f      	ldr	r0, [pc, #60]	; (8006914 <BSP_UART_Init+0x68>)
 80068d6:	f001 fbcf 	bl	8008078 <XMC_UART_CH_EnableEvent>
	XMC_UART_CH_EnableEvent (XMC_UART1_CH1, 
 80068da:	f04f 2180 	mov.w	r1, #2147516416	; 0x80008000
 80068de:	480d      	ldr	r0, [pc, #52]	; (8006914 <BSP_UART_Init+0x68>)
 80068e0:	f001 fbca 	bl	8008078 <XMC_UART_CH_EnableEvent>
	                         XMC_UART_CH_EVENT_ALTERNATIVE_RECEIVE);
	NVIC_EnableIRQ (USIC1_0_IRQn);
 80068e4:	205a      	movs	r0, #90	; 0x5a
 80068e6:	f7ff ff71 	bl	80067cc <NVIC_EnableIRQ>

	XMC_UART_CH_Start (XMC_UART1_CH1);
 80068ea:	480a      	ldr	r0, [pc, #40]	; (8006914 <BSP_UART_Init+0x68>)
 80068ec:	f7ff ffa3 	bl	8006836 <XMC_UART_CH_Start>
	XMC_UART_CH_Start (XMC_UART1_CH0);
 80068f0:	4809      	ldr	r0, [pc, #36]	; (8006918 <BSP_UART_Init+0x6c>)
 80068f2:	f7ff ffa0 	bl	8006836 <XMC_UART_CH_Start>

	XMC_GPIO_SetMode (UART_TX, XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT2);
 80068f6:	2290      	movs	r2, #144	; 0x90
 80068f8:	2101      	movs	r1, #1
 80068fa:	4809      	ldr	r0, [pc, #36]	; (8006920 <BSP_UART_Init+0x74>)
 80068fc:	f000 ffbc 	bl	8007878 <XMC_GPIO_SetMode>
	XMC_GPIO_SetMode (UART_RX, XMC_GPIO_MODE_INPUT_TRISTATE);
 8006900:	2200      	movs	r2, #0
 8006902:	2100      	movs	r1, #0
 8006904:	4806      	ldr	r0, [pc, #24]	; (8006920 <BSP_UART_Init+0x74>)
 8006906:	f000 ffb7 	bl	8007878 <XMC_GPIO_SetMode>

	return true;
 800690a:	2301      	movs	r3, #1
}
 800690c:	4618      	mov	r0, r3
 800690e:	bd80      	pop	{r7, pc}
 8006910:	20000014 	.word	0x20000014
 8006914:	48020200 	.word	0x48020200
 8006918:	48020000 	.word	0x48020000
 800691c:	80004000 	.word	0x80004000
 8006920:	48028000 	.word	0x48028000

08006924 <XMC_USIC_CH_SetInputSource>:
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	460b      	mov	r3, r1
 800692e:	70fb      	strb	r3, [r7, #3]
 8006930:	4613      	mov	r3, r2
 8006932:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8006934:	78fb      	ldrb	r3, [r7, #3]
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	3306      	adds	r3, #6
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	4413      	add	r3, r2
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	f023 0107 	bic.w	r1, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8006944:	78ba      	ldrb	r2, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8006946:	78fb      	ldrb	r3, [r7, #3]
 8006948:	430a      	orrs	r2, r1
 800694a:	6879      	ldr	r1, [r7, #4]
 800694c:	3306      	adds	r3, #6
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	440b      	add	r3, r1
 8006952:	605a      	str	r2, [r3, #4]
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	bc80      	pop	{r7}
 800695c:	4770      	bx	lr

0800695e <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 800695e:	b480      	push	{r7}
 8006960:	b083      	sub	sp, #12
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
 8006966:	460b      	mov	r3, r1
 8006968:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696e:	f023 020f 	bic.w	r2, r3, #15
 8006972:	78fb      	ldrb	r3, [r7, #3]
 8006974:	431a      	orrs	r2, r3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	641a      	str	r2, [r3, #64]	; 0x40
}
 800697a:	bf00      	nop
 800697c:	370c      	adds	r7, #12
 800697e:	46bd      	mov	sp, r7
 8006980:	bc80      	pop	{r7}
 8006982:	4770      	bx	lr

08006984 <XMC_SPI_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Init(), XMC_SPI_CH_Stop()
 */
__STATIC_INLINE void XMC_SPI_CH_Start(XMC_USIC_CH_t *const channel)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b082      	sub	sp, #8
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  /* USIC channel in SPI mode */
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_SPI);
 800698c:	2101      	movs	r1, #1
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f7ff ffe5 	bl	800695e <XMC_USIC_CH_SetMode>
}
 8006994:	bf00      	nop
 8006996:	3708      	adds	r7, #8
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <XMC_SPI_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_ClearStatusFlag()
 */
__STATIC_INLINE uint32_t XMC_SPI_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  return channel->PSR_SSCMode;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bc80      	pop	{r7}
 80069b0:	4770      	bx	lr

080069b2 <XMC_SPI_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_GetStatusFlag()
 */
__STATIC_INLINE void XMC_SPI_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 80069b2:	b480      	push	{r7}
 80069b4:	b083      	sub	sp, #12
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
 80069ba:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	431a      	orrs	r2, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bc80      	pop	{r7}
 80069d0:	4770      	bx	lr

080069d2 <XMC_SPI_CH_SetInputSource>:
 * the SPI communication.
 */
__STATIC_INLINE void XMC_SPI_CH_SetInputSource(XMC_USIC_CH_t *const channel,
                                               const XMC_SPI_CH_INPUT_t input,
                                               const uint8_t source)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b082      	sub	sp, #8
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
 80069da:	460b      	mov	r3, r1
 80069dc:	70fb      	strb	r3, [r7, #3]
 80069de:	4613      	mov	r3, r2
 80069e0:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = USIC_CH_DX0CR_INSW_Msk;
 80069e2:	78fb      	ldrb	r3, [r7, #3]
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	3306      	adds	r3, #6
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	4413      	add	r3, r2
 80069ec:	2210      	movs	r2, #16
 80069ee:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 80069f0:	78ba      	ldrb	r2, [r7, #2]
 80069f2:	78fb      	ldrb	r3, [r7, #3]
 80069f4:	4619      	mov	r1, r3
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f7ff ff94 	bl	8006924 <XMC_USIC_CH_SetInputSource>
}
 80069fc:	bf00      	nop
 80069fe:	3708      	adds	r7, #8
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <XMC_GPIO_SetOutputHigh>:
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	70fb      	strb	r3, [r7, #3]
  port->OMR = (uint32_t)0x1U << pin;
 8006a10:	78fb      	ldrb	r3, [r7, #3]
 8006a12:	2201      	movs	r2, #1
 8006a14:	409a      	lsls	r2, r3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	605a      	str	r2, [r3, #4]
}
 8006a1a:	bf00      	nop
 8006a1c:	370c      	adds	r7, #12
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bc80      	pop	{r7}
 8006a22:	4770      	bx	lr

08006a24 <_init_spi>:
 *  @brief This function configures the SPI interface to communicate with the MCP23S08 & the MCP3004
 *  @param none
 *  @return on success this function returns SPI_OK (0)
 */
uint8_t _init_spi(void)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	af00      	add	r7, sp, #0
	/*Initialize and Start SPI*/
	XMC_SPI_CH_Init(XMC_SPI1_CH0, &spi_config);
 8006a28:	4929      	ldr	r1, [pc, #164]	; (8006ad0 <_init_spi+0xac>)
 8006a2a:	482a      	ldr	r0, [pc, #168]	; (8006ad4 <_init_spi+0xb0>)
 8006a2c:	f001 fb6c 	bl	8008108 <XMC_SPI_CH_Init>

	/*Input source selected*/
	XMC_SPI_CH_SetInputSource(XMC_SPI1_CH0,XMC_SPI_CH_INPUT_DIN0,USIC1_C0_DX0_P0_4);
 8006a30:	2200      	movs	r2, #0
 8006a32:	2100      	movs	r1, #0
 8006a34:	4827      	ldr	r0, [pc, #156]	; (8006ad4 <_init_spi+0xb0>)
 8006a36:	f7ff ffcc 	bl	80069d2 <XMC_SPI_CH_SetInputSource>
	XMC_SPI_CH_EnableEvent(XMC_SPI1_CH0,XMC_SPI_CH_EVENT_STANDARD_RECEIVE);
 8006a3a:	4927      	ldr	r1, [pc, #156]	; (8006ad8 <_init_spi+0xb4>)
 8006a3c:	4825      	ldr	r0, [pc, #148]	; (8006ad4 <_init_spi+0xb0>)
 8006a3e:	f001 fbf7 	bl	8008230 <XMC_SPI_CH_EnableEvent>
	XMC_SPI_CH_Start(XMC_SPI1_CH0);
 8006a42:	4824      	ldr	r0, [pc, #144]	; (8006ad4 <_init_spi+0xb0>)
 8006a44:	f7ff ff9e 	bl	8006984 <XMC_SPI_CH_Start>

	/*GPIO configuration*/
	XMC_GPIO_SetMode(SPI_MOSI, XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT2);
 8006a48:	2290      	movs	r2, #144	; 0x90
 8006a4a:	2105      	movs	r1, #5
 8006a4c:	4823      	ldr	r0, [pc, #140]	; (8006adc <_init_spi+0xb8>)
 8006a4e:	f000 ff13 	bl	8007878 <XMC_GPIO_SetMode>
	XMC_GPIO_SetMode(SPI_MISO, XMC_GPIO_MODE_INPUT_TRISTATE);
 8006a52:	2200      	movs	r2, #0
 8006a54:	2104      	movs	r1, #4
 8006a56:	4821      	ldr	r0, [pc, #132]	; (8006adc <_init_spi+0xb8>)
 8006a58:	f000 ff0e 	bl	8007878 <XMC_GPIO_SetMode>
	XMC_GPIO_SetMode(SPI_SCLK, XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT2);
 8006a5c:	2290      	movs	r2, #144	; 0x90
 8006a5e:	210b      	movs	r1, #11
 8006a60:	481e      	ldr	r0, [pc, #120]	; (8006adc <_init_spi+0xb8>)
 8006a62:	f000 ff09 	bl	8007878 <XMC_GPIO_SetMode>

	gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL;
 8006a66:	4b1e      	ldr	r3, [pc, #120]	; (8006ae0 <_init_spi+0xbc>)
 8006a68:	2280      	movs	r2, #128	; 0x80
 8006a6a:	701a      	strb	r2, [r3, #0]
	gpio_config.output_level = XMC_GPIO_OUTPUT_LEVEL_HIGH;
 8006a6c:	4b1c      	ldr	r3, [pc, #112]	; (8006ae0 <_init_spi+0xbc>)
 8006a6e:	2201      	movs	r2, #1
 8006a70:	605a      	str	r2, [r3, #4]
	gpio_config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_MEDIUM;
 8006a72:	4b1b      	ldr	r3, [pc, #108]	; (8006ae0 <_init_spi+0xbc>)
 8006a74:	2204      	movs	r2, #4
 8006a76:	721a      	strb	r2, [r3, #8]

	XMC_GPIO_Init(MCP23S08_SS, &gpio_config); //IO-Expander CS
 8006a78:	4a19      	ldr	r2, [pc, #100]	; (8006ae0 <_init_spi+0xbc>)
 8006a7a:	2102      	movs	r1, #2
 8006a7c:	4819      	ldr	r0, [pc, #100]	; (8006ae4 <_init_spi+0xc0>)
 8006a7e:	f001 f877 	bl	8007b70 <XMC_GPIO_Init>
	XMC_GPIO_SetOutputHigh(MCP23S08_SS);
 8006a82:	2102      	movs	r1, #2
 8006a84:	4817      	ldr	r0, [pc, #92]	; (8006ae4 <_init_spi+0xc0>)
 8006a86:	f7ff ffbd 	bl	8006a04 <XMC_GPIO_SetOutputHigh>

	gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL;
 8006a8a:	4b15      	ldr	r3, [pc, #84]	; (8006ae0 <_init_spi+0xbc>)
 8006a8c:	2280      	movs	r2, #128	; 0x80
 8006a8e:	701a      	strb	r2, [r3, #0]
	gpio_config.output_level = XMC_GPIO_OUTPUT_LEVEL_HIGH;
 8006a90:	4b13      	ldr	r3, [pc, #76]	; (8006ae0 <_init_spi+0xbc>)
 8006a92:	2201      	movs	r2, #1
 8006a94:	605a      	str	r2, [r3, #4]
	gpio_config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_MEDIUM;
 8006a96:	4b12      	ldr	r3, [pc, #72]	; (8006ae0 <_init_spi+0xbc>)
 8006a98:	2204      	movs	r2, #4
 8006a9a:	721a      	strb	r2, [r3, #8]

	XMC_GPIO_Init(MCP3004_SS, &gpio_config); //ADC-CS
 8006a9c:	4a10      	ldr	r2, [pc, #64]	; (8006ae0 <_init_spi+0xbc>)
 8006a9e:	2104      	movs	r1, #4
 8006aa0:	4810      	ldr	r0, [pc, #64]	; (8006ae4 <_init_spi+0xc0>)
 8006aa2:	f001 f865 	bl	8007b70 <XMC_GPIO_Init>
	XMC_GPIO_SetOutputHigh(MCP3004_SS);
 8006aa6:	2104      	movs	r1, #4
 8006aa8:	480e      	ldr	r0, [pc, #56]	; (8006ae4 <_init_spi+0xc0>)
 8006aaa:	f7ff ffab 	bl	8006a04 <XMC_GPIO_SetOutputHigh>

	gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL;
 8006aae:	4b0c      	ldr	r3, [pc, #48]	; (8006ae0 <_init_spi+0xbc>)
 8006ab0:	2280      	movs	r2, #128	; 0x80
 8006ab2:	701a      	strb	r2, [r3, #0]
	gpio_config.output_level = XMC_GPIO_OUTPUT_LEVEL_HIGH;
 8006ab4:	4b0a      	ldr	r3, [pc, #40]	; (8006ae0 <_init_spi+0xbc>)
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	605a      	str	r2, [r3, #4]
	gpio_config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_MEDIUM;
 8006aba:	4b09      	ldr	r3, [pc, #36]	; (8006ae0 <_init_spi+0xbc>)
 8006abc:	2204      	movs	r2, #4
 8006abe:	721a      	strb	r2, [r3, #8]

	XMC_GPIO_Init(MCP23S08_RESET, &gpio_config); //IO-Expander Reset
 8006ac0:	4a07      	ldr	r2, [pc, #28]	; (8006ae0 <_init_spi+0xbc>)
 8006ac2:	210c      	movs	r1, #12
 8006ac4:	4805      	ldr	r0, [pc, #20]	; (8006adc <_init_spi+0xb8>)
 8006ac6:	f001 f853 	bl	8007b70 <XMC_GPIO_Init>

	return SPI_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	20000020 	.word	0x20000020
 8006ad4:	48020000 	.word	0x48020000
 8006ad8:	80004000 	.word	0x80004000
 8006adc:	48028000 	.word	0x48028000
 8006ae0:	20003314 	.word	0x20003314
 8006ae4:	48028100 	.word	0x48028100

08006ae8 <_spi_transmit>:
 *  @param channel ... SPI channel
 *		   spi_data .. byte which should be transmitted
 *  @return on success this function returns SPI_OK (0)
 */
uint8_t _spi_transmit(XMC_USIC_CH_t *const channel, uint8_t spi_data)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	460b      	mov	r3, r1
 8006af2:	70fb      	strb	r3, [r7, #3]
	XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

	XMC_SPI_CH_Transmit(channel, spi_data, XMC_SPI_CH_MODE_STANDARD);
 8006af4:	78fb      	ldrb	r3, [r7, #3]
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	2200      	movs	r2, #0
 8006afa:	4619      	mov	r1, r3
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f001 fb39 	bl	8008174 <XMC_SPI_CH_Transmit>
	while((XMC_SPI_CH_GetStatusFlag(channel) & XMC_SPI_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION) == 0U);
 8006b02:	bf00      	nop
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f7ff ff49 	bl	800699c <XMC_SPI_CH_GetStatusFlag>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d0f7      	beq.n	8006b04 <_spi_transmit+0x1c>
	XMC_SPI_CH_ClearStatusFlag(channel, XMC_SPI_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION);
 8006b14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f7ff ff4a 	bl	80069b2 <XMC_SPI_CH_ClearStatusFlag>

	return SPI_OK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3708      	adds	r7, #8
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <_spi_receive>:
 *  @brief This function reads data from a specific SPI channel
 *  @param channel ... SPI channel
 *  @return byte which was received and is valid
 */
uint8_t _spi_receive(XMC_USIC_CH_t *const channel)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
	XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

	return XMC_SPI_CH_GetReceivedData(channel);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f001 fb56 	bl	80081e2 <XMC_SPI_CH_GetReceivedData>
 8006b36:	4603      	mov	r3, r0
 8006b38:	b2db      	uxtb	r3, r3
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3708      	adds	r7, #8
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
	...

08006b44 <BSP_Init>:
 * @params none
 * @returns none
 * @brief Initialization of the board support.
 */
void  BSP_Init (void)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	af00      	add	r7, sp, #0
	BSP_IntInit();
 8006b48:	f000 f8de 	bl	8006d08 <BSP_IntInit>
	BSP_UART_Init();
 8006b4c:	f7ff feae 	bl	80068ac <BSP_UART_Init>
	BSP_DAC0_1_Init();
 8006b50:	f000 fd8e 	bl	8007670 <BSP_DAC0_1_Init>
	BSP_ConfigCCU4_Timer();
 8006b54:	f000 fd08 	bl	8007568 <BSP_ConfigCCU4_Timer>
	BSP_ConfigCCU8_Timer();
 8006b58:	f7ff fdb6 	bl	80066c8 <BSP_ConfigCCU8_Timer>
	initRetargetSwo();
 8006b5c:	f000 f83e 	bl	8006bdc <initRetargetSwo>
  if(_init_spi()!=SPI_OK)
 8006b60:	f7ff ff60 	bl	8006a24 <_init_spi>
  {
	  /*Error should never get here*/
  }
	_mcp23s08_reset();
 8006b64:	f7ff fb12 	bl	800618c <_mcp23s08_reset>
	_mcp23s08_reset_ss(MCP23S08_SS);
 8006b68:	2102      	movs	r1, #2
 8006b6a:	4807      	ldr	r0, [pc, #28]	; (8006b88 <BSP_Init+0x44>)
 8006b6c:	f7ff faed 	bl	800614a <_mcp23s08_reset_ss>
	_mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_IODIR,0xf0,MCP23S08_WR);
 8006b70:	2300      	movs	r3, #0
 8006b72:	22f0      	movs	r2, #240	; 0xf0
 8006b74:	2100      	movs	r1, #0
 8006b76:	4805      	ldr	r0, [pc, #20]	; (8006b8c <BSP_Init+0x48>)
 8006b78:	f7ff fb18 	bl	80061ac <_mcp23s08_reg_xfer>
	_mcp23s08_set_ss(MCP23S08_SS);
 8006b7c:	2102      	movs	r1, #2
 8006b7e:	4802      	ldr	r0, [pc, #8]	; (8006b88 <BSP_Init+0x44>)
 8006b80:	f7ff faf3 	bl	800616a <_mcp23s08_set_ss>
}
 8006b84:	bf00      	nop
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	48028100 	.word	0x48028100
 8006b8c:	48020000 	.word	0x48020000

08006b90 <ITM_SendChar>:
    \param [in]     ch  Character to transmit.

    \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  if ((ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8006b98:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006b9c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8006ba0:	f003 0301 	and.w	r3, r3, #1
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d012      	beq.n	8006bce <ITM_SendChar+0x3e>
      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
 8006ba8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006bac:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8006bb0:	f003 0301 	and.w	r3, r3, #1
  if ((ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d00a      	beq.n	8006bce <ITM_SendChar+0x3e>
  {
    while (ITM->PORT[0].u32 == 0);
 8006bb8:	bf00      	nop
 8006bba:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d0fa      	beq.n	8006bba <ITM_SendChar+0x2a>
    ITM->PORT[0].u8 = (uint8_t) ch;
 8006bc4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	b2d2      	uxtb	r2, r2
 8006bcc:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8006bce:	687b      	ldr	r3, [r7, #4]
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bc80      	pop	{r7}
 8006bd8:	4770      	bx	lr
	...

08006bdc <initRetargetSwo>:
 *            CMSIS-Core > Reference > Debug Access
 *        (2) ARM Cortex-M4 Processor Technical Reference Manual
 *        (3) ARMv7-M Architecture Reference Manual
 */
void initRetargetSwo (void)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	af00      	add	r7, sp, #0
	// P2.1: After a system reset, this pin selects HWO0 (DB.TDO/DB.TRACESWO)
	// PORT2->HWSEL ... clear bits [3:2]
	PORT2->HWSEL &= ~PORT2_HWSEL_HW1_Msk;
 8006be0:	4b1c      	ldr	r3, [pc, #112]	; (8006c54 <initRetargetSwo+0x78>)
 8006be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006be4:	4a1b      	ldr	r2, [pc, #108]	; (8006c54 <initRetargetSwo+0x78>)
 8006be6:	f023 030c 	bic.w	r3, r3, #12
 8006bea:	6753      	str	r3, [r2, #116]	; 0x74
	// PORT2->HWSEL ... set bit [2] -> HWO0
	PORT2->HWSEL |= 0x01UL << PORT2_HWSEL_HW1_Pos;
 8006bec:	4b19      	ldr	r3, [pc, #100]	; (8006c54 <initRetargetSwo+0x78>)
 8006bee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bf0:	4a18      	ldr	r2, [pc, #96]	; (8006c54 <initRetargetSwo+0x78>)
 8006bf2:	f043 0304 	orr.w	r3, r3, #4
 8006bf6:	6753      	str	r3, [r2, #116]	; 0x74

	// Enable trace systems
	// Source: ARMv7-M Architecture Reference Manual
	// DEMCR = Debug Exception and Monitor Control Register
	//         TRCENA ... global enable for DWT and ITM blocks
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8006bf8:	4b17      	ldr	r3, [pc, #92]	; (8006c58 <initRetargetSwo+0x7c>)
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	4a16      	ldr	r2, [pc, #88]	; (8006c58 <initRetargetSwo+0x7c>)
 8006bfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c02:	60d3      	str	r3, [r2, #12]
	// SWO baud rate prescaler value
	// ACPR = Asynchronous Clock Prescaler Register
	//        fSWO = fCPU / (SWOSCALAR + 1)
	//        fSWO = 1MHz (maximum speed JLINK Lite CortexM)
	//        fCPU = 120MHz
	TPI->ACPR = 119UL;
 8006c04:	4b15      	ldr	r3, [pc, #84]	; (8006c5c <initRetargetSwo+0x80>)
 8006c06:	2277      	movs	r2, #119	; 0x77
 8006c08:	611a      	str	r2, [r3, #16]
	// Source: ARMv7-M Architecture Reference Manual
	// SPPR = Selected Pin Control Register
	//        0x0 ... Synchronous Trace Port Mode
	//        0x1 ... Asynchronous Serial Wire Output (Manchester)
	//        0x2 ... Asynchronous Serial Wire Output (NRZ)
	TPI->SPPR = 0x2UL;
 8006c0a:	4b14      	ldr	r3, [pc, #80]	; (8006c5c <initRetargetSwo+0x80>)
 8006c0c:	2202      	movs	r2, #2
 8006c0e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	// Source: ARM Cortex-M4 Processor Technical Reference Manual
	// Source: infineonforums -> 358-ITM-printf-style-debugging-not-working
	// FFCR = Formatter and Flash Control Register
	//        0x0 ... continuous formatting disabled
	//        0x1 ... continuous formatting enabled
	TPI->FFCR &= ~TPI_FFCR_EnFCont_Msk;
 8006c12:	4b12      	ldr	r3, [pc, #72]	; (8006c5c <initRetargetSwo+0x80>)
 8006c14:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 8006c18:	4a10      	ldr	r2, [pc, #64]	; (8006c5c <initRetargetSwo+0x80>)
 8006c1a:	f023 0302 	bic.w	r3, r3, #2
 8006c1e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

	// Unlock ITM
	// Source: infineonforums -> 358-ITM-printf-style-debugging-not-working
	ITM->LAR = 0xC5ACCE55;
 8006c22:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006c26:	4a0e      	ldr	r2, [pc, #56]	; (8006c60 <initRetargetSwo+0x84>)
 8006c28:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
	// Source: ARMv7-M Architecture Reference Manual, Sec. C1-7
	// TCR = Trace Control Register
	//       ITMENA ... enable ITM
	ITM->TCR |= ITM_TCR_ITMENA_Msk;
 8006c2c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006c30:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8006c34:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006c38:	f043 0301 	orr.w	r3, r3, #1
 8006c3c:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
	// Source: ARMv7-M Architecture Reference Manual, Sec. C1-7
	// TER = Trace Enable Register
	//       STIMENA ... Stimulus Port #N is enabled when bit STIMENA[N]
	ITM->TER = 0xFFFFFFFF;
 8006c40:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006c44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c48:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
}
 8006c4c:	bf00      	nop
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bc80      	pop	{r7}
 8006c52:	4770      	bx	lr
 8006c54:	48028200 	.word	0x48028200
 8006c58:	e000edf0 	.word	0xe000edf0
 8006c5c:	e0040000 	.word	0xe0040000
 8006c60:	c5acce55 	.word	0xc5acce55

08006c64 <_write>:
 * @brief Retarget the printf() function to output via the ITM Debug module.
 *        This function relies on ITM_SendChar() defined in core_cm4.h of the
 *        CMSIS library.
 */
int _write (int file, char *buf, int nbytes)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b086      	sub	sp, #24
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	607a      	str	r2, [r7, #4]
	int i;

	for (i = 0; i < nbytes; i++) {
 8006c70:	2300      	movs	r3, #0
 8006c72:	617b      	str	r3, [r7, #20]
 8006c74:	e00a      	b.n	8006c8c <_write+0x28>
		ITM_SendChar ( (*buf++));
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	1c5a      	adds	r2, r3, #1
 8006c7a:	60ba      	str	r2, [r7, #8]
 8006c7c:	f993 3000 	ldrsb.w	r3, [r3]
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7ff ff85 	bl	8006b90 <ITM_SendChar>
	for (i = 0; i < nbytes; i++) {
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	617b      	str	r3, [r7, #20]
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	dbf0      	blt.n	8006c76 <_write+0x12>
	}
	return nbytes;
 8006c94:	687b      	ldr	r3, [r7, #4]
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3718      	adds	r7, #24
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <BSP_IntDisAll>:
 * \params   none
 * \returns  none
 * \brief    disable all interrupts
 */
void  BSP_IntDisAll (void)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	af00      	add	r7, sp, #0
	CPU_IntDis();
 8006ca2:	f7f9 fb19 	bl	80002d8 <CPU_IntDis>
}
 8006ca6:	bf00      	nop
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <BSP_IntEn>:
 * \params   int_id ... interrupt to enable
 * \returns  none
 * \brief    enable interrupt
 */
void  BSP_IntEn (CPU_DATA  int_id)
{
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b082      	sub	sp, #8
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
	if (int_id < BSP_INT_ID_MAX) {
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2b6f      	cmp	r3, #111	; 0x6f
 8006cb6:	d806      	bhi.n	8006cc6 <BSP_IntEn+0x1c>
		CPU_IntSrcEn (int_id + 16);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	3310      	adds	r3, #16
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f7fa fed9 	bl	8001a78 <CPU_IntSrcEn>
	}
}
 8006cc6:	bf00      	nop
 8006cc8:	3708      	adds	r7, #8
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
	...

08006cd0 <BSP_IntVectSet>:
 *           isr ...... handler to assign
 * \returns  none
 * \brief    assign ISR handler
 */
void  BSP_IntVectSet (CPU_DATA int_id, CPU_FNCT_VOID  isr)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
	CPU_SR_ALLOC();
 8006cda:	2300      	movs	r3, #0
 8006cdc:	60fb      	str	r3, [r7, #12]

	if (int_id < BSP_INT_ID_MAX) {
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2b6f      	cmp	r3, #111	; 0x6f
 8006ce2:	d80a      	bhi.n	8006cfa <BSP_IntVectSet+0x2a>
		CPU_CRITICAL_ENTER();
 8006ce4:	f7f9 fafc 	bl	80002e0 <CPU_SR_Save>
 8006ce8:	60f8      	str	r0, [r7, #12]
		BSP_IntVectTbl[int_id] = isr;
 8006cea:	4906      	ldr	r1, [pc, #24]	; (8006d04 <BSP_IntVectSet+0x34>)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	683a      	ldr	r2, [r7, #0]
 8006cf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		CPU_CRITICAL_EXIT();
 8006cf4:	68f8      	ldr	r0, [r7, #12]
 8006cf6:	f7f9 faf7 	bl	80002e8 <CPU_SR_Restore>
	}
}
 8006cfa:	bf00      	nop
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	20001828 	.word	0x20001828

08006d08 <BSP_IntInit>:
 * \params   none
 * \returns  none
 * \brief    initialize interrupts
 */
void  BSP_IntInit (void)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	af00      	add	r7, sp, #0
	BSP_IntVectSet (USIC1_1_IRQn, BSP_IntHandler_Uart_Recive); //**
 8006d0c:	4904      	ldr	r1, [pc, #16]	; (8006d20 <BSP_IntInit+0x18>)
 8006d0e:	205b      	movs	r0, #91	; 0x5b
 8006d10:	f7ff ffde 	bl	8006cd0 <BSP_IntVectSet>
	BSP_IntVectSet (USIC1_0_IRQn, BSP_IntHandler_Uart_Recive); //**
 8006d14:	4902      	ldr	r1, [pc, #8]	; (8006d20 <BSP_IntInit+0x18>)
 8006d16:	205a      	movs	r0, #90	; 0x5a
 8006d18:	f7ff ffda 	bl	8006cd0 <BSP_IntVectSet>
}
 8006d1c:	bf00      	nop
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	08006d25 	.word	0x08006d25

08006d24 <BSP_IntHandler_Uart_Recive>:
 * \brief    UART interrupt handler
 *           https://doc.micrium.com/display/osiiidoc/Keeping+the+Data+in+Scope
 */

static  void  BSP_IntHandler_Uart_Recive (void)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af02      	add	r7, sp, #8
	static CPU_CHAR    *RxDataPtr  = NULL ;
	static CPU_INT32U  RxDataCtr = 0;
	static CPU_CHAR    msg_receiving = 0;

	// receive byte
	RxData = XMC_UART_CH_GetReceivedData (XMC_UART1_CH1);                   // <1>
 8006d2a:	4838      	ldr	r0, [pc, #224]	; (8006e0c <BSP_IntHandler_Uart_Recive+0xe8>)
 8006d2c:	f001 f98b 	bl	8008046 <XMC_UART_CH_GetReceivedData>
 8006d30:	4603      	mov	r3, r0
 8006d32:	71fb      	strb	r3, [r7, #7]

	// is the character a "start of packet" character?                      // <2>
	if ( ( (int) RxData == Start_of_Packet) && msg_receiving == 0) {
 8006d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d38:	4a35      	ldr	r2, [pc, #212]	; (8006e10 <BSP_IntHandler_Uart_Recive+0xec>)
 8006d3a:	7812      	ldrb	r2, [r2, #0]
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d116      	bne.n	8006d6e <BSP_IntHandler_Uart_Recive+0x4a>
 8006d40:	4b34      	ldr	r3, [pc, #208]	; (8006e14 <BSP_IntHandler_Uart_Recive+0xf0>)
 8006d42:	f993 3000 	ldrsb.w	r3, [r3]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d111      	bne.n	8006d6e <BSP_IntHandler_Uart_Recive+0x4a>
		// allocate a memory block
		RxDataPtr = (CPU_CHAR *) OSMemGet (&Mem_Partition, &err);
 8006d4a:	1d3b      	adds	r3, r7, #4
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	4832      	ldr	r0, [pc, #200]	; (8006e18 <BSP_IntHandler_Uart_Recive+0xf4>)
 8006d50:	f7fb fa1c 	bl	800218c <OSMemGet>
 8006d54:	4602      	mov	r2, r0
 8006d56:	4b31      	ldr	r3, [pc, #196]	; (8006e1c <BSP_IntHandler_Uart_Recive+0xf8>)
 8006d58:	601a      	str	r2, [r3, #0]
		if (err != OS_ERR_NONE)
 8006d5a:	88bb      	ldrh	r3, [r7, #4]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d003      	beq.n	8006d68 <BSP_IntHandler_Uart_Recive+0x44>
			APP_TRACE_DBG ("Error OSMemGet: BSP_IntHandler_Uart_Recive\n");
 8006d60:	482f      	ldr	r0, [pc, #188]	; (8006e20 <BSP_IntHandler_Uart_Recive+0xfc>)
 8006d62:	f001 fcef 	bl	8008744 <puts>
 8006d66:	e002      	b.n	8006d6e <BSP_IntHandler_Uart_Recive+0x4a>
		else
			msg_receiving = 1;
 8006d68:	4b2a      	ldr	r3, [pc, #168]	; (8006e14 <BSP_IntHandler_Uart_Recive+0xf0>)
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	701a      	strb	r2, [r3, #0]

	// receive characters and put them into the memory partition            // <3>
	// until we detect and "end of packet character"
	// NOTE: the message itself may also contain a "start of packet character"
	//       but no "end of packet character"
	if ( ( (int) RxData != Start_of_Packet) && ( (int) RxData != End_of_Packet)
 8006d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d72:	4a27      	ldr	r2, [pc, #156]	; (8006e10 <BSP_IntHandler_Uart_Recive+0xec>)
 8006d74:	7812      	ldrb	r2, [r2, #0]
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d018      	beq.n	8006dac <BSP_IntHandler_Uart_Recive+0x88>
 8006d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d7e:	4a29      	ldr	r2, [pc, #164]	; (8006e24 <BSP_IntHandler_Uart_Recive+0x100>)
 8006d80:	7812      	ldrb	r2, [r2, #0]
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d012      	beq.n	8006dac <BSP_IntHandler_Uart_Recive+0x88>
	     && msg_receiving == 1) {
 8006d86:	4b23      	ldr	r3, [pc, #140]	; (8006e14 <BSP_IntHandler_Uart_Recive+0xf0>)
 8006d88:	f993 3000 	ldrsb.w	r3, [r3]
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d10d      	bne.n	8006dac <BSP_IntHandler_Uart_Recive+0x88>
		// put byte into the memory partition at the respective address
		*RxDataPtr = RxData;
 8006d90:	4b22      	ldr	r3, [pc, #136]	; (8006e1c <BSP_IntHandler_Uart_Recive+0xf8>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	79fa      	ldrb	r2, [r7, #7]
 8006d96:	701a      	strb	r2, [r3, #0]
		// increment the address to point to the next location
		RxDataPtr++;
 8006d98:	4b20      	ldr	r3, [pc, #128]	; (8006e1c <BSP_IntHandler_Uart_Recive+0xf8>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	4a1f      	ldr	r2, [pc, #124]	; (8006e1c <BSP_IntHandler_Uart_Recive+0xf8>)
 8006da0:	6013      	str	r3, [r2, #0]
		// increment the receive counter
		RxDataCtr++;
 8006da2:	4b21      	ldr	r3, [pc, #132]	; (8006e28 <BSP_IntHandler_Uart_Recive+0x104>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	3301      	adds	r3, #1
 8006da8:	4a1f      	ldr	r2, [pc, #124]	; (8006e28 <BSP_IntHandler_Uart_Recive+0x104>)
 8006daa:	6013      	str	r3, [r2, #0]
	}

	// is the character a "end of packet" character?                        // <4>
	if ( ( (int) RxData == End_of_Packet) && msg_receiving == 1) {
 8006dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006db0:	4a1c      	ldr	r2, [pc, #112]	; (8006e24 <BSP_IntHandler_Uart_Recive+0x100>)
 8006db2:	7812      	ldrb	r2, [r2, #0]
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d124      	bne.n	8006e02 <BSP_IntHandler_Uart_Recive+0xde>
 8006db8:	4b16      	ldr	r3, [pc, #88]	; (8006e14 <BSP_IntHandler_Uart_Recive+0xf0>)
 8006dba:	f993 3000 	ldrsb.w	r3, [r3]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d11f      	bne.n	8006e02 <BSP_IntHandler_Uart_Recive+0xde>
		// send the message to the application task - to that end put a pointer to
		// the memory block into the queue to the application task
		OSQPost ( (OS_Q      *) &UART_ISR,
 8006dc2:	4b16      	ldr	r3, [pc, #88]	; (8006e1c <BSP_IntHandler_Uart_Recive+0xf8>)
 8006dc4:	681a      	ldr	r2, [r3, #0]
			  (void      *) (RxDataPtr - RxDataCtr),
 8006dc6:	4b18      	ldr	r3, [pc, #96]	; (8006e28 <BSP_IntHandler_Uart_Recive+0x104>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	425b      	negs	r3, r3
 8006dcc:	18d1      	adds	r1, r2, r3
			  (OS_MSG_SIZE) RxDataCtr + 1,
 8006dce:	4b16      	ldr	r3, [pc, #88]	; (8006e28 <BSP_IntHandler_Uart_Recive+0x104>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	b29b      	uxth	r3, r3
		OSQPost ( (OS_Q      *) &UART_ISR,
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	b29a      	uxth	r2, r3
 8006dd8:	1d3b      	adds	r3, r7, #4
 8006dda:	9300      	str	r3, [sp, #0]
 8006ddc:	2300      	movs	r3, #0
 8006dde:	4813      	ldr	r0, [pc, #76]	; (8006e2c <BSP_IntHandler_Uart_Recive+0x108>)
 8006de0:	f7fe ff16 	bl	8005c10 <OSQPost>
			  (OS_OPT)      OS_OPT_POST_FIFO,
			  (OS_ERR    *) &err);
		if (err != OS_ERR_NONE)
 8006de4:	88bb      	ldrh	r3, [r7, #4]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d002      	beq.n	8006df0 <BSP_IntHandler_Uart_Recive+0xcc>
			APP_TRACE_DBG ("Error OSQPost: BSP_IntHandler_Uart_Recive\n");
 8006dea:	4811      	ldr	r0, [pc, #68]	; (8006e30 <BSP_IntHandler_Uart_Recive+0x10c>)
 8006dec:	f001 fcaa 	bl	8008744 <puts>

		// clear the receive pointer and counter                              // <5>
		RxDataPtr = NULL;
 8006df0:	4b0a      	ldr	r3, [pc, #40]	; (8006e1c <BSP_IntHandler_Uart_Recive+0xf8>)
 8006df2:	2200      	movs	r2, #0
 8006df4:	601a      	str	r2, [r3, #0]
		RxDataCtr = 0;
 8006df6:	4b0c      	ldr	r3, [pc, #48]	; (8006e28 <BSP_IntHandler_Uart_Recive+0x104>)
 8006df8:	2200      	movs	r2, #0
 8006dfa:	601a      	str	r2, [r3, #0]
		// ready for a next message
		msg_receiving = 0;
 8006dfc:	4b05      	ldr	r3, [pc, #20]	; (8006e14 <BSP_IntHandler_Uart_Recive+0xf0>)
 8006dfe:	2200      	movs	r2, #0
 8006e00:	701a      	strb	r2, [r3, #0]
	}
}
 8006e02:	bf00      	nop
 8006e04:	3708      	adds	r7, #8
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	48020200 	.word	0x48020200
 8006e10:	20000028 	.word	0x20000028
 8006e14:	200019e8 	.word	0x200019e8
 8006e18:	20001ab8 	.word	0x20001ab8
 8006e1c:	200019ec 	.word	0x200019ec
 8006e20:	0800e808 	.word	0x0800e808
 8006e24:	20000029 	.word	0x20000029
 8006e28:	200019f0 	.word	0x200019f0
 8006e2c:	20001a88 	.word	0x20001a88
 8006e30:	0800e834 	.word	0x0800e834

08006e34 <BSP_IntHandlerSCU>:
 * \params   none
 * \returns  none
 * \brief    handle an interrupt
 */
void BSP_IntHandlerSCU (void)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_SCU);
 8006e38:	2000      	movs	r0, #0
 8006e3a:	f000 fabf 	bl	80073bc <BSP_IntHandler>
}
 8006e3e:	bf00      	nop
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <BSP_IntHandlerERU0_00>:
void BSP_IntHandlerERU0_00 (void)
{
 8006e42:	b580      	push	{r7, lr}
 8006e44:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU0_00);
 8006e46:	2001      	movs	r0, #1
 8006e48:	f000 fab8 	bl	80073bc <BSP_IntHandler>
}
 8006e4c:	bf00      	nop
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <BSP_IntHandlerERU0_01>:
void BSP_IntHandlerERU0_01 (void)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU0_01);
 8006e54:	2002      	movs	r0, #2
 8006e56:	f000 fab1 	bl	80073bc <BSP_IntHandler>
}
 8006e5a:	bf00      	nop
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <BSP_IntHandlerERU0_02>:
void BSP_IntHandlerERU0_02 (void)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU0_02);
 8006e62:	2003      	movs	r0, #3
 8006e64:	f000 faaa 	bl	80073bc <BSP_IntHandler>
}
 8006e68:	bf00      	nop
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <BSP_IntHandlerERU0_03>:
void BSP_IntHandlerERU0_03 (void)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU0_03);
 8006e70:	2004      	movs	r0, #4
 8006e72:	f000 faa3 	bl	80073bc <BSP_IntHandler>
}
 8006e76:	bf00      	nop
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <BSP_IntHandlerERU1_00>:
void BSP_IntHandlerERU1_00 (void)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU1_00);
 8006e7e:	2005      	movs	r0, #5
 8006e80:	f000 fa9c 	bl	80073bc <BSP_IntHandler>
}
 8006e84:	bf00      	nop
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <BSP_IntHandlerERU1_01>:
void BSP_IntHandlerERU1_01 (void)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU1_01);
 8006e8c:	2006      	movs	r0, #6
 8006e8e:	f000 fa95 	bl	80073bc <BSP_IntHandler>
}
 8006e92:	bf00      	nop
 8006e94:	bd80      	pop	{r7, pc}

08006e96 <BSP_IntHandlerERU1_02>:
void BSP_IntHandlerERU1_02 (void)
{
 8006e96:	b580      	push	{r7, lr}
 8006e98:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU1_02);
 8006e9a:	2007      	movs	r0, #7
 8006e9c:	f000 fa8e 	bl	80073bc <BSP_IntHandler>
}
 8006ea0:	bf00      	nop
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <BSP_IntHandlerERU1_03>:
void BSP_IntHandlerERU1_03 (void)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU1_03);
 8006ea8:	2008      	movs	r0, #8
 8006eaa:	f000 fa87 	bl	80073bc <BSP_IntHandler>
}
 8006eae:	bf00      	nop
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <BSP_IntHandlerPMU0_00>:
void BSP_IntHandlerPMU0_00 (void)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_PMU0_00);
 8006eb6:	200c      	movs	r0, #12
 8006eb8:	f000 fa80 	bl	80073bc <BSP_IntHandler>
}
 8006ebc:	bf00      	nop
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <BSP_IntHandlerVADC0_C0_00>:
void BSP_IntHandlerVADC0_C0_00 (void)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_C0_00);
 8006ec4:	200e      	movs	r0, #14
 8006ec6:	f000 fa79 	bl	80073bc <BSP_IntHandler>
}
 8006eca:	bf00      	nop
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <BSP_IntHandlerVADC0_C0_01>:
void BSP_IntHandlerVADC0_C0_01 (void)
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_C0_01);
 8006ed2:	200f      	movs	r0, #15
 8006ed4:	f000 fa72 	bl	80073bc <BSP_IntHandler>
}
 8006ed8:	bf00      	nop
 8006eda:	bd80      	pop	{r7, pc}

08006edc <BSP_IntHandlerVADC0_C0_02>:
void BSP_IntHandlerVADC0_C0_02 (void)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_C0_02);
 8006ee0:	2010      	movs	r0, #16
 8006ee2:	f000 fa6b 	bl	80073bc <BSP_IntHandler>
}
 8006ee6:	bf00      	nop
 8006ee8:	bd80      	pop	{r7, pc}

08006eea <BSP_IntHandlerVADC0_C0_03>:
void BSP_IntHandlerVADC0_C0_03 (void)
{
 8006eea:	b580      	push	{r7, lr}
 8006eec:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_C0_03);
 8006eee:	2011      	movs	r0, #17
 8006ef0:	f000 fa64 	bl	80073bc <BSP_IntHandler>
}
 8006ef4:	bf00      	nop
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <BSP_IntHandlerVADC0_G0_00>:
void BSP_IntHandlerVADC0_G0_00 (void)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G0_00);
 8006efc:	2012      	movs	r0, #18
 8006efe:	f000 fa5d 	bl	80073bc <BSP_IntHandler>
}
 8006f02:	bf00      	nop
 8006f04:	bd80      	pop	{r7, pc}

08006f06 <BSP_IntHandlerVADC0_G0_01>:
void BSP_IntHandlerVADC0_G0_01 (void)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G0_01);
 8006f0a:	2013      	movs	r0, #19
 8006f0c:	f000 fa56 	bl	80073bc <BSP_IntHandler>
}
 8006f10:	bf00      	nop
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <BSP_IntHandlerVADC0_G0_02>:
void BSP_IntHandlerVADC0_G0_02 (void)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G0_02);
 8006f18:	2014      	movs	r0, #20
 8006f1a:	f000 fa4f 	bl	80073bc <BSP_IntHandler>
}
 8006f1e:	bf00      	nop
 8006f20:	bd80      	pop	{r7, pc}

08006f22 <BSP_IntHandlerVADC0_G0_03>:
void BSP_IntHandlerVADC0_G0_03 (void)
{
 8006f22:	b580      	push	{r7, lr}
 8006f24:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G0_03);
 8006f26:	2015      	movs	r0, #21
 8006f28:	f000 fa48 	bl	80073bc <BSP_IntHandler>
}
 8006f2c:	bf00      	nop
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <BSP_IntHandlerVADC0_G1_00>:
void BSP_IntHandlerVADC0_G1_00 (void)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G1_00);
 8006f34:	2016      	movs	r0, #22
 8006f36:	f000 fa41 	bl	80073bc <BSP_IntHandler>
}
 8006f3a:	bf00      	nop
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <BSP_IntHandlerVADC0_G1_01>:
void BSP_IntHandlerVADC0_G1_01 (void)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G1_01);
 8006f42:	2017      	movs	r0, #23
 8006f44:	f000 fa3a 	bl	80073bc <BSP_IntHandler>
}
 8006f48:	bf00      	nop
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <BSP_IntHandlerVADC0_G1_02>:
void BSP_IntHandlerVADC0_G1_02 (void)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G1_02);
 8006f50:	2018      	movs	r0, #24
 8006f52:	f000 fa33 	bl	80073bc <BSP_IntHandler>
}
 8006f56:	bf00      	nop
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <BSP_IntHandlerVADC0_G1_03>:
void BSP_IntHandlerVADC0_G1_03 (void)
{
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G1_03);
 8006f5e:	2019      	movs	r0, #25
 8006f60:	f000 fa2c 	bl	80073bc <BSP_IntHandler>
}
 8006f64:	bf00      	nop
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <BSP_IntHandlerVADC0_G2_00>:
void BSP_IntHandlerVADC0_G2_00 (void)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G2_00);
 8006f6c:	201a      	movs	r0, #26
 8006f6e:	f000 fa25 	bl	80073bc <BSP_IntHandler>
}
 8006f72:	bf00      	nop
 8006f74:	bd80      	pop	{r7, pc}

08006f76 <BSP_IntHandlerVADC0_G2_01>:
void BSP_IntHandlerVADC0_G2_01 (void)
{
 8006f76:	b580      	push	{r7, lr}
 8006f78:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G2_01);
 8006f7a:	201b      	movs	r0, #27
 8006f7c:	f000 fa1e 	bl	80073bc <BSP_IntHandler>
}
 8006f80:	bf00      	nop
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <BSP_IntHandlerVADC0_G2_02>:
void BSP_IntHandlerVADC0_G2_02 (void)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G2_02);
 8006f88:	201c      	movs	r0, #28
 8006f8a:	f000 fa17 	bl	80073bc <BSP_IntHandler>
}
 8006f8e:	bf00      	nop
 8006f90:	bd80      	pop	{r7, pc}

08006f92 <BSP_IntHandlerVADC0_G2_03>:
void BSP_IntHandlerVADC0_G2_03 (void)
{
 8006f92:	b580      	push	{r7, lr}
 8006f94:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G2_03);
 8006f96:	201d      	movs	r0, #29
 8006f98:	f000 fa10 	bl	80073bc <BSP_IntHandler>
}
 8006f9c:	bf00      	nop
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <BSP_IntHandlerVADC0_G3_00>:
void BSP_IntHandlerVADC0_G3_00 (void)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G3_00);
 8006fa4:	201e      	movs	r0, #30
 8006fa6:	f000 fa09 	bl	80073bc <BSP_IntHandler>
}
 8006faa:	bf00      	nop
 8006fac:	bd80      	pop	{r7, pc}

08006fae <BSP_IntHandlerVADC0_G3_01>:
void BSP_IntHandlerVADC0_G3_01 (void)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G3_01);
 8006fb2:	201f      	movs	r0, #31
 8006fb4:	f000 fa02 	bl	80073bc <BSP_IntHandler>
}
 8006fb8:	bf00      	nop
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <BSP_IntHandlerVADC0_G3_02>:
void BSP_IntHandlerVADC0_G3_02 (void)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G3_02);
 8006fc0:	2020      	movs	r0, #32
 8006fc2:	f000 f9fb 	bl	80073bc <BSP_IntHandler>
}
 8006fc6:	bf00      	nop
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <BSP_IntHandlerVADC0_G3_03>:
void BSP_IntHandlerVADC0_G3_03 (void)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G3_03);
 8006fce:	2021      	movs	r0, #33	; 0x21
 8006fd0:	f000 f9f4 	bl	80073bc <BSP_IntHandler>
}
 8006fd4:	bf00      	nop
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <BSP_IntHandlerDSD0_00>:
void BSP_IntHandlerDSD0_00 (void)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_00);
 8006fdc:	2022      	movs	r0, #34	; 0x22
 8006fde:	f000 f9ed 	bl	80073bc <BSP_IntHandler>
}
 8006fe2:	bf00      	nop
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <BSP_IntHandlerDSD0_01>:
void BSP_IntHandlerDSD0_01 (void)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_01);
 8006fea:	2023      	movs	r0, #35	; 0x23
 8006fec:	f000 f9e6 	bl	80073bc <BSP_IntHandler>
}
 8006ff0:	bf00      	nop
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <BSP_IntHandlerDSD0_02>:
void BSP_IntHandlerDSD0_02 (void)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_02);
 8006ff8:	2024      	movs	r0, #36	; 0x24
 8006ffa:	f000 f9df 	bl	80073bc <BSP_IntHandler>
}
 8006ffe:	bf00      	nop
 8007000:	bd80      	pop	{r7, pc}

08007002 <BSP_IntHandlerDSD0_03>:
void BSP_IntHandlerDSD0_03 (void)
{
 8007002:	b580      	push	{r7, lr}
 8007004:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_03);
 8007006:	2025      	movs	r0, #37	; 0x25
 8007008:	f000 f9d8 	bl	80073bc <BSP_IntHandler>
}
 800700c:	bf00      	nop
 800700e:	bd80      	pop	{r7, pc}

08007010 <BSP_IntHandlerDSD0_04>:
void BSP_IntHandlerDSD0_04 (void)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_04);
 8007014:	2026      	movs	r0, #38	; 0x26
 8007016:	f000 f9d1 	bl	80073bc <BSP_IntHandler>
}
 800701a:	bf00      	nop
 800701c:	bd80      	pop	{r7, pc}

0800701e <BSP_IntHandlerDSD0_05>:
void BSP_IntHandlerDSD0_05 (void)
{
 800701e:	b580      	push	{r7, lr}
 8007020:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_05);
 8007022:	2027      	movs	r0, #39	; 0x27
 8007024:	f000 f9ca 	bl	80073bc <BSP_IntHandler>
}
 8007028:	bf00      	nop
 800702a:	bd80      	pop	{r7, pc}

0800702c <BSP_IntHandlerDSD0_06>:
void BSP_IntHandlerDSD0_06 (void)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_06);
 8007030:	2028      	movs	r0, #40	; 0x28
 8007032:	f000 f9c3 	bl	80073bc <BSP_IntHandler>
}
 8007036:	bf00      	nop
 8007038:	bd80      	pop	{r7, pc}

0800703a <BSP_IntHandlerDSD0_07>:
void BSP_IntHandlerDSD0_07 (void)
{
 800703a:	b580      	push	{r7, lr}
 800703c:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_07);
 800703e:	2029      	movs	r0, #41	; 0x29
 8007040:	f000 f9bc 	bl	80073bc <BSP_IntHandler>
}
 8007044:	bf00      	nop
 8007046:	bd80      	pop	{r7, pc}

08007048 <BSP_IntHandlerDAC0_00>:
void BSP_IntHandlerDAC0_00 (void)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DAC0_00);
 800704c:	202a      	movs	r0, #42	; 0x2a
 800704e:	f000 f9b5 	bl	80073bc <BSP_IntHandler>
}
 8007052:	bf00      	nop
 8007054:	bd80      	pop	{r7, pc}

08007056 <BSP_IntHandlerDAC0_01>:
void BSP_IntHandlerDAC0_01 (void)
{
 8007056:	b580      	push	{r7, lr}
 8007058:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DAC0_01);
 800705a:	202b      	movs	r0, #43	; 0x2b
 800705c:	f000 f9ae 	bl	80073bc <BSP_IntHandler>
}
 8007060:	bf00      	nop
 8007062:	bd80      	pop	{r7, pc}

08007064 <BSP_IntHandlerCCU40_00>:
void BSP_IntHandlerCCU40_00 (void)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU40_00);
 8007068:	202c      	movs	r0, #44	; 0x2c
 800706a:	f000 f9a7 	bl	80073bc <BSP_IntHandler>
}
 800706e:	bf00      	nop
 8007070:	bd80      	pop	{r7, pc}

08007072 <BSP_IntHandlerCCU40_01>:
void BSP_IntHandlerCCU40_01 (void)
{
 8007072:	b580      	push	{r7, lr}
 8007074:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU40_01);
 8007076:	202d      	movs	r0, #45	; 0x2d
 8007078:	f000 f9a0 	bl	80073bc <BSP_IntHandler>
}
 800707c:	bf00      	nop
 800707e:	bd80      	pop	{r7, pc}

08007080 <BSP_IntHandlerCCU40_02>:
void BSP_IntHandlerCCU40_02 (void)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU40_02);
 8007084:	202e      	movs	r0, #46	; 0x2e
 8007086:	f000 f999 	bl	80073bc <BSP_IntHandler>
}
 800708a:	bf00      	nop
 800708c:	bd80      	pop	{r7, pc}

0800708e <BSP_IntHandlerCCU40_03>:
void BSP_IntHandlerCCU40_03 (void)
{
 800708e:	b580      	push	{r7, lr}
 8007090:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU40_03);
 8007092:	202f      	movs	r0, #47	; 0x2f
 8007094:	f000 f992 	bl	80073bc <BSP_IntHandler>
}
 8007098:	bf00      	nop
 800709a:	bd80      	pop	{r7, pc}

0800709c <BSP_IntHandlerCCU41_00>:
void BSP_IntHandlerCCU41_00 (void)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU41_00);
 80070a0:	2030      	movs	r0, #48	; 0x30
 80070a2:	f000 f98b 	bl	80073bc <BSP_IntHandler>
}
 80070a6:	bf00      	nop
 80070a8:	bd80      	pop	{r7, pc}

080070aa <BSP_IntHandlerCCU41_01>:
void BSP_IntHandlerCCU41_01 (void)
{
 80070aa:	b580      	push	{r7, lr}
 80070ac:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU41_01);
 80070ae:	2031      	movs	r0, #49	; 0x31
 80070b0:	f000 f984 	bl	80073bc <BSP_IntHandler>
}
 80070b4:	bf00      	nop
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <BSP_IntHandlerCCU41_02>:
void BSP_IntHandlerCCU41_02 (void)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU41_02);
 80070bc:	2032      	movs	r0, #50	; 0x32
 80070be:	f000 f97d 	bl	80073bc <BSP_IntHandler>
}
 80070c2:	bf00      	nop
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <BSP_IntHandlerCCU41_03>:
void BSP_IntHandlerCCU41_03 (void)
{
 80070c6:	b580      	push	{r7, lr}
 80070c8:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU41_03);
 80070ca:	2033      	movs	r0, #51	; 0x33
 80070cc:	f000 f976 	bl	80073bc <BSP_IntHandler>
}
 80070d0:	bf00      	nop
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <BSP_IntHandlerCCU42_00>:
void BSP_IntHandlerCCU42_00 (void)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU42_00);
 80070d8:	2034      	movs	r0, #52	; 0x34
 80070da:	f000 f96f 	bl	80073bc <BSP_IntHandler>
}
 80070de:	bf00      	nop
 80070e0:	bd80      	pop	{r7, pc}

080070e2 <BSP_IntHandlerCCU42_01>:
void BSP_IntHandlerCCU42_01 (void)
{
 80070e2:	b580      	push	{r7, lr}
 80070e4:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU42_01);
 80070e6:	2035      	movs	r0, #53	; 0x35
 80070e8:	f000 f968 	bl	80073bc <BSP_IntHandler>
}
 80070ec:	bf00      	nop
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <BSP_IntHandlerCCU42_02>:
void BSP_IntHandlerCCU42_02 (void)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU42_02);
 80070f4:	2036      	movs	r0, #54	; 0x36
 80070f6:	f000 f961 	bl	80073bc <BSP_IntHandler>
}
 80070fa:	bf00      	nop
 80070fc:	bd80      	pop	{r7, pc}

080070fe <BSP_IntHandlerCCU42_03>:
void BSP_IntHandlerCCU42_03 (void)
{
 80070fe:	b580      	push	{r7, lr}
 8007100:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU42_03);
 8007102:	2037      	movs	r0, #55	; 0x37
 8007104:	f000 f95a 	bl	80073bc <BSP_IntHandler>
}
 8007108:	bf00      	nop
 800710a:	bd80      	pop	{r7, pc}

0800710c <BSP_IntHandlerCCU43_00>:
void BSP_IntHandlerCCU43_00 (void)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU43_00);
 8007110:	2038      	movs	r0, #56	; 0x38
 8007112:	f000 f953 	bl	80073bc <BSP_IntHandler>
}
 8007116:	bf00      	nop
 8007118:	bd80      	pop	{r7, pc}

0800711a <BSP_IntHandlerCCU43_01>:
void BSP_IntHandlerCCU43_01 (void)
{
 800711a:	b580      	push	{r7, lr}
 800711c:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU43_01);
 800711e:	2039      	movs	r0, #57	; 0x39
 8007120:	f000 f94c 	bl	80073bc <BSP_IntHandler>
}
 8007124:	bf00      	nop
 8007126:	bd80      	pop	{r7, pc}

08007128 <BSP_IntHandlerCCU43_02>:
void BSP_IntHandlerCCU43_02 (void)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU43_02);
 800712c:	203a      	movs	r0, #58	; 0x3a
 800712e:	f000 f945 	bl	80073bc <BSP_IntHandler>
}
 8007132:	bf00      	nop
 8007134:	bd80      	pop	{r7, pc}

08007136 <BSP_IntHandlerCCU43_03>:
void BSP_IntHandlerCCU43_03 (void)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU43_03);
 800713a:	203b      	movs	r0, #59	; 0x3b
 800713c:	f000 f93e 	bl	80073bc <BSP_IntHandler>
}
 8007140:	bf00      	nop
 8007142:	bd80      	pop	{r7, pc}

08007144 <BSP_IntHandlerCCU80_00>:
void BSP_IntHandlerCCU80_00 (void)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU80_00);
 8007148:	203c      	movs	r0, #60	; 0x3c
 800714a:	f000 f937 	bl	80073bc <BSP_IntHandler>
}
 800714e:	bf00      	nop
 8007150:	bd80      	pop	{r7, pc}

08007152 <BSP_IntHandlerCCU80_01>:
void BSP_IntHandlerCCU80_01 (void)
{
 8007152:	b580      	push	{r7, lr}
 8007154:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU80_01);
 8007156:	203d      	movs	r0, #61	; 0x3d
 8007158:	f000 f930 	bl	80073bc <BSP_IntHandler>
}
 800715c:	bf00      	nop
 800715e:	bd80      	pop	{r7, pc}

08007160 <BSP_IntHandlerCCU80_02>:
void BSP_IntHandlerCCU80_02 (void)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU80_02);
 8007164:	203e      	movs	r0, #62	; 0x3e
 8007166:	f000 f929 	bl	80073bc <BSP_IntHandler>
}
 800716a:	bf00      	nop
 800716c:	bd80      	pop	{r7, pc}

0800716e <BSP_IntHandlerCCU80_03>:
void BSP_IntHandlerCCU80_03 (void)
{
 800716e:	b580      	push	{r7, lr}
 8007170:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU80_03);
 8007172:	203f      	movs	r0, #63	; 0x3f
 8007174:	f000 f922 	bl	80073bc <BSP_IntHandler>
}
 8007178:	bf00      	nop
 800717a:	bd80      	pop	{r7, pc}

0800717c <BSP_IntHandlerCCU81_00>:
void BSP_IntHandlerCCU81_00 (void)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU81_00);
 8007180:	2040      	movs	r0, #64	; 0x40
 8007182:	f000 f91b 	bl	80073bc <BSP_IntHandler>
}
 8007186:	bf00      	nop
 8007188:	bd80      	pop	{r7, pc}

0800718a <BSP_IntHandlerCCU81_01>:
void BSP_IntHandlerCCU81_01 (void)
{
 800718a:	b580      	push	{r7, lr}
 800718c:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU81_01);
 800718e:	2041      	movs	r0, #65	; 0x41
 8007190:	f000 f914 	bl	80073bc <BSP_IntHandler>
}
 8007194:	bf00      	nop
 8007196:	bd80      	pop	{r7, pc}

08007198 <BSP_IntHandlerCCU81_02>:
void BSP_IntHandlerCCU81_02 (void)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU81_02);
 800719c:	2042      	movs	r0, #66	; 0x42
 800719e:	f000 f90d 	bl	80073bc <BSP_IntHandler>
}
 80071a2:	bf00      	nop
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <BSP_IntHandlerCCU81_03>:
void BSP_IntHandlerCCU81_03 (void)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU81_03);
 80071aa:	2043      	movs	r0, #67	; 0x43
 80071ac:	f000 f906 	bl	80073bc <BSP_IntHandler>
}
 80071b0:	bf00      	nop
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <BSP_IntHandlerPOSIF0_00>:
void BSP_IntHandlerPOSIF0_00 (void)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_POSIF0_00);
 80071b8:	2044      	movs	r0, #68	; 0x44
 80071ba:	f000 f8ff 	bl	80073bc <BSP_IntHandler>
}
 80071be:	bf00      	nop
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <BSP_IntHandlerPOSIF0_01>:
void BSP_IntHandlerPOSIF0_01 (void)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_POSIF0_01);
 80071c6:	2045      	movs	r0, #69	; 0x45
 80071c8:	f000 f8f8 	bl	80073bc <BSP_IntHandler>
}
 80071cc:	bf00      	nop
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <BSP_IntHandlerPOSIF1_00>:
void BSP_IntHandlerPOSIF1_00 (void)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_POSIF1_00);
 80071d4:	2046      	movs	r0, #70	; 0x46
 80071d6:	f000 f8f1 	bl	80073bc <BSP_IntHandler>
}
 80071da:	bf00      	nop
 80071dc:	bd80      	pop	{r7, pc}

080071de <BSP_IntHandlerPOSIF1_01>:
void BSP_IntHandlerPOSIF1_01 (void)
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_POSIF1_01);
 80071e2:	2047      	movs	r0, #71	; 0x47
 80071e4:	f000 f8ea 	bl	80073bc <BSP_IntHandler>
}
 80071e8:	bf00      	nop
 80071ea:	bd80      	pop	{r7, pc}

080071ec <BSP_IntHandlerCAN0_00>:
void BSP_IntHandlerCAN0_00 (void)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_00);
 80071f0:	204c      	movs	r0, #76	; 0x4c
 80071f2:	f000 f8e3 	bl	80073bc <BSP_IntHandler>
}
 80071f6:	bf00      	nop
 80071f8:	bd80      	pop	{r7, pc}

080071fa <BSP_IntHandlerCAN0_01>:
void BSP_IntHandlerCAN0_01 (void)
{
 80071fa:	b580      	push	{r7, lr}
 80071fc:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_01);
 80071fe:	204d      	movs	r0, #77	; 0x4d
 8007200:	f000 f8dc 	bl	80073bc <BSP_IntHandler>
}
 8007204:	bf00      	nop
 8007206:	bd80      	pop	{r7, pc}

08007208 <BSP_IntHandlerCAN0_02>:
void BSP_IntHandlerCAN0_02 (void)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_02);
 800720c:	204e      	movs	r0, #78	; 0x4e
 800720e:	f000 f8d5 	bl	80073bc <BSP_IntHandler>
}
 8007212:	bf00      	nop
 8007214:	bd80      	pop	{r7, pc}

08007216 <BSP_IntHandlerCAN0_03>:
void BSP_IntHandlerCAN0_03 (void)
{
 8007216:	b580      	push	{r7, lr}
 8007218:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_03);
 800721a:	204f      	movs	r0, #79	; 0x4f
 800721c:	f000 f8ce 	bl	80073bc <BSP_IntHandler>
}
 8007220:	bf00      	nop
 8007222:	bd80      	pop	{r7, pc}

08007224 <BSP_IntHandlerCAN0_04>:
void BSP_IntHandlerCAN0_04 (void)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_04);
 8007228:	2050      	movs	r0, #80	; 0x50
 800722a:	f000 f8c7 	bl	80073bc <BSP_IntHandler>
}
 800722e:	bf00      	nop
 8007230:	bd80      	pop	{r7, pc}

08007232 <BSP_IntHandlerCAN0_05>:
void BSP_IntHandlerCAN0_05 (void)
{
 8007232:	b580      	push	{r7, lr}
 8007234:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_05);
 8007236:	2051      	movs	r0, #81	; 0x51
 8007238:	f000 f8c0 	bl	80073bc <BSP_IntHandler>
}
 800723c:	bf00      	nop
 800723e:	bd80      	pop	{r7, pc}

08007240 <BSP_IntHandlerCAN0_06>:
void BSP_IntHandlerCAN0_06 (void)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_06);
 8007244:	2052      	movs	r0, #82	; 0x52
 8007246:	f000 f8b9 	bl	80073bc <BSP_IntHandler>
}
 800724a:	bf00      	nop
 800724c:	bd80      	pop	{r7, pc}

0800724e <BSP_IntHandlerCAN0_07>:
void BSP_IntHandlerCAN0_07 (void)
{
 800724e:	b580      	push	{r7, lr}
 8007250:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_07);
 8007252:	2053      	movs	r0, #83	; 0x53
 8007254:	f000 f8b2 	bl	80073bc <BSP_IntHandler>
}
 8007258:	bf00      	nop
 800725a:	bd80      	pop	{r7, pc}

0800725c <BSP_IntHandlerUSIC0_00>:
void BSP_IntHandlerUSIC0_00 (void)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC0_00);
 8007260:	2054      	movs	r0, #84	; 0x54
 8007262:	f000 f8ab 	bl	80073bc <BSP_IntHandler>
}
 8007266:	bf00      	nop
 8007268:	bd80      	pop	{r7, pc}

0800726a <BSP_IntHandlerUSIC0_01>:
void BSP_IntHandlerUSIC0_01 (void)
{
 800726a:	b580      	push	{r7, lr}
 800726c:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC0_01);
 800726e:	2055      	movs	r0, #85	; 0x55
 8007270:	f000 f8a4 	bl	80073bc <BSP_IntHandler>
}
 8007274:	bf00      	nop
 8007276:	bd80      	pop	{r7, pc}

08007278 <BSP_IntHandlerUSIC0_02>:
void BSP_IntHandlerUSIC0_02 (void)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC0_02);
 800727c:	2056      	movs	r0, #86	; 0x56
 800727e:	f000 f89d 	bl	80073bc <BSP_IntHandler>
}
 8007282:	bf00      	nop
 8007284:	bd80      	pop	{r7, pc}

08007286 <BSP_IntHandlerUSIC0_03>:
void BSP_IntHandlerUSIC0_03 (void)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC0_03);
 800728a:	2057      	movs	r0, #87	; 0x57
 800728c:	f000 f896 	bl	80073bc <BSP_IntHandler>
}
 8007290:	bf00      	nop
 8007292:	bd80      	pop	{r7, pc}

08007294 <BSP_IntHandlerUSIC0_04>:
void BSP_IntHandlerUSIC0_04 (void)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC0_04);
 8007298:	2058      	movs	r0, #88	; 0x58
 800729a:	f000 f88f 	bl	80073bc <BSP_IntHandler>
}
 800729e:	bf00      	nop
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <BSP_IntHandlerUSIC0_05>:
void BSP_IntHandlerUSIC0_05 (void)
{
 80072a2:	b580      	push	{r7, lr}
 80072a4:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC0_05);
 80072a6:	2059      	movs	r0, #89	; 0x59
 80072a8:	f000 f888 	bl	80073bc <BSP_IntHandler>
}
 80072ac:	bf00      	nop
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <BSP_IntHandlerUSIC1_00>:
void BSP_IntHandlerUSIC1_00 (void)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC1_00);
 80072b4:	205a      	movs	r0, #90	; 0x5a
 80072b6:	f000 f881 	bl	80073bc <BSP_IntHandler>
}
 80072ba:	bf00      	nop
 80072bc:	bd80      	pop	{r7, pc}

080072be <BSP_IntHandlerUSIC1_01>:
void BSP_IntHandlerUSIC1_01 (void)
{
 80072be:	b580      	push	{r7, lr}
 80072c0:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC1_01);
 80072c2:	205b      	movs	r0, #91	; 0x5b
 80072c4:	f000 f87a 	bl	80073bc <BSP_IntHandler>
}
 80072c8:	bf00      	nop
 80072ca:	bd80      	pop	{r7, pc}

080072cc <BSP_IntHandlerUSIC1_02>:
void BSP_IntHandlerUSIC1_02 (void)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC1_02);
 80072d0:	205c      	movs	r0, #92	; 0x5c
 80072d2:	f000 f873 	bl	80073bc <BSP_IntHandler>
}
 80072d6:	bf00      	nop
 80072d8:	bd80      	pop	{r7, pc}

080072da <BSP_IntHandlerUSIC1_03>:
void BSP_IntHandlerUSIC1_03 (void)
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC1_03);
 80072de:	205d      	movs	r0, #93	; 0x5d
 80072e0:	f000 f86c 	bl	80073bc <BSP_IntHandler>
}
 80072e4:	bf00      	nop
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <BSP_IntHandlerUSIC1_04>:
void BSP_IntHandlerUSIC1_04 (void)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC1_04);
 80072ec:	205e      	movs	r0, #94	; 0x5e
 80072ee:	f000 f865 	bl	80073bc <BSP_IntHandler>
}
 80072f2:	bf00      	nop
 80072f4:	bd80      	pop	{r7, pc}

080072f6 <BSP_IntHandlerUSIC1_05>:
void BSP_IntHandlerUSIC1_05 (void)
{
 80072f6:	b580      	push	{r7, lr}
 80072f8:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC1_05);
 80072fa:	205f      	movs	r0, #95	; 0x5f
 80072fc:	f000 f85e 	bl	80073bc <BSP_IntHandler>
}
 8007300:	bf00      	nop
 8007302:	bd80      	pop	{r7, pc}

08007304 <BSP_IntHandlerUSIC2_00>:
void BSP_IntHandlerUSIC2_00 (void)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC2_00);
 8007308:	2060      	movs	r0, #96	; 0x60
 800730a:	f000 f857 	bl	80073bc <BSP_IntHandler>
}
 800730e:	bf00      	nop
 8007310:	bd80      	pop	{r7, pc}

08007312 <BSP_IntHandlerUSIC2_01>:
void BSP_IntHandlerUSIC2_01 (void)
{
 8007312:	b580      	push	{r7, lr}
 8007314:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC2_01);
 8007316:	2061      	movs	r0, #97	; 0x61
 8007318:	f000 f850 	bl	80073bc <BSP_IntHandler>
}
 800731c:	bf00      	nop
 800731e:	bd80      	pop	{r7, pc}

08007320 <BSP_IntHandlerUSIC2_02>:
void BSP_IntHandlerUSIC2_02 (void)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC2_02);
 8007324:	2062      	movs	r0, #98	; 0x62
 8007326:	f000 f849 	bl	80073bc <BSP_IntHandler>
}
 800732a:	bf00      	nop
 800732c:	bd80      	pop	{r7, pc}

0800732e <BSP_IntHandlerUSIC2_03>:
void BSP_IntHandlerUSIC2_03 (void)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC2_03);
 8007332:	2063      	movs	r0, #99	; 0x63
 8007334:	f000 f842 	bl	80073bc <BSP_IntHandler>
}
 8007338:	bf00      	nop
 800733a:	bd80      	pop	{r7, pc}

0800733c <BSP_IntHandlerUSIC2_04>:
void BSP_IntHandlerUSIC2_04 (void)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC2_04);
 8007340:	2064      	movs	r0, #100	; 0x64
 8007342:	f000 f83b 	bl	80073bc <BSP_IntHandler>
}
 8007346:	bf00      	nop
 8007348:	bd80      	pop	{r7, pc}

0800734a <BSP_IntHandlerUSIC2_05>:
void BSP_IntHandlerUSIC2_05 (void)
{
 800734a:	b580      	push	{r7, lr}
 800734c:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC2_05);
 800734e:	2065      	movs	r0, #101	; 0x65
 8007350:	f000 f834 	bl	80073bc <BSP_IntHandler>
}
 8007354:	bf00      	nop
 8007356:	bd80      	pop	{r7, pc}

08007358 <BSP_IntHandlerLEDTS0_00>:
void BSP_IntHandlerLEDTS0_00 (void)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_LEDTS0_00);
 800735c:	2066      	movs	r0, #102	; 0x66
 800735e:	f000 f82d 	bl	80073bc <BSP_IntHandler>
}
 8007362:	bf00      	nop
 8007364:	bd80      	pop	{r7, pc}

08007366 <BSP_IntHandlerFCE0_00>:
void BSP_IntHandlerFCE0_00 (void)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_FCE0_00);
 800736a:	2068      	movs	r0, #104	; 0x68
 800736c:	f000 f826 	bl	80073bc <BSP_IntHandler>
}
 8007370:	bf00      	nop
 8007372:	bd80      	pop	{r7, pc}

08007374 <BSP_IntHandlerGPDMA0_00>:
void BSP_IntHandlerGPDMA0_00 (void)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_GPDMA0_00);
 8007378:	2069      	movs	r0, #105	; 0x69
 800737a:	f000 f81f 	bl	80073bc <BSP_IntHandler>
}
 800737e:	bf00      	nop
 8007380:	bd80      	pop	{r7, pc}

08007382 <BSP_IntHandlerSDMMC0_00>:
void BSP_IntHandlerSDMMC0_00 (void)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_SDMMC0_00);
 8007386:	206a      	movs	r0, #106	; 0x6a
 8007388:	f000 f818 	bl	80073bc <BSP_IntHandler>
}
 800738c:	bf00      	nop
 800738e:	bd80      	pop	{r7, pc}

08007390 <BSP_IntHandlerUSB0_00>:
void BSP_IntHandlerUSB0_00 (void)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USB0_00);
 8007394:	206b      	movs	r0, #107	; 0x6b
 8007396:	f000 f811 	bl	80073bc <BSP_IntHandler>
}
 800739a:	bf00      	nop
 800739c:	bd80      	pop	{r7, pc}

0800739e <BSP_IntHandlerETH0_00>:
void BSP_IntHandlerETH0_00 (void)
{
 800739e:	b580      	push	{r7, lr}
 80073a0:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ETH0_00);
 80073a2:	206c      	movs	r0, #108	; 0x6c
 80073a4:	f000 f80a 	bl	80073bc <BSP_IntHandler>
}
 80073a8:	bf00      	nop
 80073aa:	bd80      	pop	{r7, pc}

080073ac <BSP_IntHandlerGPDMA1_00>:
void BSP_IntHandlerGPDMA1_00 (void)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_GPDMA1_00);
 80073b0:	206e      	movs	r0, #110	; 0x6e
 80073b2:	f000 f803 	bl	80073bc <BSP_IntHandler>
}
 80073b6:	bf00      	nop
 80073b8:	bd80      	pop	{r7, pc}
	...

080073bc <BSP_IntHandler>:
 * \params   int_id interrupt that will be handled
 * \returns  none
 * \brief    central interrupt handler
 */
static  void  BSP_IntHandler (CPU_DATA  int_id)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
	CPU_FNCT_VOID  isr;
	CPU_SR_ALLOC();
 80073c4:	2300      	movs	r3, #0
 80073c6:	60fb      	str	r3, [r7, #12]

	/* tell the OS that we are starting an ISR */
	CPU_CRITICAL_ENTER();
 80073c8:	f7f8 ff8a 	bl	80002e0 <CPU_SR_Save>
 80073cc:	60f8      	str	r0, [r7, #12]
	OSIntEnter();
 80073ce:	f7fc fce9 	bl	8003da4 <OSIntEnter>
	CPU_CRITICAL_EXIT();
 80073d2:	68f8      	ldr	r0, [r7, #12]
 80073d4:	f7f8 ff88 	bl	80002e8 <CPU_SR_Restore>

	if (int_id < BSP_INT_ID_MAX) {
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2b6f      	cmp	r3, #111	; 0x6f
 80073dc:	d809      	bhi.n	80073f2 <BSP_IntHandler+0x36>
		isr = BSP_IntVectTbl[int_id];
 80073de:	4a08      	ldr	r2, [pc, #32]	; (8007400 <BSP_IntHandler+0x44>)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073e6:	60bb      	str	r3, [r7, #8]
		if (isr != (CPU_FNCT_VOID) 0) {
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d001      	beq.n	80073f2 <BSP_IntHandler+0x36>
			isr();
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	4798      	blx	r3
		}
	}
	/* tell the OS that we are leaving an ISR */
	OSIntExit();
 80073f2:	f7fc fcf3 	bl	8003ddc <OSIntExit>
}
 80073f6:	bf00      	nop
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	20001828 	.word	0x20001828

08007404 <NVIC_EnableIRQ>:
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	4603      	mov	r3, r0
 800740c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800740e:	79fb      	ldrb	r3, [r7, #7]
 8007410:	f003 031f 	and.w	r3, r3, #31
 8007414:	2201      	movs	r2, #1
 8007416:	fa02 f103 	lsl.w	r1, r2, r3
 800741a:	4a05      	ldr	r2, [pc, #20]	; (8007430 <NVIC_EnableIRQ+0x2c>)
 800741c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007420:	095b      	lsrs	r3, r3, #5
 8007422:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8007426:	bf00      	nop
 8007428:	370c      	adds	r7, #12
 800742a:	46bd      	mov	sp, r7
 800742c:	bc80      	pop	{r7}
 800742e:	4770      	bx	lr
 8007430:	e000e100 	.word	0xe000e100

08007434 <NVIC_SetPriority>:
{
 8007434:	b480      	push	{r7}
 8007436:	b083      	sub	sp, #12
 8007438:	af00      	add	r7, sp, #0
 800743a:	4603      	mov	r3, r0
 800743c:	6039      	str	r1, [r7, #0]
 800743e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8007440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007444:	2b00      	cmp	r3, #0
 8007446:	da0b      	bge.n	8007460 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	b2da      	uxtb	r2, r3
 800744c:	490c      	ldr	r1, [pc, #48]	; (8007480 <NVIC_SetPriority+0x4c>)
 800744e:	79fb      	ldrb	r3, [r7, #7]
 8007450:	f003 030f 	and.w	r3, r3, #15
 8007454:	3b04      	subs	r3, #4
 8007456:	0092      	lsls	r2, r2, #2
 8007458:	b2d2      	uxtb	r2, r2
 800745a:	440b      	add	r3, r1
 800745c:	761a      	strb	r2, [r3, #24]
}
 800745e:	e009      	b.n	8007474 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	b2da      	uxtb	r2, r3
 8007464:	4907      	ldr	r1, [pc, #28]	; (8007484 <NVIC_SetPriority+0x50>)
 8007466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800746a:	0092      	lsls	r2, r2, #2
 800746c:	b2d2      	uxtb	r2, r2
 800746e:	440b      	add	r3, r1
 8007470:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007474:	bf00      	nop
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	bc80      	pop	{r7}
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop
 8007480:	e000ed00 	.word	0xe000ed00
 8007484:	e000e100 	.word	0xe000e100

08007488 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_CHECK_MODULE_PTR(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	60da      	str	r2, [r3, #12]
}
 800749c:	bf00      	nop
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bc80      	pop	{r7}
 80074a4:	4770      	bx	lr

080074a6 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 80074a6:	b480      	push	{r7}
 80074a8:	b083      	sub	sp, #12
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
 80074ae:	460b      	mov	r3, r1
 80074b0:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_CHECK_MODULE_PTR(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	68da      	ldr	r2, [r3, #12]
 80074b6:	78fb      	ldrb	r3, [r7, #3]
 80074b8:	2101      	movs	r1, #1
 80074ba:	fa01 f303 	lsl.w	r3, r1, r3
 80074be:	431a      	orrs	r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	60da      	str	r2, [r3, #12]
}
 80074c4:	bf00      	nop
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bc80      	pop	{r7}
 80074cc:	4770      	bx	lr

080074ce <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 80074ce:	b480      	push	{r7}
 80074d0:	b083      	sub	sp, #12
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2201      	movs	r2, #1
 80074da:	60da      	str	r2, [r3, #12]
}
 80074dc:	bf00      	nop
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bc80      	pop	{r7}
 80074e4:	4770      	bx	lr

080074e6 <XMC_CCU4_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StopTimer(XMC_CCU4_SLICE_t *const slice)
{
 80074e6:	b480      	push	{r7}
 80074e8:	b083      	sub	sp, #12
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  slice->TCCLR |= (uint32_t) CCU4_CC4_TCCLR_TRBC_Msk;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	f043 0201 	orr.w	r2, r3, #1
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	611a      	str	r2, [r3, #16]
}
 80074fa:	bf00      	nop
 80074fc:	370c      	adds	r7, #12
 80074fe:	46bd      	mov	sp, r7
 8007500:	bc80      	pop	{r7}
 8007502:	4770      	bx	lr

08007504 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	460b      	mov	r3, r1
 800750e:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  slice->PRS = (uint32_t) period_val;
 8007510:	887a      	ldrh	r2, [r7, #2]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	635a      	str	r2, [r3, #52]	; 0x34
}
 8007516:	bf00      	nop
 8007518:	370c      	adds	r7, #12
 800751a:	46bd      	mov	sp, r7
 800751c:	bc80      	pop	{r7}
 800751e:	4770      	bx	lr

08007520 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	460b      	mov	r3, r1
 800752a:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  slice->CRS = (uint32_t) compare_val;
 800752c:	887a      	ldrh	r2, [r7, #2]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007532:	bf00      	nop
 8007534:	370c      	adds	r7, #12
 8007536:	46bd      	mov	sp, r7
 8007538:	bc80      	pop	{r7}
 800753a:	4770      	bx	lr

0800753c <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	460b      	mov	r3, r1
 8007546:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800754e:	78fb      	ldrb	r3, [r7, #3]
 8007550:	2101      	movs	r1, #1
 8007552:	fa01 f303 	lsl.w	r3, r1, r3
 8007556:	431a      	orrs	r2, r3
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 800755e:	bf00      	nop
 8007560:	370c      	adds	r7, #12
 8007562:	46bd      	mov	sp, r7
 8007564:	bc80      	pop	{r7}
 8007566:	4770      	bx	lr

08007568 <BSP_ConfigCCU4_Timer>:
	.output_strength     = XMC_GPIO_OUTPUT_STRENGTH_MEDIUM,
};


_Bool BSP_ConfigCCU4_Timer(void)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	af00      	add	r7, sp, #0
  XMC_CCU4_Init(MODULE_PTR_CCU40, XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR);
 800756c:	2100      	movs	r1, #0
 800756e:	481e      	ldr	r0, [pc, #120]	; (80075e8 <BSP_ConfigCCU4_Timer+0x80>)
 8007570:	f000 f9d0 	bl	8007914 <XMC_CCU4_Init>
  /* Start the prescaler and restore clocks to slices */
  XMC_CCU4_StartPrescaler(MODULE_PTR_CCU40);
 8007574:	481c      	ldr	r0, [pc, #112]	; (80075e8 <BSP_ConfigCCU4_Timer+0x80>)
 8007576:	f7ff ff87 	bl	8007488 <XMC_CCU4_StartPrescaler>
  /* Start of CCU4 configurations *//* Ensure fCCU reaches CCU4 */
  XMC_CCU4_SetModuleClock(MODULE_PTR_CCU40, XMC_CCU4_CLOCK_SCU);
 800757a:	2100      	movs	r1, #0
 800757c:	481a      	ldr	r0, [pc, #104]	; (80075e8 <BSP_ConfigCCU4_Timer+0x80>)
 800757e:	f000 f9e5 	bl	800794c <XMC_CCU4_SetModuleClock>

  /* Initialize the Slice */
  XMC_CCU4_SLICE_CompareInit(SLICE_PTR_CCU40_CC40, &g_timer_object);
 8007582:	491a      	ldr	r1, [pc, #104]	; (80075ec <BSP_ConfigCCU4_Timer+0x84>)
 8007584:	481a      	ldr	r0, [pc, #104]	; (80075f0 <BSP_ConfigCCU4_Timer+0x88>)
 8007586:	f000 f9fb 	bl	8007980 <XMC_CCU4_SLICE_CompareInit>
  // XMC_CCU4_SLICE_CompareInit(SLICE_PTR_CCU40_CC41, &g_timer_object);

  XMC_CCU4_SLICE_SetTimerPeriodMatch(SLICE_PTR_CCU40_CC40, PWM_PERIOD_VALUE_PEN); // sollte man eine Frequenz von 1650Hz herausbekommen
 800758a:	f640 1127 	movw	r1, #2343	; 0x927
 800758e:	4818      	ldr	r0, [pc, #96]	; (80075f0 <BSP_ConfigCCU4_Timer+0x88>)
 8007590:	f7ff ffb8 	bl	8007504 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  // XMC_CCU4_SLICE_SetTimerPeriodMatch(SLICE_PTR_CCU40_CC41, PWM_PERIOD_VALUE_XY); // sollte man eine Frequenz von 1650Hz herausbekommen
  XMC_CCU4_SLICE_SetTimerCompareMatch(SLICE_PTR_CCU40_CC40, PWM_DEF_COMP_VALUE_UP);
 8007594:	2175      	movs	r1, #117	; 0x75
 8007596:	4816      	ldr	r0, [pc, #88]	; (80075f0 <BSP_ConfigCCU4_Timer+0x88>)
 8007598:	f7ff ffc2 	bl	8007520 <XMC_CCU4_SLICE_SetTimerCompareMatch>
  // XMC_CCU4_SLICE_SetTimerCompareMatch(SLICE_PTR_CCU40_CC41, PWM_DEF_COMP_VALUE_XY);
  /* Enable shadow transfer */
  XMC_CCU4_EnableShadowTransfer(MODULE_PTR_CCU40, XMC_CCU4_SHADOW_TRANSFER_SLICE_0);
 800759c:	2101      	movs	r1, #1
 800759e:	4812      	ldr	r0, [pc, #72]	; (80075e8 <BSP_ConfigCCU4_Timer+0x80>)
 80075a0:	f000 fa51 	bl	8007a46 <XMC_CCU4_EnableShadowTransfer>
  // XMC_CCU4_EnableShadowTransfer(MODULE_PTR_CCU40, XMC_CCU4_SHADOW_TRANSFER_SLICE_1);
  /* Enable External Start to Event 0 */
  XMC_CCU4_SLICE_StartConfig(SLICE_PTR_CCU40_CC40, XMC_CCU4_SLICE_EVENT_0, XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR);
 80075a4:	2201      	movs	r2, #1
 80075a6:	2101      	movs	r1, #1
 80075a8:	4811      	ldr	r0, [pc, #68]	; (80075f0 <BSP_ConfigCCU4_Timer+0x88>)
 80075aa:	f000 fa1f 	bl	80079ec <XMC_CCU4_SLICE_StartConfig>
  // XMC_CCU4_SLICE_StartConfig(SLICE_PTR_CCU40_CC41, XMC_CCU4_SLICE_EVENT_0, XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR);

  /* Enable compare match events */
  XMC_CCU4_SLICE_EnableEvent(SLICE_PTR_CCU40_CC40, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);
 80075ae:	2102      	movs	r1, #2
 80075b0:	480f      	ldr	r0, [pc, #60]	; (80075f0 <BSP_ConfigCCU4_Timer+0x88>)
 80075b2:	f7ff ffc3 	bl	800753c <XMC_CCU4_SLICE_EnableEvent>
  // XMC_CCU4_SLICE_EnableEvent(SLICE_PTR_CCU40_CC41, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);
  /* Connect compare match event to SR0 */
  XMC_CCU4_SLICE_SetInterruptNode(SLICE_PTR_CCU40_CC40, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP, XMC_CCU4_SLICE_SR_ID_0);
 80075b6:	2200      	movs	r2, #0
 80075b8:	2102      	movs	r1, #2
 80075ba:	480d      	ldr	r0, [pc, #52]	; (80075f0 <BSP_ConfigCCU4_Timer+0x88>)
 80075bc:	f000 fa54 	bl	8007a68 <XMC_CCU4_SLICE_SetInterruptNode>
  // XMC_CCU4_SLICE_SetInterruptNode(SLICE_PTR_CCU40_CC41, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP, XMC_CCU4_SLICE_SR_ID_1);
  /* Set NVIC priority */
  NVIC_SetPriority(CCU40_0_IRQn, 14U);
 80075c0:	210e      	movs	r1, #14
 80075c2:	202c      	movs	r0, #44	; 0x2c
 80075c4:	f7ff ff36 	bl	8007434 <NVIC_SetPriority>
  // NVIC_SetPriority(CCU40_1_IRQn, 13U);
  /* Enable IRQ */
  NVIC_EnableIRQ(CCU40_0_IRQn);
 80075c8:	202c      	movs	r0, #44	; 0x2c
 80075ca:	f7ff ff1b 	bl	8007404 <NVIC_EnableIRQ>
  // NVIC_EnableIRQ(CCU40_1_IRQn);
  /* Enable CCU4 PWM output */
  XMC_GPIO_Init(OUTP1_3, &PWM_0_gpio_out_config);
 80075ce:	4a09      	ldr	r2, [pc, #36]	; (80075f4 <BSP_ConfigCCU4_Timer+0x8c>)
 80075d0:	2103      	movs	r1, #3
 80075d2:	4809      	ldr	r0, [pc, #36]	; (80075f8 <BSP_ConfigCCU4_Timer+0x90>)
 80075d4:	f000 facc 	bl	8007b70 <XMC_GPIO_Init>
  /* Get the slice out of idle mode */
  XMC_CCU4_EnableClock(MODULE_PTR_CCU40, SLICE_NUMBER_CCU40_CC40);
 80075d8:	2100      	movs	r1, #0
 80075da:	4803      	ldr	r0, [pc, #12]	; (80075e8 <BSP_ConfigCCU4_Timer+0x80>)
 80075dc:	f7ff ff63 	bl	80074a6 <XMC_CCU4_EnableClock>
  // XMC_CCU4_EnableClock(MODULE_PTR_CCU40, SLICE_NUMBER_CCU40_CC41);
  /* Start timer*/
  //XMC_CCU4_SLICE_StartTimer(SLICE_PTR_CCU40_CC40);
  //XMC_CCU4_SLICE_StartTimer(SLICE_PTR_CCU40_CC41);

  return true;
 80075e0:	2301      	movs	r3, #1
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	4000c000 	.word	0x4000c000
 80075ec:	2000002c 	.word	0x2000002c
 80075f0:	4000c100 	.word	0x4000c100
 80075f4:	0800ea28 	.word	0x0800ea28
 80075f8:	48028100 	.word	0x48028100

080075fc <BSP_PWM_SetPen>:

_Bool BSP_PWM_SetPen(uint8_t cmd)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	4603      	mov	r3, r0
 8007604:	71fb      	strb	r3, [r7, #7]
  if(cmd == 1) // Pen UP --> 1,5ms
 8007606:	79fb      	ldrb	r3, [r7, #7]
 8007608:	2b01      	cmp	r3, #1
 800760a:	d10f      	bne.n	800762c <BSP_PWM_SetPen+0x30>
  {
    XMC_CCU4_SLICE_SetTimerPeriodMatch(SLICE_PTR_CCU40_CC40, PWM_PERIOD_VALUE_PEN);
 800760c:	f640 1127 	movw	r1, #2343	; 0x927
 8007610:	4815      	ldr	r0, [pc, #84]	; (8007668 <BSP_PWM_SetPen+0x6c>)
 8007612:	f7ff ff77 	bl	8007504 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
    XMC_CCU4_SLICE_SetTimerCompareMatch(SLICE_PTR_CCU40_CC40, PWM_DEF_COMP_VALUE_UP);
 8007616:	2175      	movs	r1, #117	; 0x75
 8007618:	4813      	ldr	r0, [pc, #76]	; (8007668 <BSP_PWM_SetPen+0x6c>)
 800761a:	f7ff ff81 	bl	8007520 <XMC_CCU4_SLICE_SetTimerCompareMatch>
    XMC_CCU4_EnableShadowTransfer(MODULE_PTR_CCU40, XMC_CCU4_SHADOW_TRANSFER_SLICE_0);
 800761e:	2101      	movs	r1, #1
 8007620:	4812      	ldr	r0, [pc, #72]	; (800766c <BSP_PWM_SetPen+0x70>)
 8007622:	f000 fa10 	bl	8007a46 <XMC_CCU4_EnableShadowTransfer>
    XMC_CCU4_SLICE_StartTimer(SLICE_PTR_CCU40_CC40);
 8007626:	4810      	ldr	r0, [pc, #64]	; (8007668 <BSP_PWM_SetPen+0x6c>)
 8007628:	f7ff ff51 	bl	80074ce <XMC_CCU4_SLICE_StartTimer>
  }
  if(cmd == 2)  // Pen Down --> 2ms
 800762c:	79fb      	ldrb	r3, [r7, #7]
 800762e:	2b02      	cmp	r3, #2
 8007630:	d10f      	bne.n	8007652 <BSP_PWM_SetPen+0x56>
  {
    XMC_CCU4_SLICE_SetTimerPeriodMatch(SLICE_PTR_CCU40_CC40, PWM_PERIOD_VALUE_PEN);
 8007632:	f640 1127 	movw	r1, #2343	; 0x927
 8007636:	480c      	ldr	r0, [pc, #48]	; (8007668 <BSP_PWM_SetPen+0x6c>)
 8007638:	f7ff ff64 	bl	8007504 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
    XMC_CCU4_SLICE_SetTimerCompareMatch(SLICE_PTR_CCU40_CC40, PWM_DEF_COMP_VALUE_DOWN);
 800763c:	21af      	movs	r1, #175	; 0xaf
 800763e:	480a      	ldr	r0, [pc, #40]	; (8007668 <BSP_PWM_SetPen+0x6c>)
 8007640:	f7ff ff6e 	bl	8007520 <XMC_CCU4_SLICE_SetTimerCompareMatch>
    XMC_CCU4_EnableShadowTransfer(MODULE_PTR_CCU40, XMC_CCU4_SHADOW_TRANSFER_SLICE_0);
 8007644:	2101      	movs	r1, #1
 8007646:	4809      	ldr	r0, [pc, #36]	; (800766c <BSP_PWM_SetPen+0x70>)
 8007648:	f000 f9fd 	bl	8007a46 <XMC_CCU4_EnableShadowTransfer>
    XMC_CCU4_SLICE_StartTimer(SLICE_PTR_CCU40_CC40);
 800764c:	4806      	ldr	r0, [pc, #24]	; (8007668 <BSP_PWM_SetPen+0x6c>)
 800764e:	f7ff ff3e 	bl	80074ce <XMC_CCU4_SLICE_StartTimer>
  //   XMC_CCU4_SLICE_SetTimerPeriodMatch(SLICE_PTR_CCU40_CC41, PWM_PERIOD_VALUE_XY);
  //   XMC_CCU4_SLICE_SetTimerCompareMatch(SLICE_PTR_CCU40_CC41, PWM_DEF_COMP_VALUE_XY);
  //   XMC_CCU4_EnableShadowTransfer(MODULE_PTR_CCU40, XMC_CCU4_SHADOW_TRANSFER_SLICE_1);
  //   XMC_CCU4_SLICE_StartTimer(SLICE_PTR_CCU40_CC41);
  // }
  if(cmd == 3) // Timer ausschalten
 8007652:	79fb      	ldrb	r3, [r7, #7]
 8007654:	2b03      	cmp	r3, #3
 8007656:	d102      	bne.n	800765e <BSP_PWM_SetPen+0x62>
  {
    XMC_CCU4_SLICE_StopTimer(SLICE_PTR_CCU40_CC40);
 8007658:	4803      	ldr	r0, [pc, #12]	; (8007668 <BSP_PWM_SetPen+0x6c>)
 800765a:	f7ff ff44 	bl	80074e6 <XMC_CCU4_SLICE_StopTimer>
  // {
  //   XMC_CCU4_SLICE_StopTimer(SLICE_PTR_CCU40_CC41);
  // }


	return true;
 800765e:	2301      	movs	r3, #1
}
 8007660:	4618      	mov	r0, r3
 8007662:	3708      	adds	r7, #8
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}
 8007668:	4000c100 	.word	0x4000c100
 800766c:	4000c000 	.word	0x4000c000

08007670 <BSP_DAC0_1_Init>:
  .output_negation = XMC_DAC_CH_OUTPUT_NEGATION_DISABLED,
};


// init of DAC0, OUT_1, port / pin 14.9
void BSP_DAC0_1_Init(void){
 8007670:	b580      	push	{r7, lr}
 8007672:	af00      	add	r7, sp, #0
  /* API to initial DAC Module*/

  XMC_DAC_CH_Init(XMC_DAC0, 1, &config);
 8007674:	4a05      	ldr	r2, [pc, #20]	; (800768c <BSP_DAC0_1_Init+0x1c>)
 8007676:	2101      	movs	r1, #1
 8007678:	4805      	ldr	r0, [pc, #20]	; (8007690 <BSP_DAC0_1_Init+0x20>)
 800767a:	f000 f8c7 	bl	800780c <XMC_DAC_CH_Init>

  /* API to initial DAC in SingleValue mode */
  XMC_DAC_CH_StartSingleValueMode(XMC_DAC0, 1);
 800767e:	2101      	movs	r1, #1
 8007680:	4803      	ldr	r0, [pc, #12]	; (8007690 <BSP_DAC0_1_Init+0x20>)
 8007682:	f000 f8e7 	bl	8007854 <XMC_DAC_CH_StartSingleValueMode>

}
 8007686:	bf00      	nop
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	0800ea34 	.word	0x0800ea34
 8007690:	48018000 	.word	0x48018000

08007694 <_lseek>:

/*
 * File position seek
 */
__attribute__((weak)) int _lseek(int file, int offset, int whence)
{
 8007694:	b480      	push	{r7}
 8007696:	b085      	sub	sp, #20
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	607a      	str	r2, [r7, #4]
 file = file;
 offset = offset;
 whence = whence;
 return -1;
 80076a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3714      	adds	r7, #20
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bc80      	pop	{r7}
 80076ac:	4770      	bx	lr

080076ae <_read>:

/*
 * File read
 */
__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80076ae:	b480      	push	{r7}
 80076b0:	b085      	sub	sp, #20
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	60f8      	str	r0, [r7, #12]
 80076b6:	60b9      	str	r1, [r7, #8]
 80076b8:	607a      	str	r2, [r7, #4]
 file = file;
 len  = len;
 return 0;
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3714      	adds	r7, #20
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bc80      	pop	{r7}
 80076c4:	4770      	bx	lr

080076c6 <_close>:

/*
 * File close
 */
__attribute__((weak)) int _close(void)
{
 80076c6:	b480      	push	{r7}
 80076c8:	af00      	add	r7, sp, #0
 return -1;
 80076ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bc80      	pop	{r7}
 80076d4:	4770      	bx	lr

080076d6 <_fstat>:

/*
 * File status
 */
__attribute__((weak)) int _fstat(int file, struct stat *st)
{
 80076d6:	b480      	push	{r7}
 80076d8:	b083      	sub	sp, #12
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
 80076de:	6039      	str	r1, [r7, #0]
 file = file;
 if(st)
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d002      	beq.n	80076ec <_fstat+0x16>
  return -1;
 80076e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076ea:	e001      	b.n	80076f0 <_fstat+0x1a>
 else
  return -2;
 80076ec:	f06f 0301 	mvn.w	r3, #1
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bc80      	pop	{r7}
 80076f8:	4770      	bx	lr
	...

080076fc <_sbrk>:
/* ========================================================================= */
/*
 * Heap break (position)
 */
__attribute__((weak)) void *_sbrk(int RequestedSize)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b087      	sub	sp, #28
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 unsigned int  HeapSize;
 static unsigned char *HeapBound;
 static unsigned char * heap= (unsigned char *)NULL;


 HeapSize   = (unsigned int)(&Heap_Bank1_Size);
 8007704:	4b15      	ldr	r3, [pc, #84]	; (800775c <_sbrk+0x60>)
 8007706:	617b      	str	r3, [r7, #20]

 /*
  * If this is the first time malloc() was invoked, we start with the
  * begining of the heap.
  */
 if(heap == (unsigned char *)NULL)
 8007708:	4b15      	ldr	r3, [pc, #84]	; (8007760 <_sbrk+0x64>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d108      	bne.n	8007722 <_sbrk+0x26>
  {
   heap = (unsigned char *)&Heap_Bank1_Start;
 8007710:	4b13      	ldr	r3, [pc, #76]	; (8007760 <_sbrk+0x64>)
 8007712:	4a14      	ldr	r2, [pc, #80]	; (8007764 <_sbrk+0x68>)
 8007714:	601a      	str	r2, [r3, #0]
   HeapBound  = (unsigned char *) (heap + HeapSize);
 8007716:	4b12      	ldr	r3, [pc, #72]	; (8007760 <_sbrk+0x64>)
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	4413      	add	r3, r2
 800771e:	4a12      	ldr	r2, [pc, #72]	; (8007768 <_sbrk+0x6c>)
 8007720:	6013      	str	r3, [r2, #0]
  }

 /* Super duper algo to find out if we have memory for the latest request */
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;
 8007722:	4b0f      	ldr	r3, [pc, #60]	; (8007760 <_sbrk+0x64>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	613b      	str	r3, [r7, #16]

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
 8007728:	4b0d      	ldr	r3, [pc, #52]	; (8007760 <_sbrk+0x64>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	461a      	mov	r2, r3
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4413      	add	r3, r2
 8007732:	3307      	adds	r3, #7
                                          & 0xFFFFFFF8);
 8007734:	f023 0307 	bic.w	r3, r3, #7
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
 8007738:	60fb      	str	r3, [r7, #12]

 /* Return no memory condition if we sense we are crossing the limit */
 if (NextBreak >=  HeapBound )
 800773a:	4b0b      	ldr	r3, [pc, #44]	; (8007768 <_sbrk+0x6c>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	429a      	cmp	r2, r3
 8007742:	d301      	bcc.n	8007748 <_sbrk+0x4c>
  return ((unsigned char *)NULL);
 8007744:	2300      	movs	r3, #0
 8007746:	e003      	b.n	8007750 <_sbrk+0x54>
 else
 {
  heap = NextBreak;
 8007748:	4a05      	ldr	r2, [pc, #20]	; (8007760 <_sbrk+0x64>)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6013      	str	r3, [r2, #0]
  return CurrBreak;
 800774e:	693b      	ldr	r3, [r7, #16]
 }
}
 8007750:	4618      	mov	r0, r3
 8007752:	371c      	adds	r7, #28
 8007754:	46bd      	mov	sp, r7
 8007756:	bc80      	pop	{r7}
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	0000cab8 	.word	0x0000cab8
 8007760:	200019f4 	.word	0x200019f4
 8007764:	20003548 	.word	0x20003548
 8007768:	200019f8 	.word	0x200019f8

0800776c <_init>:
 while(1){}
}

/* Init */
__attribute__((weak)) void _init(void)
{}
 800776c:	b480      	push	{r7}
 800776e:	af00      	add	r7, sp, #0
 8007770:	bf00      	nop
 8007772:	46bd      	mov	sp, r7
 8007774:	bc80      	pop	{r7}
 8007776:	4770      	bx	lr

08007778 <_isatty>:

/*
 * Terminal type evaluation
 */
__attribute__((weak)) int _isatty(int file)
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 file = file;
 return -1;
 8007780:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007784:	4618      	mov	r0, r3
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	bc80      	pop	{r7}
 800778c:	4770      	bx	lr

0800778e <XMC_DAC_CH_EnableOutput>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_DisableOutput(), XMC_DAC_CH_IsOutputEnabled()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_EnableOutput(XMC_DAC_t *const dac, const uint8_t channel)
{
 800778e:	b480      	push	{r7}
 8007790:	b083      	sub	sp, #12
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
 8007796:	460b      	mov	r3, r1
 8007798:	70fb      	strb	r3, [r7, #3]
  dac->DACCFG[channel].high |= DAC_DAC0CFG1_ANAEN_Msk;
 800779a:	78fb      	ldrb	r3, [r7, #3]
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	00db      	lsls	r3, r3, #3
 80077a0:	4413      	add	r3, r2
 80077a2:	689a      	ldr	r2, [r3, #8]
 80077a4:	78fb      	ldrb	r3, [r7, #3]
 80077a6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80077aa:	6879      	ldr	r1, [r7, #4]
 80077ac:	00db      	lsls	r3, r3, #3
 80077ae:	440b      	add	r3, r1
 80077b0:	609a      	str	r2, [r3, #8]
}
 80077b2:	bf00      	nop
 80077b4:	370c      	adds	r7, #12
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bc80      	pop	{r7}
 80077ba:	4770      	bx	lr

080077bc <XMC_DAC_CH_SetMode>:
 * Sets the operating \e mode for the \e channel by setting the \a MODE bit-field of \a DAC0CFG0 register (for channel 0) / \a DAC1CFG0 register (for channel 1).
 * Different modes of DAC operation are defined by enum XMC_DAC_CH_MODE_t.
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetMode(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_MODE_t mode)
{
 80077bc:	b480      	push	{r7}
 80077be:	b085      	sub	sp, #20
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	460b      	mov	r3, r1
 80077c6:	607a      	str	r2, [r7, #4]
 80077c8:	72fb      	strb	r3, [r7, #11]
  dac->DACCFG[channel].low = (dac->DACCFG[channel].low & ~DAC_DAC0CFG0_MODE_Msk) |
 80077ca:	7afb      	ldrb	r3, [r7, #11]
 80077cc:	68fa      	ldr	r2, [r7, #12]
 80077ce:	00db      	lsls	r3, r3, #3
 80077d0:	4413      	add	r3, r2
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 80077d8:	7afb      	ldrb	r3, [r7, #11]
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	430a      	orrs	r2, r1
 80077de:	68f9      	ldr	r1, [r7, #12]
 80077e0:	00db      	lsls	r3, r3, #3
 80077e2:	440b      	add	r3, r1
 80077e4:	605a      	str	r2, [r3, #4]
                             mode;
}
 80077e6:	bf00      	nop
 80077e8:	3714      	adds	r7, #20
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bc80      	pop	{r7}
 80077ee:	4770      	bx	lr

080077f0 <XMC_DAC_Enable>:
 * API IMPLEMENTATION
 *******************************************************************************/

/* API to enable the DAC module */
void XMC_DAC_Enable(XMC_DAC_t *const dac)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  XMC_UNUSED_ARG(dac);
  
#if(UC_SERIES != XMC45)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_DAC);
#endif
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_DAC);
 80077f8:	4803      	ldr	r0, [pc, #12]	; (8007808 <XMC_DAC_Enable+0x18>)
 80077fa:	f000 fd3f 	bl	800827c <XMC_SCU_RESET_DeassertPeripheralReset>
}
 80077fe:	bf00      	nop
 8007800:	3708      	adds	r7, #8
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	10000020 	.word	0x10000020

0800780c <XMC_DAC_CH_Init>:
  return (status);
}

/* API to initialize DAC channel configuration */
void XMC_DAC_CH_Init(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_CONFIG_t *const config)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	460b      	mov	r3, r1
 8007816:	607a      	str	r2, [r7, #4]
 8007818:	72fb      	strb	r3, [r7, #11]
  XMC_DAC_Enable(dac);
 800781a:	68f8      	ldr	r0, [r7, #12]
 800781c:	f7ff ffe8 	bl	80077f0 <XMC_DAC_Enable>

  dac->DACCFG[channel].low = config->cfg0;
 8007820:	7afb      	ldrb	r3, [r7, #11]
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	6812      	ldr	r2, [r2, #0]
 8007826:	68f9      	ldr	r1, [r7, #12]
 8007828:	00db      	lsls	r3, r3, #3
 800782a:	440b      	add	r3, r1
 800782c:	605a      	str	r2, [r3, #4]
  dac->DACCFG[channel].high = config->cfg1;
 800782e:	7afb      	ldrb	r3, [r7, #11]
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	6852      	ldr	r2, [r2, #4]
 8007834:	68f9      	ldr	r1, [r7, #12]
 8007836:	00db      	lsls	r3, r3, #3
 8007838:	440b      	add	r3, r1
 800783a:	609a      	str	r2, [r3, #8]
  if (channel < XMC_DAC_NO_CHANNELS)
 800783c:	7afb      	ldrb	r3, [r7, #11]
 800783e:	2b01      	cmp	r3, #1
 8007840:	d804      	bhi.n	800784c <XMC_DAC_CH_Init+0x40>
  {
    XMC_DAC_CH_EnableOutput(dac, channel);
 8007842:	7afb      	ldrb	r3, [r7, #11]
 8007844:	4619      	mov	r1, r3
 8007846:	68f8      	ldr	r0, [r7, #12]
 8007848:	f7ff ffa1 	bl	800778e <XMC_DAC_CH_EnableOutput>
  }
}
 800784c:	bf00      	nop
 800784e:	3710      	adds	r7, #16
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <XMC_DAC_CH_StartSingleValueMode>:
  return XMC_DAC_CH_SetFrequency(dac, channel, frequency * ((stop - start) + 1U));
}

/* API to start the operation in Single Value Mode. */
XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartSingleValueMode(XMC_DAC_t *const dac, const uint8_t channel)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	460b      	mov	r3, r1
 800785e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_DAC_CH_StartSingleValueMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_StartSingleValueMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_StartSingleValueMode: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_SINGLE);
 8007860:	78fb      	ldrb	r3, [r7, #3]
 8007862:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007866:	4619      	mov	r1, r3
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f7ff ffa7 	bl	80077bc <XMC_DAC_CH_SetMode>

  return XMC_DAC_CH_STATUS_OK;
 800786e:	2300      	movs	r3, #0
}
 8007870:	4618      	mov	r0, r3
 8007872:	3708      	adds	r7, #8
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	460b      	mov	r3, r1
 8007882:	70fb      	strb	r3, [r7, #3]
 8007884:	4613      	mov	r3, r2
 8007886:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_CHECK_MODE(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 8007888:	78fb      	ldrb	r3, [r7, #3]
 800788a:	089b      	lsrs	r3, r3, #2
 800788c:	b2db      	uxtb	r3, r3
 800788e:	461a      	mov	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	3204      	adds	r2, #4
 8007894:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007898:	78fb      	ldrb	r3, [r7, #3]
 800789a:	f003 0303 	and.w	r3, r3, #3
 800789e:	00db      	lsls	r3, r3, #3
 80078a0:	21f8      	movs	r1, #248	; 0xf8
 80078a2:	fa01 f303 	lsl.w	r3, r1, r3
 80078a6:	43db      	mvns	r3, r3
 80078a8:	78f9      	ldrb	r1, [r7, #3]
 80078aa:	0889      	lsrs	r1, r1, #2
 80078ac:	b2c9      	uxtb	r1, r1
 80078ae:	4608      	mov	r0, r1
 80078b0:	ea02 0103 	and.w	r1, r2, r3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	1d02      	adds	r2, r0, #4
 80078b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80078bc:	78fb      	ldrb	r3, [r7, #3]
 80078be:	089b      	lsrs	r3, r3, #2
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	461a      	mov	r2, r3
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	3204      	adds	r2, #4
 80078c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80078cc:	78b9      	ldrb	r1, [r7, #2]
 80078ce:	78fb      	ldrb	r3, [r7, #3]
 80078d0:	f003 0303 	and.w	r3, r3, #3
 80078d4:	00db      	lsls	r3, r3, #3
 80078d6:	fa01 f303 	lsl.w	r3, r1, r3
 80078da:	78f9      	ldrb	r1, [r7, #3]
 80078dc:	0889      	lsrs	r1, r1, #2
 80078de:	b2c9      	uxtb	r1, r1
 80078e0:	4608      	mov	r0, r1
 80078e2:	ea42 0103 	orr.w	r1, r2, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	1d02      	adds	r2, r0, #4
 80078ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80078ee:	bf00      	nop
 80078f0:	370c      	adds	r7, #12
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bc80      	pop	{r7}
 80078f6:	4770      	bx	lr

080078f8 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_CHECK_MODULE_PTR(module));

# if (UC_FAMILY == XMC4)
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8007900:	2010      	movs	r0, #16
 8007902:	f000 fce9 	bl	80082d8 <XMC_SCU_CLOCK_EnableClock>

  /* De-assert CCU4 module */
  XMC_CCU4_lDeassertReset(module);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 f906 	bl	8007b18 <XMC_CCU4_lDeassertReset>
# if ((UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41) || (UC_FAMILY == XMC1))
  /* Disable CCU4 clock gating */
  XMC_CCU4_lUngateClock(module);
# endif

}
 800790c:	bf00      	nop
 800790e:	3708      	adds	r7, #8
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <XMC_CCU4_Init>:

}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	460b      	mov	r3, r1
 800791e:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_CHECK_MODULE_PTR(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f7ff ffe9 	bl	80078f8 <XMC_CCU4_EnableModule>

  gctrl = module->GCTRL;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007932:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8007934:	78fb      	ldrb	r3, [r7, #3]
 8007936:	039b      	lsls	r3, r3, #14
 8007938:	68fa      	ldr	r2, [r7, #12]
 800793a:	4313      	orrs	r3, r2
 800793c:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	68fa      	ldr	r2, [r7, #12]
 8007942:	601a      	str	r2, [r3, #0]
}
 8007944:	bf00      	nop
 8007946:	3710      	adds	r7, #16
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <XMC_CCU4_SetModuleClock>:

/* API to select CCU4 module clock */
void XMC_CCU4_SetModuleClock(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_CLOCK_t clock)
{
 800794c:	b480      	push	{r7}
 800794e:	b085      	sub	sp, #20
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	460b      	mov	r3, r1
 8007956:	70fb      	strb	r3, [r7, #3]
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Pointer", XMC_CCU4_CHECK_MODULE_PTR(module));
  XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Clock", XMC_CCU4_SLICE_CHECK_CLOCK(clock));

  gctrl = module->GCTRL;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_PCIS_Msk);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007964:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) clock) << CCU4_GCTRL_PCIS_Pos;
 8007966:	78fb      	ldrb	r3, [r7, #3]
 8007968:	011b      	lsls	r3, r3, #4
 800796a:	68fa      	ldr	r2, [r7, #12]
 800796c:	4313      	orrs	r3, r2
 800796e:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	601a      	str	r2, [r3, #0]
}
 8007976:	bf00      	nop
 8007978:	3714      	adds	r7, #20
 800797a:	46bd      	mov	sp, r7
 800797c:	bc80      	pop	{r7}
 800797e:	4770      	bx	lr

08007980 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
		                            const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	795b      	ldrb	r3, [r3, #5]
 8007996:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800799a:	b2db      	uxtb	r3, r3
 800799c:	051a      	lsls	r2, r3, #20
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	791b      	ldrb	r3, [r3, #4]
 80079a6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	461a      	mov	r2, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	795b      	ldrb	r3, [r3, #5]
 80079b6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	461a      	mov	r2, r3
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	795b      	ldrb	r3, [r3, #5]
 80079c6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	461a      	mov	r2, r3
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	791b      	ldrb	r3, [r3, #4]
 80079d6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	461a      	mov	r2, r3
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80079e2:	bf00      	nop
 80079e4:	370c      	adds	r7, #12
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bc80      	pop	{r7}
 80079ea:	4770      	bx	lr

080079ec <XMC_CCU4_SLICE_StartConfig>:

/* API to configure the Start trigger function of a slice */
void XMC_CCU4_SLICE_StartConfig(XMC_CCU4_SLICE_t *const slice,
		                        const XMC_CCU4_SLICE_EVENT_t event,
                                const XMC_CCU4_SLICE_START_MODE_t start_mode)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b085      	sub	sp, #20
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	460b      	mov	r3, r1
 80079f6:	70fb      	strb	r3, [r7, #3]
 80079f8:	4613      	mov	r3, r2
 80079fa:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Start Mode", 
             ((start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR) ||\
		          (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START)));
  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	60bb      	str	r3, [r7, #8]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_STRTS_Msk);
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	f023 0303 	bic.w	r3, r3, #3
 8007a08:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_STRTS_Pos;
 8007a0a:	78fb      	ldrb	r3, [r7, #3]
 8007a0c:	68ba      	ldr	r2, [r7, #8]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	68ba      	ldr	r2, [r7, #8]
 8007a16:	605a      	str	r2, [r3, #4]
  
  tc  = slice->TC;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	695b      	ldr	r3, [r3, #20]
 8007a1c:	60fb      	str	r3, [r7, #12]
  /* Next, Configure the start mode */
  if (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR)
 8007a1e:	78bb      	ldrb	r3, [r7, #2]
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d104      	bne.n	8007a2e <XMC_CCU4_SLICE_StartConfig+0x42>
  {
    tc |= (uint32_t)CCU4_CC4_TC_STRM_Msk;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007a2a:	60fb      	str	r3, [r7, #12]
 8007a2c:	e003      	b.n	8007a36 <XMC_CCU4_SLICE_StartConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t)CCU4_CC4_TC_STRM_Msk);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a34:	60fb      	str	r3, [r7, #12]
  }
  
  slice->TC = tc;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	615a      	str	r2, [r3, #20]
}
 8007a3c:	bf00      	nop
 8007a3e:	3714      	adds	r7, #20
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bc80      	pop	{r7}
 8007a44:	4770      	bx	lr

08007a46 <XMC_CCU4_EnableShadowTransfer>:
  slice->PSC = (uint32_t) div_val;
}

/* Transfers value from shadow timer registers to actual timer registers */
void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8007a46:	b480      	push	{r7}
 8007a48:	b083      	sub	sp, #12
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
 8007a4e:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_CHECK_MODULE_PTR(module));
  module->GCSS |= (uint32_t)shadow_transfer_msk;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	691a      	ldr	r2, [r3, #16]
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	431a      	orrs	r2, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	611a      	str	r2, [r3, #16]
}
 8007a5c:	bf00      	nop
 8007a5e:	370c      	adds	r7, #12
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bc80      	pop	{r7}
 8007a64:	4770      	bx	lr
	...

08007a68 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b087      	sub	sp, #28
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	460b      	mov	r3, r1
 8007a72:	70fb      	strb	r3, [r7, #3]
 8007a74:	4613      	mov	r3, r2
 8007a76:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007a7e:	60fb      	str	r3, [r7, #12]
  
  switch(event)
 8007a80:	78fb      	ldrb	r3, [r7, #3]
 8007a82:	2b09      	cmp	r3, #9
 8007a84:	d82c      	bhi.n	8007ae0 <XMC_CCU4_SLICE_SetInterruptNode+0x78>
 8007a86:	a201      	add	r2, pc, #4	; (adr r2, 8007a8c <XMC_CCU4_SLICE_SetInterruptNode+0x24>)
 8007a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a8c:	08007ab5 	.word	0x08007ab5
 8007a90:	08007ab5 	.word	0x08007ab5
 8007a94:	08007abf 	.word	0x08007abf
 8007a98:	08007abf 	.word	0x08007abf
 8007a9c:	08007ae1 	.word	0x08007ae1
 8007aa0:	08007ae1 	.word	0x08007ae1
 8007aa4:	08007ae1 	.word	0x08007ae1
 8007aa8:	08007ae1 	.word	0x08007ae1
 8007aac:	08007ac9 	.word	0x08007ac9
 8007ab0:	08007ad5 	.word	0x08007ad5
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 8007ab4:	2303      	movs	r3, #3
 8007ab6:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	617b      	str	r3, [r7, #20]
      break;
 8007abc:	e016      	b.n	8007aec <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 8007abe:	230c      	movs	r3, #12
 8007ac0:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 8007ac2:	2302      	movs	r3, #2
 8007ac4:	617b      	str	r3, [r7, #20]
      break;
 8007ac6:	e011      	b.n	8007aec <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 8007ac8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007acc:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 8007ace:	2308      	movs	r3, #8
 8007ad0:	617b      	str	r3, [r7, #20]
      break;
 8007ad2:	e00b      	b.n	8007aec <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 8007ad4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007ad8:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 8007ada:	230a      	movs	r3, #10
 8007adc:	617b      	str	r3, [r7, #20]
      break;
 8007ade:	e005      	b.n	8007aec <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 8007ae0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8007ae4:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 8007ae6:	230c      	movs	r3, #12
 8007ae8:	617b      	str	r3, [r7, #20]
      break;
 8007aea:	bf00      	nop
  }
  
  srs &= ~mask; 
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	43db      	mvns	r3, r3
 8007af0:	68fa      	ldr	r2, [r7, #12]
 8007af2:	4013      	ands	r3, r2
 8007af4:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 8007af6:	78ba      	ldrb	r2, [r7, #2]
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	fa02 f303 	lsl.w	r3, r2, r3
 8007afe:	68fa      	ldr	r2, [r7, #12]
 8007b00:	4313      	orrs	r3, r2
 8007b02:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	68fa      	ldr	r2, [r7, #12]
 8007b08:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8007b0c:	bf00      	nop
 8007b0e:	371c      	adds	r7, #28
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bc80      	pop	{r7}
 8007b14:	4770      	bx	lr
 8007b16:	bf00      	nop

08007b18 <XMC_CCU4_lDeassertReset>:
}

#if (UC_FAMILY == XMC4)
/* De-asserts CCU4 module from reset state */
void XMC_CCU4_lDeassertReset(XMC_CCU4_MODULE_t *const module)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  /* Enable the module */
  # if ((UC_SERIES == XMC45) || (UC_SERIES == XMC44))
	if (CCU40 == module)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	4a0f      	ldr	r2, [pc, #60]	; (8007b60 <XMC_CCU4_lDeassertReset+0x48>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d103      	bne.n	8007b30 <XMC_CCU4_lDeassertReset+0x18>
	{
	  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8007b28:	2004      	movs	r0, #4
 8007b2a:	f000 fba7 	bl	800827c <XMC_SCU_RESET_DeassertPeripheralReset>
	else
	{
	  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
	}
  # endif
}
 8007b2e:	e012      	b.n	8007b56 <XMC_CCU4_lDeassertReset+0x3e>
	else if (CCU41 == module)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4a0c      	ldr	r2, [pc, #48]	; (8007b64 <XMC_CCU4_lDeassertReset+0x4c>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d103      	bne.n	8007b40 <XMC_CCU4_lDeassertReset+0x28>
	  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8007b38:	2008      	movs	r0, #8
 8007b3a:	f000 fb9f 	bl	800827c <XMC_SCU_RESET_DeassertPeripheralReset>
}
 8007b3e:	e00a      	b.n	8007b56 <XMC_CCU4_lDeassertReset+0x3e>
	else if (CCU42 == module)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	4a09      	ldr	r2, [pc, #36]	; (8007b68 <XMC_CCU4_lDeassertReset+0x50>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d103      	bne.n	8007b50 <XMC_CCU4_lDeassertReset+0x38>
	  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8007b48:	2010      	movs	r0, #16
 8007b4a:	f000 fb97 	bl	800827c <XMC_SCU_RESET_DeassertPeripheralReset>
}
 8007b4e:	e002      	b.n	8007b56 <XMC_CCU4_lDeassertReset+0x3e>
	  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8007b50:	4806      	ldr	r0, [pc, #24]	; (8007b6c <XMC_CCU4_lDeassertReset+0x54>)
 8007b52:	f000 fb93 	bl	800827c <XMC_SCU_RESET_DeassertPeripheralReset>
}
 8007b56:	bf00      	nop
 8007b58:	3708      	adds	r7, #8
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	4000c000 	.word	0x4000c000
 8007b64:	40010000 	.word	0x40010000
 8007b68:	40014000 	.word	0x40014000
 8007b6c:	10000001 	.word	0x10000001

08007b70 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	460b      	mov	r3, r1
 8007b7a:	607a      	str	r2, [r7, #4]
 8007b7c:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_CHECK_MODE(config->mode));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 8007b7e:	7afb      	ldrb	r3, [r7, #11]
 8007b80:	089b      	lsrs	r3, r3, #2
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	461a      	mov	r2, r3
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	3204      	adds	r2, #4
 8007b8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007b8e:	7afb      	ldrb	r3, [r7, #11]
 8007b90:	f003 0303 	and.w	r3, r3, #3
 8007b94:	00db      	lsls	r3, r3, #3
 8007b96:	21f8      	movs	r1, #248	; 0xf8
 8007b98:	fa01 f303 	lsl.w	r3, r1, r3
 8007b9c:	43db      	mvns	r3, r3
 8007b9e:	7af9      	ldrb	r1, [r7, #11]
 8007ba0:	0889      	lsrs	r1, r1, #2
 8007ba2:	b2c9      	uxtb	r1, r1
 8007ba4:	4608      	mov	r0, r1
 8007ba6:	ea02 0103 	and.w	r1, r2, r3
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	1d02      	adds	r2, r0, #4
 8007bae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007bb6:	7afb      	ldrb	r3, [r7, #11]
 8007bb8:	005b      	lsls	r3, r3, #1
 8007bba:	2103      	movs	r1, #3
 8007bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8007bc0:	43db      	mvns	r3, r3
 8007bc2:	401a      	ands	r2, r3
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	4a37      	ldr	r2, [pc, #220]	; (8007ca8 <XMC_GPIO_Init+0x138>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d003      	beq.n	8007bd8 <XMC_GPIO_Init+0x68>
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	4a36      	ldr	r2, [pc, #216]	; (8007cac <XMC_GPIO_Init+0x13c>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d10a      	bne.n	8007bee <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007bdc:	7afb      	ldrb	r3, [r7, #11]
 8007bde:	2101      	movs	r1, #1
 8007be0:	fa01 f303 	lsl.w	r3, r1, r3
 8007be4:	43db      	mvns	r3, r3
 8007be6:	401a      	ands	r2, r3
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	661a      	str	r2, [r3, #96]	; 0x60
 8007bec:	e03c      	b.n	8007c68 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	685a      	ldr	r2, [r3, #4]
 8007bf2:	7afb      	ldrb	r3, [r7, #11]
 8007bf4:	409a      	lsls	r2, r3
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8007bfa:	7afb      	ldrb	r3, [r7, #11]
 8007bfc:	08db      	lsrs	r3, r3, #3
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	461a      	mov	r2, r3
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	3210      	adds	r2, #16
 8007c06:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007c0a:	7afb      	ldrb	r3, [r7, #11]
 8007c0c:	f003 0307 	and.w	r3, r3, #7
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	2107      	movs	r1, #7
 8007c14:	fa01 f303 	lsl.w	r3, r1, r3
 8007c18:	43db      	mvns	r3, r3
 8007c1a:	7af9      	ldrb	r1, [r7, #11]
 8007c1c:	08c9      	lsrs	r1, r1, #3
 8007c1e:	b2c9      	uxtb	r1, r1
 8007c20:	4608      	mov	r0, r1
 8007c22:	ea02 0103 	and.w	r1, r2, r3
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f100 0210 	add.w	r2, r0, #16
 8007c2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8007c30:	7afb      	ldrb	r3, [r7, #11]
 8007c32:	08db      	lsrs	r3, r3, #3
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	461a      	mov	r2, r3
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	3210      	adds	r2, #16
 8007c3c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	7a1b      	ldrb	r3, [r3, #8]
 8007c44:	4619      	mov	r1, r3
 8007c46:	7afb      	ldrb	r3, [r7, #11]
 8007c48:	f003 0307 	and.w	r3, r3, #7
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8007c52:	7af9      	ldrb	r1, [r7, #11]
 8007c54:	08c9      	lsrs	r1, r1, #3
 8007c56:	b2c9      	uxtb	r1, r1
 8007c58:	4608      	mov	r0, r1
 8007c5a:	ea42 0103 	orr.w	r1, r2, r3
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f100 0210 	add.w	r2, r0, #16
 8007c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8007c68:	7afb      	ldrb	r3, [r7, #11]
 8007c6a:	089b      	lsrs	r3, r3, #2
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	461a      	mov	r2, r3
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	3204      	adds	r2, #4
 8007c74:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	7afb      	ldrb	r3, [r7, #11]
 8007c80:	f003 0303 	and.w	r3, r3, #3
 8007c84:	00db      	lsls	r3, r3, #3
 8007c86:	fa01 f303 	lsl.w	r3, r1, r3
 8007c8a:	7af9      	ldrb	r1, [r7, #11]
 8007c8c:	0889      	lsrs	r1, r1, #2
 8007c8e:	b2c9      	uxtb	r1, r1
 8007c90:	4608      	mov	r0, r1
 8007c92:	ea42 0103 	orr.w	r1, r2, r3
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	1d02      	adds	r2, r0, #4
 8007c9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8007c9e:	bf00      	nop
 8007ca0:	3714      	adds	r7, #20
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bc80      	pop	{r7}
 8007ca6:	4770      	bx	lr
 8007ca8:	48028e00 	.word	0x48028e00
 8007cac:	48028f00 	.word	0x48028f00

08007cb0 <XMC_CCU8_SLICE_StopTimer>:
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  slice->TCCLR |= (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	691b      	ldr	r3, [r3, #16]
 8007cbc:	f043 0201 	orr.w	r2, r3, #1
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	611a      	str	r2, [r3, #16]
}
 8007cc4:	bf00      	nop
 8007cc6:	370c      	adds	r7, #12
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bc80      	pop	{r7}
 8007ccc:	4770      	bx	lr

08007cce <XMC_CCU8_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* API to set the CCU8 module as active and enable the clock  */
void XMC_CCU8_EnableModule(XMC_CCU8_MODULE_t *const module)
{
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b082      	sub	sp, #8
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_EnableModule:Invalid Module Pointer", XMC_CCU8_CHECK_MODULE_PTR(module));
# if (UC_FAMILY == XMC4)
  /* Enable CCU8 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8007cd6:	2010      	movs	r0, #16
 8007cd8:	f000 fafe 	bl	80082d8 <XMC_SCU_CLOCK_EnableClock>

  /* De-assert CCU8 module */
  XMC_CCU8_lDeassertReset(module);
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 f905 	bl	8007eec <XMC_CCU8_lDeassertReset>

# if ((UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41) || (UC_FAMILY == XMC1))
  /* Disable CCU8 clock gating */
  XMC_CCU8_lUngateClock(module);
# endif
}
 8007ce2:	bf00      	nop
 8007ce4:	3708      	adds	r7, #8
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <XMC_CCU8_Init>:

}

/* API to initialize CCU8 global resources  */
void XMC_CCU8_Init(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SLICE_MCMS_ACTION_t mcs_action)
{
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b084      	sub	sp, #16
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	70fb      	strb	r3, [r7, #3]

  XMC_ASSERT("XMC_CCU8_Init:Invalid Module Pointer", XMC_CCU8_CHECK_MODULE_PTR(module));
  XMC_ASSERT("XMC_CCU8_Init:Invalid mcs action", XMC_CCU8_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU8 module */
  XMC_CCU8_EnableModule(module);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f7ff ffe9 	bl	8007cce <XMC_CCU8_EnableModule>

  gctrl = module->GCTRL;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU8_GCTRL_MSDE_Msk);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007d08:	60fb      	str	r3, [r7, #12]
  gctrl |= (uint32_t)mcs_action << CCU8_GCTRL_MSDE_Pos;
 8007d0a:	78fb      	ldrb	r3, [r7, #3]
 8007d0c:	039b      	lsls	r3, r3, #14
 8007d0e:	68fa      	ldr	r2, [r7, #12]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	68fa      	ldr	r2, [r7, #12]
 8007d18:	601a      	str	r2, [r3, #0]
}
 8007d1a:	bf00      	nop
 8007d1c:	3710      	adds	r7, #16
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <XMC_CCU8_SetModuleClock>:

/* API to select CCU8 module clock */
void XMC_CCU8_SetModuleClock(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_CLOCK_t clock)
{
 8007d22:	b480      	push	{r7}
 8007d24:	b085      	sub	sp, #20
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	70fb      	strb	r3, [r7, #3]
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU8_SetModuleClock:Invalid Module Pointer", XMC_CCU8_CHECK_MODULE_PTR(module));
  XMC_ASSERT("XMC_CCU8_SetModuleClock:Invalid Module Clock", XMC_CCU8_SLICE_CHECK_CLOCK(clock));

  gctrl = module->GCTRL;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU8_GCTRL_PCIS_Msk);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007d3a:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) clock) << CCU8_GCTRL_PCIS_Pos;
 8007d3c:	78fb      	ldrb	r3, [r7, #3]
 8007d3e:	011b      	lsls	r3, r3, #4
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	60fb      	str	r3, [r7, #12]

  module->GCTRL = gctrl;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	68fa      	ldr	r2, [r7, #12]
 8007d4a:	601a      	str	r2, [r3, #0]
}
 8007d4c:	bf00      	nop
 8007d4e:	3714      	adds	r7, #20
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bc80      	pop	{r7}
 8007d54:	4770      	bx	lr

08007d56 <XMC_CCU8_SLICE_CompareInit>:

/* API to configure CC8 Slice in Compare mode */
void XMC_CCU8_SLICE_CompareInit(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b082      	sub	sp, #8
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
 8007d5e:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU8_CHECK_SLICE_PTR(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Timer Init Pointer is NULL",
             (XMC_CCU8_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);
  /* Stops the timer */
  XMC_CCU8_SLICE_StopTimer(slice);
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f7ff ffa5 	bl	8007cb0 <XMC_CCU8_SLICE_StopTimer>
  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	7b5b      	ldrb	r3, [r3, #13]
 8007d72:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	051a      	lsls	r2, r3, #20
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	7b1b      	ldrb	r3, [r3, #12]
 8007d82:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	461a      	mov	r2, r3
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	7b1b      	ldrb	r3, [r3, #12]
 8007d92:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	461a      	mov	r2, r3
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	7b5b      	ldrb	r3, [r3, #13]
 8007da2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	461a      	mov	r2, r3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->psl;
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	685a      	ldr	r2, [r3, #4]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	619a      	str	r2, [r3, #24]
  /* Asymmetric PWM and Slice output routing configuration */
  slice->CHC = (uint32_t)((uint32_t)compare_init->chc ^ XMC_CCU8_SLICE_CHC_CONFIG_MASK);
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	f083 0214 	eor.w	r2, r3, #20
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	649a      	str	r2, [r3, #72]	; 0x48
}
 8007dc2:	bf00      	nop
 8007dc4:	3708      	adds	r7, #8
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <XMC_CCU8_SLICE_SetTimerPeriodMatch>:
  slice->TC = tc;
}

/* Programs period match value of the timer  */
void XMC_CCU8_SLICE_SetTimerPeriodMatch(XMC_CCU8_SLICE_t *const slice, const uint16_t period_val)
{
 8007dca:	b480      	push	{r7}
 8007dcc:	b083      	sub	sp, #12
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_CHECK_SLICE_PTR(slice));
  slice->PRS = (uint32_t) period_val;
 8007dd6:	887a      	ldrh	r2, [r7, #2]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	635a      	str	r2, [r3, #52]	; 0x34
}
 8007ddc:	bf00      	nop
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bc80      	pop	{r7}
 8007de4:	4770      	bx	lr

08007de6 <XMC_CCU8_SLICE_SetTimerCompareMatch>:

/* Programs timer compare match value for channel 1 or 2 */
void XMC_CCU8_SLICE_SetTimerCompareMatch(XMC_CCU8_SLICE_t *const slice,
                                         const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
                                         const uint16_t compare_val)
{
 8007de6:	b480      	push	{r7}
 8007de8:	b083      	sub	sp, #12
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
 8007dee:	460b      	mov	r3, r1
 8007df0:	70fb      	strb	r3, [r7, #3]
 8007df2:	4613      	mov	r3, r2
 8007df4:	803b      	strh	r3, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU8_CHECK_SLICE_PTR(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(channel));

  if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 8007df6:	78fb      	ldrb	r3, [r7, #3]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d103      	bne.n	8007e04 <XMC_CCU8_SLICE_SetTimerCompareMatch+0x1e>
  {
    slice->CR1S = (uint32_t) compare_val;
 8007dfc:	883a      	ldrh	r2, [r7, #0]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  else
  {
    slice->CR2S = (uint32_t) compare_val;
  }
}
 8007e02:	e002      	b.n	8007e0a <XMC_CCU8_SLICE_SetTimerCompareMatch+0x24>
    slice->CR2S = (uint32_t) compare_val;
 8007e04:	883a      	ldrh	r2, [r7, #0]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	645a      	str	r2, [r3, #68]	; 0x44
}
 8007e0a:	bf00      	nop
 8007e0c:	370c      	adds	r7, #12
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bc80      	pop	{r7}
 8007e12:	4770      	bx	lr

08007e14 <XMC_CCU8_EnableShadowTransfer>:

  return(compare_value);
}

void XMC_CCU8_EnableShadowTransfer(XMC_CCU8_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_EnableShadowTransfer:Invalid module Pointer", XMC_CCU8_CHECK_MODULE_PTR(module));
  module->GCSS |= (uint32_t)shadow_transfer_msk;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	691a      	ldr	r2, [r3, #16]
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	431a      	orrs	r2, r3
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	611a      	str	r2, [r3, #16]
}
 8007e2a:	bf00      	nop
 8007e2c:	370c      	adds	r7, #12
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bc80      	pop	{r7}
 8007e32:	4770      	bx	lr

08007e34 <XMC_CCU8_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU8_SLICE_SetInterruptNode(XMC_CCU8_SLICE_t *const slice,
                                     const XMC_CCU8_SLICE_IRQ_ID_t event,
                                     const XMC_CCU8_SLICE_SR_ID_t sr)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b087      	sub	sp, #28
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	70fb      	strb	r3, [r7, #3]
 8007e40:	4613      	mov	r3, r2
 8007e42:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU8_CHECK_SLICE_PTR(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU8_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  srs = slice->SRS;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007e4a:	60fb      	str	r3, [r7, #12]

  switch(event)
 8007e4c:	78fb      	ldrb	r3, [r7, #3]
 8007e4e:	2b09      	cmp	r3, #9
 8007e50:	d831      	bhi.n	8007eb6 <XMC_CCU8_SLICE_SetInterruptNode+0x82>
 8007e52:	a201      	add	r2, pc, #4	; (adr r2, 8007e58 <XMC_CCU8_SLICE_SetInterruptNode+0x24>)
 8007e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e58:	08007e81 	.word	0x08007e81
 8007e5c:	08007e81 	.word	0x08007e81
 8007e60:	08007e8b 	.word	0x08007e8b
 8007e64:	08007e8b 	.word	0x08007e8b
 8007e68:	08007e95 	.word	0x08007e95
 8007e6c:	08007e95 	.word	0x08007e95
 8007e70:	08007eb7 	.word	0x08007eb7
 8007e74:	08007eb7 	.word	0x08007eb7
 8007e78:	08007e9f 	.word	0x08007e9f
 8007e7c:	08007eab 	.word	0x08007eab
  {
    case XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU8_CC8_SRS_POSR_Msk);
 8007e80:	2303      	movs	r3, #3
 8007e82:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_POSR_Pos;
 8007e84:	2300      	movs	r3, #0
 8007e86:	613b      	str	r3, [r7, #16]
      break;
 8007e88:	e01b      	b.n	8007ec2 <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1:
    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1:
      mask = ((uint32_t) CCU8_CC8_SRS_CM1SR_Msk);
 8007e8a:	230c      	movs	r3, #12
 8007e8c:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_CM1SR_Pos;
 8007e8e:	2302      	movs	r3, #2
 8007e90:	613b      	str	r3, [r7, #16]
      break;
 8007e92:	e016      	b.n	8007ec2 <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2:
    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2:
      mask = ((uint32_t) CCU8_CC8_SRS_CM2SR_Msk);
 8007e94:	2330      	movs	r3, #48	; 0x30
 8007e96:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_CM2SR_Pos;
 8007e98:	2304      	movs	r3, #4
 8007e9a:	613b      	str	r3, [r7, #16]
      break;
 8007e9c:	e011      	b.n	8007ec2 <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU8_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU8_CC8_SRS_E0SR_Msk);
 8007e9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007ea2:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E0SR_Pos;
 8007ea4:	2308      	movs	r3, #8
 8007ea6:	613b      	str	r3, [r7, #16]
      break;
 8007ea8:	e00b      	b.n	8007ec2 <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU8_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU8_CC8_SRS_E1SR_Msk);
 8007eaa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007eae:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E1SR_Pos;
 8007eb0:	230a      	movs	r3, #10
 8007eb2:	613b      	str	r3, [r7, #16]
      break;
 8007eb4:	e005      	b.n	8007ec2 <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    default:
      mask = ((uint32_t) CCU8_CC8_SRS_E2SR_Msk);
 8007eb6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8007eba:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E2SR_Pos;
 8007ebc:	230c      	movs	r3, #12
 8007ebe:	613b      	str	r3, [r7, #16]
      break;
 8007ec0:	bf00      	nop
  }
  
  srs &= ~mask;
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	43db      	mvns	r3, r3
 8007ec6:	68fa      	ldr	r2, [r7, #12]
 8007ec8:	4013      	ands	r3, r2
 8007eca:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 8007ecc:	78ba      	ldrb	r2, [r7, #2]
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed4:	68fa      	ldr	r2, [r7, #12]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	60fb      	str	r3, [r7, #12]
  
  slice->SRS = srs;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8007ee2:	bf00      	nop
 8007ee4:	371c      	adds	r7, #28
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bc80      	pop	{r7}
 8007eea:	4770      	bx	lr

08007eec <XMC_CCU8_lDeassertReset>:
}

#if (UC_FAMILY == XMC4)
/* De-asserts CCU8 module from reset state */
void XMC_CCU8_lDeassertReset(XMC_CCU8_MODULE_t *const module)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  /* Enable the module */
  #if ((UC_SERIES == XMC45) || (UC_SERIES == XMC44))
    if (CCU80 == module)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	4a07      	ldr	r2, [pc, #28]	; (8007f14 <XMC_CCU8_lDeassertReset+0x28>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d103      	bne.n	8007f04 <XMC_CCU8_lDeassertReset+0x18>
    {
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU80);
 8007efc:	2080      	movs	r0, #128	; 0x80
 8007efe:	f000 f9bd 	bl	800827c <XMC_SCU_RESET_DeassertPeripheralReset>
    if (CCU80 == module)
    {
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU80);
    }
  #endif
}
 8007f02:	e003      	b.n	8007f0c <XMC_CCU8_lDeassertReset+0x20>
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU81);
 8007f04:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007f08:	f000 f9b8 	bl	800827c <XMC_SCU_RESET_DeassertPeripheralReset>
}
 8007f0c:	bf00      	nop
 8007f0e:	3708      	adds	r7, #8
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	40020000 	.word	0x40020000

08007f18 <XMC_USIC_CH_GetTransmitBufferStatus>:
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007f2a:	b2db      	uxtb	r3, r3
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bc80      	pop	{r7}
 8007f34:	4770      	bx	lr

08007f36 <XMC_UART_CH_ClearStatusFlag>:
{
 8007f36:	b480      	push	{r7}
 8007f38:	b083      	sub	sp, #12
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
 8007f3e:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	683a      	ldr	r2, [r7, #0]
 8007f44:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8007f46:	bf00      	nop
 8007f48:	370c      	adds	r7, #12
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bc80      	pop	{r7}
 8007f4e:	4770      	bx	lr

08007f50 <XMC_UART_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 8007f5a:	2310      	movs	r3, #16
 8007f5c:	60fb      	str	r3, [r7, #12]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 f9f4 	bl	800834c <XMC_USIC_CH_Enable>
  
  if(config->oversampling != 0U)
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	79db      	ldrb	r3, [r3, #7]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d002      	beq.n	8007f72 <XMC_UART_CH_Init+0x22>
  {
    oversampling = (uint32_t)config->oversampling;
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	79db      	ldrb	r3, [r3, #7]
 8007f70:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure baud rate */
  (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	68fa      	ldr	r2, [r7, #12]
 8007f78:	4619      	mov	r1, r3
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 fa34 	bl	80083e8 <XMC_USIC_CH_SetBaudrate>
   * Configure the number of stop bits
   * Pulse length is set to 0 to have standard UART signaling, 
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	799b      	ldrb	r3, [r3, #6]
 8007f84:	3b01      	subs	r3, #1
 8007f86:	005a      	lsls	r2, r3, #1
			             (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	085b      	lsrs	r3, r3, #1
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	021b      	lsls	r3, r3, #8
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8007f90:	4313      	orrs	r3, r2
 8007f92:	f043 0201 	orr.w	r2, r3, #1
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	791b      	ldrb	r3, [r3, #4]
 8007f9e:	3b01      	subs	r3, #1
 8007fa0:	061b      	lsls	r3, r3, #24
 8007fa2:	f443 7281 	orr.w	r2, r3, #258	; 0x102
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	635a      	str	r2, [r3, #52]	; 0x34
		              ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	795b      	ldrb	r3, [r3, #5]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d009      	beq.n	8007fc6 <XMC_UART_CH_Init+0x76>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	795b      	ldrb	r3, [r3, #5]
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	041b      	lsls	r3, r3, #16
 8007fbe:	431a      	orrs	r2, r3
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	635a      	str	r2, [r3, #52]	; 0x34
 8007fc4:	e008      	b.n	8007fd8 <XMC_UART_CH_Init+0x88>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	791b      	ldrb	r3, [r3, #4]
 8007fce:	3b01      	subs	r3, #1
 8007fd0:	041b      	lsls	r3, r3, #16
 8007fd2:	431a      	orrs	r2, r3
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8007fde:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007fe6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	891b      	ldrh	r3, [r3, #8]
 8007fec:	461a      	mov	r2, r3
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	641a      	str	r2, [r3, #64]	; 0x40
}
 8007ff2:	bf00      	nop
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <XMC_UART_CH_Transmit>:
  } 
  return status;
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b082      	sub	sp, #8
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
 8008002:	460b      	mov	r3, r1
 8008004:	807b      	strh	r3, [r7, #2]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800800c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008010:	2b00      	cmp	r3, #0
 8008012:	d110      	bne.n	8008036 <XMC_UART_CH_Transmit+0x3c>
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8008014:	bf00      	nop
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f7ff ff7e 	bl	8007f18 <XMC_USIC_CH_GetTransmitBufferStatus>
 800801c:	4603      	mov	r3, r0
 800801e:	2b80      	cmp	r3, #128	; 0x80
 8008020:	d0f9      	beq.n	8008016 <XMC_UART_CH_Transmit+0x1c>
    {
    }
  
    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8008022:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f7ff ff85 	bl	8007f36 <XMC_UART_CH_ClearStatusFlag>
  
    /*Transmit data */
    channel->TBUF[0U] = data;
 800802c:	887a      	ldrh	r2, [r7, #2]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = data;
  }
}
 8008034:	e003      	b.n	800803e <XMC_UART_CH_Transmit+0x44>
    channel->IN[0U] = data;
 8008036:	887a      	ldrh	r2, [r7, #2]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
 800803e:	bf00      	nop
 8008040:	3708      	adds	r7, #8
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <XMC_UART_CH_GetReceivedData>:

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8008046:	b480      	push	{r7}
 8008048:	b085      	sub	sp, #20
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8008054:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008058:	2b00      	cmp	r3, #0
 800805a:	d103      	bne.n	8008064 <XMC_UART_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008060:	81fb      	strh	r3, [r7, #14]
 8008062:	e003      	b.n	800806c <XMC_UART_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800806a:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 800806c:	89fb      	ldrh	r3, [r7, #14]
}
 800806e:	4618      	mov	r0, r3
 8008070:	3714      	adds	r7, #20
 8008072:	46bd      	mov	sp, r7
 8008074:	bc80      	pop	{r7}
 8008076:	4770      	bx	lr

08008078 <XMC_UART_CH_EnableEvent>:
  }
  return status;
}

void XMC_UART_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
  if ((event & 0x80000000U) != 0U)
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	2b00      	cmp	r3, #0
 8008086:	da08      	bge.n	800809a <XMC_UART_CH_EnableEvent+0x22>
  {
    /* USIC module event */
    channel->CCR |= event & 0x7fffffffU;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008092:	431a      	orrs	r2, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	641a      	str	r2, [r3, #64]	; 0x40
  else
  {
    /* Protocol event */
    channel->PCR_ASCMode |= event;
  }
}
 8008098:	e005      	b.n	80080a6 <XMC_UART_CH_EnableEvent+0x2e>
    channel->PCR_ASCMode |= event;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	431a      	orrs	r2, r3
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80080a6:	bf00      	nop
 80080a8:	370c      	adds	r7, #12
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bc80      	pop	{r7}
 80080ae:	4770      	bx	lr

080080b0 <XMC_USIC_CH_GetTransmitBufferStatus>:
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80080c2:	b2db      	uxtb	r3, r3
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bc80      	pop	{r7}
 80080cc:	4770      	bx	lr

080080ce <XMC_USIC_CH_GetReceiveBufferStatus>:
{
 80080ce:	b480      	push	{r7}
 80080d0:	b083      	sub	sp, #12
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
  return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080da:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
}
 80080de:	4618      	mov	r0, r3
 80080e0:	370c      	adds	r7, #12
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bc80      	pop	{r7}
 80080e6:	4770      	bx	lr

080080e8 <XMC_SPI_CH_ClearStatusFlag>:
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	431a      	orrs	r2, r3
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80080fe:	bf00      	nop
 8008100:	370c      	adds	r7, #12
 8008102:	46bd      	mov	sp, r7
 8008104:	bc80      	pop	{r7}
 8008106:	4770      	bx	lr

08008108 <XMC_SPI_CH_Init>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* Initializes the selected SPI channel with the config structure. */
void XMC_SPI_CH_Init(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
  XMC_USIC_CH_Enable(channel);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 f91a 	bl	800834c <XMC_USIC_CH_Enable>

  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	791b      	ldrb	r3, [r3, #4]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d106      	bne.n	800812e <XMC_SPI_CH_Init+0x26>
  {
    /* Configure baud rate */
    (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING);
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	2202      	movs	r2, #2
 8008126:	4619      	mov	r1, r3
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 f95d 	bl	80083e8 <XMC_USIC_CH_SetBaudrate>

  /* Configuration of USIC Shift Control */
  /* Transmission Mode (TRM) = 1  */
  /* Passive Data Level (PDL) = 1 */
  /* FHTW: SDIR-Bit (Bit 0 of SCTR) to 1 in order to send MSB first */
  channel->SCTR = USIC_CH_SCTR_PDL_Msk |
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4a0f      	ldr	r2, [pc, #60]	; (8008170 <XMC_SPI_CH_Init+0x68>)
 8008132:	635a      	str	r2, [r3, #52]	; 0x34
				  (0x1UL << USIC_CH_SCTR_SDIR_Pos);

  /* Configuration of USIC Transmit Control/Status Register */
  /* TBUF Data Enable (TDEN) = 1 */
  /* TBUF Data Single Shot Mode (TDSSM) = 1 */
  channel->TCSR = (uint32_t)(USIC_CH_TCSR_HPCMD_Msk |
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 800813a:	639a      	str	r2, [r3, #56]	; 0x38
                  (0x01UL  << USIC_CH_TCSR_TDEN_Pos) |
                  USIC_CH_TCSR_TDSSM_Msk);

  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	791b      	ldrb	r3, [r3, #4]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d107      	bne.n	8008154 <XMC_SPI_CH_Init+0x4c>
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
                           USIC_CH_PCR_SSCMode_SELCTR_Msk |
                           (uint32_t)config->selo_inversion |
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	795b      	ldrb	r3, [r3, #5]
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
 8008148:	f043 030b 	orr.w	r3, r3, #11
 800814c:	b2db      	uxtb	r3, r3
 800814e:	461a      	mov	r2, r3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	63da      	str	r2, [r3, #60]	; 0x3c
                           USIC_CH_PCR_SSCMode_FEM_Msk);
  }

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800815a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	88db      	ldrh	r3, [r3, #6]
 8008160:	461a      	mov	r2, r3
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	641a      	str	r2, [r3, #64]	; 0x40
}
 8008166:	bf00      	nop
 8008168:	3708      	adds	r7, #8
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	073f0103 	.word	0x073f0103

08008174 <XMC_SPI_CH_Transmit>:
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SELO_Msk;
}

/* Puts the data into FIFO if FIFO mode is enabled or else into standard buffers, by setting the proper mode. */
void XMC_SPI_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data, const XMC_SPI_CH_MODE_t mode)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	460b      	mov	r3, r1
 800817e:	807b      	strh	r3, [r7, #2]
 8008180:	4613      	mov	r3, r2
 8008182:	707b      	strb	r3, [r7, #1]

  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008188:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
                 (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 800818c:	787b      	ldrb	r3, [r7, #1]
 800818e:	019b      	lsls	r3, r3, #6
 8008190:	b2db      	uxtb	r3, r3
  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 8008192:	431a      	orrs	r2, r3
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	641a      	str	r2, [r3, #64]	; 0x40


  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800819e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d113      	bne.n	80081ce <XMC_SPI_CH_Transmit+0x5a>
  {
    while((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(channel) & (uint32_t)XMC_USIC_CH_TBUF_STATUS_BUSY)
 80081a6:	bf00      	nop
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f7ff ff81 	bl	80080b0 <XMC_USIC_CH_GetTransmitBufferStatus>
 80081ae:	4603      	mov	r3, r0
 80081b0:	b25b      	sxtb	r3, r3
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	dbf8      	blt.n	80081a8 <XMC_SPI_CH_Transmit+0x34>
    {
    }

    XMC_SPI_CH_ClearStatusFlag(channel, (uint32_t)XMC_SPI_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80081b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f7ff ff94 	bl	80080e8 <XMC_SPI_CH_ClearStatusFlag>

    channel->TBUF[mode] = data;
 80081c0:	787a      	ldrb	r2, [r7, #1]
 80081c2:	8879      	ldrh	r1, [r7, #2]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	3220      	adds	r2, #32
 80081c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  else
  {
    channel->IN[mode] = data;
  }
}
 80081cc:	e005      	b.n	80081da <XMC_SPI_CH_Transmit+0x66>
    channel->IN[mode] = data;
 80081ce:	787a      	ldrb	r2, [r7, #1]
 80081d0:	8879      	ldrh	r1, [r7, #2]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	3260      	adds	r2, #96	; 0x60
 80081d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80081da:	bf00      	nop
 80081dc:	3708      	adds	r7, #8
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}

080081e2 <XMC_SPI_CH_GetReceivedData>:

/* Reads the data from the buffers based on the FIFO mode selection. */
uint16_t XMC_SPI_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 80081e2:	b580      	push	{r7, lr}
 80081e4:	b084      	sub	sp, #16
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80081f0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d112      	bne.n	800821e <XMC_SPI_CH_GetReceivedData+0x3c>
  {
  /*FHTW: check ReceiveBuffer Status added */
  while(((uint32_t)XMC_USIC_CH_GetReceiveBufferStatus(channel) != (uint32_t)XMC_USIC_CH_RBUF_STATUS_DATA_VALID1)&&((uint32_t)XMC_USIC_CH_GetReceiveBufferStatus(channel) != (uint32_t)XMC_USIC_CH_RBUF_STATUS_DATA_VALID0))
 80081f8:	bf00      	nop
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f7ff ff67 	bl	80080ce <XMC_USIC_CH_GetReceiveBufferStatus>
 8008200:	4603      	mov	r3, r0
 8008202:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008206:	d006      	beq.n	8008216 <XMC_SPI_CH_GetReceivedData+0x34>
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f7ff ff60 	bl	80080ce <XMC_USIC_CH_GetReceiveBufferStatus>
 800820e:	4603      	mov	r3, r0
 8008210:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008214:	d1f1      	bne.n	80081fa <XMC_SPI_CH_GetReceivedData+0x18>
  {
  }
    retval = (uint16_t)channel->RBUF;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800821a:	81fb      	strh	r3, [r7, #14]
 800821c:	e003      	b.n	8008226 <XMC_SPI_CH_GetReceivedData+0x44>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8008224:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 8008226:	89fb      	ldrh	r3, [r7, #14]
}
 8008228:	4618      	mov	r0, r3
 800822a:	3710      	adds	r7, #16
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <XMC_SPI_CH_EnableEvent>:

  return status;
}

void XMC_SPI_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8008230:	b480      	push	{r7}
 8008232:	b083      	sub	sp, #12
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
  if ((event & 0x80000000U) != 0U)
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	da08      	bge.n	8008252 <XMC_SPI_CH_EnableEvent+0x22>
  {
    channel->CCR |= event & 0x7fffffffU;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800824a:	431a      	orrs	r2, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	641a      	str	r2, [r3, #64]	; 0x40
  }
  else
  {
    channel->PCR_SSCMode |= event;
  }
}
 8008250:	e005      	b.n	800825e <XMC_SPI_CH_EnableEvent+0x2e>
    channel->PCR_SSCMode |= event;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	431a      	orrs	r2, r3
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800825e:	bf00      	nop
 8008260:	370c      	adds	r7, #12
 8008262:	46bd      	mov	sp, r7
 8008264:	bc80      	pop	{r7}
 8008266:	4770      	bx	lr

08008268 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 8008268:	b480      	push	{r7}
 800826a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800826c:	4b02      	ldr	r3, [pc, #8]	; (8008278 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x10>)
 800826e:	681b      	ldr	r3, [r3, #0]
}
 8008270:	4618      	mov	r0, r3
 8008272:	46bd      	mov	sp, r7
 8008274:	bc80      	pop	{r7}
 8008276:	4770      	bx	lr
 8008278:	20000034 	.word	0x20000034

0800827c <XMC_SCU_RESET_DeassertPeripheralReset>:
  *set_peripheral_reset[index] |= (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 800827c:	b480      	push	{r7}
 800827e:	b085      	sub	sp, #20
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	0f1b      	lsrs	r3, r3, #28
 8008288:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008290:	60bb      	str	r3, [r7, #8]
  static __O uint32_t *const clear_peripheral_reset[] = {&(SCU_RESET->PRCLR0),
                                                         &(SCU_RESET->PRCLR1),
                                                         &(SCU_RESET->PRCLR2)};
#endif

  *clear_peripheral_reset[index] |= (uint32_t)mask;
 8008292:	4a08      	ldr	r2, [pc, #32]	; (80082b4 <XMC_SCU_RESET_DeassertPeripheralReset+0x38>)
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800829a:	6819      	ldr	r1, [r3, #0]
 800829c:	4a05      	ldr	r2, [pc, #20]	; (80082b4 <XMC_SCU_RESET_DeassertPeripheralReset+0x38>)
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082a4:	68ba      	ldr	r2, [r7, #8]
 80082a6:	430a      	orrs	r2, r1
 80082a8:	601a      	str	r2, [r3, #0]
}
 80082aa:	bf00      	nop
 80082ac:	3714      	adds	r7, #20
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bc80      	pop	{r7}
 80082b2:	4770      	bx	lr
 80082b4:	0800ea3c 	.word	0x0800ea3c

080082b8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80082bc:	f7ff ffd4 	bl	8008268 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 80082c0:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 80082c2:	4b04      	ldr	r3, [pc, #16]	; (80082d4 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 80082c4:	695b      	ldr	r3, [r3, #20]
 80082c6:	f003 0301 	and.w	r3, r3, #1
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80082ca:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	50004600 	.word	0x50004600

080082d8 <XMC_SCU_CLOCK_EnableClock>:
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EXTCLKCR_ECKDIV_Pos);
}

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	4603      	mov	r3, r0
 80082e0:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 80082e2:	4a04      	ldr	r2, [pc, #16]	; (80082f4 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 80082e4:	79fb      	ldrb	r3, [r7, #7]
 80082e6:	6053      	str	r3, [r2, #4]
}
 80082e8:	bf00      	nop
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bc80      	pop	{r7}
 80082f0:	4770      	bx	lr
 80082f2:	bf00      	nop
 80082f4:	50004600 	.word	0x50004600

080082f8 <XMC_USIC_Enable>:
 * @brief API to enable the USIC driver
 * @retval void
 *
 */
void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a0d      	ldr	r2, [pc, #52]	; (8008338 <XMC_USIC_Enable+0x40>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d104      	bne.n	8008312 <XMC_USIC_Enable+0x1a>
  {
#if(UC_SERIES != XMC45)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8008308:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800830c:	f7ff ffb6 	bl	800827c <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8008310:	e00e      	b.n	8008330 <XMC_USIC_Enable+0x38>
  else if (usic == USIC1)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4a09      	ldr	r2, [pc, #36]	; (800833c <XMC_USIC_Enable+0x44>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d103      	bne.n	8008322 <XMC_USIC_Enable+0x2a>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 800831a:	4809      	ldr	r0, [pc, #36]	; (8008340 <XMC_USIC_Enable+0x48>)
 800831c:	f7ff ffae 	bl	800827c <XMC_SCU_RESET_DeassertPeripheralReset>
}
 8008320:	e006      	b.n	8008330 <XMC_USIC_Enable+0x38>
  else if (usic == USIC2)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4a07      	ldr	r2, [pc, #28]	; (8008344 <XMC_USIC_Enable+0x4c>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d102      	bne.n	8008330 <XMC_USIC_Enable+0x38>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 800832a:	4807      	ldr	r0, [pc, #28]	; (8008348 <XMC_USIC_Enable+0x50>)
 800832c:	f7ff ffa6 	bl	800827c <XMC_SCU_RESET_DeassertPeripheralReset>
}
 8008330:	bf00      	nop
 8008332:	3708      	adds	r7, #8
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	40030008 	.word	0x40030008
 800833c:	48020008 	.word	0x48020008
 8008340:	10000080 	.word	0x10000080
 8008344:	48024008 	.word	0x48024008
 8008348:	10000100 	.word	0x10000100

0800834c <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_CHECK_CH(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	4a1b      	ldr	r2, [pc, #108]	; (80083c4 <XMC_USIC_CH_Enable+0x78>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d003      	beq.n	8008364 <XMC_USIC_CH_Enable+0x18>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	4a1a      	ldr	r2, [pc, #104]	; (80083c8 <XMC_USIC_CH_Enable+0x7c>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d103      	bne.n	800836c <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 8008364:	4819      	ldr	r0, [pc, #100]	; (80083cc <XMC_USIC_CH_Enable+0x80>)
 8008366:	f7ff ffc7 	bl	80082f8 <XMC_USIC_Enable>
 800836a:	e016      	b.n	800839a <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	4a18      	ldr	r2, [pc, #96]	; (80083d0 <XMC_USIC_CH_Enable+0x84>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d003      	beq.n	800837c <XMC_USIC_CH_Enable+0x30>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a17      	ldr	r2, [pc, #92]	; (80083d4 <XMC_USIC_CH_Enable+0x88>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d103      	bne.n	8008384 <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 800837c:	4816      	ldr	r0, [pc, #88]	; (80083d8 <XMC_USIC_CH_Enable+0x8c>)
 800837e:	f7ff ffbb 	bl	80082f8 <XMC_USIC_Enable>
 8008382:	e00a      	b.n	800839a <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	4a15      	ldr	r2, [pc, #84]	; (80083dc <XMC_USIC_CH_Enable+0x90>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d003      	beq.n	8008394 <XMC_USIC_CH_Enable+0x48>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	4a14      	ldr	r2, [pc, #80]	; (80083e0 <XMC_USIC_CH_Enable+0x94>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d102      	bne.n	800839a <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 8008394:	4813      	ldr	r0, [pc, #76]	; (80083e4 <XMC_USIC_CH_Enable+0x98>)
 8008396:	f7ff ffaf 	bl	80082f8 <XMC_USIC_Enable>
  else
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }
  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2203      	movs	r2, #3
 800839e:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 80083a0:	bf00      	nop
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	f003 0301 	and.w	r3, r3, #1
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d0f9      	beq.n	80083a2 <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b2:	f023 020f 	bic.w	r2, r3, #15
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80083ba:	bf00      	nop
 80083bc:	3708      	adds	r7, #8
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	40030000 	.word	0x40030000
 80083c8:	40030200 	.word	0x40030200
 80083cc:	40030008 	.word	0x40030008
 80083d0:	48020000 	.word	0x48020000
 80083d4:	48020200 	.word	0x48020200
 80083d8:	48020008 	.word	0x48020008
 80083dc:	48024000 	.word	0x48024000
 80083e0:	48024200 	.word	0x48024200
 80083e4:	48024008 	.word	0x48024008

080083e8 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b08e      	sub	sp, #56	; 0x38
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	607a      	str	r2, [r7, #4]

  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	2b63      	cmp	r3, #99	; 0x63
 80083f8:	d95a      	bls.n	80084b0 <XMC_USIC_CH_SetBaudrate+0xc8>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d057      	beq.n	80084b0 <XMC_USIC_CH_SetBaudrate+0xc8>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8008400:	f7ff ff5a 	bl	80082b8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8008404:	4602      	mov	r2, r0
 8008406:	4b2f      	ldr	r3, [pc, #188]	; (80084c4 <XMC_USIC_CH_SetBaudrate+0xdc>)
 8008408:	fba3 2302 	umull	r2, r3, r3, r2
 800840c:	095b      	lsrs	r3, r3, #5
 800840e:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	4a2c      	ldr	r2, [pc, #176]	; (80084c4 <XMC_USIC_CH_SetBaudrate+0xdc>)
 8008414:	fba2 2303 	umull	r2, r3, r2, r3
 8008418:	095b      	lsrs	r3, r3, #5
 800841a:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
 800841c:	2301      	movs	r3, #1
 800841e:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 8008420:	2301      	movs	r3, #1
 8008422:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 8008424:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8008428:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 800842a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800842e:	633b      	str	r3, [r7, #48]	; 0x30
 8008430:	e022      	b.n	8008478 <XMC_USIC_CH_SetBaudrate+0x90>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 8008432:	6a3b      	ldr	r3, [r7, #32]
 8008434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008436:	fb02 f203 	mul.w	r2, r2, r3
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	6879      	ldr	r1, [r7, #4]
 800843e:	fb01 f303 	mul.w	r3, r1, r3
 8008442:	fbb2 f3f3 	udiv	r3, r2, r3
 8008446:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	0a9b      	lsrs	r3, r3, #10
 800844c:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 800844e:	69fb      	ldr	r3, [r7, #28]
 8008450:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008454:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 8008456:	69bb      	ldr	r3, [r7, #24]
 8008458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800845c:	d209      	bcs.n	8008472 <XMC_USIC_CH_SetBaudrate+0x8a>
 800845e:	697a      	ldr	r2, [r7, #20]
 8008460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008462:	429a      	cmp	r2, r3
 8008464:	d205      	bcs.n	8008472 <XMC_USIC_CH_SetBaudrate+0x8a>
      {
        pdiv_frac_min = pdiv_frac;
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 800846a:	69bb      	ldr	r3, [r7, #24]
 800846c:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 800846e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008470:	62fb      	str	r3, [r7, #44]	; 0x2c
    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8008472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008474:	3b01      	subs	r3, #1
 8008476:	633b      	str	r3, [r7, #48]	; 0x30
 8008478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847a:	2b00      	cmp	r3, #0
 800847c:	d1d9      	bne.n	8008432 <XMC_USIC_CH_SetBaudrate+0x4a>
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 800847e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008480:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	695a      	ldr	r2, [r3, #20]
 800848c:	4b0e      	ldr	r3, [pc, #56]	; (80084c8 <XMC_USIC_CH_SetBaudrate+0xe0>)
 800848e:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	3a01      	subs	r2, #1
 8008494:	0292      	lsls	r2, r2, #10
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8008496:	431a      	orrs	r2, r3
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos)|(0x1UL<<USIC_CH_BRG_SCLKCFG_Pos);
 8008498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849a:	3b01      	subs	r3, #1
 800849c:	041b      	lsls	r3, r3, #16
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 800849e:	4313      	orrs	r3, r2
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos)|(0x1UL<<USIC_CH_BRG_SCLKCFG_Pos);
 80084a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	615a      	str	r2, [r3, #20]

    status = XMC_USIC_CH_STATUS_OK;
 80084a8:	2300      	movs	r3, #0
 80084aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80084ae:	e002      	b.n	80084b6 <XMC_USIC_CH_SetBaudrate+0xce>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  return status;
 80084b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3738      	adds	r7, #56	; 0x38
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	51eb851f 	.word	0x51eb851f
 80084c8:	fc0080ef 	.word	0xfc0080ef

080084cc <XMC_USIC_CH_SetInterruptNodePointer>:


void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b085      	sub	sp, #20
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	460b      	mov	r3, r1
 80084d6:	607a      	str	r2, [r7, #4]
 80084d8:	72fb      	strb	r3, [r7, #11]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	699a      	ldr	r2, [r3, #24]
 80084de:	7afb      	ldrb	r3, [r7, #11]
 80084e0:	2107      	movs	r1, #7
 80084e2:	fa01 f303 	lsl.w	r3, r1, r3
 80084e6:	43db      	mvns	r3, r3
 80084e8:	401a      	ands	r2, r3
                  (service_request << (uint32_t)interrupt_node));
 80084ea:	7afb      	ldrb	r3, [r7, #11]
 80084ec:	6879      	ldr	r1, [r7, #4]
 80084ee:	fa01 f303 	lsl.w	r3, r1, r3
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80084f2:	431a      	orrs	r2, r3
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	619a      	str	r2, [r3, #24]
}
 80084f8:	bf00      	nop
 80084fa:	3714      	adds	r7, #20
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bc80      	pop	{r7}
 8008500:	4770      	bx	lr
	...

08008504 <Reset_Handler>:
    .section  .text.Reset_Handler
    .weak  Reset_Handler
    .type  Reset_Handler, %function
Reset_Handler:
                                            @ Disable Branch prediction.
    ldr r0,=PREF_PCON
 8008504:	4817      	ldr	r0, [pc, #92]	; (8008564 <LoopForever+0x2>)
    ldr r1,[r0]
 8008506:	6801      	ldr	r1, [r0, #0]
    orr r1,r1,#0x00010000
 8008508:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
    str r1,[r0]
 800850c:	6001      	str	r1, [r0, #0]

                                            @ Clear existing parity errors if any.
    ldr r0,=SCU_GCU_PEFLAG
 800850e:	4816      	ldr	r0, [pc, #88]	; (8008568 <LoopForever+0x6>)
    ldr r1,=0xFFFFFFFF
 8008510:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    str r1,[r0]
 8008514:	6001      	str	r1, [r0, #0]

                                            @ Disable parity.
    ldr r0,=SCU_GCU_PEEN
 8008516:	4815      	ldr	r0, [pc, #84]	; (800856c <LoopForever+0xa>)
    mov r1,#0
 8008518:	f04f 0100 	mov.w	r1, #0
    str r1,[R0]
 800851c:	6001      	str	r1, [r0, #0]
    AND     R1,  R1, #(0x3FFFFFFF)          @ Clear the LSPEN and ASPEN bits
    STR     R1, [R0]
    ISB                                     @ Reset pipeline now the FPU is enabled
#endif

    LDR     R1, =0xE000ED14                 @ Load address to CCR register
 800851e:	4914      	ldr	r1, [pc, #80]	; (8008570 <LoopForever+0xe>)
    LDR.W   R0, [R1, #0x0]
 8008520:	f8d1 0000 	ldr.w	r0, [r1]
    BIC     R0,  R0, #0x8                   @ Enable unaligned memory access
 8008524:	f020 0008 	bic.w	r0, r0, #8
    STR.W   R0, [R1, #0x0]
 8008528:	f8c1 0000 	str.w	r0, [r1]

    ldr sp, =_estack                        @ set stack pointer.
 800852c:	f8df d044 	ldr.w	sp, [pc, #68]	; 8008574 <LoopForever+0x12>

                                            @ a) copy .data section (Copy from ROM to RAM).
    movs r1, #0
 8008530:	2100      	movs	r1, #0
    b LoopCopyDataInit
 8008532:	e003      	b.n	800853c <LoopCopyDataInit>

08008534 <CopyDataInit>:

CopyDataInit:
    ldr r3, =_sidata
 8008534:	4b10      	ldr	r3, [pc, #64]	; (8008578 <LoopForever+0x16>)
    ldr r3, [r3, r1]
 8008536:	585b      	ldr	r3, [r3, r1]
    str r3, [r0, r1]
 8008538:	5043      	str	r3, [r0, r1]
    adds r1, r1, #4
 800853a:	3104      	adds	r1, #4

0800853c <LoopCopyDataInit>:

LoopCopyDataInit:
    ldr r0, =_sdata
 800853c:	480f      	ldr	r0, [pc, #60]	; (800857c <LoopForever+0x1a>)
    ldr r3, =_edata
 800853e:	4b10      	ldr	r3, [pc, #64]	; (8008580 <LoopForever+0x1e>)
    adds r2, r0, r1
 8008540:	1842      	adds	r2, r0, r1
    cmp r2, r3
 8008542:	429a      	cmp	r2, r3
    bcc CopyDataInit
 8008544:	d3f6      	bcc.n	8008534 <CopyDataInit>
    ldr r2, =_sbss
 8008546:	4a0f      	ldr	r2, [pc, #60]	; (8008584 <LoopForever+0x22>)
    b LoopFillZerobss
 8008548:	e002      	b.n	8008550 <LoopFillZerobss>

0800854a <FillZerobss>:

                                            @ b) Clear .bss section (Zero init).
FillZerobss:
    movs r3, #0
 800854a:	2300      	movs	r3, #0
    str r3, [r2], #4
 800854c:	f842 3b04 	str.w	r3, [r2], #4

08008550 <LoopFillZerobss>:

LoopFillZerobss:
    ldr r3, = _ebss
 8008550:	4b0d      	ldr	r3, [pc, #52]	; (8008588 <LoopForever+0x26>)
    cmp r2, r3
 8008552:	429a      	cmp	r2, r3
    bcc FillZerobss
 8008554:	d3f9      	bcc.n	800854a <FillZerobss>

    bl BSP_LowLevelInit                     @ c) Call system initialzation routine.
 8008556:	f7fd fead 	bl	80062b4 <BSP_LowLevelInit>

    bl __libc_init_array                    @ d) Run static constructors.
 800855a:	f000 f823 	bl	80085a4 <__libc_init_array>

    bl main                                 @ e) Enter main.
 800855e:	f7f8 fe43 	bl	80011e8 <main>

08008562 <LoopForever>:

                                            @ f) Loop forever if returning from main.
LoopForever:
    b LoopForever
 8008562:	e7fe      	b.n	8008562 <LoopForever>
    ldr r0,=PREF_PCON
 8008564:	58004000 	.word	0x58004000
    ldr r0,=SCU_GCU_PEFLAG
 8008568:	50004150 	.word	0x50004150
    ldr r0,=SCU_GCU_PEEN
 800856c:	5000413c 	.word	0x5000413c
    LDR     R1, =0xE000ED14                 @ Load address to CCR register
 8008570:	e000ed14 	.word	0xe000ed14
    ldr sp, =_estack                        @ set stack pointer.
 8008574:	20010000 	.word	0x20010000
    ldr r3, =_sidata
 8008578:	0800ed00 	.word	0x0800ed00
    ldr r0, =_sdata
 800857c:	20000000 	.word	0x20000000
    ldr r3, =_edata
 8008580:	200009e4 	.word	0x200009e4
    ldr r2, =_sbss
 8008584:	200009e4 	.word	0x200009e4
    ldr r3, = _ebss
 8008588:	20003348 	.word	0x20003348

0800858c <App_NMI_ISR>:

@ Dummy Exception Handlers (infinite loops which can be modified)

    .section	.text.App_NMI_ISR
App_NMI_ISR:
	b	App_NMI_ISR
 800858c:	e7fe      	b.n	800858c <App_NMI_ISR>

0800858e <App_Fault_ISR>:
	.size	App_NMI_ISR, .-App_NMI_ISR


    .section	.text.App_Fault_ISR
App_Fault_ISR:
	b	App_Fault_ISR
 800858e:	e7fe      	b.n	800858e <App_Fault_ISR>

08008590 <App_MemFault_ISR>:
	.size	App_Fault_ISR, .-App_Fault_ISR


    .section	.text.App_MemFault_ISR
App_MemFault_ISR:
	b	App_MemFault_ISR
 8008590:	e7fe      	b.n	8008590 <App_MemFault_ISR>

08008592 <App_BusFault_ISR>:
	.size	App_MemFault_ISR, .-App_MemFault_ISR


    .section	.text.App_BusFault_ISR
App_BusFault_ISR:
	b	App_BusFault_ISR
 8008592:	e7fe      	b.n	8008592 <App_BusFault_ISR>

08008594 <App_UsageFault_ISR>:
	.size	App_BusFault_ISR, .-App_BusFault_ISR


    .section	.text.App_UsageFault_ISR
App_UsageFault_ISR:
	b	App_UsageFault_ISR
 8008594:	e7fe      	b.n	8008594 <App_UsageFault_ISR>

08008596 <App_Spurious_ISR>:
	.size	App_UsageFault_ISR, .-App_UsageFault_ISR

    .section	.text.App_Spurious_ISR
App_Spurious_ISR:
	b	App_Spurious_ISR
 8008596:	e7fe      	b.n	8008596 <App_Spurious_ISR>

08008598 <__errno>:
 8008598:	4b01      	ldr	r3, [pc, #4]	; (80085a0 <__errno+0x8>)
 800859a:	6818      	ldr	r0, [r3, #0]
 800859c:	4770      	bx	lr
 800859e:	bf00      	nop
 80085a0:	20000038 	.word	0x20000038

080085a4 <__libc_init_array>:
 80085a4:	b570      	push	{r4, r5, r6, lr}
 80085a6:	4e0d      	ldr	r6, [pc, #52]	; (80085dc <__libc_init_array+0x38>)
 80085a8:	4d0d      	ldr	r5, [pc, #52]	; (80085e0 <__libc_init_array+0x3c>)
 80085aa:	1b76      	subs	r6, r6, r5
 80085ac:	10b6      	asrs	r6, r6, #2
 80085ae:	d006      	beq.n	80085be <__libc_init_array+0x1a>
 80085b0:	2400      	movs	r4, #0
 80085b2:	3401      	adds	r4, #1
 80085b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80085b8:	4798      	blx	r3
 80085ba:	42a6      	cmp	r6, r4
 80085bc:	d1f9      	bne.n	80085b2 <__libc_init_array+0xe>
 80085be:	4e09      	ldr	r6, [pc, #36]	; (80085e4 <__libc_init_array+0x40>)
 80085c0:	4d09      	ldr	r5, [pc, #36]	; (80085e8 <__libc_init_array+0x44>)
 80085c2:	1b76      	subs	r6, r6, r5
 80085c4:	f7ff f8d2 	bl	800776c <_init>
 80085c8:	10b6      	asrs	r6, r6, #2
 80085ca:	d006      	beq.n	80085da <__libc_init_array+0x36>
 80085cc:	2400      	movs	r4, #0
 80085ce:	3401      	adds	r4, #1
 80085d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80085d4:	4798      	blx	r3
 80085d6:	42a6      	cmp	r6, r4
 80085d8:	d1f9      	bne.n	80085ce <__libc_init_array+0x2a>
 80085da:	bd70      	pop	{r4, r5, r6, pc}
 80085dc:	0800ed00 	.word	0x0800ed00
 80085e0:	0800ed00 	.word	0x0800ed00
 80085e4:	0800ed00 	.word	0x0800ed00
 80085e8:	0800ed00 	.word	0x0800ed00

080085ec <memset>:
 80085ec:	b4f0      	push	{r4, r5, r6, r7}
 80085ee:	0786      	lsls	r6, r0, #30
 80085f0:	d043      	beq.n	800867a <memset+0x8e>
 80085f2:	1e54      	subs	r4, r2, #1
 80085f4:	2a00      	cmp	r2, #0
 80085f6:	d03e      	beq.n	8008676 <memset+0x8a>
 80085f8:	b2ca      	uxtb	r2, r1
 80085fa:	4603      	mov	r3, r0
 80085fc:	e002      	b.n	8008604 <memset+0x18>
 80085fe:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 8008602:	d338      	bcc.n	8008676 <memset+0x8a>
 8008604:	f803 2b01 	strb.w	r2, [r3], #1
 8008608:	079d      	lsls	r5, r3, #30
 800860a:	d1f8      	bne.n	80085fe <memset+0x12>
 800860c:	2c03      	cmp	r4, #3
 800860e:	d92b      	bls.n	8008668 <memset+0x7c>
 8008610:	b2cd      	uxtb	r5, r1
 8008612:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8008616:	2c0f      	cmp	r4, #15
 8008618:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800861c:	d916      	bls.n	800864c <memset+0x60>
 800861e:	f1a4 0710 	sub.w	r7, r4, #16
 8008622:	093f      	lsrs	r7, r7, #4
 8008624:	f103 0620 	add.w	r6, r3, #32
 8008628:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 800862c:	f103 0210 	add.w	r2, r3, #16
 8008630:	e942 5504 	strd	r5, r5, [r2, #-16]
 8008634:	e942 5502 	strd	r5, r5, [r2, #-8]
 8008638:	3210      	adds	r2, #16
 800863a:	42b2      	cmp	r2, r6
 800863c:	d1f8      	bne.n	8008630 <memset+0x44>
 800863e:	f004 040f 	and.w	r4, r4, #15
 8008642:	3701      	adds	r7, #1
 8008644:	2c03      	cmp	r4, #3
 8008646:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 800864a:	d90d      	bls.n	8008668 <memset+0x7c>
 800864c:	461e      	mov	r6, r3
 800864e:	4622      	mov	r2, r4
 8008650:	3a04      	subs	r2, #4
 8008652:	2a03      	cmp	r2, #3
 8008654:	f846 5b04 	str.w	r5, [r6], #4
 8008658:	d8fa      	bhi.n	8008650 <memset+0x64>
 800865a:	1f22      	subs	r2, r4, #4
 800865c:	f022 0203 	bic.w	r2, r2, #3
 8008660:	3204      	adds	r2, #4
 8008662:	4413      	add	r3, r2
 8008664:	f004 0403 	and.w	r4, r4, #3
 8008668:	b12c      	cbz	r4, 8008676 <memset+0x8a>
 800866a:	b2c9      	uxtb	r1, r1
 800866c:	441c      	add	r4, r3
 800866e:	f803 1b01 	strb.w	r1, [r3], #1
 8008672:	429c      	cmp	r4, r3
 8008674:	d1fb      	bne.n	800866e <memset+0x82>
 8008676:	bcf0      	pop	{r4, r5, r6, r7}
 8008678:	4770      	bx	lr
 800867a:	4614      	mov	r4, r2
 800867c:	4603      	mov	r3, r0
 800867e:	e7c5      	b.n	800860c <memset+0x20>

08008680 <printf>:
 8008680:	b40f      	push	{r0, r1, r2, r3}
 8008682:	b500      	push	{lr}
 8008684:	4907      	ldr	r1, [pc, #28]	; (80086a4 <printf+0x24>)
 8008686:	b083      	sub	sp, #12
 8008688:	ab04      	add	r3, sp, #16
 800868a:	6808      	ldr	r0, [r1, #0]
 800868c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008690:	6881      	ldr	r1, [r0, #8]
 8008692:	9301      	str	r3, [sp, #4]
 8008694:	f001 fbfe 	bl	8009e94 <_vfprintf_r>
 8008698:	b003      	add	sp, #12
 800869a:	f85d eb04 	ldr.w	lr, [sp], #4
 800869e:	b004      	add	sp, #16
 80086a0:	4770      	bx	lr
 80086a2:	bf00      	nop
 80086a4:	20000038 	.word	0x20000038

080086a8 <_puts_r>:
 80086a8:	b570      	push	{r4, r5, r6, lr}
 80086aa:	4605      	mov	r5, r0
 80086ac:	b088      	sub	sp, #32
 80086ae:	4608      	mov	r0, r1
 80086b0:	460c      	mov	r4, r1
 80086b2:	f7f8 f845 	bl	8000740 <strlen>
 80086b6:	4a22      	ldr	r2, [pc, #136]	; (8008740 <_puts_r+0x98>)
 80086b8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80086ba:	9404      	str	r4, [sp, #16]
 80086bc:	2601      	movs	r6, #1
 80086be:	1c44      	adds	r4, r0, #1
 80086c0:	a904      	add	r1, sp, #16
 80086c2:	9206      	str	r2, [sp, #24]
 80086c4:	2202      	movs	r2, #2
 80086c6:	9403      	str	r4, [sp, #12]
 80086c8:	9005      	str	r0, [sp, #20]
 80086ca:	68ac      	ldr	r4, [r5, #8]
 80086cc:	9607      	str	r6, [sp, #28]
 80086ce:	e9cd 1201 	strd	r1, r2, [sp, #4]
 80086d2:	b31b      	cbz	r3, 800871c <_puts_r+0x74>
 80086d4:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80086d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086da:	07ce      	lsls	r6, r1, #31
 80086dc:	b29a      	uxth	r2, r3
 80086de:	d401      	bmi.n	80086e4 <_puts_r+0x3c>
 80086e0:	0590      	lsls	r0, r2, #22
 80086e2:	d525      	bpl.n	8008730 <_puts_r+0x88>
 80086e4:	0491      	lsls	r1, r2, #18
 80086e6:	d406      	bmi.n	80086f6 <_puts_r+0x4e>
 80086e8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80086ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80086ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80086f2:	81a3      	strh	r3, [r4, #12]
 80086f4:	6662      	str	r2, [r4, #100]	; 0x64
 80086f6:	4628      	mov	r0, r5
 80086f8:	aa01      	add	r2, sp, #4
 80086fa:	4621      	mov	r1, r4
 80086fc:	f004 f904 	bl	800c908 <__sfvwrite_r>
 8008700:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008702:	2800      	cmp	r0, #0
 8008704:	bf0c      	ite	eq
 8008706:	250a      	moveq	r5, #10
 8008708:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800870c:	07da      	lsls	r2, r3, #31
 800870e:	d402      	bmi.n	8008716 <_puts_r+0x6e>
 8008710:	89a3      	ldrh	r3, [r4, #12]
 8008712:	059b      	lsls	r3, r3, #22
 8008714:	d506      	bpl.n	8008724 <_puts_r+0x7c>
 8008716:	4628      	mov	r0, r5
 8008718:	b008      	add	sp, #32
 800871a:	bd70      	pop	{r4, r5, r6, pc}
 800871c:	4628      	mov	r0, r5
 800871e:	f003 ff77 	bl	800c610 <__sinit>
 8008722:	e7d7      	b.n	80086d4 <_puts_r+0x2c>
 8008724:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008726:	f004 fabd 	bl	800cca4 <__retarget_lock_release_recursive>
 800872a:	4628      	mov	r0, r5
 800872c:	b008      	add	sp, #32
 800872e:	bd70      	pop	{r4, r5, r6, pc}
 8008730:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008732:	f004 fab5 	bl	800cca0 <__retarget_lock_acquire_recursive>
 8008736:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800873a:	b29a      	uxth	r2, r3
 800873c:	e7d2      	b.n	80086e4 <_puts_r+0x3c>
 800873e:	bf00      	nop
 8008740:	0800ea4c 	.word	0x0800ea4c

08008744 <puts>:
 8008744:	4b02      	ldr	r3, [pc, #8]	; (8008750 <puts+0xc>)
 8008746:	4601      	mov	r1, r0
 8008748:	6818      	ldr	r0, [r3, #0]
 800874a:	f7ff bfad 	b.w	80086a8 <_puts_r>
 800874e:	bf00      	nop
 8008750:	20000038 	.word	0x20000038

08008754 <sprintf>:
 8008754:	b40e      	push	{r1, r2, r3}
 8008756:	b530      	push	{r4, r5, lr}
 8008758:	b09c      	sub	sp, #112	; 0x70
 800875a:	ab1f      	add	r3, sp, #124	; 0x7c
 800875c:	4c0c      	ldr	r4, [pc, #48]	; (8008790 <sprintf+0x3c>)
 800875e:	4d0d      	ldr	r5, [pc, #52]	; (8008794 <sprintf+0x40>)
 8008760:	f853 2b04 	ldr.w	r2, [r3], #4
 8008764:	9301      	str	r3, [sp, #4]
 8008766:	4601      	mov	r1, r0
 8008768:	9102      	str	r1, [sp, #8]
 800876a:	9106      	str	r1, [sp, #24]
 800876c:	6820      	ldr	r0, [r4, #0]
 800876e:	a902      	add	r1, sp, #8
 8008770:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8008774:	9407      	str	r4, [sp, #28]
 8008776:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800877a:	f000 f93b 	bl	80089f4 <_svfprintf_r>
 800877e:	9b02      	ldr	r3, [sp, #8]
 8008780:	2200      	movs	r2, #0
 8008782:	701a      	strb	r2, [r3, #0]
 8008784:	b01c      	add	sp, #112	; 0x70
 8008786:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800878a:	b003      	add	sp, #12
 800878c:	4770      	bx	lr
 800878e:	bf00      	nop
 8008790:	20000038 	.word	0x20000038
 8008794:	ffff0208 	.word	0xffff0208

08008798 <strncmp>:
 8008798:	2a00      	cmp	r2, #0
 800879a:	d041      	beq.n	8008820 <strncmp+0x88>
 800879c:	ea40 0301 	orr.w	r3, r0, r1
 80087a0:	f013 0303 	ands.w	r3, r3, #3
 80087a4:	b4f0      	push	{r4, r5, r6, r7}
 80087a6:	d125      	bne.n	80087f4 <strncmp+0x5c>
 80087a8:	2a03      	cmp	r2, #3
 80087aa:	d923      	bls.n	80087f4 <strncmp+0x5c>
 80087ac:	6804      	ldr	r4, [r0, #0]
 80087ae:	680d      	ldr	r5, [r1, #0]
 80087b0:	42ac      	cmp	r4, r5
 80087b2:	d11f      	bne.n	80087f4 <strncmp+0x5c>
 80087b4:	3a04      	subs	r2, #4
 80087b6:	d035      	beq.n	8008824 <strncmp+0x8c>
 80087b8:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 80087bc:	ea25 0404 	bic.w	r4, r5, r4
 80087c0:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 80087c4:	d131      	bne.n	800882a <strncmp+0x92>
 80087c6:	1d07      	adds	r7, r0, #4
 80087c8:	1d0d      	adds	r5, r1, #4
 80087ca:	e00d      	b.n	80087e8 <strncmp+0x50>
 80087cc:	f857 3b04 	ldr.w	r3, [r7], #4
 80087d0:	680e      	ldr	r6, [r1, #0]
 80087d2:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
 80087d6:	42b3      	cmp	r3, r6
 80087d8:	ea24 0403 	bic.w	r4, r4, r3
 80087dc:	d10a      	bne.n	80087f4 <strncmp+0x5c>
 80087de:	3a04      	subs	r2, #4
 80087e0:	d020      	beq.n	8008824 <strncmp+0x8c>
 80087e2:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 80087e6:	d11d      	bne.n	8008824 <strncmp+0x8c>
 80087e8:	2a03      	cmp	r2, #3
 80087ea:	4629      	mov	r1, r5
 80087ec:	4638      	mov	r0, r7
 80087ee:	f105 0504 	add.w	r5, r5, #4
 80087f2:	d8eb      	bhi.n	80087cc <strncmp+0x34>
 80087f4:	7803      	ldrb	r3, [r0, #0]
 80087f6:	780c      	ldrb	r4, [r1, #0]
 80087f8:	429c      	cmp	r4, r3
 80087fa:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80087fe:	d10c      	bne.n	800881a <strncmp+0x82>
 8008800:	b182      	cbz	r2, 8008824 <strncmp+0x8c>
 8008802:	b914      	cbnz	r4, 800880a <strncmp+0x72>
 8008804:	e00e      	b.n	8008824 <strncmp+0x8c>
 8008806:	b16a      	cbz	r2, 8008824 <strncmp+0x8c>
 8008808:	b17b      	cbz	r3, 800882a <strncmp+0x92>
 800880a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800880e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008812:	42a3      	cmp	r3, r4
 8008814:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8008818:	d0f5      	beq.n	8008806 <strncmp+0x6e>
 800881a:	1b18      	subs	r0, r3, r4
 800881c:	bcf0      	pop	{r4, r5, r6, r7}
 800881e:	4770      	bx	lr
 8008820:	4610      	mov	r0, r2
 8008822:	4770      	bx	lr
 8008824:	2000      	movs	r0, #0
 8008826:	bcf0      	pop	{r4, r5, r6, r7}
 8008828:	4770      	bx	lr
 800882a:	4618      	mov	r0, r3
 800882c:	e7f6      	b.n	800881c <strncmp+0x84>
 800882e:	bf00      	nop

08008830 <strtok>:
 8008830:	4b02      	ldr	r3, [pc, #8]	; (800883c <strtok+0xc>)
 8008832:	681a      	ldr	r2, [r3, #0]
 8008834:	2301      	movs	r3, #1
 8008836:	325c      	adds	r2, #92	; 0x5c
 8008838:	f000 b802 	b.w	8008840 <__strtok_r>
 800883c:	20000038 	.word	0x20000038

08008840 <__strtok_r>:
 8008840:	b4f0      	push	{r4, r5, r6, r7}
 8008842:	b320      	cbz	r0, 800888e <__strtok_r+0x4e>
 8008844:	4607      	mov	r7, r0
 8008846:	460d      	mov	r5, r1
 8008848:	f817 6b01 	ldrb.w	r6, [r7], #1
 800884c:	e001      	b.n	8008852 <__strtok_r+0x12>
 800884e:	42a6      	cmp	r6, r4
 8008850:	d016      	beq.n	8008880 <__strtok_r+0x40>
 8008852:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008856:	2c00      	cmp	r4, #0
 8008858:	d1f9      	bne.n	800884e <__strtok_r+0xe>
 800885a:	b1ee      	cbz	r6, 8008898 <__strtok_r+0x58>
 800885c:	463e      	mov	r6, r7
 800885e:	460c      	mov	r4, r1
 8008860:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008864:	e000      	b.n	8008868 <__strtok_r+0x28>
 8008866:	b173      	cbz	r3, 8008886 <__strtok_r+0x46>
 8008868:	f814 3b01 	ldrb.w	r3, [r4], #1
 800886c:	429d      	cmp	r5, r3
 800886e:	d1fa      	bne.n	8008866 <__strtok_r+0x26>
 8008870:	b15d      	cbz	r5, 800888a <__strtok_r+0x4a>
 8008872:	2300      	movs	r3, #0
 8008874:	703b      	strb	r3, [r7, #0]
 8008876:	6016      	str	r6, [r2, #0]
 8008878:	4606      	mov	r6, r0
 800887a:	4630      	mov	r0, r6
 800887c:	bcf0      	pop	{r4, r5, r6, r7}
 800887e:	4770      	bx	lr
 8008880:	b163      	cbz	r3, 800889c <__strtok_r+0x5c>
 8008882:	4638      	mov	r0, r7
 8008884:	e7de      	b.n	8008844 <__strtok_r+0x4>
 8008886:	4637      	mov	r7, r6
 8008888:	e7e8      	b.n	800885c <__strtok_r+0x1c>
 800888a:	462e      	mov	r6, r5
 800888c:	e7f3      	b.n	8008876 <__strtok_r+0x36>
 800888e:	6810      	ldr	r0, [r2, #0]
 8008890:	2800      	cmp	r0, #0
 8008892:	d1d7      	bne.n	8008844 <__strtok_r+0x4>
 8008894:	4606      	mov	r6, r0
 8008896:	e7f0      	b.n	800887a <__strtok_r+0x3a>
 8008898:	6016      	str	r6, [r2, #0]
 800889a:	e7ee      	b.n	800887a <__strtok_r+0x3a>
 800889c:	6017      	str	r7, [r2, #0]
 800889e:	4606      	mov	r6, r0
 80088a0:	7003      	strb	r3, [r0, #0]
 80088a2:	e7ea      	b.n	800887a <__strtok_r+0x3a>

080088a4 <_strtol_l.isra.0>:
 80088a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088a8:	460e      	mov	r6, r1
 80088aa:	4680      	mov	r8, r0
 80088ac:	4617      	mov	r7, r2
 80088ae:	4699      	mov	r9, r3
 80088b0:	460d      	mov	r5, r1
 80088b2:	e000      	b.n	80088b6 <_strtol_l.isra.0+0x12>
 80088b4:	4625      	mov	r5, r4
 80088b6:	462c      	mov	r4, r5
 80088b8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80088ba:	f814 bb01 	ldrb.w	fp, [r4], #1
 80088be:	f004 f9d9 	bl	800cc74 <__locale_ctype_ptr_l>
 80088c2:	4458      	add	r0, fp
 80088c4:	7841      	ldrb	r1, [r0, #1]
 80088c6:	f011 0108 	ands.w	r1, r1, #8
 80088ca:	d1f3      	bne.n	80088b4 <_strtol_l.isra.0+0x10>
 80088cc:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
 80088d0:	d057      	beq.n	8008982 <_strtol_l.isra.0+0xde>
 80088d2:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 80088d6:	bf04      	itt	eq
 80088d8:	f895 b001 	ldrbeq.w	fp, [r5, #1]
 80088dc:	1cac      	addeq	r4, r5, #2
 80088de:	f1b9 0f00 	cmp.w	r9, #0
 80088e2:	d004      	beq.n	80088ee <_strtol_l.isra.0+0x4a>
 80088e4:	f1b9 0f10 	cmp.w	r9, #16
 80088e8:	d050      	beq.n	800898c <_strtol_l.isra.0+0xe8>
 80088ea:	46cc      	mov	ip, r9
 80088ec:	e005      	b.n	80088fa <_strtol_l.isra.0+0x56>
 80088ee:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 80088f2:	d055      	beq.n	80089a0 <_strtol_l.isra.0+0xfc>
 80088f4:	f04f 090a 	mov.w	r9, #10
 80088f8:	46cc      	mov	ip, r9
 80088fa:	2900      	cmp	r1, #0
 80088fc:	bf0c      	ite	eq
 80088fe:	f06f 4e00 	mvneq.w	lr, #2147483648	; 0x80000000
 8008902:	f04f 4e00 	movne.w	lr, #2147483648	; 0x80000000
 8008906:	2500      	movs	r5, #0
 8008908:	fbbe f3fc 	udiv	r3, lr, ip
 800890c:	4628      	mov	r0, r5
 800890e:	fb0c ea13 	mls	sl, ip, r3, lr
 8008912:	e005      	b.n	8008920 <_strtol_l.isra.0+0x7c>
 8008914:	d029      	beq.n	800896a <_strtol_l.isra.0+0xc6>
 8008916:	fb0c 2000 	mla	r0, ip, r0, r2
 800891a:	2501      	movs	r5, #1
 800891c:	f814 bb01 	ldrb.w	fp, [r4], #1
 8008920:	f1ab 0230 	sub.w	r2, fp, #48	; 0x30
 8008924:	2a09      	cmp	r2, #9
 8008926:	d905      	bls.n	8008934 <_strtol_l.isra.0+0x90>
 8008928:	f1ab 0241 	sub.w	r2, fp, #65	; 0x41
 800892c:	2a19      	cmp	r2, #25
 800892e:	d80b      	bhi.n	8008948 <_strtol_l.isra.0+0xa4>
 8008930:	f1ab 0237 	sub.w	r2, fp, #55	; 0x37
 8008934:	4591      	cmp	r9, r2
 8008936:	dd0f      	ble.n	8008958 <_strtol_l.isra.0+0xb4>
 8008938:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800893c:	d0ee      	beq.n	800891c <_strtol_l.isra.0+0x78>
 800893e:	4283      	cmp	r3, r0
 8008940:	d2e8      	bcs.n	8008914 <_strtol_l.isra.0+0x70>
 8008942:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008946:	e7e9      	b.n	800891c <_strtol_l.isra.0+0x78>
 8008948:	f1ab 0261 	sub.w	r2, fp, #97	; 0x61
 800894c:	2a19      	cmp	r2, #25
 800894e:	d803      	bhi.n	8008958 <_strtol_l.isra.0+0xb4>
 8008950:	f1ab 0257 	sub.w	r2, fp, #87	; 0x57
 8008954:	4591      	cmp	r9, r2
 8008956:	dcef      	bgt.n	8008938 <_strtol_l.isra.0+0x94>
 8008958:	1c6b      	adds	r3, r5, #1
 800895a:	d00b      	beq.n	8008974 <_strtol_l.isra.0+0xd0>
 800895c:	b101      	cbz	r1, 8008960 <_strtol_l.isra.0+0xbc>
 800895e:	4240      	negs	r0, r0
 8008960:	b10f      	cbz	r7, 8008966 <_strtol_l.isra.0+0xc2>
 8008962:	bb4d      	cbnz	r5, 80089b8 <_strtol_l.isra.0+0x114>
 8008964:	603e      	str	r6, [r7, #0]
 8008966:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800896a:	4592      	cmp	sl, r2
 800896c:	dad3      	bge.n	8008916 <_strtol_l.isra.0+0x72>
 800896e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008972:	e7d3      	b.n	800891c <_strtol_l.isra.0+0x78>
 8008974:	2322      	movs	r3, #34	; 0x22
 8008976:	f8c8 3000 	str.w	r3, [r8]
 800897a:	b1ff      	cbz	r7, 80089bc <_strtol_l.isra.0+0x118>
 800897c:	1e66      	subs	r6, r4, #1
 800897e:	4670      	mov	r0, lr
 8008980:	e7f0      	b.n	8008964 <_strtol_l.isra.0+0xc0>
 8008982:	1cac      	adds	r4, r5, #2
 8008984:	f895 b001 	ldrb.w	fp, [r5, #1]
 8008988:	2101      	movs	r1, #1
 800898a:	e7a8      	b.n	80088de <_strtol_l.isra.0+0x3a>
 800898c:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 8008990:	d1ab      	bne.n	80088ea <_strtol_l.isra.0+0x46>
 8008992:	7823      	ldrb	r3, [r4, #0]
 8008994:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008998:	2b58      	cmp	r3, #88	; 0x58
 800899a:	d006      	beq.n	80089aa <_strtol_l.isra.0+0x106>
 800899c:	46cc      	mov	ip, r9
 800899e:	e7ac      	b.n	80088fa <_strtol_l.isra.0+0x56>
 80089a0:	7823      	ldrb	r3, [r4, #0]
 80089a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80089a6:	2b58      	cmp	r3, #88	; 0x58
 80089a8:	d10a      	bne.n	80089c0 <_strtol_l.isra.0+0x11c>
 80089aa:	f04f 0c10 	mov.w	ip, #16
 80089ae:	f894 b001 	ldrb.w	fp, [r4, #1]
 80089b2:	46e1      	mov	r9, ip
 80089b4:	3402      	adds	r4, #2
 80089b6:	e7a0      	b.n	80088fa <_strtol_l.isra.0+0x56>
 80089b8:	4686      	mov	lr, r0
 80089ba:	e7df      	b.n	800897c <_strtol_l.isra.0+0xd8>
 80089bc:	4670      	mov	r0, lr
 80089be:	e7d2      	b.n	8008966 <_strtol_l.isra.0+0xc2>
 80089c0:	f04f 0908 	mov.w	r9, #8
 80089c4:	46cc      	mov	ip, r9
 80089c6:	e798      	b.n	80088fa <_strtol_l.isra.0+0x56>

080089c8 <strtol>:
 80089c8:	b530      	push	{r4, r5, lr}
 80089ca:	4c08      	ldr	r4, [pc, #32]	; (80089ec <strtol+0x24>)
 80089cc:	4b08      	ldr	r3, [pc, #32]	; (80089f0 <strtol+0x28>)
 80089ce:	6825      	ldr	r5, [r4, #0]
 80089d0:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 80089d2:	b083      	sub	sp, #12
 80089d4:	2c00      	cmp	r4, #0
 80089d6:	bf08      	it	eq
 80089d8:	461c      	moveq	r4, r3
 80089da:	9400      	str	r4, [sp, #0]
 80089dc:	4613      	mov	r3, r2
 80089de:	460a      	mov	r2, r1
 80089e0:	4601      	mov	r1, r0
 80089e2:	4628      	mov	r0, r5
 80089e4:	f7ff ff5e 	bl	80088a4 <_strtol_l.isra.0>
 80089e8:	b003      	add	sp, #12
 80089ea:	bd30      	pop	{r4, r5, pc}
 80089ec:	20000038 	.word	0x20000038
 80089f0:	20000468 	.word	0x20000468

080089f4 <_svfprintf_r>:
 80089f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089f8:	b0c3      	sub	sp, #268	; 0x10c
 80089fa:	460c      	mov	r4, r1
 80089fc:	910c      	str	r1, [sp, #48]	; 0x30
 80089fe:	4691      	mov	r9, r2
 8008a00:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a02:	900d      	str	r0, [sp, #52]	; 0x34
 8008a04:	f004 f93a 	bl	800cc7c <_localeconv_r>
 8008a08:	6803      	ldr	r3, [r0, #0]
 8008a0a:	931a      	str	r3, [sp, #104]	; 0x68
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f7f7 fe97 	bl	8000740 <strlen>
 8008a12:	89a3      	ldrh	r3, [r4, #12]
 8008a14:	9019      	str	r0, [sp, #100]	; 0x64
 8008a16:	061d      	lsls	r5, r3, #24
 8008a18:	d503      	bpl.n	8008a22 <_svfprintf_r+0x2e>
 8008a1a:	6923      	ldr	r3, [r4, #16]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f000 8739 	beq.w	8009894 <_svfprintf_r+0xea0>
 8008a22:	2300      	movs	r3, #0
 8008a24:	e9cd 3326 	strd	r3, r3, [sp, #152]	; 0x98
 8008a28:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
 8008a2c:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8008a30:	9313      	str	r3, [sp, #76]	; 0x4c
 8008a32:	9315      	str	r3, [sp, #84]	; 0x54
 8008a34:	9314      	str	r3, [sp, #80]	; 0x50
 8008a36:	9318      	str	r3, [sp, #96]	; 0x60
 8008a38:	931b      	str	r3, [sp, #108]	; 0x6c
 8008a3a:	930a      	str	r3, [sp, #40]	; 0x28
 8008a3c:	f8cd 8094 	str.w	r8, [sp, #148]	; 0x94
 8008a40:	46c2      	mov	sl, r8
 8008a42:	46cb      	mov	fp, r9
 8008a44:	f89b 3000 	ldrb.w	r3, [fp]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	f000 8099 	beq.w	8008b80 <_svfprintf_r+0x18c>
 8008a4e:	2b25      	cmp	r3, #37	; 0x25
 8008a50:	465c      	mov	r4, fp
 8008a52:	d102      	bne.n	8008a5a <_svfprintf_r+0x66>
 8008a54:	e01c      	b.n	8008a90 <_svfprintf_r+0x9c>
 8008a56:	2b25      	cmp	r3, #37	; 0x25
 8008a58:	d003      	beq.n	8008a62 <_svfprintf_r+0x6e>
 8008a5a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d1f9      	bne.n	8008a56 <_svfprintf_r+0x62>
 8008a62:	eba4 050b 	sub.w	r5, r4, fp
 8008a66:	b185      	cbz	r5, 8008a8a <_svfprintf_r+0x96>
 8008a68:	e9dd 3226 	ldrd	r3, r2, [sp, #152]	; 0x98
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	442a      	add	r2, r5
 8008a70:	2b07      	cmp	r3, #7
 8008a72:	f8ca b000 	str.w	fp, [sl]
 8008a76:	f8ca 5004 	str.w	r5, [sl, #4]
 8008a7a:	e9cd 3226 	strd	r3, r2, [sp, #152]	; 0x98
 8008a7e:	dc77      	bgt.n	8008b70 <_svfprintf_r+0x17c>
 8008a80:	f10a 0a08 	add.w	sl, sl, #8
 8008a84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a86:	442b      	add	r3, r5
 8008a88:	930a      	str	r3, [sp, #40]	; 0x28
 8008a8a:	7823      	ldrb	r3, [r4, #0]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d077      	beq.n	8008b80 <_svfprintf_r+0x18c>
 8008a90:	2300      	movs	r3, #0
 8008a92:	461a      	mov	r2, r3
 8008a94:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 8008a98:	4619      	mov	r1, r3
 8008a9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a9c:	4699      	mov	r9, r3
 8008a9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008aa2:	7863      	ldrb	r3, [r4, #1]
 8008aa4:	9009      	str	r0, [sp, #36]	; 0x24
 8008aa6:	f104 0b01 	add.w	fp, r4, #1
 8008aaa:	f10b 0b01 	add.w	fp, fp, #1
 8008aae:	461f      	mov	r7, r3
 8008ab0:	f1a7 0320 	sub.w	r3, r7, #32
 8008ab4:	2b58      	cmp	r3, #88	; 0x58
 8008ab6:	f200 8374 	bhi.w	80091a2 <_svfprintf_r+0x7ae>
 8008aba:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008abe:	02d2      	.short	0x02d2
 8008ac0:	03720372 	.word	0x03720372
 8008ac4:	037202cd 	.word	0x037202cd
 8008ac8:	03720372 	.word	0x03720372
 8008acc:	03720372 	.word	0x03720372
 8008ad0:	02c10372 	.word	0x02c10372
 8008ad4:	037202bc 	.word	0x037202bc
 8008ad8:	034c0366 	.word	0x034c0366
 8008adc:	036b0372 	.word	0x036b0372
 8008ae0:	00b700b7 	.word	0x00b700b7
 8008ae4:	00b700b7 	.word	0x00b700b7
 8008ae8:	00b700b7 	.word	0x00b700b7
 8008aec:	00b700b7 	.word	0x00b700b7
 8008af0:	037200b7 	.word	0x037200b7
 8008af4:	03720372 	.word	0x03720372
 8008af8:	03720372 	.word	0x03720372
 8008afc:	03720372 	.word	0x03720372
 8008b00:	03720372 	.word	0x03720372
 8008b04:	03340372 	.word	0x03340372
 8008b08:	037202f6 	.word	0x037202f6
 8008b0c:	037202f6 	.word	0x037202f6
 8008b10:	03720372 	.word	0x03720372
 8008b14:	02f10372 	.word	0x02f10372
 8008b18:	03720372 	.word	0x03720372
 8008b1c:	037200a6 	.word	0x037200a6
 8008b20:	03720372 	.word	0x03720372
 8008b24:	03720372 	.word	0x03720372
 8008b28:	03720075 	.word	0x03720075
 8008b2c:	029a0372 	.word	0x029a0372
 8008b30:	03720372 	.word	0x03720372
 8008b34:	03720372 	.word	0x03720372
 8008b38:	03720372 	.word	0x03720372
 8008b3c:	03720372 	.word	0x03720372
 8008b40:	03720372 	.word	0x03720372
 8008b44:	012d017b 	.word	0x012d017b
 8008b48:	02f602f6 	.word	0x02f602f6
 8008b4c:	012802f6 	.word	0x012802f6
 8008b50:	0372012d 	.word	0x0372012d
 8008b54:	011b0372 	.word	0x011b0372
 8008b58:	01040372 	.word	0x01040372
 8008b5c:	00cb00a8 	.word	0x00cb00a8
 8008b60:	037200c6 	.word	0x037200c6
 8008b64:	037200db 	.word	0x037200db
 8008b68:	03720077 	.word	0x03720077
 8008b6c:	02da0372 	.word	0x02da0372
 8008b70:	aa25      	add	r2, sp, #148	; 0x94
 8008b72:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 8008b76:	f005 f93d 	bl	800ddf4 <__ssprint_r>
 8008b7a:	b940      	cbnz	r0, 8008b8e <_svfprintf_r+0x19a>
 8008b7c:	46c2      	mov	sl, r8
 8008b7e:	e781      	b.n	8008a84 <_svfprintf_r+0x90>
 8008b80:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8008b82:	b123      	cbz	r3, 8008b8e <_svfprintf_r+0x19a>
 8008b84:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008b86:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008b88:	aa25      	add	r2, sp, #148	; 0x94
 8008b8a:	f005 f933 	bl	800ddf4 <__ssprint_r>
 8008b8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b90:	899b      	ldrh	r3, [r3, #12]
 8008b92:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008b96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b98:	bf18      	it	ne
 8008b9a:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8008b9e:	930a      	str	r3, [sp, #40]	; 0x28
 8008ba0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008ba2:	b043      	add	sp, #268	; 0x10c
 8008ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ba8:	f049 0910 	orr.w	r9, r9, #16
 8008bac:	f019 0f20 	tst.w	r9, #32
 8008bb0:	f000 853b 	beq.w	800962a <_svfprintf_r+0xc36>
 8008bb4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008bb6:	3507      	adds	r5, #7
 8008bb8:	f025 0307 	bic.w	r3, r5, #7
 8008bbc:	f103 0208 	add.w	r2, r3, #8
 8008bc0:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008bc4:	920f      	str	r2, [sp, #60]	; 0x3c
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bca:	2600      	movs	r6, #0
 8008bcc:	3201      	adds	r2, #1
 8008bce:	f88d 6077 	strb.w	r6, [sp, #119]	; 0x77
 8008bd2:	f000 843c 	beq.w	800944e <_svfprintf_r+0xa5a>
 8008bd6:	f029 0280 	bic.w	r2, r9, #128	; 0x80
 8008bda:	9207      	str	r2, [sp, #28]
 8008bdc:	ea54 0205 	orrs.w	r2, r4, r5
 8008be0:	f040 80be 	bne.w	8008d60 <_svfprintf_r+0x36c>
 8008be4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008be6:	2a00      	cmp	r2, #0
 8008be8:	f040 86cf 	bne.w	800998a <_svfprintf_r+0xf96>
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	f040 84eb 	bne.w	80095c8 <_svfprintf_r+0xbd4>
 8008bf2:	f019 0301 	ands.w	r3, r9, #1
 8008bf6:	930e      	str	r3, [sp, #56]	; 0x38
 8008bf8:	f000 855d 	beq.w	80096b6 <_svfprintf_r+0xcc2>
 8008bfc:	ab42      	add	r3, sp, #264	; 0x108
 8008bfe:	461a      	mov	r2, r3
 8008c00:	2330      	movs	r3, #48	; 0x30
 8008c02:	f802 3d41 	strb.w	r3, [r2, #-65]!
 8008c06:	9211      	str	r2, [sp, #68]	; 0x44
 8008c08:	e0cb      	b.n	8008da2 <_svfprintf_r+0x3ae>
 8008c0a:	f049 0910 	orr.w	r9, r9, #16
 8008c0e:	f019 0320 	ands.w	r3, r9, #32
 8008c12:	f000 8515 	beq.w	8009640 <_svfprintf_r+0xc4c>
 8008c16:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008c18:	3507      	adds	r5, #7
 8008c1a:	f025 0307 	bic.w	r3, r5, #7
 8008c1e:	f103 0208 	add.w	r2, r3, #8
 8008c22:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008c26:	920f      	str	r2, [sp, #60]	; 0x3c
 8008c28:	2300      	movs	r3, #0
 8008c2a:	e7cd      	b.n	8008bc8 <_svfprintf_r+0x1d4>
 8008c2c:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008c30:	2000      	movs	r0, #0
 8008c32:	f81b 7b01 	ldrb.w	r7, [fp], #1
 8008c36:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008c3a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8008c3e:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008c42:	2b09      	cmp	r3, #9
 8008c44:	d9f5      	bls.n	8008c32 <_svfprintf_r+0x23e>
 8008c46:	900b      	str	r0, [sp, #44]	; 0x2c
 8008c48:	e732      	b.n	8008ab0 <_svfprintf_r+0xbc>
 8008c4a:	f049 0920 	orr.w	r9, r9, #32
 8008c4e:	f89b 3000 	ldrb.w	r3, [fp]
 8008c52:	e72a      	b.n	8008aaa <_svfprintf_r+0xb6>
 8008c54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008c56:	4ba2      	ldr	r3, [pc, #648]	; (8008ee0 <_svfprintf_r+0x4ec>)
 8008c58:	6814      	ldr	r4, [r2, #0]
 8008c5a:	9318      	str	r3, [sp, #96]	; 0x60
 8008c5c:	3204      	adds	r2, #4
 8008c5e:	f647 0330 	movw	r3, #30768	; 0x7830
 8008c62:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
 8008c66:	f049 0902 	orr.w	r9, r9, #2
 8008c6a:	920f      	str	r2, [sp, #60]	; 0x3c
 8008c6c:	2500      	movs	r5, #0
 8008c6e:	2302      	movs	r3, #2
 8008c70:	2778      	movs	r7, #120	; 0x78
 8008c72:	e7a9      	b.n	8008bc8 <_svfprintf_r+0x1d4>
 8008c74:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008c76:	6813      	ldr	r3, [r2, #0]
 8008c78:	9311      	str	r3, [sp, #68]	; 0x44
 8008c7a:	2400      	movs	r4, #0
 8008c7c:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
 8008c80:	1d15      	adds	r5, r2, #4
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	f000 8630 	beq.w	80098e8 <_svfprintf_r+0xef4>
 8008c88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c8a:	1c53      	adds	r3, r2, #1
 8008c8c:	f000 86d8 	beq.w	8009a40 <_svfprintf_r+0x104c>
 8008c90:	4621      	mov	r1, r4
 8008c92:	9811      	ldr	r0, [sp, #68]	; 0x44
 8008c94:	f7f7 fdc4 	bl	8000820 <memchr>
 8008c98:	2800      	cmp	r0, #0
 8008c9a:	f000 87b9 	beq.w	8009c10 <_svfprintf_r+0x121c>
 8008c9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ca0:	9409      	str	r4, [sp, #36]	; 0x24
 8008ca2:	1ac3      	subs	r3, r0, r3
 8008ca4:	930e      	str	r3, [sp, #56]	; 0x38
 8008ca6:	950f      	str	r5, [sp, #60]	; 0x3c
 8008ca8:	f8cd 901c 	str.w	r9, [sp, #28]
 8008cac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008cb0:	f89d 6077 	ldrb.w	r6, [sp, #119]	; 0x77
 8008cb4:	9308      	str	r3, [sp, #32]
 8008cb6:	9412      	str	r4, [sp, #72]	; 0x48
 8008cb8:	2e00      	cmp	r6, #0
 8008cba:	f000 808d 	beq.w	8008dd8 <_svfprintf_r+0x3e4>
 8008cbe:	9b08      	ldr	r3, [sp, #32]
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	9308      	str	r3, [sp, #32]
 8008cc4:	e088      	b.n	8008dd8 <_svfprintf_r+0x3e4>
 8008cc6:	2a00      	cmp	r2, #0
 8008cc8:	f041 80d7 	bne.w	8009e7a <_svfprintf_r+0x1486>
 8008ccc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008cce:	f019 0f20 	tst.w	r9, #32
 8008cd2:	f852 3b04 	ldr.w	r3, [r2], #4
 8008cd6:	920f      	str	r2, [sp, #60]	; 0x3c
 8008cd8:	f040 852f 	bne.w	800973a <_svfprintf_r+0xd46>
 8008cdc:	f019 0f10 	tst.w	r9, #16
 8008ce0:	f040 8629 	bne.w	8009936 <_svfprintf_r+0xf42>
 8008ce4:	f019 0f40 	tst.w	r9, #64	; 0x40
 8008ce8:	f000 8625 	beq.w	8009936 <_svfprintf_r+0xf42>
 8008cec:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8008cf0:	801a      	strh	r2, [r3, #0]
 8008cf2:	e6a7      	b.n	8008a44 <_svfprintf_r+0x50>
 8008cf4:	f89b 3000 	ldrb.w	r3, [fp]
 8008cf8:	2b6c      	cmp	r3, #108	; 0x6c
 8008cfa:	bf03      	ittte	eq
 8008cfc:	f89b 3001 	ldrbeq.w	r3, [fp, #1]
 8008d00:	f049 0920 	orreq.w	r9, r9, #32
 8008d04:	f10b 0b01 	addeq.w	fp, fp, #1
 8008d08:	f049 0910 	orrne.w	r9, r9, #16
 8008d0c:	e6cd      	b.n	8008aaa <_svfprintf_r+0xb6>
 8008d0e:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 8008d12:	f89b 3000 	ldrb.w	r3, [fp]
 8008d16:	e6c8      	b.n	8008aaa <_svfprintf_r+0xb6>
 8008d18:	2a00      	cmp	r2, #0
 8008d1a:	f041 809a 	bne.w	8009e52 <_svfprintf_r+0x145e>
 8008d1e:	f019 0f20 	tst.w	r9, #32
 8008d22:	f000 8209 	beq.w	8009138 <_svfprintf_r+0x744>
 8008d26:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008d28:	3507      	adds	r5, #7
 8008d2a:	f025 0307 	bic.w	r3, r5, #7
 8008d2e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008d32:	f103 0208 	add.w	r2, r3, #8
 8008d36:	920f      	str	r2, [sp, #60]	; 0x3c
 8008d38:	2c00      	cmp	r4, #0
 8008d3a:	f175 0300 	sbcs.w	r3, r5, #0
 8008d3e:	f2c0 84c6 	blt.w	80096ce <_svfprintf_r+0xcda>
 8008d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d44:	f89d 6077 	ldrb.w	r6, [sp, #119]	; 0x77
 8008d48:	3301      	adds	r3, #1
 8008d4a:	f000 84cb 	beq.w	80096e4 <_svfprintf_r+0xcf0>
 8008d4e:	f029 0280 	bic.w	r2, r9, #128	; 0x80
 8008d52:	9207      	str	r2, [sp, #28]
 8008d54:	ea54 0205 	orrs.w	r2, r4, r5
 8008d58:	f04f 0301 	mov.w	r3, #1
 8008d5c:	f43f af42 	beq.w	8008be4 <_svfprintf_r+0x1f0>
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	f000 8379 	beq.w	8009458 <_svfprintf_r+0xa64>
 8008d66:	2b02      	cmp	r3, #2
 8008d68:	f000 8399 	beq.w	800949e <_svfprintf_r+0xaaa>
 8008d6c:	4641      	mov	r1, r8
 8008d6e:	e000      	b.n	8008d72 <_svfprintf_r+0x37e>
 8008d70:	4611      	mov	r1, r2
 8008d72:	08e2      	lsrs	r2, r4, #3
 8008d74:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 8008d78:	08e8      	lsrs	r0, r5, #3
 8008d7a:	f004 0307 	and.w	r3, r4, #7
 8008d7e:	4605      	mov	r5, r0
 8008d80:	4614      	mov	r4, r2
 8008d82:	3330      	adds	r3, #48	; 0x30
 8008d84:	ea54 0005 	orrs.w	r0, r4, r5
 8008d88:	f801 3c01 	strb.w	r3, [r1, #-1]
 8008d8c:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 8008d90:	d1ee      	bne.n	8008d70 <_svfprintf_r+0x37c>
 8008d92:	9807      	ldr	r0, [sp, #28]
 8008d94:	9211      	str	r2, [sp, #68]	; 0x44
 8008d96:	07c0      	lsls	r0, r0, #31
 8008d98:	f100 8470 	bmi.w	800967c <_svfprintf_r+0xc88>
 8008d9c:	eba8 0302 	sub.w	r3, r8, r2
 8008da0:	930e      	str	r3, [sp, #56]	; 0x38
 8008da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008da4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008da6:	4293      	cmp	r3, r2
 8008da8:	bfb8      	it	lt
 8008daa:	4613      	movlt	r3, r2
 8008dac:	9308      	str	r3, [sp, #32]
 8008dae:	2300      	movs	r3, #0
 8008db0:	9312      	str	r3, [sp, #72]	; 0x48
 8008db2:	e781      	b.n	8008cb8 <_svfprintf_r+0x2c4>
 8008db4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008db6:	2300      	movs	r3, #0
 8008db8:	680a      	ldr	r2, [r1, #0]
 8008dba:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 8008dbe:	461e      	mov	r6, r3
 8008dc0:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	1d0a      	adds	r2, r1, #4
 8008dc8:	e9cd 9307 	strd	r9, r3, [sp, #28]
 8008dcc:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
 8008dd0:	ab28      	add	r3, sp, #160	; 0xa0
 8008dd2:	9609      	str	r6, [sp, #36]	; 0x24
 8008dd4:	9612      	str	r6, [sp, #72]	; 0x48
 8008dd6:	9311      	str	r3, [sp, #68]	; 0x44
 8008dd8:	9b07      	ldr	r3, [sp, #28]
 8008dda:	f013 0302 	ands.w	r3, r3, #2
 8008dde:	9310      	str	r3, [sp, #64]	; 0x40
 8008de0:	d002      	beq.n	8008de8 <_svfprintf_r+0x3f4>
 8008de2:	9b08      	ldr	r3, [sp, #32]
 8008de4:	3302      	adds	r3, #2
 8008de6:	9308      	str	r3, [sp, #32]
 8008de8:	9b07      	ldr	r3, [sp, #28]
 8008dea:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8008dec:	f013 0984 	ands.w	r9, r3, #132	; 0x84
 8008df0:	d13f      	bne.n	8008e72 <_svfprintf_r+0x47e>
 8008df2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008df4:	9a08      	ldr	r2, [sp, #32]
 8008df6:	1a9d      	subs	r5, r3, r2
 8008df8:	2d00      	cmp	r5, #0
 8008dfa:	dd3a      	ble.n	8008e72 <_svfprintf_r+0x47e>
 8008dfc:	2d10      	cmp	r5, #16
 8008dfe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008e00:	dd29      	ble.n	8008e56 <_svfprintf_r+0x462>
 8008e02:	4652      	mov	r2, sl
 8008e04:	4621      	mov	r1, r4
 8008e06:	46aa      	mov	sl, r5
 8008e08:	2610      	movs	r6, #16
 8008e0a:	e9dd 540c 	ldrd	r5, r4, [sp, #48]	; 0x30
 8008e0e:	e006      	b.n	8008e1e <_svfprintf_r+0x42a>
 8008e10:	f1aa 0a10 	sub.w	sl, sl, #16
 8008e14:	f1ba 0f10 	cmp.w	sl, #16
 8008e18:	f102 0208 	add.w	r2, r2, #8
 8008e1c:	dd18      	ble.n	8008e50 <_svfprintf_r+0x45c>
 8008e1e:	3301      	adds	r3, #1
 8008e20:	4830      	ldr	r0, [pc, #192]	; (8008ee4 <_svfprintf_r+0x4f0>)
 8008e22:	3110      	adds	r1, #16
 8008e24:	2b07      	cmp	r3, #7
 8008e26:	e9cd 3126 	strd	r3, r1, [sp, #152]	; 0x98
 8008e2a:	e9c2 0600 	strd	r0, r6, [r2]
 8008e2e:	ddef      	ble.n	8008e10 <_svfprintf_r+0x41c>
 8008e30:	aa25      	add	r2, sp, #148	; 0x94
 8008e32:	4629      	mov	r1, r5
 8008e34:	4620      	mov	r0, r4
 8008e36:	f004 ffdd 	bl	800ddf4 <__ssprint_r>
 8008e3a:	2800      	cmp	r0, #0
 8008e3c:	f47f aea7 	bne.w	8008b8e <_svfprintf_r+0x19a>
 8008e40:	f1aa 0a10 	sub.w	sl, sl, #16
 8008e44:	f1ba 0f10 	cmp.w	sl, #16
 8008e48:	e9dd 3126 	ldrd	r3, r1, [sp, #152]	; 0x98
 8008e4c:	4642      	mov	r2, r8
 8008e4e:	dce6      	bgt.n	8008e1e <_svfprintf_r+0x42a>
 8008e50:	4655      	mov	r5, sl
 8008e52:	460c      	mov	r4, r1
 8008e54:	4692      	mov	sl, r2
 8008e56:	3301      	adds	r3, #1
 8008e58:	4a22      	ldr	r2, [pc, #136]	; (8008ee4 <_svfprintf_r+0x4f0>)
 8008e5a:	442c      	add	r4, r5
 8008e5c:	2b07      	cmp	r3, #7
 8008e5e:	e9cd 3426 	strd	r3, r4, [sp, #152]	; 0x98
 8008e62:	e9ca 2500 	strd	r2, r5, [sl]
 8008e66:	f300 856a 	bgt.w	800993e <_svfprintf_r+0xf4a>
 8008e6a:	f89d 6077 	ldrb.w	r6, [sp, #119]	; 0x77
 8008e6e:	f10a 0a08 	add.w	sl, sl, #8
 8008e72:	b176      	cbz	r6, 8008e92 <_svfprintf_r+0x49e>
 8008e74:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008e76:	3301      	adds	r3, #1
 8008e78:	3401      	adds	r4, #1
 8008e7a:	f10d 0177 	add.w	r1, sp, #119	; 0x77
 8008e7e:	2201      	movs	r2, #1
 8008e80:	2b07      	cmp	r3, #7
 8008e82:	e9cd 3426 	strd	r3, r4, [sp, #152]	; 0x98
 8008e86:	e9ca 1200 	strd	r1, r2, [sl]
 8008e8a:	f300 82f2 	bgt.w	8009472 <_svfprintf_r+0xa7e>
 8008e8e:	f10a 0a08 	add.w	sl, sl, #8
 8008e92:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e94:	b16b      	cbz	r3, 8008eb2 <_svfprintf_r+0x4be>
 8008e96:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008e98:	3301      	adds	r3, #1
 8008e9a:	3402      	adds	r4, #2
 8008e9c:	a91e      	add	r1, sp, #120	; 0x78
 8008e9e:	2202      	movs	r2, #2
 8008ea0:	2b07      	cmp	r3, #7
 8008ea2:	e9cd 3426 	strd	r3, r4, [sp, #152]	; 0x98
 8008ea6:	e9ca 1200 	strd	r1, r2, [sl]
 8008eaa:	f300 82ed 	bgt.w	8009488 <_svfprintf_r+0xa94>
 8008eae:	f10a 0a08 	add.w	sl, sl, #8
 8008eb2:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 8008eb6:	f000 81e8 	beq.w	800928a <_svfprintf_r+0x896>
 8008eba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ebc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ebe:	1a9d      	subs	r5, r3, r2
 8008ec0:	2d00      	cmp	r5, #0
 8008ec2:	dd3e      	ble.n	8008f42 <_svfprintf_r+0x54e>
 8008ec4:	2d10      	cmp	r5, #16
 8008ec6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008ec8:	f8df 901c 	ldr.w	r9, [pc, #28]	; 8008ee8 <_svfprintf_r+0x4f4>
 8008ecc:	dd2e      	ble.n	8008f2c <_svfprintf_r+0x538>
 8008ece:	4648      	mov	r0, r9
 8008ed0:	4653      	mov	r3, sl
 8008ed2:	4621      	mov	r1, r4
 8008ed4:	46b9      	mov	r9, r7
 8008ed6:	2610      	movs	r6, #16
 8008ed8:	e9dd a40c 	ldrd	sl, r4, [sp, #48]	; 0x30
 8008edc:	4607      	mov	r7, r0
 8008ede:	e00a      	b.n	8008ef6 <_svfprintf_r+0x502>
 8008ee0:	0800ea74 	.word	0x0800ea74
 8008ee4:	0800ea94 	.word	0x0800ea94
 8008ee8:	0800eaa4 	.word	0x0800eaa4
 8008eec:	3d10      	subs	r5, #16
 8008eee:	2d10      	cmp	r5, #16
 8008ef0:	f103 0308 	add.w	r3, r3, #8
 8008ef4:	dd15      	ble.n	8008f22 <_svfprintf_r+0x52e>
 8008ef6:	3201      	adds	r2, #1
 8008ef8:	3110      	adds	r1, #16
 8008efa:	2a07      	cmp	r2, #7
 8008efc:	e9cd 2126 	strd	r2, r1, [sp, #152]	; 0x98
 8008f00:	e9c3 7600 	strd	r7, r6, [r3]
 8008f04:	ddf2      	ble.n	8008eec <_svfprintf_r+0x4f8>
 8008f06:	aa25      	add	r2, sp, #148	; 0x94
 8008f08:	4651      	mov	r1, sl
 8008f0a:	4620      	mov	r0, r4
 8008f0c:	f004 ff72 	bl	800ddf4 <__ssprint_r>
 8008f10:	2800      	cmp	r0, #0
 8008f12:	f47f ae3c 	bne.w	8008b8e <_svfprintf_r+0x19a>
 8008f16:	3d10      	subs	r5, #16
 8008f18:	2d10      	cmp	r5, #16
 8008f1a:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 8008f1e:	4643      	mov	r3, r8
 8008f20:	dce9      	bgt.n	8008ef6 <_svfprintf_r+0x502>
 8008f22:	469a      	mov	sl, r3
 8008f24:	463b      	mov	r3, r7
 8008f26:	460c      	mov	r4, r1
 8008f28:	464f      	mov	r7, r9
 8008f2a:	4699      	mov	r9, r3
 8008f2c:	3201      	adds	r2, #1
 8008f2e:	442c      	add	r4, r5
 8008f30:	2a07      	cmp	r2, #7
 8008f32:	e9cd 2426 	strd	r2, r4, [sp, #152]	; 0x98
 8008f36:	e9ca 9500 	strd	r9, r5, [sl]
 8008f3a:	f300 82c7 	bgt.w	80094cc <_svfprintf_r+0xad8>
 8008f3e:	f10a 0a08 	add.w	sl, sl, #8
 8008f42:	9b07      	ldr	r3, [sp, #28]
 8008f44:	05de      	lsls	r6, r3, #23
 8008f46:	f100 8142 	bmi.w	80091ce <_svfprintf_r+0x7da>
 8008f4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008f4c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008f4e:	f8ca 2000 	str.w	r2, [sl]
 8008f52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f54:	f8ca 2004 	str.w	r2, [sl, #4]
 8008f58:	3301      	adds	r3, #1
 8008f5a:	4414      	add	r4, r2
 8008f5c:	2b07      	cmp	r3, #7
 8008f5e:	9427      	str	r4, [sp, #156]	; 0x9c
 8008f60:	9326      	str	r3, [sp, #152]	; 0x98
 8008f62:	f300 821a 	bgt.w	800939a <_svfprintf_r+0x9a6>
 8008f66:	f10a 0a08 	add.w	sl, sl, #8
 8008f6a:	9b07      	ldr	r3, [sp, #28]
 8008f6c:	075b      	lsls	r3, r3, #29
 8008f6e:	d531      	bpl.n	8008fd4 <_svfprintf_r+0x5e0>
 8008f70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f72:	9a08      	ldr	r2, [sp, #32]
 8008f74:	1a9d      	subs	r5, r3, r2
 8008f76:	2d00      	cmp	r5, #0
 8008f78:	dd2c      	ble.n	8008fd4 <_svfprintf_r+0x5e0>
 8008f7a:	2d10      	cmp	r5, #16
 8008f7c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008f7e:	dd1f      	ble.n	8008fc0 <_svfprintf_r+0x5cc>
 8008f80:	2610      	movs	r6, #16
 8008f82:	e9dd 970c 	ldrd	r9, r7, [sp, #48]	; 0x30
 8008f86:	e004      	b.n	8008f92 <_svfprintf_r+0x59e>
 8008f88:	3d10      	subs	r5, #16
 8008f8a:	2d10      	cmp	r5, #16
 8008f8c:	f10a 0a08 	add.w	sl, sl, #8
 8008f90:	dd16      	ble.n	8008fc0 <_svfprintf_r+0x5cc>
 8008f92:	3301      	adds	r3, #1
 8008f94:	4ac7      	ldr	r2, [pc, #796]	; (80092b4 <_svfprintf_r+0x8c0>)
 8008f96:	3410      	adds	r4, #16
 8008f98:	2b07      	cmp	r3, #7
 8008f9a:	e9cd 3426 	strd	r3, r4, [sp, #152]	; 0x98
 8008f9e:	e9ca 2600 	strd	r2, r6, [sl]
 8008fa2:	ddf1      	ble.n	8008f88 <_svfprintf_r+0x594>
 8008fa4:	aa25      	add	r2, sp, #148	; 0x94
 8008fa6:	4649      	mov	r1, r9
 8008fa8:	4638      	mov	r0, r7
 8008faa:	f004 ff23 	bl	800ddf4 <__ssprint_r>
 8008fae:	2800      	cmp	r0, #0
 8008fb0:	f47f aded 	bne.w	8008b8e <_svfprintf_r+0x19a>
 8008fb4:	3d10      	subs	r5, #16
 8008fb6:	2d10      	cmp	r5, #16
 8008fb8:	e9dd 3426 	ldrd	r3, r4, [sp, #152]	; 0x98
 8008fbc:	46c2      	mov	sl, r8
 8008fbe:	dce8      	bgt.n	8008f92 <_svfprintf_r+0x59e>
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	4abc      	ldr	r2, [pc, #752]	; (80092b4 <_svfprintf_r+0x8c0>)
 8008fc4:	442c      	add	r4, r5
 8008fc6:	2b07      	cmp	r3, #7
 8008fc8:	e9cd 3426 	strd	r3, r4, [sp, #152]	; 0x98
 8008fcc:	e9ca 2500 	strd	r2, r5, [sl]
 8008fd0:	f300 8367 	bgt.w	80096a2 <_svfprintf_r+0xcae>
 8008fd4:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
 8008fd8:	9908      	ldr	r1, [sp, #32]
 8008fda:	428a      	cmp	r2, r1
 8008fdc:	bfac      	ite	ge
 8008fde:	189b      	addge	r3, r3, r2
 8008fe0:	185b      	addlt	r3, r3, r1
 8008fe2:	930a      	str	r3, [sp, #40]	; 0x28
 8008fe4:	2c00      	cmp	r4, #0
 8008fe6:	f040 81a1 	bne.w	800932c <_svfprintf_r+0x938>
 8008fea:	2300      	movs	r3, #0
 8008fec:	9326      	str	r3, [sp, #152]	; 0x98
 8008fee:	46c2      	mov	sl, r8
 8008ff0:	e528      	b.n	8008a44 <_svfprintf_r+0x50>
 8008ff2:	2a00      	cmp	r2, #0
 8008ff4:	f040 8731 	bne.w	8009e5a <_svfprintf_r+0x1466>
 8008ff8:	4baf      	ldr	r3, [pc, #700]	; (80092b8 <_svfprintf_r+0x8c4>)
 8008ffa:	9318      	str	r3, [sp, #96]	; 0x60
 8008ffc:	f019 0f20 	tst.w	r9, #32
 8009000:	d03f      	beq.n	8009082 <_svfprintf_r+0x68e>
 8009002:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009004:	3507      	adds	r5, #7
 8009006:	f025 0307 	bic.w	r3, r5, #7
 800900a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800900e:	f103 0208 	add.w	r2, r3, #8
 8009012:	920f      	str	r2, [sp, #60]	; 0x3c
 8009014:	f019 0f01 	tst.w	r9, #1
 8009018:	f000 80c1 	beq.w	800919e <_svfprintf_r+0x7aa>
 800901c:	ea54 0305 	orrs.w	r3, r4, r5
 8009020:	f000 80bd 	beq.w	800919e <_svfprintf_r+0x7aa>
 8009024:	2330      	movs	r3, #48	; 0x30
 8009026:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
 800902a:	f88d 7079 	strb.w	r7, [sp, #121]	; 0x79
 800902e:	f049 0902 	orr.w	r9, r9, #2
 8009032:	2302      	movs	r3, #2
 8009034:	e5c8      	b.n	8008bc8 <_svfprintf_r+0x1d4>
 8009036:	f89b 3000 	ldrb.w	r3, [fp]
 800903a:	2201      	movs	r2, #1
 800903c:	212b      	movs	r1, #43	; 0x2b
 800903e:	e534      	b.n	8008aaa <_svfprintf_r+0xb6>
 8009040:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009042:	f89b 3000 	ldrb.w	r3, [fp]
 8009046:	6804      	ldr	r4, [r0, #0]
 8009048:	940b      	str	r4, [sp, #44]	; 0x2c
 800904a:	2c00      	cmp	r4, #0
 800904c:	f100 0004 	add.w	r0, r0, #4
 8009050:	f2c0 841c 	blt.w	800988c <_svfprintf_r+0xe98>
 8009054:	900f      	str	r0, [sp, #60]	; 0x3c
 8009056:	e528      	b.n	8008aaa <_svfprintf_r+0xb6>
 8009058:	f049 0901 	orr.w	r9, r9, #1
 800905c:	f89b 3000 	ldrb.w	r3, [fp]
 8009060:	e523      	b.n	8008aaa <_svfprintf_r+0xb6>
 8009062:	f89b 3000 	ldrb.w	r3, [fp]
 8009066:	2900      	cmp	r1, #0
 8009068:	f47f ad1f 	bne.w	8008aaa <_svfprintf_r+0xb6>
 800906c:	2201      	movs	r2, #1
 800906e:	2120      	movs	r1, #32
 8009070:	e51b      	b.n	8008aaa <_svfprintf_r+0xb6>
 8009072:	2a00      	cmp	r2, #0
 8009074:	f040 86e1 	bne.w	8009e3a <_svfprintf_r+0x1446>
 8009078:	4b90      	ldr	r3, [pc, #576]	; (80092bc <_svfprintf_r+0x8c8>)
 800907a:	9318      	str	r3, [sp, #96]	; 0x60
 800907c:	f019 0f20 	tst.w	r9, #32
 8009080:	d1bf      	bne.n	8009002 <_svfprintf_r+0x60e>
 8009082:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009084:	f019 0f10 	tst.w	r9, #16
 8009088:	f853 4b04 	ldr.w	r4, [r3], #4
 800908c:	930f      	str	r3, [sp, #60]	; 0x3c
 800908e:	f040 8316 	bne.w	80096be <_svfprintf_r+0xcca>
 8009092:	f019 0f40 	tst.w	r9, #64	; 0x40
 8009096:	f000 8312 	beq.w	80096be <_svfprintf_r+0xcca>
 800909a:	b2a4      	uxth	r4, r4
 800909c:	2500      	movs	r5, #0
 800909e:	e7b9      	b.n	8009014 <_svfprintf_r+0x620>
 80090a0:	f049 0908 	orr.w	r9, r9, #8
 80090a4:	f89b 3000 	ldrb.w	r3, [fp]
 80090a8:	e4ff      	b.n	8008aaa <_svfprintf_r+0xb6>
 80090aa:	2a00      	cmp	r2, #0
 80090ac:	f040 86d9 	bne.w	8009e62 <_svfprintf_r+0x146e>
 80090b0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80090b2:	4b83      	ldr	r3, [pc, #524]	; (80092c0 <_svfprintf_r+0x8cc>)
 80090b4:	3507      	adds	r5, #7
 80090b6:	f025 0607 	bic.w	r6, r5, #7
 80090ba:	e9d6 0100 	ldrd	r0, r1, [r6]
 80090be:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80090c2:	9114      	str	r1, [sp, #80]	; 0x50
 80090c4:	3608      	adds	r6, #8
 80090c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80090ca:	4621      	mov	r1, r4
 80090cc:	9015      	str	r0, [sp, #84]	; 0x54
 80090ce:	4605      	mov	r5, r0
 80090d0:	960f      	str	r6, [sp, #60]	; 0x3c
 80090d2:	f7f8 f84b 	bl	800116c <__aeabi_dcmpun>
 80090d6:	2800      	cmp	r0, #0
 80090d8:	f040 833e 	bne.w	8009758 <_svfprintf_r+0xd64>
 80090dc:	4628      	mov	r0, r5
 80090de:	4621      	mov	r1, r4
 80090e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80090e4:	4b76      	ldr	r3, [pc, #472]	; (80092c0 <_svfprintf_r+0x8cc>)
 80090e6:	f7f8 f823 	bl	8001130 <__aeabi_dcmple>
 80090ea:	2800      	cmp	r0, #0
 80090ec:	f040 8334 	bne.w	8009758 <_svfprintf_r+0xd64>
 80090f0:	e9dd 0215 	ldrd	r0, r2, [sp, #84]	; 0x54
 80090f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80090f6:	9914      	ldr	r1, [sp, #80]	; 0x50
 80090f8:	f7f8 f810 	bl	800111c <__aeabi_dcmplt>
 80090fc:	2800      	cmp	r0, #0
 80090fe:	f040 853a 	bne.w	8009b76 <_svfprintf_r+0x1182>
 8009102:	f89d 6077 	ldrb.w	r6, [sp, #119]	; 0x77
 8009106:	4a6f      	ldr	r2, [pc, #444]	; (80092c4 <_svfprintf_r+0x8d0>)
 8009108:	4b6f      	ldr	r3, [pc, #444]	; (80092c8 <_svfprintf_r+0x8d4>)
 800910a:	2103      	movs	r1, #3
 800910c:	2000      	movs	r0, #0
 800910e:	f029 0480 	bic.w	r4, r9, #128	; 0x80
 8009112:	2f47      	cmp	r7, #71	; 0x47
 8009114:	bfd8      	it	le
 8009116:	461a      	movle	r2, r3
 8009118:	e9cd 1008 	strd	r1, r0, [sp, #32]
 800911c:	9407      	str	r4, [sp, #28]
 800911e:	9211      	str	r2, [sp, #68]	; 0x44
 8009120:	910e      	str	r1, [sp, #56]	; 0x38
 8009122:	9012      	str	r0, [sp, #72]	; 0x48
 8009124:	e5c8      	b.n	8008cb8 <_svfprintf_r+0x2c4>
 8009126:	2a00      	cmp	r2, #0
 8009128:	f040 869f 	bne.w	8009e6a <_svfprintf_r+0x1476>
 800912c:	f049 0910 	orr.w	r9, r9, #16
 8009130:	f019 0f20 	tst.w	r9, #32
 8009134:	f47f adf7 	bne.w	8008d26 <_svfprintf_r+0x332>
 8009138:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800913a:	f019 0f10 	tst.w	r9, #16
 800913e:	f853 4b04 	ldr.w	r4, [r3], #4
 8009142:	930f      	str	r3, [sp, #60]	; 0x3c
 8009144:	f040 82bd 	bne.w	80096c2 <_svfprintf_r+0xcce>
 8009148:	f019 0f40 	tst.w	r9, #64	; 0x40
 800914c:	f000 82b9 	beq.w	80096c2 <_svfprintf_r+0xcce>
 8009150:	b224      	sxth	r4, r4
 8009152:	17e5      	asrs	r5, r4, #31
 8009154:	e5f0      	b.n	8008d38 <_svfprintf_r+0x344>
 8009156:	f89b 7000 	ldrb.w	r7, [fp]
 800915a:	2f2a      	cmp	r7, #42	; 0x2a
 800915c:	f10b 0001 	add.w	r0, fp, #1
 8009160:	f000 8640 	beq.w	8009de4 <_svfprintf_r+0x13f0>
 8009164:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8009168:	2b09      	cmp	r3, #9
 800916a:	4683      	mov	fp, r0
 800916c:	f200 854c 	bhi.w	8009c08 <_svfprintf_r+0x1214>
 8009170:	2000      	movs	r0, #0
 8009172:	f81b 7b01 	ldrb.w	r7, [fp], #1
 8009176:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800917a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800917e:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8009182:	2b09      	cmp	r3, #9
 8009184:	d9f5      	bls.n	8009172 <_svfprintf_r+0x77e>
 8009186:	9009      	str	r0, [sp, #36]	; 0x24
 8009188:	e492      	b.n	8008ab0 <_svfprintf_r+0xbc>
 800918a:	f89b 3000 	ldrb.w	r3, [fp]
 800918e:	f049 0904 	orr.w	r9, r9, #4
 8009192:	e48a      	b.n	8008aaa <_svfprintf_r+0xb6>
 8009194:	f049 0980 	orr.w	r9, r9, #128	; 0x80
 8009198:	f89b 3000 	ldrb.w	r3, [fp]
 800919c:	e485      	b.n	8008aaa <_svfprintf_r+0xb6>
 800919e:	2302      	movs	r3, #2
 80091a0:	e512      	b.n	8008bc8 <_svfprintf_r+0x1d4>
 80091a2:	2a00      	cmp	r2, #0
 80091a4:	f040 8665 	bne.w	8009e72 <_svfprintf_r+0x147e>
 80091a8:	2f00      	cmp	r7, #0
 80091aa:	f43f ace9 	beq.w	8008b80 <_svfprintf_r+0x18c>
 80091ae:	2300      	movs	r3, #0
 80091b0:	2201      	movs	r2, #1
 80091b2:	461e      	mov	r6, r3
 80091b4:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 80091b8:	9309      	str	r3, [sp, #36]	; 0x24
 80091ba:	9312      	str	r3, [sp, #72]	; 0x48
 80091bc:	ab28      	add	r3, sp, #160	; 0xa0
 80091be:	9208      	str	r2, [sp, #32]
 80091c0:	f88d 70a0 	strb.w	r7, [sp, #160]	; 0xa0
 80091c4:	f8cd 901c 	str.w	r9, [sp, #28]
 80091c8:	920e      	str	r2, [sp, #56]	; 0x38
 80091ca:	9311      	str	r3, [sp, #68]	; 0x44
 80091cc:	e604      	b.n	8008dd8 <_svfprintf_r+0x3e4>
 80091ce:	2f65      	cmp	r7, #101	; 0x65
 80091d0:	f340 80ee 	ble.w	80093b0 <_svfprintf_r+0x9bc>
 80091d4:	e9dd 0215 	ldrd	r0, r2, [sp, #84]	; 0x54
 80091d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80091da:	9914      	ldr	r1, [sp, #80]	; 0x50
 80091dc:	f7f7 ff94 	bl	8001108 <__aeabi_dcmpeq>
 80091e0:	2800      	cmp	r0, #0
 80091e2:	f000 817e 	beq.w	80094e2 <_svfprintf_r+0xaee>
 80091e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80091e8:	4a38      	ldr	r2, [pc, #224]	; (80092cc <_svfprintf_r+0x8d8>)
 80091ea:	f8ca 2000 	str.w	r2, [sl]
 80091ee:	3301      	adds	r3, #1
 80091f0:	3401      	adds	r4, #1
 80091f2:	2201      	movs	r2, #1
 80091f4:	2b07      	cmp	r3, #7
 80091f6:	e9cd 3426 	strd	r3, r4, [sp, #152]	; 0x98
 80091fa:	f8ca 2004 	str.w	r2, [sl, #4]
 80091fe:	f300 83f1 	bgt.w	80099e4 <_svfprintf_r+0xff0>
 8009202:	f10a 0a08 	add.w	sl, sl, #8
 8009206:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009208:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800920a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 800920c:	4293      	cmp	r3, r2
 800920e:	f280 8243 	bge.w	8009698 <_svfprintf_r+0xca4>
 8009212:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009214:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009216:	f8ca 2000 	str.w	r2, [sl]
 800921a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800921c:	f8ca 2004 	str.w	r2, [sl, #4]
 8009220:	3301      	adds	r3, #1
 8009222:	4414      	add	r4, r2
 8009224:	2b07      	cmp	r3, #7
 8009226:	e9cd 3426 	strd	r3, r4, [sp, #152]	; 0x98
 800922a:	f300 8352 	bgt.w	80098d2 <_svfprintf_r+0xede>
 800922e:	f10a 0a08 	add.w	sl, sl, #8
 8009232:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009234:	1e5d      	subs	r5, r3, #1
 8009236:	2d00      	cmp	r5, #0
 8009238:	f77f ae97 	ble.w	8008f6a <_svfprintf_r+0x576>
 800923c:	2d10      	cmp	r5, #16
 800923e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009240:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80092d0 <_svfprintf_r+0x8dc>
 8009244:	f340 83a7 	ble.w	8009996 <_svfprintf_r+0xfa2>
 8009248:	4623      	mov	r3, r4
 800924a:	2610      	movs	r6, #16
 800924c:	464c      	mov	r4, r9
 800924e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009250:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8009254:	e005      	b.n	8009262 <_svfprintf_r+0x86e>
 8009256:	f10a 0a08 	add.w	sl, sl, #8
 800925a:	3d10      	subs	r5, #16
 800925c:	2d10      	cmp	r5, #16
 800925e:	f340 8398 	ble.w	8009992 <_svfprintf_r+0xf9e>
 8009262:	3201      	adds	r2, #1
 8009264:	3310      	adds	r3, #16
 8009266:	2a07      	cmp	r2, #7
 8009268:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
 800926c:	e9ca 4600 	strd	r4, r6, [sl]
 8009270:	ddf1      	ble.n	8009256 <_svfprintf_r+0x862>
 8009272:	aa25      	add	r2, sp, #148	; 0x94
 8009274:	4649      	mov	r1, r9
 8009276:	4638      	mov	r0, r7
 8009278:	f004 fdbc 	bl	800ddf4 <__ssprint_r>
 800927c:	2800      	cmp	r0, #0
 800927e:	f47f ac86 	bne.w	8008b8e <_svfprintf_r+0x19a>
 8009282:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 8009286:	46c2      	mov	sl, r8
 8009288:	e7e7      	b.n	800925a <_svfprintf_r+0x866>
 800928a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800928c:	9a08      	ldr	r2, [sp, #32]
 800928e:	1a9d      	subs	r5, r3, r2
 8009290:	2d00      	cmp	r5, #0
 8009292:	f77f ae12 	ble.w	8008eba <_svfprintf_r+0x4c6>
 8009296:	2d10      	cmp	r5, #16
 8009298:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800929a:	f8df 9034 	ldr.w	r9, [pc, #52]	; 80092d0 <_svfprintf_r+0x8dc>
 800929e:	dd39      	ble.n	8009314 <_svfprintf_r+0x920>
 80092a0:	4648      	mov	r0, r9
 80092a2:	4653      	mov	r3, sl
 80092a4:	4621      	mov	r1, r4
 80092a6:	46b9      	mov	r9, r7
 80092a8:	2610      	movs	r6, #16
 80092aa:	e9dd a40c 	ldrd	sl, r4, [sp, #48]	; 0x30
 80092ae:	4607      	mov	r7, r0
 80092b0:	e015      	b.n	80092de <_svfprintf_r+0x8ea>
 80092b2:	bf00      	nop
 80092b4:	0800ea94 	.word	0x0800ea94
 80092b8:	0800ea60 	.word	0x0800ea60
 80092bc:	0800ea74 	.word	0x0800ea74
 80092c0:	7fefffff 	.word	0x7fefffff
 80092c4:	0800ea54 	.word	0x0800ea54
 80092c8:	0800ea50 	.word	0x0800ea50
 80092cc:	0800ea90 	.word	0x0800ea90
 80092d0:	0800eaa4 	.word	0x0800eaa4
 80092d4:	3d10      	subs	r5, #16
 80092d6:	2d10      	cmp	r5, #16
 80092d8:	f103 0308 	add.w	r3, r3, #8
 80092dc:	dd15      	ble.n	800930a <_svfprintf_r+0x916>
 80092de:	3201      	adds	r2, #1
 80092e0:	3110      	adds	r1, #16
 80092e2:	2a07      	cmp	r2, #7
 80092e4:	e9cd 2126 	strd	r2, r1, [sp, #152]	; 0x98
 80092e8:	e9c3 7600 	strd	r7, r6, [r3]
 80092ec:	ddf2      	ble.n	80092d4 <_svfprintf_r+0x8e0>
 80092ee:	aa25      	add	r2, sp, #148	; 0x94
 80092f0:	4651      	mov	r1, sl
 80092f2:	4620      	mov	r0, r4
 80092f4:	f004 fd7e 	bl	800ddf4 <__ssprint_r>
 80092f8:	2800      	cmp	r0, #0
 80092fa:	f47f ac48 	bne.w	8008b8e <_svfprintf_r+0x19a>
 80092fe:	3d10      	subs	r5, #16
 8009300:	2d10      	cmp	r5, #16
 8009302:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 8009306:	4643      	mov	r3, r8
 8009308:	dce9      	bgt.n	80092de <_svfprintf_r+0x8ea>
 800930a:	469a      	mov	sl, r3
 800930c:	463b      	mov	r3, r7
 800930e:	460c      	mov	r4, r1
 8009310:	464f      	mov	r7, r9
 8009312:	4699      	mov	r9, r3
 8009314:	3201      	adds	r2, #1
 8009316:	442c      	add	r4, r5
 8009318:	2a07      	cmp	r2, #7
 800931a:	e9cd 2426 	strd	r2, r4, [sp, #152]	; 0x98
 800931e:	e9ca 9500 	strd	r9, r5, [sl]
 8009322:	f300 8342 	bgt.w	80099aa <_svfprintf_r+0xfb6>
 8009326:	f10a 0a08 	add.w	sl, sl, #8
 800932a:	e5c6      	b.n	8008eba <_svfprintf_r+0x4c6>
 800932c:	aa25      	add	r2, sp, #148	; 0x94
 800932e:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 8009332:	f004 fd5f 	bl	800ddf4 <__ssprint_r>
 8009336:	2800      	cmp	r0, #0
 8009338:	f43f ae57 	beq.w	8008fea <_svfprintf_r+0x5f6>
 800933c:	e427      	b.n	8008b8e <_svfprintf_r+0x19a>
 800933e:	aa25      	add	r2, sp, #148	; 0x94
 8009340:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 8009344:	f004 fd56 	bl	800ddf4 <__ssprint_r>
 8009348:	2800      	cmp	r0, #0
 800934a:	f47f ac20 	bne.w	8008b8e <_svfprintf_r+0x19a>
 800934e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009350:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8009352:	46c2      	mov	sl, r8
 8009354:	b91b      	cbnz	r3, 800935e <_svfprintf_r+0x96a>
 8009356:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009358:	2a00      	cmp	r2, #0
 800935a:	f000 837c 	beq.w	8009a56 <_svfprintf_r+0x1062>
 800935e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009360:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009362:	f8ca 1000 	str.w	r1, [sl]
 8009366:	9919      	ldr	r1, [sp, #100]	; 0x64
 8009368:	f8ca 1004 	str.w	r1, [sl, #4]
 800936c:	3201      	adds	r2, #1
 800936e:	440c      	add	r4, r1
 8009370:	2a07      	cmp	r2, #7
 8009372:	9427      	str	r4, [sp, #156]	; 0x9c
 8009374:	9226      	str	r2, [sp, #152]	; 0x98
 8009376:	f300 8457 	bgt.w	8009c28 <_svfprintf_r+0x1234>
 800937a:	f10a 0a08 	add.w	sl, sl, #8
 800937e:	2b00      	cmp	r3, #0
 8009380:	f2c0 8490 	blt.w	8009ca4 <_svfprintf_r+0x12b0>
 8009384:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009386:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009388:	3201      	adds	r2, #1
 800938a:	441c      	add	r4, r3
 800938c:	2a07      	cmp	r2, #7
 800938e:	e9cd 2426 	strd	r2, r4, [sp, #152]	; 0x98
 8009392:	e9ca 1300 	strd	r1, r3, [sl]
 8009396:	f77f ade6 	ble.w	8008f66 <_svfprintf_r+0x572>
 800939a:	aa25      	add	r2, sp, #148	; 0x94
 800939c:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 80093a0:	f004 fd28 	bl	800ddf4 <__ssprint_r>
 80093a4:	2800      	cmp	r0, #0
 80093a6:	f47f abf2 	bne.w	8008b8e <_svfprintf_r+0x19a>
 80093aa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80093ac:	46c2      	mov	sl, r8
 80093ae:	e5dc      	b.n	8008f6a <_svfprintf_r+0x576>
 80093b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80093b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80093b4:	2a01      	cmp	r2, #1
 80093b6:	f104 0401 	add.w	r4, r4, #1
 80093ba:	f103 0501 	add.w	r5, r3, #1
 80093be:	f10a 0608 	add.w	r6, sl, #8
 80093c2:	f340 8147 	ble.w	8009654 <_svfprintf_r+0xc60>
 80093c6:	2301      	movs	r3, #1
 80093c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80093ca:	f8ca 2000 	str.w	r2, [sl]
 80093ce:	2d07      	cmp	r5, #7
 80093d0:	e9cd 5426 	strd	r5, r4, [sp, #152]	; 0x98
 80093d4:	f8ca 3004 	str.w	r3, [sl, #4]
 80093d8:	f300 82bf 	bgt.w	800995a <_svfprintf_r+0xf66>
 80093dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80093de:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80093e0:	3501      	adds	r5, #1
 80093e2:	441c      	add	r4, r3
 80093e4:	2d07      	cmp	r5, #7
 80093e6:	e9cd 5426 	strd	r5, r4, [sp, #152]	; 0x98
 80093ea:	e9c6 2300 	strd	r2, r3, [r6]
 80093ee:	f300 82c0 	bgt.w	8009972 <_svfprintf_r+0xf7e>
 80093f2:	3608      	adds	r6, #8
 80093f4:	1c6f      	adds	r7, r5, #1
 80093f6:	970e      	str	r7, [sp, #56]	; 0x38
 80093f8:	9709      	str	r7, [sp, #36]	; 0x24
 80093fa:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80093fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80093fe:	9914      	ldr	r1, [sp, #80]	; 0x50
 8009400:	e9dd 0215 	ldrd	r0, r2, [sp, #84]	; 0x54
 8009404:	3f01      	subs	r7, #1
 8009406:	f106 0a08 	add.w	sl, r6, #8
 800940a:	f7f7 fe7d 	bl	8001108 <__aeabi_dcmpeq>
 800940e:	2800      	cmp	r0, #0
 8009410:	f040 80e0 	bne.w	80095d4 <_svfprintf_r+0xbe0>
 8009414:	443c      	add	r4, r7
 8009416:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009418:	6077      	str	r7, [r6, #4]
 800941a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800941c:	9427      	str	r4, [sp, #156]	; 0x9c
 800941e:	3301      	adds	r3, #1
 8009420:	2f07      	cmp	r7, #7
 8009422:	6033      	str	r3, [r6, #0]
 8009424:	9726      	str	r7, [sp, #152]	; 0x98
 8009426:	f300 8244 	bgt.w	80098b2 <_svfprintf_r+0xebe>
 800942a:	f106 0310 	add.w	r3, r6, #16
 800942e:	1caa      	adds	r2, r5, #2
 8009430:	4656      	mov	r6, sl
 8009432:	9209      	str	r2, [sp, #36]	; 0x24
 8009434:	469a      	mov	sl, r3
 8009436:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009438:	6072      	str	r2, [r6, #4]
 800943a:	4414      	add	r4, r2
 800943c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800943e:	9427      	str	r4, [sp, #156]	; 0x9c
 8009440:	ab21      	add	r3, sp, #132	; 0x84
 8009442:	2a07      	cmp	r2, #7
 8009444:	9226      	str	r2, [sp, #152]	; 0x98
 8009446:	6033      	str	r3, [r6, #0]
 8009448:	f77f ad8f 	ble.w	8008f6a <_svfprintf_r+0x576>
 800944c:	e7a5      	b.n	800939a <_svfprintf_r+0x9a6>
 800944e:	2b01      	cmp	r3, #1
 8009450:	f8cd 901c 	str.w	r9, [sp, #28]
 8009454:	f47f ac87 	bne.w	8008d66 <_svfprintf_r+0x372>
 8009458:	2d00      	cmp	r5, #0
 800945a:	bf08      	it	eq
 800945c:	2c0a      	cmpeq	r4, #10
 800945e:	f080 8148 	bcs.w	80096f2 <_svfprintf_r+0xcfe>
 8009462:	ab42      	add	r3, sp, #264	; 0x108
 8009464:	3430      	adds	r4, #48	; 0x30
 8009466:	f803 4d41 	strb.w	r4, [r3, #-65]!
 800946a:	9311      	str	r3, [sp, #68]	; 0x44
 800946c:	2301      	movs	r3, #1
 800946e:	930e      	str	r3, [sp, #56]	; 0x38
 8009470:	e497      	b.n	8008da2 <_svfprintf_r+0x3ae>
 8009472:	aa25      	add	r2, sp, #148	; 0x94
 8009474:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 8009478:	f004 fcbc 	bl	800ddf4 <__ssprint_r>
 800947c:	2800      	cmp	r0, #0
 800947e:	f47f ab86 	bne.w	8008b8e <_svfprintf_r+0x19a>
 8009482:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8009484:	46c2      	mov	sl, r8
 8009486:	e504      	b.n	8008e92 <_svfprintf_r+0x49e>
 8009488:	aa25      	add	r2, sp, #148	; 0x94
 800948a:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 800948e:	f004 fcb1 	bl	800ddf4 <__ssprint_r>
 8009492:	2800      	cmp	r0, #0
 8009494:	f47f ab7b 	bne.w	8008b8e <_svfprintf_r+0x19a>
 8009498:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 800949a:	46c2      	mov	sl, r8
 800949c:	e509      	b.n	8008eb2 <_svfprintf_r+0x4be>
 800949e:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 80094a2:	4642      	mov	r2, r8
 80094a4:	0923      	lsrs	r3, r4, #4
 80094a6:	f004 000f 	and.w	r0, r4, #15
 80094aa:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 80094ae:	0929      	lsrs	r1, r5, #4
 80094b0:	461c      	mov	r4, r3
 80094b2:	460d      	mov	r5, r1
 80094b4:	f81c 3000 	ldrb.w	r3, [ip, r0]
 80094b8:	f802 3d01 	strb.w	r3, [r2, #-1]!
 80094bc:	ea54 0305 	orrs.w	r3, r4, r5
 80094c0:	d1f0      	bne.n	80094a4 <_svfprintf_r+0xab0>
 80094c2:	eba8 0302 	sub.w	r3, r8, r2
 80094c6:	9211      	str	r2, [sp, #68]	; 0x44
 80094c8:	930e      	str	r3, [sp, #56]	; 0x38
 80094ca:	e46a      	b.n	8008da2 <_svfprintf_r+0x3ae>
 80094cc:	aa25      	add	r2, sp, #148	; 0x94
 80094ce:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 80094d2:	f004 fc8f 	bl	800ddf4 <__ssprint_r>
 80094d6:	2800      	cmp	r0, #0
 80094d8:	f47f ab59 	bne.w	8008b8e <_svfprintf_r+0x19a>
 80094dc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80094de:	46c2      	mov	sl, r8
 80094e0:	e52f      	b.n	8008f42 <_svfprintf_r+0x54e>
 80094e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	f340 826c 	ble.w	80099c2 <_svfprintf_r+0xfce>
 80094ea:	e9dd 3212 	ldrd	r3, r2, [sp, #72]	; 0x48
 80094ee:	4293      	cmp	r3, r2
 80094f0:	bfa8      	it	ge
 80094f2:	4613      	movge	r3, r2
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	461d      	mov	r5, r3
 80094f8:	dd0e      	ble.n	8009518 <_svfprintf_r+0xb24>
 80094fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80094fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80094fe:	f8ca 2000 	str.w	r2, [sl]
 8009502:	3301      	adds	r3, #1
 8009504:	442c      	add	r4, r5
 8009506:	2b07      	cmp	r3, #7
 8009508:	9427      	str	r4, [sp, #156]	; 0x9c
 800950a:	f8ca 5004 	str.w	r5, [sl, #4]
 800950e:	9326      	str	r3, [sp, #152]	; 0x98
 8009510:	f300 8326 	bgt.w	8009b60 <_svfprintf_r+0x116c>
 8009514:	f10a 0a08 	add.w	sl, sl, #8
 8009518:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800951a:	2d00      	cmp	r5, #0
 800951c:	bfa8      	it	ge
 800951e:	1b5b      	subge	r3, r3, r5
 8009520:	2b00      	cmp	r3, #0
 8009522:	461d      	mov	r5, r3
 8009524:	f300 818b 	bgt.w	800983e <_svfprintf_r+0xe4a>
 8009528:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800952a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800952c:	4293      	cmp	r3, r2
 800952e:	f2c0 81f1 	blt.w	8009914 <_svfprintf_r+0xf20>
 8009532:	9a07      	ldr	r2, [sp, #28]
 8009534:	07d1      	lsls	r1, r2, #31
 8009536:	f100 81ed 	bmi.w	8009914 <_svfprintf_r+0xf20>
 800953a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800953c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800953e:	1ad3      	subs	r3, r2, r3
 8009540:	1a15      	subs	r5, r2, r0
 8009542:	429d      	cmp	r5, r3
 8009544:	bfa8      	it	ge
 8009546:	461d      	movge	r5, r3
 8009548:	2d00      	cmp	r5, #0
 800954a:	dd0f      	ble.n	800956c <_svfprintf_r+0xb78>
 800954c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800954e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009550:	f8ca 5004 	str.w	r5, [sl, #4]
 8009554:	3201      	adds	r2, #1
 8009556:	4401      	add	r1, r0
 8009558:	442c      	add	r4, r5
 800955a:	2a07      	cmp	r2, #7
 800955c:	f8ca 1000 	str.w	r1, [sl]
 8009560:	e9cd 2426 	strd	r2, r4, [sp, #152]	; 0x98
 8009564:	f300 8342 	bgt.w	8009bec <_svfprintf_r+0x11f8>
 8009568:	f10a 0a08 	add.w	sl, sl, #8
 800956c:	2d00      	cmp	r5, #0
 800956e:	bfac      	ite	ge
 8009570:	1b5d      	subge	r5, r3, r5
 8009572:	461d      	movlt	r5, r3
 8009574:	2d00      	cmp	r5, #0
 8009576:	f77f acf8 	ble.w	8008f6a <_svfprintf_r+0x576>
 800957a:	2d10      	cmp	r5, #16
 800957c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800957e:	f8df 9668 	ldr.w	r9, [pc, #1640]	; 8009be8 <_svfprintf_r+0x11f4>
 8009582:	f340 8208 	ble.w	8009996 <_svfprintf_r+0xfa2>
 8009586:	4623      	mov	r3, r4
 8009588:	2610      	movs	r6, #16
 800958a:	464c      	mov	r4, r9
 800958c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800958e:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8009592:	e005      	b.n	80095a0 <_svfprintf_r+0xbac>
 8009594:	f10a 0a08 	add.w	sl, sl, #8
 8009598:	3d10      	subs	r5, #16
 800959a:	2d10      	cmp	r5, #16
 800959c:	f340 81f9 	ble.w	8009992 <_svfprintf_r+0xf9e>
 80095a0:	3201      	adds	r2, #1
 80095a2:	3310      	adds	r3, #16
 80095a4:	2a07      	cmp	r2, #7
 80095a6:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
 80095aa:	e9ca 4600 	strd	r4, r6, [sl]
 80095ae:	ddf1      	ble.n	8009594 <_svfprintf_r+0xba0>
 80095b0:	aa25      	add	r2, sp, #148	; 0x94
 80095b2:	4649      	mov	r1, r9
 80095b4:	4638      	mov	r0, r7
 80095b6:	f004 fc1d 	bl	800ddf4 <__ssprint_r>
 80095ba:	2800      	cmp	r0, #0
 80095bc:	f47f aae7 	bne.w	8008b8e <_svfprintf_r+0x19a>
 80095c0:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 80095c4:	46c2      	mov	sl, r8
 80095c6:	e7e7      	b.n	8009598 <_svfprintf_r+0xba4>
 80095c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095ca:	930e      	str	r3, [sp, #56]	; 0x38
 80095cc:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 80095d0:	f7ff bbe7 	b.w	8008da2 <_svfprintf_r+0x3ae>
 80095d4:	2f00      	cmp	r7, #0
 80095d6:	f77f af2e 	ble.w	8009436 <_svfprintf_r+0xa42>
 80095da:	2f10      	cmp	r7, #16
 80095dc:	f8df 9608 	ldr.w	r9, [pc, #1544]	; 8009be8 <_svfprintf_r+0x11f4>
 80095e0:	f340 83fb 	ble.w	8009dda <_svfprintf_r+0x13e6>
 80095e4:	4633      	mov	r3, r6
 80095e6:	4622      	mov	r2, r4
 80095e8:	464e      	mov	r6, r9
 80095ea:	f04f 0a10 	mov.w	sl, #16
 80095ee:	e9dd 450d 	ldrd	r4, r5, [sp, #52]	; 0x34
 80095f2:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80095f6:	e005      	b.n	8009604 <_svfprintf_r+0xc10>
 80095f8:	3308      	adds	r3, #8
 80095fa:	3f10      	subs	r7, #16
 80095fc:	2f10      	cmp	r7, #16
 80095fe:	f340 81fb 	ble.w	80099f8 <_svfprintf_r+0x1004>
 8009602:	3501      	adds	r5, #1
 8009604:	3210      	adds	r2, #16
 8009606:	2d07      	cmp	r5, #7
 8009608:	e9cd 5226 	strd	r5, r2, [sp, #152]	; 0x98
 800960c:	e9c3 6a00 	strd	r6, sl, [r3]
 8009610:	ddf2      	ble.n	80095f8 <_svfprintf_r+0xc04>
 8009612:	aa25      	add	r2, sp, #148	; 0x94
 8009614:	4649      	mov	r1, r9
 8009616:	4620      	mov	r0, r4
 8009618:	f004 fbec 	bl	800ddf4 <__ssprint_r>
 800961c:	2800      	cmp	r0, #0
 800961e:	f47f aab6 	bne.w	8008b8e <_svfprintf_r+0x19a>
 8009622:	e9dd 5226 	ldrd	r5, r2, [sp, #152]	; 0x98
 8009626:	4643      	mov	r3, r8
 8009628:	e7e7      	b.n	80095fa <_svfprintf_r+0xc06>
 800962a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800962c:	f019 0f10 	tst.w	r9, #16
 8009630:	f853 4b04 	ldr.w	r4, [r3], #4
 8009634:	930f      	str	r3, [sp, #60]	; 0x3c
 8009636:	d078      	beq.n	800972a <_svfprintf_r+0xd36>
 8009638:	2500      	movs	r5, #0
 800963a:	2301      	movs	r3, #1
 800963c:	f7ff bac4 	b.w	8008bc8 <_svfprintf_r+0x1d4>
 8009640:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009642:	f852 4b04 	ldr.w	r4, [r2], #4
 8009646:	920f      	str	r2, [sp, #60]	; 0x3c
 8009648:	f019 0210 	ands.w	r2, r9, #16
 800964c:	d07c      	beq.n	8009748 <_svfprintf_r+0xd54>
 800964e:	2500      	movs	r5, #0
 8009650:	f7ff baba 	b.w	8008bc8 <_svfprintf_r+0x1d4>
 8009654:	9a07      	ldr	r2, [sp, #28]
 8009656:	07d2      	lsls	r2, r2, #31
 8009658:	f53f aeb5 	bmi.w	80093c6 <_svfprintf_r+0x9d2>
 800965c:	2201      	movs	r2, #1
 800965e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009660:	f8ca 1000 	str.w	r1, [sl]
 8009664:	2d07      	cmp	r5, #7
 8009666:	e9cd 5426 	strd	r5, r4, [sp, #152]	; 0x98
 800966a:	f8ca 2004 	str.w	r2, [sl, #4]
 800966e:	f300 8120 	bgt.w	80098b2 <_svfprintf_r+0xebe>
 8009672:	3302      	adds	r3, #2
 8009674:	9309      	str	r3, [sp, #36]	; 0x24
 8009676:	f10a 0a10 	add.w	sl, sl, #16
 800967a:	e6dc      	b.n	8009436 <_svfprintf_r+0xa42>
 800967c:	2b30      	cmp	r3, #48	; 0x30
 800967e:	f000 8143 	beq.w	8009908 <_svfprintf_r+0xf14>
 8009682:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009684:	3902      	subs	r1, #2
 8009686:	2330      	movs	r3, #48	; 0x30
 8009688:	f802 3c01 	strb.w	r3, [r2, #-1]
 800968c:	eba8 0301 	sub.w	r3, r8, r1
 8009690:	930e      	str	r3, [sp, #56]	; 0x38
 8009692:	9111      	str	r1, [sp, #68]	; 0x44
 8009694:	f7ff bb85 	b.w	8008da2 <_svfprintf_r+0x3ae>
 8009698:	9b07      	ldr	r3, [sp, #28]
 800969a:	07dd      	lsls	r5, r3, #31
 800969c:	f53f adb9 	bmi.w	8009212 <_svfprintf_r+0x81e>
 80096a0:	e463      	b.n	8008f6a <_svfprintf_r+0x576>
 80096a2:	aa25      	add	r2, sp, #148	; 0x94
 80096a4:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 80096a8:	f004 fba4 	bl	800ddf4 <__ssprint_r>
 80096ac:	2800      	cmp	r0, #0
 80096ae:	f47f aa6e 	bne.w	8008b8e <_svfprintf_r+0x19a>
 80096b2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80096b4:	e48e      	b.n	8008fd4 <_svfprintf_r+0x5e0>
 80096b6:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 80096ba:	f7ff bb72 	b.w	8008da2 <_svfprintf_r+0x3ae>
 80096be:	2500      	movs	r5, #0
 80096c0:	e4a8      	b.n	8009014 <_svfprintf_r+0x620>
 80096c2:	17e5      	asrs	r5, r4, #31
 80096c4:	2c00      	cmp	r4, #0
 80096c6:	f175 0300 	sbcs.w	r3, r5, #0
 80096ca:	f6bf ab3a 	bge.w	8008d42 <_svfprintf_r+0x34e>
 80096ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096d0:	4264      	negs	r4, r4
 80096d2:	f04f 062d 	mov.w	r6, #45	; 0x2d
 80096d6:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 80096da:	3301      	adds	r3, #1
 80096dc:	f88d 6077 	strb.w	r6, [sp, #119]	; 0x77
 80096e0:	f47f ab35 	bne.w	8008d4e <_svfprintf_r+0x35a>
 80096e4:	2d00      	cmp	r5, #0
 80096e6:	bf08      	it	eq
 80096e8:	2c0a      	cmpeq	r4, #10
 80096ea:	f8cd 901c 	str.w	r9, [sp, #28]
 80096ee:	f4ff aeb8 	bcc.w	8009462 <_svfprintf_r+0xa6e>
 80096f2:	46c1      	mov	r9, r8
 80096f4:	4620      	mov	r0, r4
 80096f6:	4629      	mov	r1, r5
 80096f8:	220a      	movs	r2, #10
 80096fa:	2300      	movs	r3, #0
 80096fc:	f7f6 fe06 	bl	800030c <__aeabi_uldivmod>
 8009700:	3230      	adds	r2, #48	; 0x30
 8009702:	f809 2d01 	strb.w	r2, [r9, #-1]!
 8009706:	4620      	mov	r0, r4
 8009708:	4629      	mov	r1, r5
 800970a:	2300      	movs	r3, #0
 800970c:	220a      	movs	r2, #10
 800970e:	f7f6 fdfd 	bl	800030c <__aeabi_uldivmod>
 8009712:	4604      	mov	r4, r0
 8009714:	460d      	mov	r5, r1
 8009716:	ea54 0305 	orrs.w	r3, r4, r5
 800971a:	d1eb      	bne.n	80096f4 <_svfprintf_r+0xd00>
 800971c:	eba8 0309 	sub.w	r3, r8, r9
 8009720:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
 8009724:	930e      	str	r3, [sp, #56]	; 0x38
 8009726:	f7ff bb3c 	b.w	8008da2 <_svfprintf_r+0x3ae>
 800972a:	f019 0f40 	tst.w	r9, #64	; 0x40
 800972e:	bf18      	it	ne
 8009730:	b2a4      	uxthne	r4, r4
 8009732:	2500      	movs	r5, #0
 8009734:	2301      	movs	r3, #1
 8009736:	f7ff ba47 	b.w	8008bc8 <_svfprintf_r+0x1d4>
 800973a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800973c:	4610      	mov	r0, r2
 800973e:	17d1      	asrs	r1, r2, #31
 8009740:	e9c3 0100 	strd	r0, r1, [r3]
 8009744:	f7ff b97e 	b.w	8008a44 <_svfprintf_r+0x50>
 8009748:	f019 0340 	ands.w	r3, r9, #64	; 0x40
 800974c:	bf1c      	itt	ne
 800974e:	4613      	movne	r3, r2
 8009750:	b2a4      	uxthne	r4, r4
 8009752:	2500      	movs	r5, #0
 8009754:	f7ff ba38 	b.w	8008bc8 <_svfprintf_r+0x1d4>
 8009758:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800975a:	4622      	mov	r2, r4
 800975c:	4620      	mov	r0, r4
 800975e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8009760:	4623      	mov	r3, r4
 8009762:	4621      	mov	r1, r4
 8009764:	f7f7 fd02 	bl	800116c <__aeabi_dcmpun>
 8009768:	2800      	cmp	r0, #0
 800976a:	f040 8322 	bne.w	8009db2 <_svfprintf_r+0x13be>
 800976e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009770:	f027 0320 	bic.w	r3, r7, #32
 8009774:	1c54      	adds	r4, r2, #1
 8009776:	9308      	str	r3, [sp, #32]
 8009778:	f000 821a 	beq.w	8009bb0 <_svfprintf_r+0x11bc>
 800977c:	2b47      	cmp	r3, #71	; 0x47
 800977e:	f000 816f 	beq.w	8009a60 <_svfprintf_r+0x106c>
 8009782:	f449 7380 	orr.w	r3, r9, #256	; 0x100
 8009786:	9307      	str	r3, [sp, #28]
 8009788:	e9dd 3614 	ldrd	r3, r6, [sp, #80]	; 0x50
 800978c:	1e1d      	subs	r5, r3, #0
 800978e:	bfb6      	itet	lt
 8009790:	f103 4500 	addlt.w	r5, r3, #2147483648	; 0x80000000
 8009794:	2300      	movge	r3, #0
 8009796:	232d      	movlt	r3, #45	; 0x2d
 8009798:	2f66      	cmp	r7, #102	; 0x66
 800979a:	9310      	str	r3, [sp, #64]	; 0x40
 800979c:	f000 820b 	beq.w	8009bb6 <_svfprintf_r+0x11c2>
 80097a0:	2f46      	cmp	r7, #70	; 0x46
 80097a2:	f000 8262 	beq.w	8009c6a <_svfprintf_r+0x1276>
 80097a6:	9b08      	ldr	r3, [sp, #32]
 80097a8:	2b45      	cmp	r3, #69	; 0x45
 80097aa:	4632      	mov	r2, r6
 80097ac:	462b      	mov	r3, r5
 80097ae:	f000 815d 	beq.w	8009a6c <_svfprintf_r+0x1078>
 80097b2:	a823      	add	r0, sp, #140	; 0x8c
 80097b4:	a920      	add	r1, sp, #128	; 0x80
 80097b6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80097b8:	9004      	str	r0, [sp, #16]
 80097ba:	9103      	str	r1, [sp, #12]
 80097bc:	a81f      	add	r0, sp, #124	; 0x7c
 80097be:	2102      	movs	r1, #2
 80097c0:	9002      	str	r0, [sp, #8]
 80097c2:	9401      	str	r4, [sp, #4]
 80097c4:	9100      	str	r1, [sp, #0]
 80097c6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80097c8:	f001 ff22 	bl	800b610 <_dtoa_r>
 80097cc:	2f67      	cmp	r7, #103	; 0x67
 80097ce:	9011      	str	r0, [sp, #68]	; 0x44
 80097d0:	f040 8330 	bne.w	8009e34 <_svfprintf_r+0x1440>
 80097d4:	f019 0f01 	tst.w	r9, #1
 80097d8:	f000 816f 	beq.w	8009aba <_svfprintf_r+0x10c6>
 80097dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80097de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097e0:	189c      	adds	r4, r3, r2
 80097e2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80097e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80097e6:	4630      	mov	r0, r6
 80097e8:	4629      	mov	r1, r5
 80097ea:	f7f7 fc8d 	bl	8001108 <__aeabi_dcmpeq>
 80097ee:	2800      	cmp	r0, #0
 80097f0:	f000 81d2 	beq.w	8009b98 <_svfprintf_r+0x11a4>
 80097f4:	4623      	mov	r3, r4
 80097f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80097f8:	1a9b      	subs	r3, r3, r2
 80097fa:	9313      	str	r3, [sp, #76]	; 0x4c
 80097fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80097fe:	9312      	str	r3, [sp, #72]	; 0x48
 8009800:	9b08      	ldr	r3, [sp, #32]
 8009802:	2b47      	cmp	r3, #71	; 0x47
 8009804:	f000 8162 	beq.w	8009acc <_svfprintf_r+0x10d8>
 8009808:	2f66      	cmp	r7, #102	; 0x66
 800980a:	f040 8166 	bne.w	8009ada <_svfprintf_r+0x10e6>
 800980e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009810:	2b00      	cmp	r3, #0
 8009812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009814:	f340 82d9 	ble.w	8009dca <_svfprintf_r+0x13d6>
 8009818:	2b00      	cmp	r3, #0
 800981a:	f040 82c0 	bne.w	8009d9e <_svfprintf_r+0x13aa>
 800981e:	f019 0f01 	tst.w	r9, #1
 8009822:	f040 82bc 	bne.w	8009d9e <_svfprintf_r+0x13aa>
 8009826:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009828:	9308      	str	r3, [sp, #32]
 800982a:	930e      	str	r3, [sp, #56]	; 0x38
 800982c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800982e:	2b00      	cmp	r3, #0
 8009830:	f040 817e 	bne.w	8009b30 <_svfprintf_r+0x113c>
 8009834:	9309      	str	r3, [sp, #36]	; 0x24
 8009836:	f89d 6077 	ldrb.w	r6, [sp, #119]	; 0x77
 800983a:	f7ff ba3d 	b.w	8008cb8 <_svfprintf_r+0x2c4>
 800983e:	2b10      	cmp	r3, #16
 8009840:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009842:	f8df 93a4 	ldr.w	r9, [pc, #932]	; 8009be8 <_svfprintf_r+0x11f4>
 8009846:	f340 80ef 	ble.w	8009a28 <_svfprintf_r+0x1034>
 800984a:	4623      	mov	r3, r4
 800984c:	2610      	movs	r6, #16
 800984e:	464c      	mov	r4, r9
 8009850:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009852:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8009856:	e005      	b.n	8009864 <_svfprintf_r+0xe70>
 8009858:	f10a 0a08 	add.w	sl, sl, #8
 800985c:	3d10      	subs	r5, #16
 800985e:	2d10      	cmp	r5, #16
 8009860:	f340 80e0 	ble.w	8009a24 <_svfprintf_r+0x1030>
 8009864:	3201      	adds	r2, #1
 8009866:	3310      	adds	r3, #16
 8009868:	2a07      	cmp	r2, #7
 800986a:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
 800986e:	e9ca 4600 	strd	r4, r6, [sl]
 8009872:	ddf1      	ble.n	8009858 <_svfprintf_r+0xe64>
 8009874:	aa25      	add	r2, sp, #148	; 0x94
 8009876:	4649      	mov	r1, r9
 8009878:	4638      	mov	r0, r7
 800987a:	f004 fabb 	bl	800ddf4 <__ssprint_r>
 800987e:	2800      	cmp	r0, #0
 8009880:	f47f a985 	bne.w	8008b8e <_svfprintf_r+0x19a>
 8009884:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 8009888:	46c2      	mov	sl, r8
 800988a:	e7e7      	b.n	800985c <_svfprintf_r+0xe68>
 800988c:	4264      	negs	r4, r4
 800988e:	940b      	str	r4, [sp, #44]	; 0x2c
 8009890:	900f      	str	r0, [sp, #60]	; 0x3c
 8009892:	e47c      	b.n	800918e <_svfprintf_r+0x79a>
 8009894:	2140      	movs	r1, #64	; 0x40
 8009896:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009898:	f003 fa7e 	bl	800cd98 <_malloc_r>
 800989c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800989e:	6018      	str	r0, [r3, #0]
 80098a0:	6118      	str	r0, [r3, #16]
 80098a2:	2800      	cmp	r0, #0
 80098a4:	f000 82cd 	beq.w	8009e42 <_svfprintf_r+0x144e>
 80098a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098aa:	2340      	movs	r3, #64	; 0x40
 80098ac:	6153      	str	r3, [r2, #20]
 80098ae:	f7ff b8b8 	b.w	8008a22 <_svfprintf_r+0x2e>
 80098b2:	aa25      	add	r2, sp, #148	; 0x94
 80098b4:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 80098b8:	f004 fa9c 	bl	800ddf4 <__ssprint_r>
 80098bc:	2800      	cmp	r0, #0
 80098be:	f47f a966 	bne.w	8008b8e <_svfprintf_r+0x19a>
 80098c2:	e9dd 3426 	ldrd	r3, r4, [sp, #152]	; 0x98
 80098c6:	3301      	adds	r3, #1
 80098c8:	9309      	str	r3, [sp, #36]	; 0x24
 80098ca:	f10d 0ad0 	add.w	sl, sp, #208	; 0xd0
 80098ce:	4646      	mov	r6, r8
 80098d0:	e5b1      	b.n	8009436 <_svfprintf_r+0xa42>
 80098d2:	aa25      	add	r2, sp, #148	; 0x94
 80098d4:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 80098d8:	f004 fa8c 	bl	800ddf4 <__ssprint_r>
 80098dc:	2800      	cmp	r0, #0
 80098de:	f47f a956 	bne.w	8008b8e <_svfprintf_r+0x19a>
 80098e2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80098e4:	46c2      	mov	sl, r8
 80098e6:	e4a4      	b.n	8009232 <_svfprintf_r+0x83e>
 80098e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098ea:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80098ec:	9609      	str	r6, [sp, #36]	; 0x24
 80098ee:	2b06      	cmp	r3, #6
 80098f0:	bf28      	it	cs
 80098f2:	2306      	movcs	r3, #6
 80098f4:	9308      	str	r3, [sp, #32]
 80098f6:	930e      	str	r3, [sp, #56]	; 0x38
 80098f8:	4bb9      	ldr	r3, [pc, #740]	; (8009be0 <_svfprintf_r+0x11ec>)
 80098fa:	950f      	str	r5, [sp, #60]	; 0x3c
 80098fc:	f8cd 901c 	str.w	r9, [sp, #28]
 8009900:	9612      	str	r6, [sp, #72]	; 0x48
 8009902:	9311      	str	r3, [sp, #68]	; 0x44
 8009904:	f7ff b9d8 	b.w	8008cb8 <_svfprintf_r+0x2c4>
 8009908:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800990a:	eba8 0303 	sub.w	r3, r8, r3
 800990e:	930e      	str	r3, [sp, #56]	; 0x38
 8009910:	f7ff ba47 	b.w	8008da2 <_svfprintf_r+0x3ae>
 8009914:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009916:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009918:	f8ca 1000 	str.w	r1, [sl]
 800991c:	9919      	ldr	r1, [sp, #100]	; 0x64
 800991e:	f8ca 1004 	str.w	r1, [sl, #4]
 8009922:	3201      	adds	r2, #1
 8009924:	440c      	add	r4, r1
 8009926:	2a07      	cmp	r2, #7
 8009928:	9427      	str	r4, [sp, #156]	; 0x9c
 800992a:	9226      	str	r2, [sp, #152]	; 0x98
 800992c:	f300 8128 	bgt.w	8009b80 <_svfprintf_r+0x118c>
 8009930:	f10a 0a08 	add.w	sl, sl, #8
 8009934:	e601      	b.n	800953a <_svfprintf_r+0xb46>
 8009936:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009938:	601a      	str	r2, [r3, #0]
 800993a:	f7ff b883 	b.w	8008a44 <_svfprintf_r+0x50>
 800993e:	aa25      	add	r2, sp, #148	; 0x94
 8009940:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 8009944:	f004 fa56 	bl	800ddf4 <__ssprint_r>
 8009948:	2800      	cmp	r0, #0
 800994a:	f47f a920 	bne.w	8008b8e <_svfprintf_r+0x19a>
 800994e:	f89d 6077 	ldrb.w	r6, [sp, #119]	; 0x77
 8009952:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8009954:	46c2      	mov	sl, r8
 8009956:	f7ff ba8c 	b.w	8008e72 <_svfprintf_r+0x47e>
 800995a:	aa25      	add	r2, sp, #148	; 0x94
 800995c:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 8009960:	f004 fa48 	bl	800ddf4 <__ssprint_r>
 8009964:	2800      	cmp	r0, #0
 8009966:	f47f a912 	bne.w	8008b8e <_svfprintf_r+0x19a>
 800996a:	e9dd 5426 	ldrd	r5, r4, [sp, #152]	; 0x98
 800996e:	4646      	mov	r6, r8
 8009970:	e534      	b.n	80093dc <_svfprintf_r+0x9e8>
 8009972:	aa25      	add	r2, sp, #148	; 0x94
 8009974:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 8009978:	f004 fa3c 	bl	800ddf4 <__ssprint_r>
 800997c:	2800      	cmp	r0, #0
 800997e:	f47f a906 	bne.w	8008b8e <_svfprintf_r+0x19a>
 8009982:	e9dd 5426 	ldrd	r5, r4, [sp, #152]	; 0x98
 8009986:	4646      	mov	r6, r8
 8009988:	e534      	b.n	80093f4 <_svfprintf_r+0xa00>
 800998a:	2b01      	cmp	r3, #1
 800998c:	f47f a9eb 	bne.w	8008d66 <_svfprintf_r+0x372>
 8009990:	e567      	b.n	8009462 <_svfprintf_r+0xa6e>
 8009992:	46a1      	mov	r9, r4
 8009994:	461c      	mov	r4, r3
 8009996:	3201      	adds	r2, #1
 8009998:	442c      	add	r4, r5
 800999a:	2a07      	cmp	r2, #7
 800999c:	e9cd 2426 	strd	r2, r4, [sp, #152]	; 0x98
 80099a0:	e9ca 9500 	strd	r9, r5, [sl]
 80099a4:	f77f aadf 	ble.w	8008f66 <_svfprintf_r+0x572>
 80099a8:	e4f7      	b.n	800939a <_svfprintf_r+0x9a6>
 80099aa:	aa25      	add	r2, sp, #148	; 0x94
 80099ac:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 80099b0:	f004 fa20 	bl	800ddf4 <__ssprint_r>
 80099b4:	2800      	cmp	r0, #0
 80099b6:	f47f a8ea 	bne.w	8008b8e <_svfprintf_r+0x19a>
 80099ba:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80099bc:	46c2      	mov	sl, r8
 80099be:	f7ff ba7c 	b.w	8008eba <_svfprintf_r+0x4c6>
 80099c2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80099c4:	4987      	ldr	r1, [pc, #540]	; (8009be4 <_svfprintf_r+0x11f0>)
 80099c6:	f8ca 1000 	str.w	r1, [sl]
 80099ca:	3201      	adds	r2, #1
 80099cc:	3401      	adds	r4, #1
 80099ce:	2101      	movs	r1, #1
 80099d0:	2a07      	cmp	r2, #7
 80099d2:	e9cd 2426 	strd	r2, r4, [sp, #152]	; 0x98
 80099d6:	f8ca 1004 	str.w	r1, [sl, #4]
 80099da:	f73f acb0 	bgt.w	800933e <_svfprintf_r+0x94a>
 80099de:	f10a 0a08 	add.w	sl, sl, #8
 80099e2:	e4b7      	b.n	8009354 <_svfprintf_r+0x960>
 80099e4:	aa25      	add	r2, sp, #148	; 0x94
 80099e6:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 80099ea:	f004 fa03 	bl	800ddf4 <__ssprint_r>
 80099ee:	2800      	cmp	r0, #0
 80099f0:	f47f a8cd 	bne.w	8008b8e <_svfprintf_r+0x19a>
 80099f4:	46c2      	mov	sl, r8
 80099f6:	e406      	b.n	8009206 <_svfprintf_r+0x812>
 80099f8:	46b1      	mov	r9, r6
 80099fa:	461e      	mov	r6, r3
 80099fc:	1c6b      	adds	r3, r5, #1
 80099fe:	4614      	mov	r4, r2
 8009a00:	9309      	str	r3, [sp, #36]	; 0x24
 8009a02:	f106 0208 	add.w	r2, r6, #8
 8009a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a08:	9326      	str	r3, [sp, #152]	; 0x98
 8009a0a:	443c      	add	r4, r7
 8009a0c:	2b07      	cmp	r3, #7
 8009a0e:	9427      	str	r4, [sp, #156]	; 0x9c
 8009a10:	e9c6 9700 	strd	r9, r7, [r6]
 8009a14:	f73f af4d 	bgt.w	80098b2 <_svfprintf_r+0xebe>
 8009a18:	3301      	adds	r3, #1
 8009a1a:	9309      	str	r3, [sp, #36]	; 0x24
 8009a1c:	f102 0a08 	add.w	sl, r2, #8
 8009a20:	4616      	mov	r6, r2
 8009a22:	e508      	b.n	8009436 <_svfprintf_r+0xa42>
 8009a24:	46a1      	mov	r9, r4
 8009a26:	461c      	mov	r4, r3
 8009a28:	3201      	adds	r2, #1
 8009a2a:	442c      	add	r4, r5
 8009a2c:	2a07      	cmp	r2, #7
 8009a2e:	e9cd 2426 	strd	r2, r4, [sp, #152]	; 0x98
 8009a32:	e9ca 9500 	strd	r9, r5, [sl]
 8009a36:	f300 812a 	bgt.w	8009c8e <_svfprintf_r+0x129a>
 8009a3a:	f10a 0a08 	add.w	sl, sl, #8
 8009a3e:	e573      	b.n	8009528 <_svfprintf_r+0xb34>
 8009a40:	9811      	ldr	r0, [sp, #68]	; 0x44
 8009a42:	9409      	str	r4, [sp, #36]	; 0x24
 8009a44:	f7f6 fe7c 	bl	8000740 <strlen>
 8009a48:	f8cd 901c 	str.w	r9, [sp, #28]
 8009a4c:	e9cd 050e 	strd	r0, r5, [sp, #56]	; 0x38
 8009a50:	4603      	mov	r3, r0
 8009a52:	f7ff b92b 	b.w	8008cac <_svfprintf_r+0x2b8>
 8009a56:	9a07      	ldr	r2, [sp, #28]
 8009a58:	07d0      	lsls	r0, r2, #31
 8009a5a:	f57f aa86 	bpl.w	8008f6a <_svfprintf_r+0x576>
 8009a5e:	e47e      	b.n	800935e <_svfprintf_r+0x96a>
 8009a60:	2a00      	cmp	r2, #0
 8009a62:	4613      	mov	r3, r2
 8009a64:	bf08      	it	eq
 8009a66:	2301      	moveq	r3, #1
 8009a68:	9309      	str	r3, [sp, #36]	; 0x24
 8009a6a:	e68a      	b.n	8009782 <_svfprintf_r+0xd8e>
 8009a6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a6e:	3101      	adds	r1, #1
 8009a70:	460c      	mov	r4, r1
 8009a72:	910e      	str	r1, [sp, #56]	; 0x38
 8009a74:	a823      	add	r0, sp, #140	; 0x8c
 8009a76:	a920      	add	r1, sp, #128	; 0x80
 8009a78:	9004      	str	r0, [sp, #16]
 8009a7a:	9103      	str	r1, [sp, #12]
 8009a7c:	a81f      	add	r0, sp, #124	; 0x7c
 8009a7e:	2102      	movs	r1, #2
 8009a80:	9002      	str	r0, [sp, #8]
 8009a82:	9401      	str	r4, [sp, #4]
 8009a84:	9100      	str	r1, [sp, #0]
 8009a86:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009a88:	f001 fdc2 	bl	800b610 <_dtoa_r>
 8009a8c:	9011      	str	r0, [sp, #68]	; 0x44
 8009a8e:	2f47      	cmp	r7, #71	; 0x47
 8009a90:	f040 81c8 	bne.w	8009e24 <_svfprintf_r+0x1430>
 8009a94:	f019 0f01 	tst.w	r9, #1
 8009a98:	f000 81bd 	beq.w	8009e16 <_svfprintf_r+0x1422>
 8009a9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009aa0:	2f46      	cmp	r7, #70	; 0x46
 8009aa2:	eb03 0402 	add.w	r4, r3, r2
 8009aa6:	f47f ae9c 	bne.w	80097e2 <_svfprintf_r+0xdee>
 8009aaa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	2b30      	cmp	r3, #48	; 0x30
 8009ab0:	f000 815c 	beq.w	8009d6c <_svfprintf_r+0x1378>
 8009ab4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009ab6:	441c      	add	r4, r3
 8009ab8:	e693      	b.n	80097e2 <_svfprintf_r+0xdee>
 8009aba:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009abc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009abe:	9212      	str	r2, [sp, #72]	; 0x48
 8009ac0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009ac2:	1a9b      	subs	r3, r3, r2
 8009ac4:	9313      	str	r3, [sp, #76]	; 0x4c
 8009ac6:	9b08      	ldr	r3, [sp, #32]
 8009ac8:	2b47      	cmp	r3, #71	; 0x47
 8009aca:	d106      	bne.n	8009ada <_svfprintf_r+0x10e6>
 8009acc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ace:	1cda      	adds	r2, r3, #3
 8009ad0:	db02      	blt.n	8009ad8 <_svfprintf_r+0x10e4>
 8009ad2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	da32      	bge.n	8009b3e <_svfprintf_r+0x114a>
 8009ad8:	3f02      	subs	r7, #2
 8009ada:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009adc:	f88d 7084 	strb.w	r7, [sp, #132]	; 0x84
 8009ae0:	3b01      	subs	r3, #1
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	931f      	str	r3, [sp, #124]	; 0x7c
 8009ae6:	bfbd      	ittte	lt
 8009ae8:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8009aea:	f1c3 0301 	rsblt	r3, r3, #1
 8009aee:	222d      	movlt	r2, #45	; 0x2d
 8009af0:	222b      	movge	r2, #43	; 0x2b
 8009af2:	2b09      	cmp	r3, #9
 8009af4:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
 8009af8:	f300 8105 	bgt.w	8009d06 <_svfprintf_r+0x1312>
 8009afc:	3330      	adds	r3, #48	; 0x30
 8009afe:	2230      	movs	r2, #48	; 0x30
 8009b00:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
 8009b04:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
 8009b08:	ab22      	add	r3, sp, #136	; 0x88
 8009b0a:	aa21      	add	r2, sp, #132	; 0x84
 8009b0c:	1a9b      	subs	r3, r3, r2
 8009b0e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009b10:	931b      	str	r3, [sp, #108]	; 0x6c
 8009b12:	2a01      	cmp	r2, #1
 8009b14:	4413      	add	r3, r2
 8009b16:	930e      	str	r3, [sp, #56]	; 0x38
 8009b18:	f340 8137 	ble.w	8009d8a <_svfprintf_r+0x1396>
 8009b1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b1e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009b20:	4413      	add	r3, r2
 8009b22:	930e      	str	r3, [sp, #56]	; 0x38
 8009b24:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009b28:	9308      	str	r3, [sp, #32]
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	9312      	str	r3, [sp, #72]	; 0x48
 8009b2e:	e67d      	b.n	800982c <_svfprintf_r+0xe38>
 8009b30:	262d      	movs	r6, #45	; 0x2d
 8009b32:	2300      	movs	r3, #0
 8009b34:	f88d 6077 	strb.w	r6, [sp, #119]	; 0x77
 8009b38:	9309      	str	r3, [sp, #36]	; 0x24
 8009b3a:	f7ff b8c0 	b.w	8008cbe <_svfprintf_r+0x2ca>
 8009b3e:	e9dd 3112 	ldrd	r3, r1, [sp, #72]	; 0x48
 8009b42:	428b      	cmp	r3, r1
 8009b44:	db7e      	blt.n	8009c44 <_svfprintf_r+0x1250>
 8009b46:	f019 0f01 	tst.w	r9, #1
 8009b4a:	f000 8109 	beq.w	8009d60 <_svfprintf_r+0x136c>
 8009b4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009b50:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009b52:	4413      	add	r3, r2
 8009b54:	930e      	str	r3, [sp, #56]	; 0x38
 8009b56:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009b5a:	9308      	str	r3, [sp, #32]
 8009b5c:	2767      	movs	r7, #103	; 0x67
 8009b5e:	e665      	b.n	800982c <_svfprintf_r+0xe38>
 8009b60:	aa25      	add	r2, sp, #148	; 0x94
 8009b62:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 8009b66:	f004 f945 	bl	800ddf4 <__ssprint_r>
 8009b6a:	2800      	cmp	r0, #0
 8009b6c:	f47f a80f 	bne.w	8008b8e <_svfprintf_r+0x19a>
 8009b70:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8009b72:	46c2      	mov	sl, r8
 8009b74:	e4d0      	b.n	8009518 <_svfprintf_r+0xb24>
 8009b76:	262d      	movs	r6, #45	; 0x2d
 8009b78:	f88d 6077 	strb.w	r6, [sp, #119]	; 0x77
 8009b7c:	f7ff bac3 	b.w	8009106 <_svfprintf_r+0x712>
 8009b80:	aa25      	add	r2, sp, #148	; 0x94
 8009b82:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 8009b86:	f004 f935 	bl	800ddf4 <__ssprint_r>
 8009b8a:	2800      	cmp	r0, #0
 8009b8c:	f47e afff 	bne.w	8008b8e <_svfprintf_r+0x19a>
 8009b90:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009b92:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8009b94:	46c2      	mov	sl, r8
 8009b96:	e4d0      	b.n	800953a <_svfprintf_r+0xb46>
 8009b98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009b9a:	42a3      	cmp	r3, r4
 8009b9c:	f4bf ae2b 	bcs.w	80097f6 <_svfprintf_r+0xe02>
 8009ba0:	2130      	movs	r1, #48	; 0x30
 8009ba2:	1c5a      	adds	r2, r3, #1
 8009ba4:	9223      	str	r2, [sp, #140]	; 0x8c
 8009ba6:	7019      	strb	r1, [r3, #0]
 8009ba8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009baa:	429c      	cmp	r4, r3
 8009bac:	d8f9      	bhi.n	8009ba2 <_svfprintf_r+0x11ae>
 8009bae:	e622      	b.n	80097f6 <_svfprintf_r+0xe02>
 8009bb0:	2306      	movs	r3, #6
 8009bb2:	9309      	str	r3, [sp, #36]	; 0x24
 8009bb4:	e5e5      	b.n	8009782 <_svfprintf_r+0xd8e>
 8009bb6:	a823      	add	r0, sp, #140	; 0x8c
 8009bb8:	a920      	add	r1, sp, #128	; 0x80
 8009bba:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009bbc:	9004      	str	r0, [sp, #16]
 8009bbe:	9103      	str	r1, [sp, #12]
 8009bc0:	a81f      	add	r0, sp, #124	; 0x7c
 8009bc2:	2103      	movs	r1, #3
 8009bc4:	462b      	mov	r3, r5
 8009bc6:	9401      	str	r4, [sp, #4]
 8009bc8:	9002      	str	r0, [sp, #8]
 8009bca:	4632      	mov	r2, r6
 8009bcc:	9100      	str	r1, [sp, #0]
 8009bce:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009bd0:	f001 fd1e 	bl	800b610 <_dtoa_r>
 8009bd4:	4623      	mov	r3, r4
 8009bd6:	9011      	str	r0, [sp, #68]	; 0x44
 8009bd8:	1904      	adds	r4, r0, r4
 8009bda:	930e      	str	r3, [sp, #56]	; 0x38
 8009bdc:	e765      	b.n	8009aaa <_svfprintf_r+0x10b6>
 8009bde:	bf00      	nop
 8009be0:	0800ea88 	.word	0x0800ea88
 8009be4:	0800ea90 	.word	0x0800ea90
 8009be8:	0800eaa4 	.word	0x0800eaa4
 8009bec:	aa25      	add	r2, sp, #148	; 0x94
 8009bee:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 8009bf2:	f004 f8ff 	bl	800ddf4 <__ssprint_r>
 8009bf6:	2800      	cmp	r0, #0
 8009bf8:	f47e afc9 	bne.w	8008b8e <_svfprintf_r+0x19a>
 8009bfc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009bfe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009c00:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8009c02:	1ad3      	subs	r3, r2, r3
 8009c04:	46c2      	mov	sl, r8
 8009c06:	e4b1      	b.n	800956c <_svfprintf_r+0xb78>
 8009c08:	2300      	movs	r3, #0
 8009c0a:	9309      	str	r3, [sp, #36]	; 0x24
 8009c0c:	f7fe bf50 	b.w	8008ab0 <_svfprintf_r+0xbc>
 8009c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c12:	9308      	str	r3, [sp, #32]
 8009c14:	930e      	str	r3, [sp, #56]	; 0x38
 8009c16:	9009      	str	r0, [sp, #36]	; 0x24
 8009c18:	950f      	str	r5, [sp, #60]	; 0x3c
 8009c1a:	f8cd 901c 	str.w	r9, [sp, #28]
 8009c1e:	9012      	str	r0, [sp, #72]	; 0x48
 8009c20:	f89d 6077 	ldrb.w	r6, [sp, #119]	; 0x77
 8009c24:	f7ff b848 	b.w	8008cb8 <_svfprintf_r+0x2c4>
 8009c28:	aa25      	add	r2, sp, #148	; 0x94
 8009c2a:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 8009c2e:	f004 f8e1 	bl	800ddf4 <__ssprint_r>
 8009c32:	2800      	cmp	r0, #0
 8009c34:	f47e afab 	bne.w	8008b8e <_svfprintf_r+0x19a>
 8009c38:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009c3a:	e9dd 2426 	ldrd	r2, r4, [sp, #152]	; 0x98
 8009c3e:	46c2      	mov	sl, r8
 8009c40:	f7ff bb9d 	b.w	800937e <_svfprintf_r+0x98a>
 8009c44:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009c46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009c48:	4413      	add	r3, r2
 8009c4a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009c4c:	930e      	str	r3, [sp, #56]	; 0x38
 8009c4e:	2a00      	cmp	r2, #0
 8009c50:	dc06      	bgt.n	8009c60 <_svfprintf_r+0x126c>
 8009c52:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c56:	f1c3 0301 	rsb	r3, r3, #1
 8009c5a:	441a      	add	r2, r3
 8009c5c:	4613      	mov	r3, r2
 8009c5e:	920e      	str	r2, [sp, #56]	; 0x38
 8009c60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009c64:	9308      	str	r3, [sp, #32]
 8009c66:	2767      	movs	r7, #103	; 0x67
 8009c68:	e5e0      	b.n	800982c <_svfprintf_r+0xe38>
 8009c6a:	a823      	add	r0, sp, #140	; 0x8c
 8009c6c:	a920      	add	r1, sp, #128	; 0x80
 8009c6e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009c70:	9004      	str	r0, [sp, #16]
 8009c72:	9103      	str	r1, [sp, #12]
 8009c74:	a81f      	add	r0, sp, #124	; 0x7c
 8009c76:	2103      	movs	r1, #3
 8009c78:	9002      	str	r0, [sp, #8]
 8009c7a:	4632      	mov	r2, r6
 8009c7c:	462b      	mov	r3, r5
 8009c7e:	9401      	str	r4, [sp, #4]
 8009c80:	9100      	str	r1, [sp, #0]
 8009c82:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009c84:	f001 fcc4 	bl	800b610 <_dtoa_r>
 8009c88:	940e      	str	r4, [sp, #56]	; 0x38
 8009c8a:	9011      	str	r0, [sp, #68]	; 0x44
 8009c8c:	e706      	b.n	8009a9c <_svfprintf_r+0x10a8>
 8009c8e:	aa25      	add	r2, sp, #148	; 0x94
 8009c90:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 8009c94:	f004 f8ae 	bl	800ddf4 <__ssprint_r>
 8009c98:	2800      	cmp	r0, #0
 8009c9a:	f47e af78 	bne.w	8008b8e <_svfprintf_r+0x19a>
 8009c9e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8009ca0:	46c2      	mov	sl, r8
 8009ca2:	e441      	b.n	8009528 <_svfprintf_r+0xb34>
 8009ca4:	425d      	negs	r5, r3
 8009ca6:	3310      	adds	r3, #16
 8009ca8:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 8009e90 <_svfprintf_r+0x149c>
 8009cac:	da1f      	bge.n	8009cee <_svfprintf_r+0x12fa>
 8009cae:	4623      	mov	r3, r4
 8009cb0:	2610      	movs	r6, #16
 8009cb2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009cb4:	464c      	mov	r4, r9
 8009cb6:	e004      	b.n	8009cc2 <_svfprintf_r+0x12ce>
 8009cb8:	f10a 0a08 	add.w	sl, sl, #8
 8009cbc:	3d10      	subs	r5, #16
 8009cbe:	2d10      	cmp	r5, #16
 8009cc0:	dd13      	ble.n	8009cea <_svfprintf_r+0x12f6>
 8009cc2:	3201      	adds	r2, #1
 8009cc4:	3310      	adds	r3, #16
 8009cc6:	2a07      	cmp	r2, #7
 8009cc8:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
 8009ccc:	e9ca 4600 	strd	r4, r6, [sl]
 8009cd0:	ddf2      	ble.n	8009cb8 <_svfprintf_r+0x12c4>
 8009cd2:	aa25      	add	r2, sp, #148	; 0x94
 8009cd4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009cd6:	4638      	mov	r0, r7
 8009cd8:	f004 f88c 	bl	800ddf4 <__ssprint_r>
 8009cdc:	2800      	cmp	r0, #0
 8009cde:	f47e af56 	bne.w	8008b8e <_svfprintf_r+0x19a>
 8009ce2:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 8009ce6:	46c2      	mov	sl, r8
 8009ce8:	e7e8      	b.n	8009cbc <_svfprintf_r+0x12c8>
 8009cea:	46a1      	mov	r9, r4
 8009cec:	461c      	mov	r4, r3
 8009cee:	3201      	adds	r2, #1
 8009cf0:	442c      	add	r4, r5
 8009cf2:	2a07      	cmp	r2, #7
 8009cf4:	e9cd 2426 	strd	r2, r4, [sp, #152]	; 0x98
 8009cf8:	e9ca 9500 	strd	r9, r5, [sl]
 8009cfc:	dc7e      	bgt.n	8009dfc <_svfprintf_r+0x1408>
 8009cfe:	f10a 0a08 	add.w	sl, sl, #8
 8009d02:	f7ff bb3f 	b.w	8009384 <_svfprintf_r+0x990>
 8009d06:	f10d 0493 	add.w	r4, sp, #147	; 0x93
 8009d0a:	4620      	mov	r0, r4
 8009d0c:	4d5d      	ldr	r5, [pc, #372]	; (8009e84 <_svfprintf_r+0x1490>)
 8009d0e:	e000      	b.n	8009d12 <_svfprintf_r+0x131e>
 8009d10:	4610      	mov	r0, r2
 8009d12:	fba5 1203 	umull	r1, r2, r5, r3
 8009d16:	08d2      	lsrs	r2, r2, #3
 8009d18:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8009d1c:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8009d20:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009d24:	4613      	mov	r3, r2
 8009d26:	2b09      	cmp	r3, #9
 8009d28:	f800 1c01 	strb.w	r1, [r0, #-1]
 8009d2c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8009d30:	dcee      	bgt.n	8009d10 <_svfprintf_r+0x131c>
 8009d32:	3330      	adds	r3, #48	; 0x30
 8009d34:	3802      	subs	r0, #2
 8009d36:	b2d9      	uxtb	r1, r3
 8009d38:	4284      	cmp	r4, r0
 8009d3a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009d3e:	d976      	bls.n	8009e2e <_svfprintf_r+0x143a>
 8009d40:	f10d 0086 	add.w	r0, sp, #134	; 0x86
 8009d44:	4613      	mov	r3, r2
 8009d46:	e001      	b.n	8009d4c <_svfprintf_r+0x1358>
 8009d48:	f813 1b01 	ldrb.w	r1, [r3], #1
 8009d4c:	f800 1b01 	strb.w	r1, [r0], #1
 8009d50:	429c      	cmp	r4, r3
 8009d52:	d1f9      	bne.n	8009d48 <_svfprintf_r+0x1354>
 8009d54:	ab25      	add	r3, sp, #148	; 0x94
 8009d56:	1a9b      	subs	r3, r3, r2
 8009d58:	f10d 0286 	add.w	r2, sp, #134	; 0x86
 8009d5c:	4413      	add	r3, r2
 8009d5e:	e6d4      	b.n	8009b0a <_svfprintf_r+0x1116>
 8009d60:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8009d64:	9208      	str	r2, [sp, #32]
 8009d66:	930e      	str	r3, [sp, #56]	; 0x38
 8009d68:	2767      	movs	r7, #103	; 0x67
 8009d6a:	e55f      	b.n	800982c <_svfprintf_r+0xe38>
 8009d6c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009d6e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009d70:	4630      	mov	r0, r6
 8009d72:	4629      	mov	r1, r5
 8009d74:	f7f7 f9c8 	bl	8001108 <__aeabi_dcmpeq>
 8009d78:	2800      	cmp	r0, #0
 8009d7a:	f47f ae9b 	bne.w	8009ab4 <_svfprintf_r+0x10c0>
 8009d7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d80:	f1c3 0301 	rsb	r3, r3, #1
 8009d84:	931f      	str	r3, [sp, #124]	; 0x7c
 8009d86:	441c      	add	r4, r3
 8009d88:	e52b      	b.n	80097e2 <_svfprintf_r+0xdee>
 8009d8a:	f019 0301 	ands.w	r3, r9, #1
 8009d8e:	9312      	str	r3, [sp, #72]	; 0x48
 8009d90:	f47f aec4 	bne.w	8009b1c <_svfprintf_r+0x1128>
 8009d94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d96:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009d9a:	9308      	str	r3, [sp, #32]
 8009d9c:	e546      	b.n	800982c <_svfprintf_r+0xe38>
 8009d9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009da0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009da2:	4413      	add	r3, r2
 8009da4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009da6:	441a      	add	r2, r3
 8009da8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009dac:	920e      	str	r2, [sp, #56]	; 0x38
 8009dae:	9308      	str	r3, [sp, #32]
 8009db0:	e53c      	b.n	800982c <_svfprintf_r+0xe38>
 8009db2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009db4:	4a34      	ldr	r2, [pc, #208]	; (8009e88 <_svfprintf_r+0x1494>)
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	bfb6      	itet	lt
 8009dba:	262d      	movlt	r6, #45	; 0x2d
 8009dbc:	f89d 6077 	ldrbge.w	r6, [sp, #119]	; 0x77
 8009dc0:	f88d 6077 	strblt.w	r6, [sp, #119]	; 0x77
 8009dc4:	4b31      	ldr	r3, [pc, #196]	; (8009e8c <_svfprintf_r+0x1498>)
 8009dc6:	f7ff b9a0 	b.w	800910a <_svfprintf_r+0x716>
 8009dca:	b943      	cbnz	r3, 8009dde <_svfprintf_r+0x13ea>
 8009dcc:	f019 0f01 	tst.w	r9, #1
 8009dd0:	d105      	bne.n	8009dde <_svfprintf_r+0x13ea>
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	9308      	str	r3, [sp, #32]
 8009dd6:	930e      	str	r3, [sp, #56]	; 0x38
 8009dd8:	e528      	b.n	800982c <_svfprintf_r+0xe38>
 8009dda:	4652      	mov	r2, sl
 8009ddc:	e613      	b.n	8009a06 <_svfprintf_r+0x1012>
 8009dde:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009de0:	3301      	adds	r3, #1
 8009de2:	e7df      	b.n	8009da4 <_svfprintf_r+0x13b0>
 8009de4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009de6:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8009dea:	682c      	ldr	r4, [r5, #0]
 8009dec:	4683      	mov	fp, r0
 8009dee:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 8009df2:	1d28      	adds	r0, r5, #4
 8009df4:	9409      	str	r4, [sp, #36]	; 0x24
 8009df6:	900f      	str	r0, [sp, #60]	; 0x3c
 8009df8:	f7fe be57 	b.w	8008aaa <_svfprintf_r+0xb6>
 8009dfc:	aa25      	add	r2, sp, #148	; 0x94
 8009dfe:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 8009e02:	f003 fff7 	bl	800ddf4 <__ssprint_r>
 8009e06:	2800      	cmp	r0, #0
 8009e08:	f47e aec1 	bne.w	8008b8e <_svfprintf_r+0x19a>
 8009e0c:	e9dd 2426 	ldrd	r2, r4, [sp, #152]	; 0x98
 8009e10:	46c2      	mov	sl, r8
 8009e12:	f7ff bab7 	b.w	8009384 <_svfprintf_r+0x990>
 8009e16:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009e18:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009e1a:	9212      	str	r2, [sp, #72]	; 0x48
 8009e1c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009e1e:	1a9b      	subs	r3, r3, r2
 8009e20:	9313      	str	r3, [sp, #76]	; 0x4c
 8009e22:	e653      	b.n	8009acc <_svfprintf_r+0x10d8>
 8009e24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e26:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009e28:	4413      	add	r3, r2
 8009e2a:	461c      	mov	r4, r3
 8009e2c:	e4d9      	b.n	80097e2 <_svfprintf_r+0xdee>
 8009e2e:	f10d 0386 	add.w	r3, sp, #134	; 0x86
 8009e32:	e66a      	b.n	8009b0a <_svfprintf_r+0x1116>
 8009e34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e36:	930e      	str	r3, [sp, #56]	; 0x38
 8009e38:	e629      	b.n	8009a8e <_svfprintf_r+0x109a>
 8009e3a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
 8009e3e:	f7ff b91b 	b.w	8009078 <_svfprintf_r+0x684>
 8009e42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009e44:	230c      	movs	r3, #12
 8009e46:	6013      	str	r3, [r2, #0]
 8009e48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e4c:	930a      	str	r3, [sp, #40]	; 0x28
 8009e4e:	f7fe bea7 	b.w	8008ba0 <_svfprintf_r+0x1ac>
 8009e52:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
 8009e56:	f7fe bf62 	b.w	8008d1e <_svfprintf_r+0x32a>
 8009e5a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
 8009e5e:	f7ff b8cb 	b.w	8008ff8 <_svfprintf_r+0x604>
 8009e62:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
 8009e66:	f7ff b923 	b.w	80090b0 <_svfprintf_r+0x6bc>
 8009e6a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
 8009e6e:	f7ff b95d 	b.w	800912c <_svfprintf_r+0x738>
 8009e72:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
 8009e76:	f7ff b997 	b.w	80091a8 <_svfprintf_r+0x7b4>
 8009e7a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
 8009e7e:	f7fe bf25 	b.w	8008ccc <_svfprintf_r+0x2d8>
 8009e82:	bf00      	nop
 8009e84:	cccccccd 	.word	0xcccccccd
 8009e88:	0800ea5c 	.word	0x0800ea5c
 8009e8c:	0800ea58 	.word	0x0800ea58
 8009e90:	0800eaa4 	.word	0x0800eaa4

08009e94 <_vfprintf_r>:
 8009e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e98:	b0c1      	sub	sp, #260	; 0x104
 8009e9a:	461c      	mov	r4, r3
 8009e9c:	4688      	mov	r8, r1
 8009e9e:	4692      	mov	sl, r2
 8009ea0:	4605      	mov	r5, r0
 8009ea2:	900a      	str	r0, [sp, #40]	; 0x28
 8009ea4:	f002 feea 	bl	800cc7c <_localeconv_r>
 8009ea8:	6803      	ldr	r3, [r0, #0]
 8009eaa:	9313      	str	r3, [sp, #76]	; 0x4c
 8009eac:	4618      	mov	r0, r3
 8009eae:	f7f6 fc47 	bl	8000740 <strlen>
 8009eb2:	940d      	str	r4, [sp, #52]	; 0x34
 8009eb4:	9011      	str	r0, [sp, #68]	; 0x44
 8009eb6:	b11d      	cbz	r5, 8009ec0 <_vfprintf_r+0x2c>
 8009eb8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	f000 8100 	beq.w	800a0c0 <_vfprintf_r+0x22c>
 8009ec0:	f8d8 1064 	ldr.w	r1, [r8, #100]	; 0x64
 8009ec4:	f9b8 200c 	ldrsh.w	r2, [r8, #12]
 8009ec8:	07cd      	lsls	r5, r1, #31
 8009eca:	b293      	uxth	r3, r2
 8009ecc:	d402      	bmi.n	8009ed4 <_vfprintf_r+0x40>
 8009ece:	0598      	lsls	r0, r3, #22
 8009ed0:	f140 8140 	bpl.w	800a154 <_vfprintf_r+0x2c0>
 8009ed4:	0499      	lsls	r1, r3, #18
 8009ed6:	d40a      	bmi.n	8009eee <_vfprintf_r+0x5a>
 8009ed8:	f8d8 1064 	ldr.w	r1, [r8, #100]	; 0x64
 8009edc:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 8009ee0:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8009ee4:	f8a8 300c 	strh.w	r3, [r8, #12]
 8009ee8:	f8c8 1064 	str.w	r1, [r8, #100]	; 0x64
 8009eec:	b29b      	uxth	r3, r3
 8009eee:	071a      	lsls	r2, r3, #28
 8009ef0:	f140 80b0 	bpl.w	800a054 <_vfprintf_r+0x1c0>
 8009ef4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009ef8:	2a00      	cmp	r2, #0
 8009efa:	f000 80ab 	beq.w	800a054 <_vfprintf_r+0x1c0>
 8009efe:	f003 021a 	and.w	r2, r3, #26
 8009f02:	2a0a      	cmp	r2, #10
 8009f04:	f000 80c2 	beq.w	800a08c <_vfprintf_r+0x1f8>
 8009f08:	2300      	movs	r3, #0
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	e9cd 0015 	strd	r0, r0, [sp, #84]	; 0x54
 8009f10:	9310      	str	r3, [sp, #64]	; 0x40
 8009f12:	9314      	str	r3, [sp, #80]	; 0x50
 8009f14:	9312      	str	r3, [sp, #72]	; 0x48
 8009f16:	e9cd 3324 	strd	r3, r3, [sp, #144]	; 0x90
 8009f1a:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 8009f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8009f20:	ab30      	add	r3, sp, #192	; 0xc0
 8009f22:	9323      	str	r3, [sp, #140]	; 0x8c
 8009f24:	4699      	mov	r9, r3
 8009f26:	f89a 3000 	ldrb.w	r3, [sl]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	f000 80fd 	beq.w	800a12a <_vfprintf_r+0x296>
 8009f30:	2b25      	cmp	r3, #37	; 0x25
 8009f32:	4654      	mov	r4, sl
 8009f34:	d102      	bne.n	8009f3c <_vfprintf_r+0xa8>
 8009f36:	e01e      	b.n	8009f76 <_vfprintf_r+0xe2>
 8009f38:	2b25      	cmp	r3, #37	; 0x25
 8009f3a:	d003      	beq.n	8009f44 <_vfprintf_r+0xb0>
 8009f3c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d1f9      	bne.n	8009f38 <_vfprintf_r+0xa4>
 8009f44:	eba4 050a 	sub.w	r5, r4, sl
 8009f48:	b18d      	cbz	r5, 8009f6e <_vfprintf_r+0xda>
 8009f4a:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	; 0x90
 8009f4e:	3301      	adds	r3, #1
 8009f50:	442a      	add	r2, r5
 8009f52:	2b07      	cmp	r3, #7
 8009f54:	f8c9 a000 	str.w	sl, [r9]
 8009f58:	f8c9 5004 	str.w	r5, [r9, #4]
 8009f5c:	e9cd 3224 	strd	r3, r2, [sp, #144]	; 0x90
 8009f60:	f300 80da 	bgt.w	800a118 <_vfprintf_r+0x284>
 8009f64:	f109 0908 	add.w	r9, r9, #8
 8009f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f6a:	442b      	add	r3, r5
 8009f6c:	9309      	str	r3, [sp, #36]	; 0x24
 8009f6e:	7823      	ldrb	r3, [r4, #0]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	f000 80da 	beq.w	800a12a <_vfprintf_r+0x296>
 8009f76:	2300      	movs	r3, #0
 8009f78:	461a      	mov	r2, r3
 8009f7a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8009f7e:	4619      	mov	r1, r3
 8009f80:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f82:	469b      	mov	fp, r3
 8009f84:	7866      	ldrb	r6, [r4, #1]
 8009f86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f8a:	f104 0a01 	add.w	sl, r4, #1
 8009f8e:	9308      	str	r3, [sp, #32]
 8009f90:	f10a 0a01 	add.w	sl, sl, #1
 8009f94:	f1a6 0320 	sub.w	r3, r6, #32
 8009f98:	2b58      	cmp	r3, #88	; 0x58
 8009f9a:	f200 83e4 	bhi.w	800a766 <_vfprintf_r+0x8d2>
 8009f9e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009fa2:	02bc      	.short	0x02bc
 8009fa4:	03e203e2 	.word	0x03e203e2
 8009fa8:	03e202c4 	.word	0x03e202c4
 8009fac:	03e203e2 	.word	0x03e203e2
 8009fb0:	03e203e2 	.word	0x03e203e2
 8009fb4:	031d03e2 	.word	0x031d03e2
 8009fb8:	03e20329 	.word	0x03e20329
 8009fbc:	038603b8 	.word	0x038603b8
 8009fc0:	024f03e2 	.word	0x024f03e2
 8009fc4:	00e100e1 	.word	0x00e100e1
 8009fc8:	00e100e1 	.word	0x00e100e1
 8009fcc:	00e100e1 	.word	0x00e100e1
 8009fd0:	00e100e1 	.word	0x00e100e1
 8009fd4:	03e200e1 	.word	0x03e200e1
 8009fd8:	03e203e2 	.word	0x03e203e2
 8009fdc:	03e203e2 	.word	0x03e203e2
 8009fe0:	03e203e2 	.word	0x03e203e2
 8009fe4:	03e203e2 	.word	0x03e203e2
 8009fe8:	03a003e2 	.word	0x03a003e2
 8009fec:	03e2032e 	.word	0x03e2032e
 8009ff0:	03e2032e 	.word	0x03e2032e
 8009ff4:	03e203e2 	.word	0x03e203e2
 8009ff8:	038103e2 	.word	0x038103e2
 8009ffc:	03e203e2 	.word	0x03e203e2
 800a000:	03e20093 	.word	0x03e20093
 800a004:	03e203e2 	.word	0x03e203e2
 800a008:	03e203e2 	.word	0x03e203e2
 800a00c:	03e200a7 	.word	0x03e200a7
 800a010:	025403e2 	.word	0x025403e2
 800a014:	03e203e2 	.word	0x03e203e2
 800a018:	03e203e2 	.word	0x03e203e2
 800a01c:	03e203e2 	.word	0x03e203e2
 800a020:	03e203e2 	.word	0x03e203e2
 800a024:	03e203e2 	.word	0x03e203e2
 800a028:	00f002a9 	.word	0x00f002a9
 800a02c:	032e032e 	.word	0x032e032e
 800a030:	023d032e 	.word	0x023d032e
 800a034:	03e200f0 	.word	0x03e200f0
 800a038:	024203e2 	.word	0x024203e2
 800a03c:	030c03e2 	.word	0x030c03e2
 800a040:	036c0095 	.word	0x036c0095
 800a044:	03e2037c 	.word	0x03e2037c
 800a048:	03e202e9 	.word	0x03e202e9
 800a04c:	03e200a9 	.word	0x03e200a9
 800a050:	02c903e2 	.word	0x02c903e2
 800a054:	4641      	mov	r1, r8
 800a056:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a058:	f001 f9e0 	bl	800b41c <__swsetup_r>
 800a05c:	b178      	cbz	r0, 800a07e <_vfprintf_r+0x1ea>
 800a05e:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 800a062:	07db      	lsls	r3, r3, #31
 800a064:	d404      	bmi.n	800a070 <_vfprintf_r+0x1dc>
 800a066:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800a06a:	059f      	lsls	r7, r3, #22
 800a06c:	f140 8373 	bpl.w	800a756 <_vfprintf_r+0x8c2>
 800a070:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a074:	9309      	str	r3, [sp, #36]	; 0x24
 800a076:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a078:	b041      	add	sp, #260	; 0x104
 800a07a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a07e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800a082:	f003 021a 	and.w	r2, r3, #26
 800a086:	2a0a      	cmp	r2, #10
 800a088:	f47f af3e 	bne.w	8009f08 <_vfprintf_r+0x74>
 800a08c:	f9b8 200e 	ldrsh.w	r2, [r8, #14]
 800a090:	2a00      	cmp	r2, #0
 800a092:	f6ff af39 	blt.w	8009f08 <_vfprintf_r+0x74>
 800a096:	f8d8 2064 	ldr.w	r2, [r8, #100]	; 0x64
 800a09a:	07d6      	lsls	r6, r2, #31
 800a09c:	d405      	bmi.n	800a0aa <_vfprintf_r+0x216>
 800a09e:	059d      	lsls	r5, r3, #22
 800a0a0:	d403      	bmi.n	800a0aa <_vfprintf_r+0x216>
 800a0a2:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 800a0a6:	f002 fdfd 	bl	800cca4 <__retarget_lock_release_recursive>
 800a0aa:	4623      	mov	r3, r4
 800a0ac:	4652      	mov	r2, sl
 800a0ae:	4641      	mov	r1, r8
 800a0b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a0b2:	f001 f971 	bl	800b398 <__sbprintf>
 800a0b6:	9009      	str	r0, [sp, #36]	; 0x24
 800a0b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0ba:	b041      	add	sp, #260	; 0x104
 800a0bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0c0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a0c2:	f002 faa5 	bl	800c610 <__sinit>
 800a0c6:	e6fb      	b.n	8009ec0 <_vfprintf_r+0x2c>
 800a0c8:	f04b 0b10 	orr.w	fp, fp, #16
 800a0cc:	f01b 0320 	ands.w	r3, fp, #32
 800a0d0:	f040 8324 	bne.w	800a71c <_vfprintf_r+0x888>
 800a0d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a0d6:	f852 4b04 	ldr.w	r4, [r2], #4
 800a0da:	920d      	str	r2, [sp, #52]	; 0x34
 800a0dc:	f01b 0210 	ands.w	r2, fp, #16
 800a0e0:	d104      	bne.n	800a0ec <_vfprintf_r+0x258>
 800a0e2:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 800a0e6:	bf1c      	itt	ne
 800a0e8:	4613      	movne	r3, r2
 800a0ea:	b2a4      	uxthne	r4, r4
 800a0ec:	2500      	movs	r5, #0
 800a0ee:	e1cd      	b.n	800a48c <_vfprintf_r+0x5f8>
 800a0f0:	f04b 0b10 	orr.w	fp, fp, #16
 800a0f4:	f01b 0f20 	tst.w	fp, #32
 800a0f8:	f040 831b 	bne.w	800a732 <_vfprintf_r+0x89e>
 800a0fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0fe:	f01b 0f10 	tst.w	fp, #16
 800a102:	f853 4b04 	ldr.w	r4, [r3], #4
 800a106:	930d      	str	r3, [sp, #52]	; 0x34
 800a108:	d103      	bne.n	800a112 <_vfprintf_r+0x27e>
 800a10a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800a10e:	bf18      	it	ne
 800a110:	b2a4      	uxthne	r4, r4
 800a112:	2500      	movs	r5, #0
 800a114:	2301      	movs	r3, #1
 800a116:	e1b9      	b.n	800a48c <_vfprintf_r+0x5f8>
 800a118:	aa23      	add	r2, sp, #140	; 0x8c
 800a11a:	4641      	mov	r1, r8
 800a11c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a11e:	f003 ff1f 	bl	800df60 <__sprint_r>
 800a122:	b940      	cbnz	r0, 800a136 <_vfprintf_r+0x2a2>
 800a124:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a128:	e71e      	b.n	8009f68 <_vfprintf_r+0xd4>
 800a12a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	f041 803b 	bne.w	800b1a8 <_vfprintf_r+0x1314>
 800a132:	2300      	movs	r3, #0
 800a134:	9324      	str	r3, [sp, #144]	; 0x90
 800a136:	f8d8 2064 	ldr.w	r2, [r8, #100]	; 0x64
 800a13a:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800a13e:	07d1      	lsls	r1, r2, #31
 800a140:	d402      	bmi.n	800a148 <_vfprintf_r+0x2b4>
 800a142:	059a      	lsls	r2, r3, #22
 800a144:	f140 8300 	bpl.w	800a748 <_vfprintf_r+0x8b4>
 800a148:	065b      	lsls	r3, r3, #25
 800a14a:	d491      	bmi.n	800a070 <_vfprintf_r+0x1dc>
 800a14c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a14e:	b041      	add	sp, #260	; 0x104
 800a150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a154:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 800a158:	f002 fda2 	bl	800cca0 <__retarget_lock_acquire_recursive>
 800a15c:	f9b8 200c 	ldrsh.w	r2, [r8, #12]
 800a160:	b293      	uxth	r3, r2
 800a162:	e6b7      	b.n	8009ed4 <_vfprintf_r+0x40>
 800a164:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a168:	2000      	movs	r0, #0
 800a16a:	f81a 6b01 	ldrb.w	r6, [sl], #1
 800a16e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a172:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800a176:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a17a:	2b09      	cmp	r3, #9
 800a17c:	d9f5      	bls.n	800a16a <_vfprintf_r+0x2d6>
 800a17e:	900b      	str	r0, [sp, #44]	; 0x2c
 800a180:	e708      	b.n	8009f94 <_vfprintf_r+0x100>
 800a182:	2a00      	cmp	r2, #0
 800a184:	f041 80f8 	bne.w	800b378 <_vfprintf_r+0x14e4>
 800a188:	f01b 0f20 	tst.w	fp, #32
 800a18c:	f000 82b2 	beq.w	800a6f4 <_vfprintf_r+0x860>
 800a190:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800a192:	3407      	adds	r4, #7
 800a194:	f024 0307 	bic.w	r3, r4, #7
 800a198:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a19c:	f103 0208 	add.w	r2, r3, #8
 800a1a0:	920d      	str	r2, [sp, #52]	; 0x34
 800a1a2:	2c00      	cmp	r4, #0
 800a1a4:	f175 0300 	sbcs.w	r3, r5, #0
 800a1a8:	f2c0 84cd 	blt.w	800ab46 <_vfprintf_r+0xcb2>
 800a1ac:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800a1b0:	9b08      	ldr	r3, [sp, #32]
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	f000 8429 	beq.w	800aa0a <_vfprintf_r+0xb76>
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
 800a1be:	9206      	str	r2, [sp, #24]
 800a1c0:	ea54 0205 	orrs.w	r2, r4, r5
 800a1c4:	f040 816b 	bne.w	800a49e <_vfprintf_r+0x60a>
 800a1c8:	9a08      	ldr	r2, [sp, #32]
 800a1ca:	2a00      	cmp	r2, #0
 800a1cc:	f040 8575 	bne.w	800acba <_vfprintf_r+0xe26>
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	f040 8481 	bne.w	800aad8 <_vfprintf_r+0xc44>
 800a1d6:	f01b 0301 	ands.w	r3, fp, #1
 800a1da:	930c      	str	r3, [sp, #48]	; 0x30
 800a1dc:	f000 859a 	beq.w	800ad14 <_vfprintf_r+0xe80>
 800a1e0:	ab40      	add	r3, sp, #256	; 0x100
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	2330      	movs	r3, #48	; 0x30
 800a1e6:	f802 3d41 	strb.w	r3, [r2, #-65]!
 800a1ea:	920e      	str	r2, [sp, #56]	; 0x38
 800a1ec:	9b08      	ldr	r3, [sp, #32]
 800a1ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	bfb8      	it	lt
 800a1f4:	4613      	movlt	r3, r2
 800a1f6:	9307      	str	r3, [sp, #28]
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	930f      	str	r3, [sp, #60]	; 0x3c
 800a1fc:	b117      	cbz	r7, 800a204 <_vfprintf_r+0x370>
 800a1fe:	9b07      	ldr	r3, [sp, #28]
 800a200:	3301      	adds	r3, #1
 800a202:	9307      	str	r3, [sp, #28]
 800a204:	9b06      	ldr	r3, [sp, #24]
 800a206:	f013 0302 	ands.w	r3, r3, #2
 800a20a:	d002      	beq.n	800a212 <_vfprintf_r+0x37e>
 800a20c:	9a07      	ldr	r2, [sp, #28]
 800a20e:	3202      	adds	r2, #2
 800a210:	9207      	str	r2, [sp, #28]
 800a212:	9a06      	ldr	r2, [sp, #24]
 800a214:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800a216:	f012 0b84 	ands.w	fp, r2, #132	; 0x84
 800a21a:	d142      	bne.n	800a2a2 <_vfprintf_r+0x40e>
 800a21c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a21e:	9907      	ldr	r1, [sp, #28]
 800a220:	1a55      	subs	r5, r2, r1
 800a222:	2d00      	cmp	r5, #0
 800a224:	dd3d      	ble.n	800a2a2 <_vfprintf_r+0x40e>
 800a226:	2d10      	cmp	r5, #16
 800a228:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a22a:	dd2c      	ble.n	800a286 <_vfprintf_r+0x3f2>
 800a22c:	4648      	mov	r0, r9
 800a22e:	4621      	mov	r1, r4
 800a230:	46a9      	mov	r9, r5
 800a232:	2710      	movs	r7, #16
 800a234:	461d      	mov	r5, r3
 800a236:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a238:	4603      	mov	r3, r0
 800a23a:	e006      	b.n	800a24a <_vfprintf_r+0x3b6>
 800a23c:	f1a9 0910 	sub.w	r9, r9, #16
 800a240:	f1b9 0f10 	cmp.w	r9, #16
 800a244:	f103 0308 	add.w	r3, r3, #8
 800a248:	dd18      	ble.n	800a27c <_vfprintf_r+0x3e8>
 800a24a:	3201      	adds	r2, #1
 800a24c:	48c5      	ldr	r0, [pc, #788]	; (800a564 <_vfprintf_r+0x6d0>)
 800a24e:	3110      	adds	r1, #16
 800a250:	2a07      	cmp	r2, #7
 800a252:	e9cd 2124 	strd	r2, r1, [sp, #144]	; 0x90
 800a256:	e9c3 0700 	strd	r0, r7, [r3]
 800a25a:	ddef      	ble.n	800a23c <_vfprintf_r+0x3a8>
 800a25c:	aa23      	add	r2, sp, #140	; 0x8c
 800a25e:	4641      	mov	r1, r8
 800a260:	4620      	mov	r0, r4
 800a262:	f003 fe7d 	bl	800df60 <__sprint_r>
 800a266:	2800      	cmp	r0, #0
 800a268:	f47f af65 	bne.w	800a136 <_vfprintf_r+0x2a2>
 800a26c:	f1a9 0910 	sub.w	r9, r9, #16
 800a270:	f1b9 0f10 	cmp.w	r9, #16
 800a274:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 800a278:	ab30      	add	r3, sp, #192	; 0xc0
 800a27a:	dce6      	bgt.n	800a24a <_vfprintf_r+0x3b6>
 800a27c:	4618      	mov	r0, r3
 800a27e:	460c      	mov	r4, r1
 800a280:	462b      	mov	r3, r5
 800a282:	464d      	mov	r5, r9
 800a284:	4681      	mov	r9, r0
 800a286:	3201      	adds	r2, #1
 800a288:	49b6      	ldr	r1, [pc, #728]	; (800a564 <_vfprintf_r+0x6d0>)
 800a28a:	442c      	add	r4, r5
 800a28c:	2a07      	cmp	r2, #7
 800a28e:	e9cd 2424 	strd	r2, r4, [sp, #144]	; 0x90
 800a292:	e9c9 1500 	strd	r1, r5, [r9]
 800a296:	f300 8481 	bgt.w	800ab9c <_vfprintf_r+0xd08>
 800a29a:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800a29e:	f109 0908 	add.w	r9, r9, #8
 800a2a2:	b177      	cbz	r7, 800a2c2 <_vfprintf_r+0x42e>
 800a2a4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a2a6:	3201      	adds	r2, #1
 800a2a8:	3401      	adds	r4, #1
 800a2aa:	f10d 006f 	add.w	r0, sp, #111	; 0x6f
 800a2ae:	2101      	movs	r1, #1
 800a2b0:	2a07      	cmp	r2, #7
 800a2b2:	e9cd 2424 	strd	r2, r4, [sp, #144]	; 0x90
 800a2b6:	e9c9 0100 	strd	r0, r1, [r9]
 800a2ba:	f300 838c 	bgt.w	800a9d6 <_vfprintf_r+0xb42>
 800a2be:	f109 0908 	add.w	r9, r9, #8
 800a2c2:	b16b      	cbz	r3, 800a2e0 <_vfprintf_r+0x44c>
 800a2c4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	3402      	adds	r4, #2
 800a2ca:	a91c      	add	r1, sp, #112	; 0x70
 800a2cc:	2202      	movs	r2, #2
 800a2ce:	2b07      	cmp	r3, #7
 800a2d0:	e9cd 3424 	strd	r3, r4, [sp, #144]	; 0x90
 800a2d4:	e9c9 1200 	strd	r1, r2, [r9]
 800a2d8:	f300 838b 	bgt.w	800a9f2 <_vfprintf_r+0xb5e>
 800a2dc:	f109 0908 	add.w	r9, r9, #8
 800a2e0:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
 800a2e4:	f000 82b5 	beq.w	800a852 <_vfprintf_r+0x9be>
 800a2e8:	9b08      	ldr	r3, [sp, #32]
 800a2ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2ec:	1a9d      	subs	r5, r3, r2
 800a2ee:	2d00      	cmp	r5, #0
 800a2f0:	dd33      	ble.n	800a35a <_vfprintf_r+0x4c6>
 800a2f2:	2d10      	cmp	r5, #16
 800a2f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a2f6:	f8df b278 	ldr.w	fp, [pc, #632]	; 800a570 <_vfprintf_r+0x6dc>
 800a2fa:	dd23      	ble.n	800a344 <_vfprintf_r+0x4b0>
 800a2fc:	4623      	mov	r3, r4
 800a2fe:	2710      	movs	r7, #16
 800a300:	465c      	mov	r4, fp
 800a302:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800a306:	e004      	b.n	800a312 <_vfprintf_r+0x47e>
 800a308:	3d10      	subs	r5, #16
 800a30a:	2d10      	cmp	r5, #16
 800a30c:	f109 0908 	add.w	r9, r9, #8
 800a310:	dd16      	ble.n	800a340 <_vfprintf_r+0x4ac>
 800a312:	3201      	adds	r2, #1
 800a314:	3310      	adds	r3, #16
 800a316:	2a07      	cmp	r2, #7
 800a318:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
 800a31c:	e9c9 4700 	strd	r4, r7, [r9]
 800a320:	ddf2      	ble.n	800a308 <_vfprintf_r+0x474>
 800a322:	aa23      	add	r2, sp, #140	; 0x8c
 800a324:	4641      	mov	r1, r8
 800a326:	4658      	mov	r0, fp
 800a328:	f003 fe1a 	bl	800df60 <__sprint_r>
 800a32c:	2800      	cmp	r0, #0
 800a32e:	f47f af02 	bne.w	800a136 <_vfprintf_r+0x2a2>
 800a332:	3d10      	subs	r5, #16
 800a334:	2d10      	cmp	r5, #16
 800a336:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 800a33a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a33e:	dce8      	bgt.n	800a312 <_vfprintf_r+0x47e>
 800a340:	46a3      	mov	fp, r4
 800a342:	461c      	mov	r4, r3
 800a344:	3201      	adds	r2, #1
 800a346:	442c      	add	r4, r5
 800a348:	2a07      	cmp	r2, #7
 800a34a:	e9cd 2424 	strd	r2, r4, [sp, #144]	; 0x90
 800a34e:	e9c9 b500 	strd	fp, r5, [r9]
 800a352:	f300 836c 	bgt.w	800aa2e <_vfprintf_r+0xb9a>
 800a356:	f109 0908 	add.w	r9, r9, #8
 800a35a:	9b06      	ldr	r3, [sp, #24]
 800a35c:	05dd      	lsls	r5, r3, #23
 800a35e:	f100 8218 	bmi.w	800a792 <_vfprintf_r+0x8fe>
 800a362:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a364:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a366:	f8c9 2000 	str.w	r2, [r9]
 800a36a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a36c:	f8c9 2004 	str.w	r2, [r9, #4]
 800a370:	3301      	adds	r3, #1
 800a372:	4414      	add	r4, r2
 800a374:	2b07      	cmp	r3, #7
 800a376:	9425      	str	r4, [sp, #148]	; 0x94
 800a378:	9324      	str	r3, [sp, #144]	; 0x90
 800a37a:	f300 8309 	bgt.w	800a990 <_vfprintf_r+0xafc>
 800a37e:	f109 0908 	add.w	r9, r9, #8
 800a382:	9b06      	ldr	r3, [sp, #24]
 800a384:	0758      	lsls	r0, r3, #29
 800a386:	d539      	bpl.n	800a3fc <_vfprintf_r+0x568>
 800a388:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a38a:	9a07      	ldr	r2, [sp, #28]
 800a38c:	1a9d      	subs	r5, r3, r2
 800a38e:	2d00      	cmp	r5, #0
 800a390:	dd34      	ble.n	800a3fc <_vfprintf_r+0x568>
 800a392:	2d10      	cmp	r5, #16
 800a394:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a396:	dd1f      	ble.n	800a3d8 <_vfprintf_r+0x544>
 800a398:	2610      	movs	r6, #16
 800a39a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800a39c:	e004      	b.n	800a3a8 <_vfprintf_r+0x514>
 800a39e:	3d10      	subs	r5, #16
 800a3a0:	2d10      	cmp	r5, #16
 800a3a2:	f109 0908 	add.w	r9, r9, #8
 800a3a6:	dd17      	ble.n	800a3d8 <_vfprintf_r+0x544>
 800a3a8:	3301      	adds	r3, #1
 800a3aa:	4a6e      	ldr	r2, [pc, #440]	; (800a564 <_vfprintf_r+0x6d0>)
 800a3ac:	3410      	adds	r4, #16
 800a3ae:	2b07      	cmp	r3, #7
 800a3b0:	e9cd 3424 	strd	r3, r4, [sp, #144]	; 0x90
 800a3b4:	e9c9 2600 	strd	r2, r6, [r9]
 800a3b8:	ddf1      	ble.n	800a39e <_vfprintf_r+0x50a>
 800a3ba:	aa23      	add	r2, sp, #140	; 0x8c
 800a3bc:	4641      	mov	r1, r8
 800a3be:	4638      	mov	r0, r7
 800a3c0:	f003 fdce 	bl	800df60 <__sprint_r>
 800a3c4:	2800      	cmp	r0, #0
 800a3c6:	f47f aeb6 	bne.w	800a136 <_vfprintf_r+0x2a2>
 800a3ca:	3d10      	subs	r5, #16
 800a3cc:	2d10      	cmp	r5, #16
 800a3ce:	e9dd 3424 	ldrd	r3, r4, [sp, #144]	; 0x90
 800a3d2:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a3d6:	dce7      	bgt.n	800a3a8 <_vfprintf_r+0x514>
 800a3d8:	3301      	adds	r3, #1
 800a3da:	4a62      	ldr	r2, [pc, #392]	; (800a564 <_vfprintf_r+0x6d0>)
 800a3dc:	442c      	add	r4, r5
 800a3de:	2b07      	cmp	r3, #7
 800a3e0:	e9cd 3424 	strd	r3, r4, [sp, #144]	; 0x90
 800a3e4:	e9c9 2500 	strd	r2, r5, [r9]
 800a3e8:	dd08      	ble.n	800a3fc <_vfprintf_r+0x568>
 800a3ea:	aa23      	add	r2, sp, #140	; 0x8c
 800a3ec:	4641      	mov	r1, r8
 800a3ee:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a3f0:	f003 fdb6 	bl	800df60 <__sprint_r>
 800a3f4:	2800      	cmp	r0, #0
 800a3f6:	f47f ae9e 	bne.w	800a136 <_vfprintf_r+0x2a2>
 800a3fa:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800a3fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a400:	9907      	ldr	r1, [sp, #28]
 800a402:	428a      	cmp	r2, r1
 800a404:	bfac      	ite	ge
 800a406:	189b      	addge	r3, r3, r2
 800a408:	185b      	addlt	r3, r3, r1
 800a40a:	9309      	str	r3, [sp, #36]	; 0x24
 800a40c:	2c00      	cmp	r4, #0
 800a40e:	f040 825b 	bne.w	800a8c8 <_vfprintf_r+0xa34>
 800a412:	2300      	movs	r3, #0
 800a414:	9324      	str	r3, [sp, #144]	; 0x90
 800a416:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a41a:	e584      	b.n	8009f26 <_vfprintf_r+0x92>
 800a41c:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
 800a420:	f89a 6000 	ldrb.w	r6, [sl]
 800a424:	e5b4      	b.n	8009f90 <_vfprintf_r+0xfc>
 800a426:	f89a 6000 	ldrb.w	r6, [sl]
 800a42a:	2e6c      	cmp	r6, #108	; 0x6c
 800a42c:	bf03      	ittte	eq
 800a42e:	f89a 6001 	ldrbeq.w	r6, [sl, #1]
 800a432:	f04b 0b20 	orreq.w	fp, fp, #32
 800a436:	f10a 0a01 	addeq.w	sl, sl, #1
 800a43a:	f04b 0b10 	orrne.w	fp, fp, #16
 800a43e:	e5a7      	b.n	8009f90 <_vfprintf_r+0xfc>
 800a440:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 800a444:	f89a 6000 	ldrb.w	r6, [sl]
 800a448:	e5a2      	b.n	8009f90 <_vfprintf_r+0xfc>
 800a44a:	2a00      	cmp	r2, #0
 800a44c:	f040 8798 	bne.w	800b380 <_vfprintf_r+0x14ec>
 800a450:	4b45      	ldr	r3, [pc, #276]	; (800a568 <_vfprintf_r+0x6d4>)
 800a452:	9317      	str	r3, [sp, #92]	; 0x5c
 800a454:	f01b 0f20 	tst.w	fp, #32
 800a458:	d074      	beq.n	800a544 <_vfprintf_r+0x6b0>
 800a45a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800a45c:	3407      	adds	r4, #7
 800a45e:	f024 0307 	bic.w	r3, r4, #7
 800a462:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a466:	f103 0208 	add.w	r2, r3, #8
 800a46a:	920d      	str	r2, [sp, #52]	; 0x34
 800a46c:	f01b 0f01 	tst.w	fp, #1
 800a470:	f000 82db 	beq.w	800aa2a <_vfprintf_r+0xb96>
 800a474:	ea54 0305 	orrs.w	r3, r4, r5
 800a478:	f000 82d7 	beq.w	800aa2a <_vfprintf_r+0xb96>
 800a47c:	2330      	movs	r3, #48	; 0x30
 800a47e:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 800a482:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
 800a486:	f04b 0b02 	orr.w	fp, fp, #2
 800a48a:	2302      	movs	r3, #2
 800a48c:	9a08      	ldr	r2, [sp, #32]
 800a48e:	2700      	movs	r7, #0
 800a490:	3201      	adds	r2, #1
 800a492:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800a496:	f47f ae90 	bne.w	800a1ba <_vfprintf_r+0x326>
 800a49a:	f8cd b018 	str.w	fp, [sp, #24]
 800a49e:	2b01      	cmp	r3, #1
 800a4a0:	f000 82b5 	beq.w	800aa0e <_vfprintf_r+0xb7a>
 800a4a4:	2b02      	cmp	r3, #2
 800a4a6:	f000 827f 	beq.w	800a9a8 <_vfprintf_r+0xb14>
 800a4aa:	a930      	add	r1, sp, #192	; 0xc0
 800a4ac:	e000      	b.n	800a4b0 <_vfprintf_r+0x61c>
 800a4ae:	4611      	mov	r1, r2
 800a4b0:	08e2      	lsrs	r2, r4, #3
 800a4b2:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 800a4b6:	08e8      	lsrs	r0, r5, #3
 800a4b8:	f004 0307 	and.w	r3, r4, #7
 800a4bc:	4605      	mov	r5, r0
 800a4be:	4614      	mov	r4, r2
 800a4c0:	3330      	adds	r3, #48	; 0x30
 800a4c2:	ea54 0005 	orrs.w	r0, r4, r5
 800a4c6:	f801 3c01 	strb.w	r3, [r1, #-1]
 800a4ca:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 800a4ce:	d1ee      	bne.n	800a4ae <_vfprintf_r+0x61a>
 800a4d0:	9806      	ldr	r0, [sp, #24]
 800a4d2:	920e      	str	r2, [sp, #56]	; 0x38
 800a4d4:	07c0      	lsls	r0, r0, #31
 800a4d6:	f140 827a 	bpl.w	800a9ce <_vfprintf_r+0xb3a>
 800a4da:	2b30      	cmp	r3, #48	; 0x30
 800a4dc:	f000 8563 	beq.w	800afa6 <_vfprintf_r+0x1112>
 800a4e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a4e2:	2330      	movs	r3, #48	; 0x30
 800a4e4:	3902      	subs	r1, #2
 800a4e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a4ea:	ab30      	add	r3, sp, #192	; 0xc0
 800a4ec:	1a5b      	subs	r3, r3, r1
 800a4ee:	930c      	str	r3, [sp, #48]	; 0x30
 800a4f0:	910e      	str	r1, [sp, #56]	; 0x38
 800a4f2:	e67b      	b.n	800a1ec <_vfprintf_r+0x358>
 800a4f4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	680a      	ldr	r2, [r1, #0]
 800a4fa:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800a4fe:	461f      	mov	r7, r3
 800a500:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
 800a504:	2301      	movs	r3, #1
 800a506:	1d0a      	adds	r2, r1, #4
 800a508:	e9cd b306 	strd	fp, r3, [sp, #24]
 800a50c:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
 800a510:	ab26      	add	r3, sp, #152	; 0x98
 800a512:	9708      	str	r7, [sp, #32]
 800a514:	970f      	str	r7, [sp, #60]	; 0x3c
 800a516:	930e      	str	r3, [sp, #56]	; 0x38
 800a518:	e674      	b.n	800a204 <_vfprintf_r+0x370>
 800a51a:	f89a 6000 	ldrb.w	r6, [sl]
 800a51e:	2900      	cmp	r1, #0
 800a520:	f47f ad36 	bne.w	8009f90 <_vfprintf_r+0xfc>
 800a524:	2201      	movs	r2, #1
 800a526:	2120      	movs	r1, #32
 800a528:	e532      	b.n	8009f90 <_vfprintf_r+0xfc>
 800a52a:	f04b 0b01 	orr.w	fp, fp, #1
 800a52e:	f89a 6000 	ldrb.w	r6, [sl]
 800a532:	e52d      	b.n	8009f90 <_vfprintf_r+0xfc>
 800a534:	2a00      	cmp	r2, #0
 800a536:	f040 871b 	bne.w	800b370 <_vfprintf_r+0x14dc>
 800a53a:	4b0c      	ldr	r3, [pc, #48]	; (800a56c <_vfprintf_r+0x6d8>)
 800a53c:	9317      	str	r3, [sp, #92]	; 0x5c
 800a53e:	f01b 0f20 	tst.w	fp, #32
 800a542:	d18a      	bne.n	800a45a <_vfprintf_r+0x5c6>
 800a544:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a546:	f01b 0f10 	tst.w	fp, #16
 800a54a:	f853 4b04 	ldr.w	r4, [r3], #4
 800a54e:	930d      	str	r3, [sp, #52]	; 0x34
 800a550:	f040 82f1 	bne.w	800ab36 <_vfprintf_r+0xca2>
 800a554:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800a558:	f000 82ed 	beq.w	800ab36 <_vfprintf_r+0xca2>
 800a55c:	b2a4      	uxth	r4, r4
 800a55e:	2500      	movs	r5, #0
 800a560:	e784      	b.n	800a46c <_vfprintf_r+0x5d8>
 800a562:	bf00      	nop
 800a564:	0800eab4 	.word	0x0800eab4
 800a568:	0800ea60 	.word	0x0800ea60
 800a56c:	0800ea74 	.word	0x0800ea74
 800a570:	0800eac4 	.word	0x0800eac4
 800a574:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a576:	6813      	ldr	r3, [r2, #0]
 800a578:	930e      	str	r3, [sp, #56]	; 0x38
 800a57a:	2500      	movs	r5, #0
 800a57c:	f88d 506f 	strb.w	r5, [sp, #111]	; 0x6f
 800a580:	1d14      	adds	r4, r2, #4
 800a582:	2b00      	cmp	r3, #0
 800a584:	f000 84ff 	beq.w	800af86 <_vfprintf_r+0x10f2>
 800a588:	9a08      	ldr	r2, [sp, #32]
 800a58a:	1c53      	adds	r3, r2, #1
 800a58c:	f000 854c 	beq.w	800b028 <_vfprintf_r+0x1194>
 800a590:	4629      	mov	r1, r5
 800a592:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a594:	f7f6 f944 	bl	8000820 <memchr>
 800a598:	2800      	cmp	r0, #0
 800a59a:	f000 84ba 	beq.w	800af12 <_vfprintf_r+0x107e>
 800a59e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5a0:	9508      	str	r5, [sp, #32]
 800a5a2:	1ac3      	subs	r3, r0, r3
 800a5a4:	930c      	str	r3, [sp, #48]	; 0x30
 800a5a6:	940d      	str	r4, [sp, #52]	; 0x34
 800a5a8:	f8cd b018 	str.w	fp, [sp, #24]
 800a5ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a5b0:	9307      	str	r3, [sp, #28]
 800a5b2:	950f      	str	r5, [sp, #60]	; 0x3c
 800a5b4:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800a5b8:	e620      	b.n	800a1fc <_vfprintf_r+0x368>
 800a5ba:	2a00      	cmp	r2, #0
 800a5bc:	f040 86c5 	bne.w	800b34a <_vfprintf_r+0x14b6>
 800a5c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a5c2:	f01b 0f20 	tst.w	fp, #32
 800a5c6:	f852 3b04 	ldr.w	r3, [r2], #4
 800a5ca:	920d      	str	r2, [sp, #52]	; 0x34
 800a5cc:	f000 83a6 	beq.w	800ad1c <_vfprintf_r+0xe88>
 800a5d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5d2:	4610      	mov	r0, r2
 800a5d4:	17d1      	asrs	r1, r2, #31
 800a5d6:	e9c3 0100 	strd	r0, r1, [r3]
 800a5da:	e4a4      	b.n	8009f26 <_vfprintf_r+0x92>
 800a5dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5de:	f89a 6000 	ldrb.w	r6, [sl]
 800a5e2:	6818      	ldr	r0, [r3, #0]
 800a5e4:	900b      	str	r0, [sp, #44]	; 0x2c
 800a5e6:	2800      	cmp	r0, #0
 800a5e8:	f103 0304 	add.w	r3, r3, #4
 800a5ec:	f2c0 8469 	blt.w	800aec2 <_vfprintf_r+0x102e>
 800a5f0:	930d      	str	r3, [sp, #52]	; 0x34
 800a5f2:	e4cd      	b.n	8009f90 <_vfprintf_r+0xfc>
 800a5f4:	f89a 6000 	ldrb.w	r6, [sl]
 800a5f8:	2201      	movs	r2, #1
 800a5fa:	212b      	movs	r1, #43	; 0x2b
 800a5fc:	e4c8      	b.n	8009f90 <_vfprintf_r+0xfc>
 800a5fe:	2a00      	cmp	r2, #0
 800a600:	f040 86ab 	bne.w	800b35a <_vfprintf_r+0x14c6>
 800a604:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800a606:	4bb5      	ldr	r3, [pc, #724]	; (800a8dc <_vfprintf_r+0xa48>)
 800a608:	3407      	adds	r4, #7
 800a60a:	f024 0707 	bic.w	r7, r4, #7
 800a60e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a612:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800a616:	9112      	str	r1, [sp, #72]	; 0x48
 800a618:	3708      	adds	r7, #8
 800a61a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a61e:	4621      	mov	r1, r4
 800a620:	9014      	str	r0, [sp, #80]	; 0x50
 800a622:	4605      	mov	r5, r0
 800a624:	970d      	str	r7, [sp, #52]	; 0x34
 800a626:	f7f6 fda1 	bl	800116c <__aeabi_dcmpun>
 800a62a:	2800      	cmp	r0, #0
 800a62c:	f040 8385 	bne.w	800ad3a <_vfprintf_r+0xea6>
 800a630:	4628      	mov	r0, r5
 800a632:	4621      	mov	r1, r4
 800a634:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a638:	4ba8      	ldr	r3, [pc, #672]	; (800a8dc <_vfprintf_r+0xa48>)
 800a63a:	f7f6 fd79 	bl	8001130 <__aeabi_dcmple>
 800a63e:	2800      	cmp	r0, #0
 800a640:	f040 837b 	bne.w	800ad3a <_vfprintf_r+0xea6>
 800a644:	e9dd 0214 	ldrd	r0, r2, [sp, #80]	; 0x50
 800a648:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a64a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a64c:	f7f6 fd66 	bl	800111c <__aeabi_dcmplt>
 800a650:	2800      	cmp	r0, #0
 800a652:	f040 843a 	bne.w	800aeca <_vfprintf_r+0x1036>
 800a656:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800a65a:	4aa1      	ldr	r2, [pc, #644]	; (800a8e0 <_vfprintf_r+0xa4c>)
 800a65c:	4ba1      	ldr	r3, [pc, #644]	; (800a8e4 <_vfprintf_r+0xa50>)
 800a65e:	2103      	movs	r1, #3
 800a660:	2000      	movs	r0, #0
 800a662:	f02b 0480 	bic.w	r4, fp, #128	; 0x80
 800a666:	2e47      	cmp	r6, #71	; 0x47
 800a668:	bfd8      	it	le
 800a66a:	461a      	movle	r2, r3
 800a66c:	e9cd 1007 	strd	r1, r0, [sp, #28]
 800a670:	9406      	str	r4, [sp, #24]
 800a672:	920e      	str	r2, [sp, #56]	; 0x38
 800a674:	910c      	str	r1, [sp, #48]	; 0x30
 800a676:	900f      	str	r0, [sp, #60]	; 0x3c
 800a678:	e5c0      	b.n	800a1fc <_vfprintf_r+0x368>
 800a67a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a67c:	4b9a      	ldr	r3, [pc, #616]	; (800a8e8 <_vfprintf_r+0xa54>)
 800a67e:	6814      	ldr	r4, [r2, #0]
 800a680:	9317      	str	r3, [sp, #92]	; 0x5c
 800a682:	3204      	adds	r2, #4
 800a684:	f647 0330 	movw	r3, #30768	; 0x7830
 800a688:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
 800a68c:	f04b 0b02 	orr.w	fp, fp, #2
 800a690:	920d      	str	r2, [sp, #52]	; 0x34
 800a692:	2500      	movs	r5, #0
 800a694:	2302      	movs	r3, #2
 800a696:	2678      	movs	r6, #120	; 0x78
 800a698:	e6f8      	b.n	800a48c <_vfprintf_r+0x5f8>
 800a69a:	f04b 0b20 	orr.w	fp, fp, #32
 800a69e:	f89a 6000 	ldrb.w	r6, [sl]
 800a6a2:	e475      	b.n	8009f90 <_vfprintf_r+0xfc>
 800a6a4:	f04b 0b08 	orr.w	fp, fp, #8
 800a6a8:	f89a 6000 	ldrb.w	r6, [sl]
 800a6ac:	e470      	b.n	8009f90 <_vfprintf_r+0xfc>
 800a6ae:	f89a 6000 	ldrb.w	r6, [sl]
 800a6b2:	2e2a      	cmp	r6, #42	; 0x2a
 800a6b4:	f10a 0001 	add.w	r0, sl, #1
 800a6b8:	f000 861f 	beq.w	800b2fa <_vfprintf_r+0x1466>
 800a6bc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a6c0:	2b09      	cmp	r3, #9
 800a6c2:	4682      	mov	sl, r0
 800a6c4:	f200 8513 	bhi.w	800b0ee <_vfprintf_r+0x125a>
 800a6c8:	2000      	movs	r0, #0
 800a6ca:	f81a 6b01 	ldrb.w	r6, [sl], #1
 800a6ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a6d2:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800a6d6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a6da:	2b09      	cmp	r3, #9
 800a6dc:	d9f5      	bls.n	800a6ca <_vfprintf_r+0x836>
 800a6de:	9008      	str	r0, [sp, #32]
 800a6e0:	e458      	b.n	8009f94 <_vfprintf_r+0x100>
 800a6e2:	2a00      	cmp	r2, #0
 800a6e4:	f040 8635 	bne.w	800b352 <_vfprintf_r+0x14be>
 800a6e8:	f04b 0b10 	orr.w	fp, fp, #16
 800a6ec:	f01b 0f20 	tst.w	fp, #32
 800a6f0:	f47f ad4e 	bne.w	800a190 <_vfprintf_r+0x2fc>
 800a6f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6f6:	f01b 0f10 	tst.w	fp, #16
 800a6fa:	f853 4b04 	ldr.w	r4, [r3], #4
 800a6fe:	930d      	str	r3, [sp, #52]	; 0x34
 800a700:	f040 821b 	bne.w	800ab3a <_vfprintf_r+0xca6>
 800a704:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800a708:	f000 8217 	beq.w	800ab3a <_vfprintf_r+0xca6>
 800a70c:	b224      	sxth	r4, r4
 800a70e:	17e5      	asrs	r5, r4, #31
 800a710:	e547      	b.n	800a1a2 <_vfprintf_r+0x30e>
 800a712:	f89a 6000 	ldrb.w	r6, [sl]
 800a716:	f04b 0b04 	orr.w	fp, fp, #4
 800a71a:	e439      	b.n	8009f90 <_vfprintf_r+0xfc>
 800a71c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800a71e:	3407      	adds	r4, #7
 800a720:	f024 0307 	bic.w	r3, r4, #7
 800a724:	f103 0208 	add.w	r2, r3, #8
 800a728:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a72c:	920d      	str	r2, [sp, #52]	; 0x34
 800a72e:	2300      	movs	r3, #0
 800a730:	e6ac      	b.n	800a48c <_vfprintf_r+0x5f8>
 800a732:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800a734:	3407      	adds	r4, #7
 800a736:	f024 0307 	bic.w	r3, r4, #7
 800a73a:	f103 0208 	add.w	r2, r3, #8
 800a73e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a742:	920d      	str	r2, [sp, #52]	; 0x34
 800a744:	2301      	movs	r3, #1
 800a746:	e6a1      	b.n	800a48c <_vfprintf_r+0x5f8>
 800a748:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 800a74c:	f002 faaa 	bl	800cca4 <__retarget_lock_release_recursive>
 800a750:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800a754:	e4f8      	b.n	800a148 <_vfprintf_r+0x2b4>
 800a756:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 800a75a:	f002 faa3 	bl	800cca4 <__retarget_lock_release_recursive>
 800a75e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a762:	9309      	str	r3, [sp, #36]	; 0x24
 800a764:	e4f2      	b.n	800a14c <_vfprintf_r+0x2b8>
 800a766:	2a00      	cmp	r2, #0
 800a768:	f040 85fb 	bne.w	800b362 <_vfprintf_r+0x14ce>
 800a76c:	2e00      	cmp	r6, #0
 800a76e:	f43f acdc 	beq.w	800a12a <_vfprintf_r+0x296>
 800a772:	2300      	movs	r3, #0
 800a774:	2201      	movs	r2, #1
 800a776:	461f      	mov	r7, r3
 800a778:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800a77c:	9308      	str	r3, [sp, #32]
 800a77e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a780:	ab26      	add	r3, sp, #152	; 0x98
 800a782:	9207      	str	r2, [sp, #28]
 800a784:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
 800a788:	f8cd b018 	str.w	fp, [sp, #24]
 800a78c:	920c      	str	r2, [sp, #48]	; 0x30
 800a78e:	930e      	str	r3, [sp, #56]	; 0x38
 800a790:	e538      	b.n	800a204 <_vfprintf_r+0x370>
 800a792:	2e65      	cmp	r6, #101	; 0x65
 800a794:	f340 80ae 	ble.w	800a8f4 <_vfprintf_r+0xa60>
 800a798:	e9dd 0214 	ldrd	r0, r2, [sp, #80]	; 0x50
 800a79c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a79e:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a7a0:	f7f6 fcb2 	bl	8001108 <__aeabi_dcmpeq>
 800a7a4:	2800      	cmp	r0, #0
 800a7a6:	f000 814e 	beq.w	800aa46 <_vfprintf_r+0xbb2>
 800a7aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a7ac:	4a4f      	ldr	r2, [pc, #316]	; (800a8ec <_vfprintf_r+0xa58>)
 800a7ae:	f8c9 2000 	str.w	r2, [r9]
 800a7b2:	3301      	adds	r3, #1
 800a7b4:	3401      	adds	r4, #1
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	2b07      	cmp	r3, #7
 800a7ba:	e9cd 3424 	strd	r3, r4, [sp, #144]	; 0x90
 800a7be:	f8c9 2004 	str.w	r2, [r9, #4]
 800a7c2:	f300 8373 	bgt.w	800aeac <_vfprintf_r+0x1018>
 800a7c6:	f109 0908 	add.w	r9, r9, #8
 800a7ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a7cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a7ce:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	db03      	blt.n	800a7dc <_vfprintf_r+0x948>
 800a7d4:	9b06      	ldr	r3, [sp, #24]
 800a7d6:	07d8      	lsls	r0, r3, #31
 800a7d8:	f57f add3 	bpl.w	800a382 <_vfprintf_r+0x4ee>
 800a7dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a7de:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a7e0:	f8c9 2000 	str.w	r2, [r9]
 800a7e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a7e6:	f8c9 2004 	str.w	r2, [r9, #4]
 800a7ea:	3301      	adds	r3, #1
 800a7ec:	4414      	add	r4, r2
 800a7ee:	2b07      	cmp	r3, #7
 800a7f0:	e9cd 3424 	strd	r3, r4, [sp, #144]	; 0x90
 800a7f4:	f300 83ae 	bgt.w	800af54 <_vfprintf_r+0x10c0>
 800a7f8:	f109 0908 	add.w	r9, r9, #8
 800a7fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a7fe:	1e5d      	subs	r5, r3, #1
 800a800:	2d00      	cmp	r5, #0
 800a802:	f77f adbe 	ble.w	800a382 <_vfprintf_r+0x4ee>
 800a806:	2d10      	cmp	r5, #16
 800a808:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a80a:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 800a8f0 <_vfprintf_r+0xa5c>
 800a80e:	f340 8259 	ble.w	800acc4 <_vfprintf_r+0xe30>
 800a812:	465f      	mov	r7, fp
 800a814:	2610      	movs	r6, #16
 800a816:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800a81a:	e005      	b.n	800a828 <_vfprintf_r+0x994>
 800a81c:	f109 0908 	add.w	r9, r9, #8
 800a820:	3d10      	subs	r5, #16
 800a822:	2d10      	cmp	r5, #16
 800a824:	f340 824d 	ble.w	800acc2 <_vfprintf_r+0xe2e>
 800a828:	3201      	adds	r2, #1
 800a82a:	3410      	adds	r4, #16
 800a82c:	2a07      	cmp	r2, #7
 800a82e:	e9cd 2424 	strd	r2, r4, [sp, #144]	; 0x90
 800a832:	e9c9 7600 	strd	r7, r6, [r9]
 800a836:	ddf1      	ble.n	800a81c <_vfprintf_r+0x988>
 800a838:	aa23      	add	r2, sp, #140	; 0x8c
 800a83a:	4641      	mov	r1, r8
 800a83c:	4658      	mov	r0, fp
 800a83e:	f003 fb8f 	bl	800df60 <__sprint_r>
 800a842:	2800      	cmp	r0, #0
 800a844:	f47f ac77 	bne.w	800a136 <_vfprintf_r+0x2a2>
 800a848:	e9dd 2424 	ldrd	r2, r4, [sp, #144]	; 0x90
 800a84c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a850:	e7e6      	b.n	800a820 <_vfprintf_r+0x98c>
 800a852:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a854:	9a07      	ldr	r2, [sp, #28]
 800a856:	1a9d      	subs	r5, r3, r2
 800a858:	2d00      	cmp	r5, #0
 800a85a:	f77f ad45 	ble.w	800a2e8 <_vfprintf_r+0x454>
 800a85e:	2d10      	cmp	r5, #16
 800a860:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a862:	f8df b08c 	ldr.w	fp, [pc, #140]	; 800a8f0 <_vfprintf_r+0xa5c>
 800a866:	dd23      	ble.n	800a8b0 <_vfprintf_r+0xa1c>
 800a868:	4623      	mov	r3, r4
 800a86a:	2710      	movs	r7, #16
 800a86c:	465c      	mov	r4, fp
 800a86e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800a872:	e004      	b.n	800a87e <_vfprintf_r+0x9ea>
 800a874:	3d10      	subs	r5, #16
 800a876:	2d10      	cmp	r5, #16
 800a878:	f109 0908 	add.w	r9, r9, #8
 800a87c:	dd16      	ble.n	800a8ac <_vfprintf_r+0xa18>
 800a87e:	3201      	adds	r2, #1
 800a880:	3310      	adds	r3, #16
 800a882:	2a07      	cmp	r2, #7
 800a884:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
 800a888:	e9c9 4700 	strd	r4, r7, [r9]
 800a88c:	ddf2      	ble.n	800a874 <_vfprintf_r+0x9e0>
 800a88e:	aa23      	add	r2, sp, #140	; 0x8c
 800a890:	4641      	mov	r1, r8
 800a892:	4658      	mov	r0, fp
 800a894:	f003 fb64 	bl	800df60 <__sprint_r>
 800a898:	2800      	cmp	r0, #0
 800a89a:	f47f ac4c 	bne.w	800a136 <_vfprintf_r+0x2a2>
 800a89e:	3d10      	subs	r5, #16
 800a8a0:	2d10      	cmp	r5, #16
 800a8a2:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 800a8a6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a8aa:	dce8      	bgt.n	800a87e <_vfprintf_r+0x9ea>
 800a8ac:	46a3      	mov	fp, r4
 800a8ae:	461c      	mov	r4, r3
 800a8b0:	3201      	adds	r2, #1
 800a8b2:	442c      	add	r4, r5
 800a8b4:	2a07      	cmp	r2, #7
 800a8b6:	e9cd 2424 	strd	r2, r4, [sp, #144]	; 0x90
 800a8ba:	e9c9 b500 	strd	fp, r5, [r9]
 800a8be:	f300 82b3 	bgt.w	800ae28 <_vfprintf_r+0xf94>
 800a8c2:	f109 0908 	add.w	r9, r9, #8
 800a8c6:	e50f      	b.n	800a2e8 <_vfprintf_r+0x454>
 800a8c8:	aa23      	add	r2, sp, #140	; 0x8c
 800a8ca:	4641      	mov	r1, r8
 800a8cc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a8ce:	f003 fb47 	bl	800df60 <__sprint_r>
 800a8d2:	2800      	cmp	r0, #0
 800a8d4:	f43f ad9d 	beq.w	800a412 <_vfprintf_r+0x57e>
 800a8d8:	e42d      	b.n	800a136 <_vfprintf_r+0x2a2>
 800a8da:	bf00      	nop
 800a8dc:	7fefffff 	.word	0x7fefffff
 800a8e0:	0800ea54 	.word	0x0800ea54
 800a8e4:	0800ea50 	.word	0x0800ea50
 800a8e8:	0800ea74 	.word	0x0800ea74
 800a8ec:	0800ea90 	.word	0x0800ea90
 800a8f0:	0800eac4 	.word	0x0800eac4
 800a8f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a8f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a8f8:	2a01      	cmp	r2, #1
 800a8fa:	f104 0401 	add.w	r4, r4, #1
 800a8fe:	f103 0501 	add.w	r5, r3, #1
 800a902:	f109 0608 	add.w	r6, r9, #8
 800a906:	f340 8126 	ble.w	800ab56 <_vfprintf_r+0xcc2>
 800a90a:	2301      	movs	r3, #1
 800a90c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a90e:	f8c9 2000 	str.w	r2, [r9]
 800a912:	2d07      	cmp	r5, #7
 800a914:	e9cd 5424 	strd	r5, r4, [sp, #144]	; 0x90
 800a918:	f8c9 3004 	str.w	r3, [r9, #4]
 800a91c:	f300 81b5 	bgt.w	800ac8a <_vfprintf_r+0xdf6>
 800a920:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a922:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a924:	3501      	adds	r5, #1
 800a926:	441c      	add	r4, r3
 800a928:	2d07      	cmp	r5, #7
 800a92a:	e9cd 5424 	strd	r5, r4, [sp, #144]	; 0x90
 800a92e:	e9c6 2300 	strd	r2, r3, [r6]
 800a932:	f300 81b6 	bgt.w	800aca2 <_vfprintf_r+0xe0e>
 800a936:	3608      	adds	r6, #8
 800a938:	1c6f      	adds	r7, r5, #1
 800a93a:	970c      	str	r7, [sp, #48]	; 0x30
 800a93c:	9708      	str	r7, [sp, #32]
 800a93e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800a940:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a942:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a944:	e9dd 0214 	ldrd	r0, r2, [sp, #80]	; 0x50
 800a948:	3f01      	subs	r7, #1
 800a94a:	f106 0908 	add.w	r9, r6, #8
 800a94e:	f7f6 fbdb 	bl	8001108 <__aeabi_dcmpeq>
 800a952:	2800      	cmp	r0, #0
 800a954:	f040 80c6 	bne.w	800aae4 <_vfprintf_r+0xc50>
 800a958:	443c      	add	r4, r7
 800a95a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a95c:	6077      	str	r7, [r6, #4]
 800a95e:	9f08      	ldr	r7, [sp, #32]
 800a960:	9425      	str	r4, [sp, #148]	; 0x94
 800a962:	3301      	adds	r3, #1
 800a964:	2f07      	cmp	r7, #7
 800a966:	6033      	str	r3, [r6, #0]
 800a968:	9724      	str	r7, [sp, #144]	; 0x90
 800a96a:	f300 8107 	bgt.w	800ab7c <_vfprintf_r+0xce8>
 800a96e:	f106 0310 	add.w	r3, r6, #16
 800a972:	1caa      	adds	r2, r5, #2
 800a974:	464e      	mov	r6, r9
 800a976:	9208      	str	r2, [sp, #32]
 800a978:	4699      	mov	r9, r3
 800a97a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a97c:	6072      	str	r2, [r6, #4]
 800a97e:	4414      	add	r4, r2
 800a980:	9a08      	ldr	r2, [sp, #32]
 800a982:	9425      	str	r4, [sp, #148]	; 0x94
 800a984:	ab1f      	add	r3, sp, #124	; 0x7c
 800a986:	2a07      	cmp	r2, #7
 800a988:	9224      	str	r2, [sp, #144]	; 0x90
 800a98a:	6033      	str	r3, [r6, #0]
 800a98c:	f77f acf9 	ble.w	800a382 <_vfprintf_r+0x4ee>
 800a990:	aa23      	add	r2, sp, #140	; 0x8c
 800a992:	4641      	mov	r1, r8
 800a994:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a996:	f003 fae3 	bl	800df60 <__sprint_r>
 800a99a:	2800      	cmp	r0, #0
 800a99c:	f47f abcb 	bne.w	800a136 <_vfprintf_r+0x2a2>
 800a9a0:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800a9a2:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a9a6:	e4ec      	b.n	800a382 <_vfprintf_r+0x4ee>
 800a9a8:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
 800a9ac:	aa30      	add	r2, sp, #192	; 0xc0
 800a9ae:	0923      	lsrs	r3, r4, #4
 800a9b0:	f004 000f 	and.w	r0, r4, #15
 800a9b4:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 800a9b8:	0929      	lsrs	r1, r5, #4
 800a9ba:	461c      	mov	r4, r3
 800a9bc:	460d      	mov	r5, r1
 800a9be:	f81c 3000 	ldrb.w	r3, [ip, r0]
 800a9c2:	f802 3d01 	strb.w	r3, [r2, #-1]!
 800a9c6:	ea54 0305 	orrs.w	r3, r4, r5
 800a9ca:	d1f0      	bne.n	800a9ae <_vfprintf_r+0xb1a>
 800a9cc:	920e      	str	r2, [sp, #56]	; 0x38
 800a9ce:	ab30      	add	r3, sp, #192	; 0xc0
 800a9d0:	1a9b      	subs	r3, r3, r2
 800a9d2:	930c      	str	r3, [sp, #48]	; 0x30
 800a9d4:	e40a      	b.n	800a1ec <_vfprintf_r+0x358>
 800a9d6:	aa23      	add	r2, sp, #140	; 0x8c
 800a9d8:	4641      	mov	r1, r8
 800a9da:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a9dc:	9319      	str	r3, [sp, #100]	; 0x64
 800a9de:	f003 fabf 	bl	800df60 <__sprint_r>
 800a9e2:	2800      	cmp	r0, #0
 800a9e4:	f47f aba7 	bne.w	800a136 <_vfprintf_r+0x2a2>
 800a9e8:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800a9ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a9ec:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a9f0:	e467      	b.n	800a2c2 <_vfprintf_r+0x42e>
 800a9f2:	aa23      	add	r2, sp, #140	; 0x8c
 800a9f4:	4641      	mov	r1, r8
 800a9f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a9f8:	f003 fab2 	bl	800df60 <__sprint_r>
 800a9fc:	2800      	cmp	r0, #0
 800a9fe:	f47f ab9a 	bne.w	800a136 <_vfprintf_r+0x2a2>
 800aa02:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800aa04:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800aa08:	e46a      	b.n	800a2e0 <_vfprintf_r+0x44c>
 800aa0a:	f8cd b018 	str.w	fp, [sp, #24]
 800aa0e:	2d00      	cmp	r5, #0
 800aa10:	bf08      	it	eq
 800aa12:	2c0a      	cmpeq	r4, #10
 800aa14:	f080 8160 	bcs.w	800acd8 <_vfprintf_r+0xe44>
 800aa18:	ab40      	add	r3, sp, #256	; 0x100
 800aa1a:	3430      	adds	r4, #48	; 0x30
 800aa1c:	f803 4d41 	strb.w	r4, [r3, #-65]!
 800aa20:	930e      	str	r3, [sp, #56]	; 0x38
 800aa22:	2301      	movs	r3, #1
 800aa24:	930c      	str	r3, [sp, #48]	; 0x30
 800aa26:	f7ff bbe1 	b.w	800a1ec <_vfprintf_r+0x358>
 800aa2a:	2302      	movs	r3, #2
 800aa2c:	e52e      	b.n	800a48c <_vfprintf_r+0x5f8>
 800aa2e:	aa23      	add	r2, sp, #140	; 0x8c
 800aa30:	4641      	mov	r1, r8
 800aa32:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aa34:	f003 fa94 	bl	800df60 <__sprint_r>
 800aa38:	2800      	cmp	r0, #0
 800aa3a:	f47f ab7c 	bne.w	800a136 <_vfprintf_r+0x2a2>
 800aa3e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800aa40:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800aa44:	e489      	b.n	800a35a <_vfprintf_r+0x4c6>
 800aa46:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	f340 81fa 	ble.w	800ae42 <_vfprintf_r+0xfae>
 800aa4e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 800aa52:	4293      	cmp	r3, r2
 800aa54:	bfa8      	it	ge
 800aa56:	4613      	movge	r3, r2
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	461d      	mov	r5, r3
 800aa5c:	dd0e      	ble.n	800aa7c <_vfprintf_r+0xbe8>
 800aa5e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800aa60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa62:	f8c9 2000 	str.w	r2, [r9]
 800aa66:	3301      	adds	r3, #1
 800aa68:	442c      	add	r4, r5
 800aa6a:	2b07      	cmp	r3, #7
 800aa6c:	9425      	str	r4, [sp, #148]	; 0x94
 800aa6e:	f8c9 5004 	str.w	r5, [r9, #4]
 800aa72:	9324      	str	r3, [sp, #144]	; 0x90
 800aa74:	f300 82fb 	bgt.w	800b06e <_vfprintf_r+0x11da>
 800aa78:	f109 0908 	add.w	r9, r9, #8
 800aa7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa7e:	2d00      	cmp	r5, #0
 800aa80:	bfa8      	it	ge
 800aa82:	1b5b      	subge	r3, r3, r5
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	461d      	mov	r5, r3
 800aa88:	f340 80a4 	ble.w	800abd4 <_vfprintf_r+0xd40>
 800aa8c:	2b10      	cmp	r3, #16
 800aa8e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800aa90:	f8df b66c 	ldr.w	fp, [pc, #1644]	; 800b100 <_vfprintf_r+0x126c>
 800aa94:	f340 826b 	ble.w	800af6e <_vfprintf_r+0x10da>
 800aa98:	465f      	mov	r7, fp
 800aa9a:	2610      	movs	r6, #16
 800aa9c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800aaa0:	e005      	b.n	800aaae <_vfprintf_r+0xc1a>
 800aaa2:	f109 0908 	add.w	r9, r9, #8
 800aaa6:	3d10      	subs	r5, #16
 800aaa8:	2d10      	cmp	r5, #16
 800aaaa:	f340 825f 	ble.w	800af6c <_vfprintf_r+0x10d8>
 800aaae:	3201      	adds	r2, #1
 800aab0:	3410      	adds	r4, #16
 800aab2:	2a07      	cmp	r2, #7
 800aab4:	e9cd 2424 	strd	r2, r4, [sp, #144]	; 0x90
 800aab8:	e9c9 7600 	strd	r7, r6, [r9]
 800aabc:	ddf1      	ble.n	800aaa2 <_vfprintf_r+0xc0e>
 800aabe:	aa23      	add	r2, sp, #140	; 0x8c
 800aac0:	4641      	mov	r1, r8
 800aac2:	4658      	mov	r0, fp
 800aac4:	f003 fa4c 	bl	800df60 <__sprint_r>
 800aac8:	2800      	cmp	r0, #0
 800aaca:	f47f ab34 	bne.w	800a136 <_vfprintf_r+0x2a2>
 800aace:	e9dd 2424 	ldrd	r2, r4, [sp, #144]	; 0x90
 800aad2:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800aad6:	e7e6      	b.n	800aaa6 <_vfprintf_r+0xc12>
 800aad8:	9b08      	ldr	r3, [sp, #32]
 800aada:	930c      	str	r3, [sp, #48]	; 0x30
 800aadc:	ab30      	add	r3, sp, #192	; 0xc0
 800aade:	930e      	str	r3, [sp, #56]	; 0x38
 800aae0:	f7ff bb84 	b.w	800a1ec <_vfprintf_r+0x358>
 800aae4:	2f00      	cmp	r7, #0
 800aae6:	f77f af48 	ble.w	800a97a <_vfprintf_r+0xae6>
 800aaea:	2f10      	cmp	r7, #16
 800aaec:	f8df b610 	ldr.w	fp, [pc, #1552]	; 800b100 <_vfprintf_r+0x126c>
 800aaf0:	f340 83fe 	ble.w	800b2f0 <_vfprintf_r+0x145c>
 800aaf4:	4623      	mov	r3, r4
 800aaf6:	f04f 0910 	mov.w	r9, #16
 800aafa:	465c      	mov	r4, fp
 800aafc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aafe:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800ab02:	e005      	b.n	800ab10 <_vfprintf_r+0xc7c>
 800ab04:	3608      	adds	r6, #8
 800ab06:	3f10      	subs	r7, #16
 800ab08:	2f10      	cmp	r7, #16
 800ab0a:	f340 820e 	ble.w	800af2a <_vfprintf_r+0x1096>
 800ab0e:	3501      	adds	r5, #1
 800ab10:	3310      	adds	r3, #16
 800ab12:	2d07      	cmp	r5, #7
 800ab14:	e9cd 5324 	strd	r5, r3, [sp, #144]	; 0x90
 800ab18:	e9c6 4900 	strd	r4, r9, [r6]
 800ab1c:	ddf2      	ble.n	800ab04 <_vfprintf_r+0xc70>
 800ab1e:	aa23      	add	r2, sp, #140	; 0x8c
 800ab20:	4641      	mov	r1, r8
 800ab22:	4658      	mov	r0, fp
 800ab24:	f003 fa1c 	bl	800df60 <__sprint_r>
 800ab28:	2800      	cmp	r0, #0
 800ab2a:	f47f ab04 	bne.w	800a136 <_vfprintf_r+0x2a2>
 800ab2e:	e9dd 5324 	ldrd	r5, r3, [sp, #144]	; 0x90
 800ab32:	ae30      	add	r6, sp, #192	; 0xc0
 800ab34:	e7e7      	b.n	800ab06 <_vfprintf_r+0xc72>
 800ab36:	2500      	movs	r5, #0
 800ab38:	e498      	b.n	800a46c <_vfprintf_r+0x5d8>
 800ab3a:	17e5      	asrs	r5, r4, #31
 800ab3c:	2c00      	cmp	r4, #0
 800ab3e:	f175 0300 	sbcs.w	r3, r5, #0
 800ab42:	f6bf ab33 	bge.w	800a1ac <_vfprintf_r+0x318>
 800ab46:	272d      	movs	r7, #45	; 0x2d
 800ab48:	4264      	negs	r4, r4
 800ab4a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800ab4e:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800ab52:	f7ff bb2d 	b.w	800a1b0 <_vfprintf_r+0x31c>
 800ab56:	9a06      	ldr	r2, [sp, #24]
 800ab58:	07d7      	lsls	r7, r2, #31
 800ab5a:	f53f aed6 	bmi.w	800a90a <_vfprintf_r+0xa76>
 800ab5e:	2201      	movs	r2, #1
 800ab60:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ab62:	f8c9 1000 	str.w	r1, [r9]
 800ab66:	2d07      	cmp	r5, #7
 800ab68:	e9cd 5424 	strd	r5, r4, [sp, #144]	; 0x90
 800ab6c:	f8c9 2004 	str.w	r2, [r9, #4]
 800ab70:	dc04      	bgt.n	800ab7c <_vfprintf_r+0xce8>
 800ab72:	3302      	adds	r3, #2
 800ab74:	9308      	str	r3, [sp, #32]
 800ab76:	f109 0910 	add.w	r9, r9, #16
 800ab7a:	e6fe      	b.n	800a97a <_vfprintf_r+0xae6>
 800ab7c:	aa23      	add	r2, sp, #140	; 0x8c
 800ab7e:	4641      	mov	r1, r8
 800ab80:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ab82:	f003 f9ed 	bl	800df60 <__sprint_r>
 800ab86:	2800      	cmp	r0, #0
 800ab88:	f47f aad5 	bne.w	800a136 <_vfprintf_r+0x2a2>
 800ab8c:	e9dd 3424 	ldrd	r3, r4, [sp, #144]	; 0x90
 800ab90:	3301      	adds	r3, #1
 800ab92:	9308      	str	r3, [sp, #32]
 800ab94:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
 800ab98:	ae30      	add	r6, sp, #192	; 0xc0
 800ab9a:	e6ee      	b.n	800a97a <_vfprintf_r+0xae6>
 800ab9c:	aa23      	add	r2, sp, #140	; 0x8c
 800ab9e:	4641      	mov	r1, r8
 800aba0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aba2:	9319      	str	r3, [sp, #100]	; 0x64
 800aba4:	f003 f9dc 	bl	800df60 <__sprint_r>
 800aba8:	2800      	cmp	r0, #0
 800abaa:	f47f aac4 	bne.w	800a136 <_vfprintf_r+0x2a2>
 800abae:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800abb2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800abb4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800abb6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800abba:	f7ff bb72 	b.w	800a2a2 <_vfprintf_r+0x40e>
 800abbe:	aa23      	add	r2, sp, #140	; 0x8c
 800abc0:	4641      	mov	r1, r8
 800abc2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800abc4:	f003 f9cc 	bl	800df60 <__sprint_r>
 800abc8:	2800      	cmp	r0, #0
 800abca:	f47f aab4 	bne.w	800a136 <_vfprintf_r+0x2a2>
 800abce:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800abd0:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800abd4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800abd6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800abd8:	4293      	cmp	r3, r2
 800abda:	db02      	blt.n	800abe2 <_vfprintf_r+0xd4e>
 800abdc:	9a06      	ldr	r2, [sp, #24]
 800abde:	07d2      	lsls	r2, r2, #31
 800abe0:	d50f      	bpl.n	800ac02 <_vfprintf_r+0xd6e>
 800abe2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800abe4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800abe6:	f8c9 1000 	str.w	r1, [r9]
 800abea:	9911      	ldr	r1, [sp, #68]	; 0x44
 800abec:	f8c9 1004 	str.w	r1, [r9, #4]
 800abf0:	3201      	adds	r2, #1
 800abf2:	440c      	add	r4, r1
 800abf4:	2a07      	cmp	r2, #7
 800abf6:	9425      	str	r4, [sp, #148]	; 0x94
 800abf8:	9224      	str	r2, [sp, #144]	; 0x90
 800abfa:	f300 8244 	bgt.w	800b086 <_vfprintf_r+0x11f2>
 800abfe:	f109 0908 	add.w	r9, r9, #8
 800ac02:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ac04:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ac06:	1ad3      	subs	r3, r2, r3
 800ac08:	1a15      	subs	r5, r2, r0
 800ac0a:	429d      	cmp	r5, r3
 800ac0c:	bfa8      	it	ge
 800ac0e:	461d      	movge	r5, r3
 800ac10:	2d00      	cmp	r5, #0
 800ac12:	dd0f      	ble.n	800ac34 <_vfprintf_r+0xda0>
 800ac14:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ac16:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ac18:	f8c9 5004 	str.w	r5, [r9, #4]
 800ac1c:	3201      	adds	r2, #1
 800ac1e:	4401      	add	r1, r0
 800ac20:	442c      	add	r4, r5
 800ac22:	2a07      	cmp	r2, #7
 800ac24:	f8c9 1000 	str.w	r1, [r9]
 800ac28:	e9cd 2424 	strd	r2, r4, [sp, #144]	; 0x90
 800ac2c:	f300 815f 	bgt.w	800aeee <_vfprintf_r+0x105a>
 800ac30:	f109 0908 	add.w	r9, r9, #8
 800ac34:	2d00      	cmp	r5, #0
 800ac36:	bfac      	ite	ge
 800ac38:	1b5d      	subge	r5, r3, r5
 800ac3a:	461d      	movlt	r5, r3
 800ac3c:	2d00      	cmp	r5, #0
 800ac3e:	f77f aba0 	ble.w	800a382 <_vfprintf_r+0x4ee>
 800ac42:	2d10      	cmp	r5, #16
 800ac44:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ac46:	f8df b4b8 	ldr.w	fp, [pc, #1208]	; 800b100 <_vfprintf_r+0x126c>
 800ac4a:	dd3b      	ble.n	800acc4 <_vfprintf_r+0xe30>
 800ac4c:	465f      	mov	r7, fp
 800ac4e:	2610      	movs	r6, #16
 800ac50:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800ac54:	e004      	b.n	800ac60 <_vfprintf_r+0xdcc>
 800ac56:	f109 0908 	add.w	r9, r9, #8
 800ac5a:	3d10      	subs	r5, #16
 800ac5c:	2d10      	cmp	r5, #16
 800ac5e:	dd30      	ble.n	800acc2 <_vfprintf_r+0xe2e>
 800ac60:	3201      	adds	r2, #1
 800ac62:	3410      	adds	r4, #16
 800ac64:	2a07      	cmp	r2, #7
 800ac66:	e9cd 2424 	strd	r2, r4, [sp, #144]	; 0x90
 800ac6a:	e9c9 7600 	strd	r7, r6, [r9]
 800ac6e:	ddf2      	ble.n	800ac56 <_vfprintf_r+0xdc2>
 800ac70:	aa23      	add	r2, sp, #140	; 0x8c
 800ac72:	4641      	mov	r1, r8
 800ac74:	4658      	mov	r0, fp
 800ac76:	f003 f973 	bl	800df60 <__sprint_r>
 800ac7a:	2800      	cmp	r0, #0
 800ac7c:	f47f aa5b 	bne.w	800a136 <_vfprintf_r+0x2a2>
 800ac80:	e9dd 2424 	ldrd	r2, r4, [sp, #144]	; 0x90
 800ac84:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800ac88:	e7e7      	b.n	800ac5a <_vfprintf_r+0xdc6>
 800ac8a:	aa23      	add	r2, sp, #140	; 0x8c
 800ac8c:	4641      	mov	r1, r8
 800ac8e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ac90:	f003 f966 	bl	800df60 <__sprint_r>
 800ac94:	2800      	cmp	r0, #0
 800ac96:	f47f aa4e 	bne.w	800a136 <_vfprintf_r+0x2a2>
 800ac9a:	e9dd 5424 	ldrd	r5, r4, [sp, #144]	; 0x90
 800ac9e:	ae30      	add	r6, sp, #192	; 0xc0
 800aca0:	e63e      	b.n	800a920 <_vfprintf_r+0xa8c>
 800aca2:	aa23      	add	r2, sp, #140	; 0x8c
 800aca4:	4641      	mov	r1, r8
 800aca6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aca8:	f003 f95a 	bl	800df60 <__sprint_r>
 800acac:	2800      	cmp	r0, #0
 800acae:	f47f aa42 	bne.w	800a136 <_vfprintf_r+0x2a2>
 800acb2:	e9dd 5424 	ldrd	r5, r4, [sp, #144]	; 0x90
 800acb6:	ae30      	add	r6, sp, #192	; 0xc0
 800acb8:	e63e      	b.n	800a938 <_vfprintf_r+0xaa4>
 800acba:	2b01      	cmp	r3, #1
 800acbc:	f47f abf2 	bne.w	800a4a4 <_vfprintf_r+0x610>
 800acc0:	e6aa      	b.n	800aa18 <_vfprintf_r+0xb84>
 800acc2:	46bb      	mov	fp, r7
 800acc4:	3201      	adds	r2, #1
 800acc6:	442c      	add	r4, r5
 800acc8:	2a07      	cmp	r2, #7
 800acca:	e9cd 2424 	strd	r2, r4, [sp, #144]	; 0x90
 800acce:	e9c9 b500 	strd	fp, r5, [r9]
 800acd2:	f77f ab54 	ble.w	800a37e <_vfprintf_r+0x4ea>
 800acd6:	e65b      	b.n	800a990 <_vfprintf_r+0xafc>
 800acd8:	ab30      	add	r3, sp, #192	; 0xc0
 800acda:	469b      	mov	fp, r3
 800acdc:	4620      	mov	r0, r4
 800acde:	4629      	mov	r1, r5
 800ace0:	220a      	movs	r2, #10
 800ace2:	2300      	movs	r3, #0
 800ace4:	f7f5 fb12 	bl	800030c <__aeabi_uldivmod>
 800ace8:	3230      	adds	r2, #48	; 0x30
 800acea:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 800acee:	4620      	mov	r0, r4
 800acf0:	4629      	mov	r1, r5
 800acf2:	2300      	movs	r3, #0
 800acf4:	220a      	movs	r2, #10
 800acf6:	f7f5 fb09 	bl	800030c <__aeabi_uldivmod>
 800acfa:	4604      	mov	r4, r0
 800acfc:	460d      	mov	r5, r1
 800acfe:	ea54 0305 	orrs.w	r3, r4, r5
 800ad02:	d1eb      	bne.n	800acdc <_vfprintf_r+0xe48>
 800ad04:	465a      	mov	r2, fp
 800ad06:	ab30      	add	r3, sp, #192	; 0xc0
 800ad08:	1a9b      	subs	r3, r3, r2
 800ad0a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800ad0e:	930c      	str	r3, [sp, #48]	; 0x30
 800ad10:	f7ff ba6c 	b.w	800a1ec <_vfprintf_r+0x358>
 800ad14:	ab30      	add	r3, sp, #192	; 0xc0
 800ad16:	930e      	str	r3, [sp, #56]	; 0x38
 800ad18:	f7ff ba68 	b.w	800a1ec <_vfprintf_r+0x358>
 800ad1c:	f01b 0f10 	tst.w	fp, #16
 800ad20:	d107      	bne.n	800ad32 <_vfprintf_r+0xe9e>
 800ad22:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800ad26:	d004      	beq.n	800ad32 <_vfprintf_r+0xe9e>
 800ad28:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800ad2c:	801a      	strh	r2, [r3, #0]
 800ad2e:	f7ff b8fa 	b.w	8009f26 <_vfprintf_r+0x92>
 800ad32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad34:	601a      	str	r2, [r3, #0]
 800ad36:	f7ff b8f6 	b.w	8009f26 <_vfprintf_r+0x92>
 800ad3a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800ad3c:	4622      	mov	r2, r4
 800ad3e:	4620      	mov	r0, r4
 800ad40:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800ad42:	4623      	mov	r3, r4
 800ad44:	4621      	mov	r1, r4
 800ad46:	f7f6 fa11 	bl	800116c <__aeabi_dcmpun>
 800ad4a:	2800      	cmp	r0, #0
 800ad4c:	f040 82a8 	bne.w	800b2a0 <_vfprintf_r+0x140c>
 800ad50:	9a08      	ldr	r2, [sp, #32]
 800ad52:	f026 0320 	bic.w	r3, r6, #32
 800ad56:	1c54      	adds	r4, r2, #1
 800ad58:	9307      	str	r3, [sp, #28]
 800ad5a:	f000 80d7 	beq.w	800af0c <_vfprintf_r+0x1078>
 800ad5e:	2b47      	cmp	r3, #71	; 0x47
 800ad60:	d104      	bne.n	800ad6c <_vfprintf_r+0xed8>
 800ad62:	2a00      	cmp	r2, #0
 800ad64:	4613      	mov	r3, r2
 800ad66:	bf08      	it	eq
 800ad68:	2301      	moveq	r3, #1
 800ad6a:	9308      	str	r3, [sp, #32]
 800ad6c:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 800ad70:	9306      	str	r3, [sp, #24]
 800ad72:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ad74:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800ad76:	1e1d      	subs	r5, r3, #0
 800ad78:	bfb6      	itet	lt
 800ad7a:	f103 4500 	addlt.w	r5, r3, #2147483648	; 0x80000000
 800ad7e:	2300      	movge	r3, #0
 800ad80:	232d      	movlt	r3, #45	; 0x2d
 800ad82:	2e66      	cmp	r6, #102	; 0x66
 800ad84:	9319      	str	r3, [sp, #100]	; 0x64
 800ad86:	f000 8197 	beq.w	800b0b8 <_vfprintf_r+0x1224>
 800ad8a:	2e46      	cmp	r6, #70	; 0x46
 800ad8c:	f000 81fa 	beq.w	800b184 <_vfprintf_r+0x12f0>
 800ad90:	9b07      	ldr	r3, [sp, #28]
 800ad92:	2b45      	cmp	r3, #69	; 0x45
 800ad94:	463a      	mov	r2, r7
 800ad96:	462b      	mov	r3, r5
 800ad98:	f000 81d5 	beq.w	800b146 <_vfprintf_r+0x12b2>
 800ad9c:	a821      	add	r0, sp, #132	; 0x84
 800ad9e:	a91e      	add	r1, sp, #120	; 0x78
 800ada0:	9c08      	ldr	r4, [sp, #32]
 800ada2:	9004      	str	r0, [sp, #16]
 800ada4:	9103      	str	r1, [sp, #12]
 800ada6:	a81d      	add	r0, sp, #116	; 0x74
 800ada8:	2102      	movs	r1, #2
 800adaa:	9002      	str	r0, [sp, #8]
 800adac:	9401      	str	r4, [sp, #4]
 800adae:	9100      	str	r1, [sp, #0]
 800adb0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800adb2:	f000 fc2d 	bl	800b610 <_dtoa_r>
 800adb6:	2e67      	cmp	r6, #103	; 0x67
 800adb8:	900e      	str	r0, [sp, #56]	; 0x38
 800adba:	f040 82d6 	bne.w	800b36a <_vfprintf_r+0x14d6>
 800adbe:	f01b 0f01 	tst.w	fp, #1
 800adc2:	f000 80f6 	beq.w	800afb2 <_vfprintf_r+0x111e>
 800adc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800adc8:	9a08      	ldr	r2, [sp, #32]
 800adca:	189c      	adds	r4, r3, r2
 800adcc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800adce:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800add0:	4638      	mov	r0, r7
 800add2:	4629      	mov	r1, r5
 800add4:	f7f6 f998 	bl	8001108 <__aeabi_dcmpeq>
 800add8:	2800      	cmp	r0, #0
 800adda:	f000 8161 	beq.w	800b0a0 <_vfprintf_r+0x120c>
 800adde:	4623      	mov	r3, r4
 800ade0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ade2:	1a9b      	subs	r3, r3, r2
 800ade4:	9310      	str	r3, [sp, #64]	; 0x40
 800ade6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ade8:	930f      	str	r3, [sp, #60]	; 0x3c
 800adea:	9b07      	ldr	r3, [sp, #28]
 800adec:	2b47      	cmp	r3, #71	; 0x47
 800adee:	f000 80e9 	beq.w	800afc4 <_vfprintf_r+0x1130>
 800adf2:	2e66      	cmp	r6, #102	; 0x66
 800adf4:	f040 80ed 	bne.w	800afd2 <_vfprintf_r+0x113e>
 800adf8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	9b08      	ldr	r3, [sp, #32]
 800adfe:	f340 826f 	ble.w	800b2e0 <_vfprintf_r+0x144c>
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	f040 8262 	bne.w	800b2cc <_vfprintf_r+0x1438>
 800ae08:	f01b 0f01 	tst.w	fp, #1
 800ae0c:	f040 825e 	bne.w	800b2cc <_vfprintf_r+0x1438>
 800ae10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae12:	9307      	str	r3, [sp, #28]
 800ae14:	930c      	str	r3, [sp, #48]	; 0x30
 800ae16:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	f040 8110 	bne.w	800b03e <_vfprintf_r+0x11aa>
 800ae1e:	9308      	str	r3, [sp, #32]
 800ae20:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800ae24:	f7ff b9ea 	b.w	800a1fc <_vfprintf_r+0x368>
 800ae28:	aa23      	add	r2, sp, #140	; 0x8c
 800ae2a:	4641      	mov	r1, r8
 800ae2c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ae2e:	f003 f897 	bl	800df60 <__sprint_r>
 800ae32:	2800      	cmp	r0, #0
 800ae34:	f47f a97f 	bne.w	800a136 <_vfprintf_r+0x2a2>
 800ae38:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800ae3a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800ae3e:	f7ff ba53 	b.w	800a2e8 <_vfprintf_r+0x454>
 800ae42:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ae44:	49ac      	ldr	r1, [pc, #688]	; (800b0f8 <_vfprintf_r+0x1264>)
 800ae46:	f8c9 1000 	str.w	r1, [r9]
 800ae4a:	3201      	adds	r2, #1
 800ae4c:	3401      	adds	r4, #1
 800ae4e:	2101      	movs	r1, #1
 800ae50:	2a07      	cmp	r2, #7
 800ae52:	e9cd 2424 	strd	r2, r4, [sp, #144]	; 0x90
 800ae56:	f8c9 1004 	str.w	r1, [r9, #4]
 800ae5a:	dc3b      	bgt.n	800aed4 <_vfprintf_r+0x1040>
 800ae5c:	f109 0908 	add.w	r9, r9, #8
 800ae60:	b92b      	cbnz	r3, 800ae6e <_vfprintf_r+0xfda>
 800ae62:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ae64:	b91a      	cbnz	r2, 800ae6e <_vfprintf_r+0xfda>
 800ae66:	9a06      	ldr	r2, [sp, #24]
 800ae68:	07d1      	lsls	r1, r2, #31
 800ae6a:	f57f aa8a 	bpl.w	800a382 <_vfprintf_r+0x4ee>
 800ae6e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ae70:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ae72:	f8c9 1000 	str.w	r1, [r9]
 800ae76:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ae78:	f8c9 1004 	str.w	r1, [r9, #4]
 800ae7c:	3201      	adds	r2, #1
 800ae7e:	440c      	add	r4, r1
 800ae80:	2a07      	cmp	r2, #7
 800ae82:	9425      	str	r4, [sp, #148]	; 0x94
 800ae84:	9224      	str	r2, [sp, #144]	; 0x90
 800ae86:	f300 813d 	bgt.w	800b104 <_vfprintf_r+0x1270>
 800ae8a:	f109 0908 	add.w	r9, r9, #8
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	f2c0 8194 	blt.w	800b1bc <_vfprintf_r+0x1328>
 800ae94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae96:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ae98:	3201      	adds	r2, #1
 800ae9a:	441c      	add	r4, r3
 800ae9c:	2a07      	cmp	r2, #7
 800ae9e:	e9cd 2424 	strd	r2, r4, [sp, #144]	; 0x90
 800aea2:	e9c9 1300 	strd	r1, r3, [r9]
 800aea6:	f77f aa6a 	ble.w	800a37e <_vfprintf_r+0x4ea>
 800aeaa:	e571      	b.n	800a990 <_vfprintf_r+0xafc>
 800aeac:	aa23      	add	r2, sp, #140	; 0x8c
 800aeae:	4641      	mov	r1, r8
 800aeb0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aeb2:	f003 f855 	bl	800df60 <__sprint_r>
 800aeb6:	2800      	cmp	r0, #0
 800aeb8:	f47f a93d 	bne.w	800a136 <_vfprintf_r+0x2a2>
 800aebc:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800aec0:	e483      	b.n	800a7ca <_vfprintf_r+0x936>
 800aec2:	4240      	negs	r0, r0
 800aec4:	900b      	str	r0, [sp, #44]	; 0x2c
 800aec6:	930d      	str	r3, [sp, #52]	; 0x34
 800aec8:	e425      	b.n	800a716 <_vfprintf_r+0x882>
 800aeca:	272d      	movs	r7, #45	; 0x2d
 800aecc:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800aed0:	f7ff bbc3 	b.w	800a65a <_vfprintf_r+0x7c6>
 800aed4:	aa23      	add	r2, sp, #140	; 0x8c
 800aed6:	4641      	mov	r1, r8
 800aed8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aeda:	f003 f841 	bl	800df60 <__sprint_r>
 800aede:	2800      	cmp	r0, #0
 800aee0:	f47f a929 	bne.w	800a136 <_vfprintf_r+0x2a2>
 800aee4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aee6:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800aee8:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800aeec:	e7b8      	b.n	800ae60 <_vfprintf_r+0xfcc>
 800aeee:	aa23      	add	r2, sp, #140	; 0x8c
 800aef0:	4641      	mov	r1, r8
 800aef2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aef4:	f003 f834 	bl	800df60 <__sprint_r>
 800aef8:	2800      	cmp	r0, #0
 800aefa:	f47f a91c 	bne.w	800a136 <_vfprintf_r+0x2a2>
 800aefe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800af00:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800af02:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800af04:	1ad3      	subs	r3, r2, r3
 800af06:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800af0a:	e693      	b.n	800ac34 <_vfprintf_r+0xda0>
 800af0c:	2306      	movs	r3, #6
 800af0e:	9308      	str	r3, [sp, #32]
 800af10:	e72c      	b.n	800ad6c <_vfprintf_r+0xed8>
 800af12:	9b08      	ldr	r3, [sp, #32]
 800af14:	9307      	str	r3, [sp, #28]
 800af16:	930c      	str	r3, [sp, #48]	; 0x30
 800af18:	9008      	str	r0, [sp, #32]
 800af1a:	940d      	str	r4, [sp, #52]	; 0x34
 800af1c:	f8cd b018 	str.w	fp, [sp, #24]
 800af20:	900f      	str	r0, [sp, #60]	; 0x3c
 800af22:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800af26:	f7ff b969 	b.w	800a1fc <_vfprintf_r+0x368>
 800af2a:	46a3      	mov	fp, r4
 800af2c:	461c      	mov	r4, r3
 800af2e:	1c6b      	adds	r3, r5, #1
 800af30:	9308      	str	r3, [sp, #32]
 800af32:	f106 0208 	add.w	r2, r6, #8
 800af36:	9b08      	ldr	r3, [sp, #32]
 800af38:	9324      	str	r3, [sp, #144]	; 0x90
 800af3a:	443c      	add	r4, r7
 800af3c:	2b07      	cmp	r3, #7
 800af3e:	9425      	str	r4, [sp, #148]	; 0x94
 800af40:	e9c6 b700 	strd	fp, r7, [r6]
 800af44:	f73f ae1a 	bgt.w	800ab7c <_vfprintf_r+0xce8>
 800af48:	3301      	adds	r3, #1
 800af4a:	9308      	str	r3, [sp, #32]
 800af4c:	f102 0908 	add.w	r9, r2, #8
 800af50:	4616      	mov	r6, r2
 800af52:	e512      	b.n	800a97a <_vfprintf_r+0xae6>
 800af54:	aa23      	add	r2, sp, #140	; 0x8c
 800af56:	4641      	mov	r1, r8
 800af58:	980a      	ldr	r0, [sp, #40]	; 0x28
 800af5a:	f003 f801 	bl	800df60 <__sprint_r>
 800af5e:	2800      	cmp	r0, #0
 800af60:	f47f a8e9 	bne.w	800a136 <_vfprintf_r+0x2a2>
 800af64:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800af66:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800af6a:	e447      	b.n	800a7fc <_vfprintf_r+0x968>
 800af6c:	46bb      	mov	fp, r7
 800af6e:	3201      	adds	r2, #1
 800af70:	442c      	add	r4, r5
 800af72:	2a07      	cmp	r2, #7
 800af74:	e9cd 2424 	strd	r2, r4, [sp, #144]	; 0x90
 800af78:	e9c9 b500 	strd	fp, r5, [r9]
 800af7c:	f73f ae1f 	bgt.w	800abbe <_vfprintf_r+0xd2a>
 800af80:	f109 0908 	add.w	r9, r9, #8
 800af84:	e626      	b.n	800abd4 <_vfprintf_r+0xd40>
 800af86:	9b08      	ldr	r3, [sp, #32]
 800af88:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800af8a:	9708      	str	r7, [sp, #32]
 800af8c:	2b06      	cmp	r3, #6
 800af8e:	bf28      	it	cs
 800af90:	2306      	movcs	r3, #6
 800af92:	9307      	str	r3, [sp, #28]
 800af94:	930c      	str	r3, [sp, #48]	; 0x30
 800af96:	4b59      	ldr	r3, [pc, #356]	; (800b0fc <_vfprintf_r+0x1268>)
 800af98:	940d      	str	r4, [sp, #52]	; 0x34
 800af9a:	f8cd b018 	str.w	fp, [sp, #24]
 800af9e:	970f      	str	r7, [sp, #60]	; 0x3c
 800afa0:	930e      	str	r3, [sp, #56]	; 0x38
 800afa2:	f7ff b92b 	b.w	800a1fc <_vfprintf_r+0x368>
 800afa6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800afa8:	ab30      	add	r3, sp, #192	; 0xc0
 800afaa:	1a9b      	subs	r3, r3, r2
 800afac:	930c      	str	r3, [sp, #48]	; 0x30
 800afae:	f7ff b91d 	b.w	800a1ec <_vfprintf_r+0x358>
 800afb2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800afb4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800afb6:	920f      	str	r2, [sp, #60]	; 0x3c
 800afb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800afba:	1a9b      	subs	r3, r3, r2
 800afbc:	9310      	str	r3, [sp, #64]	; 0x40
 800afbe:	9b07      	ldr	r3, [sp, #28]
 800afc0:	2b47      	cmp	r3, #71	; 0x47
 800afc2:	d106      	bne.n	800afd2 <_vfprintf_r+0x113e>
 800afc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800afc6:	1cda      	adds	r2, r3, #3
 800afc8:	db02      	blt.n	800afd0 <_vfprintf_r+0x113c>
 800afca:	9a08      	ldr	r2, [sp, #32]
 800afcc:	429a      	cmp	r2, r3
 800afce:	da3d      	bge.n	800b04c <_vfprintf_r+0x11b8>
 800afd0:	3e02      	subs	r6, #2
 800afd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800afd4:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
 800afd8:	3b01      	subs	r3, #1
 800afda:	2b00      	cmp	r3, #0
 800afdc:	931d      	str	r3, [sp, #116]	; 0x74
 800afde:	bfbd      	ittte	lt
 800afe0:	9b0f      	ldrlt	r3, [sp, #60]	; 0x3c
 800afe2:	f1c3 0301 	rsblt	r3, r3, #1
 800afe6:	222d      	movlt	r2, #45	; 0x2d
 800afe8:	222b      	movge	r2, #43	; 0x2b
 800afea:	2b09      	cmp	r3, #9
 800afec:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
 800aff0:	f300 8114 	bgt.w	800b21c <_vfprintf_r+0x1388>
 800aff4:	3330      	adds	r3, #48	; 0x30
 800aff6:	2230      	movs	r2, #48	; 0x30
 800aff8:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 800affc:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
 800b000:	ab20      	add	r3, sp, #128	; 0x80
 800b002:	aa1f      	add	r2, sp, #124	; 0x7c
 800b004:	1a9b      	subs	r3, r3, r2
 800b006:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b008:	9318      	str	r3, [sp, #96]	; 0x60
 800b00a:	2a01      	cmp	r2, #1
 800b00c:	4413      	add	r3, r2
 800b00e:	930c      	str	r3, [sp, #48]	; 0x30
 800b010:	f340 8152 	ble.w	800b2b8 <_vfprintf_r+0x1424>
 800b014:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b016:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b018:	4413      	add	r3, r2
 800b01a:	930c      	str	r3, [sp, #48]	; 0x30
 800b01c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b020:	9307      	str	r3, [sp, #28]
 800b022:	2300      	movs	r3, #0
 800b024:	930f      	str	r3, [sp, #60]	; 0x3c
 800b026:	e6f6      	b.n	800ae16 <_vfprintf_r+0xf82>
 800b028:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b02a:	9508      	str	r5, [sp, #32]
 800b02c:	f7f5 fb88 	bl	8000740 <strlen>
 800b030:	f8cd b018 	str.w	fp, [sp, #24]
 800b034:	e9cd 040c 	strd	r0, r4, [sp, #48]	; 0x30
 800b038:	4603      	mov	r3, r0
 800b03a:	f7ff bab7 	b.w	800a5ac <_vfprintf_r+0x718>
 800b03e:	272d      	movs	r7, #45	; 0x2d
 800b040:	2300      	movs	r3, #0
 800b042:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800b046:	9308      	str	r3, [sp, #32]
 800b048:	f7ff b8d9 	b.w	800a1fe <_vfprintf_r+0x36a>
 800b04c:	e9dd 310f 	ldrd	r3, r1, [sp, #60]	; 0x3c
 800b050:	428b      	cmp	r3, r1
 800b052:	db65      	blt.n	800b120 <_vfprintf_r+0x128c>
 800b054:	f01b 0f01 	tst.w	fp, #1
 800b058:	f000 811c 	beq.w	800b294 <_vfprintf_r+0x1400>
 800b05c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b05e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b060:	4413      	add	r3, r2
 800b062:	930c      	str	r3, [sp, #48]	; 0x30
 800b064:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b068:	9307      	str	r3, [sp, #28]
 800b06a:	2667      	movs	r6, #103	; 0x67
 800b06c:	e6d3      	b.n	800ae16 <_vfprintf_r+0xf82>
 800b06e:	aa23      	add	r2, sp, #140	; 0x8c
 800b070:	4641      	mov	r1, r8
 800b072:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b074:	f002 ff74 	bl	800df60 <__sprint_r>
 800b078:	2800      	cmp	r0, #0
 800b07a:	f47f a85c 	bne.w	800a136 <_vfprintf_r+0x2a2>
 800b07e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800b080:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b084:	e4fa      	b.n	800aa7c <_vfprintf_r+0xbe8>
 800b086:	aa23      	add	r2, sp, #140	; 0x8c
 800b088:	4641      	mov	r1, r8
 800b08a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b08c:	f002 ff68 	bl	800df60 <__sprint_r>
 800b090:	2800      	cmp	r0, #0
 800b092:	f47f a850 	bne.w	800a136 <_vfprintf_r+0x2a2>
 800b096:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b098:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800b09a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b09e:	e5b0      	b.n	800ac02 <_vfprintf_r+0xd6e>
 800b0a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0a2:	42a3      	cmp	r3, r4
 800b0a4:	f4bf ae9c 	bcs.w	800ade0 <_vfprintf_r+0xf4c>
 800b0a8:	2130      	movs	r1, #48	; 0x30
 800b0aa:	1c5a      	adds	r2, r3, #1
 800b0ac:	9221      	str	r2, [sp, #132]	; 0x84
 800b0ae:	7019      	strb	r1, [r3, #0]
 800b0b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0b2:	429c      	cmp	r4, r3
 800b0b4:	d8f9      	bhi.n	800b0aa <_vfprintf_r+0x1216>
 800b0b6:	e693      	b.n	800ade0 <_vfprintf_r+0xf4c>
 800b0b8:	a821      	add	r0, sp, #132	; 0x84
 800b0ba:	a91e      	add	r1, sp, #120	; 0x78
 800b0bc:	9c08      	ldr	r4, [sp, #32]
 800b0be:	9004      	str	r0, [sp, #16]
 800b0c0:	9103      	str	r1, [sp, #12]
 800b0c2:	a81d      	add	r0, sp, #116	; 0x74
 800b0c4:	2103      	movs	r1, #3
 800b0c6:	462b      	mov	r3, r5
 800b0c8:	9401      	str	r4, [sp, #4]
 800b0ca:	9002      	str	r0, [sp, #8]
 800b0cc:	463a      	mov	r2, r7
 800b0ce:	9100      	str	r1, [sp, #0]
 800b0d0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b0d2:	f000 fa9d 	bl	800b610 <_dtoa_r>
 800b0d6:	4623      	mov	r3, r4
 800b0d8:	900e      	str	r0, [sp, #56]	; 0x38
 800b0da:	1904      	adds	r4, r0, r4
 800b0dc:	930c      	str	r3, [sp, #48]	; 0x30
 800b0de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	2b30      	cmp	r3, #48	; 0x30
 800b0e4:	f000 80c7 	beq.w	800b276 <_vfprintf_r+0x13e2>
 800b0e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b0ea:	441c      	add	r4, r3
 800b0ec:	e66e      	b.n	800adcc <_vfprintf_r+0xf38>
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	9308      	str	r3, [sp, #32]
 800b0f2:	f7fe bf4f 	b.w	8009f94 <_vfprintf_r+0x100>
 800b0f6:	bf00      	nop
 800b0f8:	0800ea90 	.word	0x0800ea90
 800b0fc:	0800ea88 	.word	0x0800ea88
 800b100:	0800eac4 	.word	0x0800eac4
 800b104:	aa23      	add	r2, sp, #140	; 0x8c
 800b106:	4641      	mov	r1, r8
 800b108:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b10a:	f002 ff29 	bl	800df60 <__sprint_r>
 800b10e:	2800      	cmp	r0, #0
 800b110:	f47f a811 	bne.w	800a136 <_vfprintf_r+0x2a2>
 800b114:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b116:	e9dd 2424 	ldrd	r2, r4, [sp, #144]	; 0x90
 800b11a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b11e:	e6b6      	b.n	800ae8e <_vfprintf_r+0xffa>
 800b120:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 800b124:	4413      	add	r3, r2
 800b126:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b128:	930c      	str	r3, [sp, #48]	; 0x30
 800b12a:	2a00      	cmp	r2, #0
 800b12c:	dc06      	bgt.n	800b13c <_vfprintf_r+0x12a8>
 800b12e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b130:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b132:	f1c3 0301 	rsb	r3, r3, #1
 800b136:	441a      	add	r2, r3
 800b138:	4613      	mov	r3, r2
 800b13a:	920c      	str	r2, [sp, #48]	; 0x30
 800b13c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b140:	9307      	str	r3, [sp, #28]
 800b142:	2667      	movs	r6, #103	; 0x67
 800b144:	e667      	b.n	800ae16 <_vfprintf_r+0xf82>
 800b146:	9908      	ldr	r1, [sp, #32]
 800b148:	3101      	adds	r1, #1
 800b14a:	460c      	mov	r4, r1
 800b14c:	910c      	str	r1, [sp, #48]	; 0x30
 800b14e:	a821      	add	r0, sp, #132	; 0x84
 800b150:	a91e      	add	r1, sp, #120	; 0x78
 800b152:	9004      	str	r0, [sp, #16]
 800b154:	9103      	str	r1, [sp, #12]
 800b156:	a81d      	add	r0, sp, #116	; 0x74
 800b158:	2102      	movs	r1, #2
 800b15a:	9002      	str	r0, [sp, #8]
 800b15c:	9401      	str	r4, [sp, #4]
 800b15e:	9100      	str	r1, [sp, #0]
 800b160:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b162:	f000 fa55 	bl	800b610 <_dtoa_r>
 800b166:	900e      	str	r0, [sp, #56]	; 0x38
 800b168:	2e47      	cmp	r6, #71	; 0x47
 800b16a:	f040 80e6 	bne.w	800b33a <_vfprintf_r+0x14a6>
 800b16e:	f01b 0f01 	tst.w	fp, #1
 800b172:	f000 80db 	beq.w	800b32c <_vfprintf_r+0x1498>
 800b176:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b178:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b17a:	2e46      	cmp	r6, #70	; 0x46
 800b17c:	eb03 0402 	add.w	r4, r3, r2
 800b180:	d0ad      	beq.n	800b0de <_vfprintf_r+0x124a>
 800b182:	e623      	b.n	800adcc <_vfprintf_r+0xf38>
 800b184:	a821      	add	r0, sp, #132	; 0x84
 800b186:	a91e      	add	r1, sp, #120	; 0x78
 800b188:	9c08      	ldr	r4, [sp, #32]
 800b18a:	9004      	str	r0, [sp, #16]
 800b18c:	9103      	str	r1, [sp, #12]
 800b18e:	a81d      	add	r0, sp, #116	; 0x74
 800b190:	2103      	movs	r1, #3
 800b192:	9002      	str	r0, [sp, #8]
 800b194:	463a      	mov	r2, r7
 800b196:	462b      	mov	r3, r5
 800b198:	9401      	str	r4, [sp, #4]
 800b19a:	9100      	str	r1, [sp, #0]
 800b19c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b19e:	f000 fa37 	bl	800b610 <_dtoa_r>
 800b1a2:	940c      	str	r4, [sp, #48]	; 0x30
 800b1a4:	900e      	str	r0, [sp, #56]	; 0x38
 800b1a6:	e7e6      	b.n	800b176 <_vfprintf_r+0x12e2>
 800b1a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b1aa:	aa23      	add	r2, sp, #140	; 0x8c
 800b1ac:	4641      	mov	r1, r8
 800b1ae:	f002 fed7 	bl	800df60 <__sprint_r>
 800b1b2:	2800      	cmp	r0, #0
 800b1b4:	f43e afbd 	beq.w	800a132 <_vfprintf_r+0x29e>
 800b1b8:	f7fe bfbd 	b.w	800a136 <_vfprintf_r+0x2a2>
 800b1bc:	425d      	negs	r5, r3
 800b1be:	3310      	adds	r3, #16
 800b1c0:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 800b394 <_vfprintf_r+0x1500>
 800b1c4:	da1f      	bge.n	800b206 <_vfprintf_r+0x1372>
 800b1c6:	465f      	mov	r7, fp
 800b1c8:	2610      	movs	r6, #16
 800b1ca:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800b1ce:	e004      	b.n	800b1da <_vfprintf_r+0x1346>
 800b1d0:	f109 0908 	add.w	r9, r9, #8
 800b1d4:	3d10      	subs	r5, #16
 800b1d6:	2d10      	cmp	r5, #16
 800b1d8:	dd14      	ble.n	800b204 <_vfprintf_r+0x1370>
 800b1da:	3201      	adds	r2, #1
 800b1dc:	3410      	adds	r4, #16
 800b1de:	2a07      	cmp	r2, #7
 800b1e0:	e9cd 2424 	strd	r2, r4, [sp, #144]	; 0x90
 800b1e4:	e9c9 7600 	strd	r7, r6, [r9]
 800b1e8:	ddf2      	ble.n	800b1d0 <_vfprintf_r+0x133c>
 800b1ea:	aa23      	add	r2, sp, #140	; 0x8c
 800b1ec:	4641      	mov	r1, r8
 800b1ee:	4658      	mov	r0, fp
 800b1f0:	f002 feb6 	bl	800df60 <__sprint_r>
 800b1f4:	2800      	cmp	r0, #0
 800b1f6:	f47e af9e 	bne.w	800a136 <_vfprintf_r+0x2a2>
 800b1fa:	e9dd 2424 	ldrd	r2, r4, [sp, #144]	; 0x90
 800b1fe:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b202:	e7e7      	b.n	800b1d4 <_vfprintf_r+0x1340>
 800b204:	46bb      	mov	fp, r7
 800b206:	3201      	adds	r2, #1
 800b208:	442c      	add	r4, r5
 800b20a:	2a07      	cmp	r2, #7
 800b20c:	e9cd 2424 	strd	r2, r4, [sp, #144]	; 0x90
 800b210:	e9c9 b500 	strd	fp, r5, [r9]
 800b214:	dc7d      	bgt.n	800b312 <_vfprintf_r+0x147e>
 800b216:	f109 0908 	add.w	r9, r9, #8
 800b21a:	e63b      	b.n	800ae94 <_vfprintf_r+0x1000>
 800b21c:	f10d 048b 	add.w	r4, sp, #139	; 0x8b
 800b220:	4620      	mov	r0, r4
 800b222:	4d59      	ldr	r5, [pc, #356]	; (800b388 <_vfprintf_r+0x14f4>)
 800b224:	e000      	b.n	800b228 <_vfprintf_r+0x1394>
 800b226:	4610      	mov	r0, r2
 800b228:	fba5 1203 	umull	r1, r2, r5, r3
 800b22c:	08d2      	lsrs	r2, r2, #3
 800b22e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800b232:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 800b236:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b23a:	4613      	mov	r3, r2
 800b23c:	2b09      	cmp	r3, #9
 800b23e:	f800 1c01 	strb.w	r1, [r0, #-1]
 800b242:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800b246:	dcee      	bgt.n	800b226 <_vfprintf_r+0x1392>
 800b248:	3330      	adds	r3, #48	; 0x30
 800b24a:	3802      	subs	r0, #2
 800b24c:	b2d9      	uxtb	r1, r3
 800b24e:	4284      	cmp	r4, r0
 800b250:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b254:	d976      	bls.n	800b344 <_vfprintf_r+0x14b0>
 800b256:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
 800b25a:	4613      	mov	r3, r2
 800b25c:	e001      	b.n	800b262 <_vfprintf_r+0x13ce>
 800b25e:	f813 1b01 	ldrb.w	r1, [r3], #1
 800b262:	f800 1b01 	strb.w	r1, [r0], #1
 800b266:	429c      	cmp	r4, r3
 800b268:	d1f9      	bne.n	800b25e <_vfprintf_r+0x13ca>
 800b26a:	ab23      	add	r3, sp, #140	; 0x8c
 800b26c:	1a9b      	subs	r3, r3, r2
 800b26e:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
 800b272:	4413      	add	r3, r2
 800b274:	e6c5      	b.n	800b002 <_vfprintf_r+0x116e>
 800b276:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b278:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b27a:	4638      	mov	r0, r7
 800b27c:	4629      	mov	r1, r5
 800b27e:	f7f5 ff43 	bl	8001108 <__aeabi_dcmpeq>
 800b282:	2800      	cmp	r0, #0
 800b284:	f47f af30 	bne.w	800b0e8 <_vfprintf_r+0x1254>
 800b288:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b28a:	f1c3 0301 	rsb	r3, r3, #1
 800b28e:	931d      	str	r3, [sp, #116]	; 0x74
 800b290:	441c      	add	r4, r3
 800b292:	e59b      	b.n	800adcc <_vfprintf_r+0xf38>
 800b294:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800b298:	9207      	str	r2, [sp, #28]
 800b29a:	930c      	str	r3, [sp, #48]	; 0x30
 800b29c:	2667      	movs	r6, #103	; 0x67
 800b29e:	e5ba      	b.n	800ae16 <_vfprintf_r+0xf82>
 800b2a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b2a2:	4a3a      	ldr	r2, [pc, #232]	; (800b38c <_vfprintf_r+0x14f8>)
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	bfb6      	itet	lt
 800b2a8:	272d      	movlt	r7, #45	; 0x2d
 800b2aa:	f89d 706f 	ldrbge.w	r7, [sp, #111]	; 0x6f
 800b2ae:	f88d 706f 	strblt.w	r7, [sp, #111]	; 0x6f
 800b2b2:	4b37      	ldr	r3, [pc, #220]	; (800b390 <_vfprintf_r+0x14fc>)
 800b2b4:	f7ff b9d3 	b.w	800a65e <_vfprintf_r+0x7ca>
 800b2b8:	f01b 0301 	ands.w	r3, fp, #1
 800b2bc:	930f      	str	r3, [sp, #60]	; 0x3c
 800b2be:	f47f aea9 	bne.w	800b014 <_vfprintf_r+0x1180>
 800b2c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b2c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b2c8:	9307      	str	r3, [sp, #28]
 800b2ca:	e5a4      	b.n	800ae16 <_vfprintf_r+0xf82>
 800b2cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b2ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b2d0:	4413      	add	r3, r2
 800b2d2:	9a08      	ldr	r2, [sp, #32]
 800b2d4:	441a      	add	r2, r3
 800b2d6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b2da:	920c      	str	r2, [sp, #48]	; 0x30
 800b2dc:	9307      	str	r3, [sp, #28]
 800b2de:	e59a      	b.n	800ae16 <_vfprintf_r+0xf82>
 800b2e0:	b943      	cbnz	r3, 800b2f4 <_vfprintf_r+0x1460>
 800b2e2:	f01b 0f01 	tst.w	fp, #1
 800b2e6:	d105      	bne.n	800b2f4 <_vfprintf_r+0x1460>
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	9307      	str	r3, [sp, #28]
 800b2ec:	930c      	str	r3, [sp, #48]	; 0x30
 800b2ee:	e592      	b.n	800ae16 <_vfprintf_r+0xf82>
 800b2f0:	464a      	mov	r2, r9
 800b2f2:	e620      	b.n	800af36 <_vfprintf_r+0x10a2>
 800b2f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	e7eb      	b.n	800b2d2 <_vfprintf_r+0x143e>
 800b2fa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800b2fc:	f89a 6001 	ldrb.w	r6, [sl, #1]
 800b300:	6823      	ldr	r3, [r4, #0]
 800b302:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b306:	9308      	str	r3, [sp, #32]
 800b308:	1d23      	adds	r3, r4, #4
 800b30a:	4682      	mov	sl, r0
 800b30c:	930d      	str	r3, [sp, #52]	; 0x34
 800b30e:	f7fe be3f 	b.w	8009f90 <_vfprintf_r+0xfc>
 800b312:	aa23      	add	r2, sp, #140	; 0x8c
 800b314:	4641      	mov	r1, r8
 800b316:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b318:	f002 fe22 	bl	800df60 <__sprint_r>
 800b31c:	2800      	cmp	r0, #0
 800b31e:	f47e af0a 	bne.w	800a136 <_vfprintf_r+0x2a2>
 800b322:	e9dd 2424 	ldrd	r2, r4, [sp, #144]	; 0x90
 800b326:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b32a:	e5b3      	b.n	800ae94 <_vfprintf_r+0x1000>
 800b32c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b32e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b330:	920f      	str	r2, [sp, #60]	; 0x3c
 800b332:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b334:	1a9b      	subs	r3, r3, r2
 800b336:	9310      	str	r3, [sp, #64]	; 0x40
 800b338:	e644      	b.n	800afc4 <_vfprintf_r+0x1130>
 800b33a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b33c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b33e:	4413      	add	r3, r2
 800b340:	461c      	mov	r4, r3
 800b342:	e543      	b.n	800adcc <_vfprintf_r+0xf38>
 800b344:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
 800b348:	e65b      	b.n	800b002 <_vfprintf_r+0x116e>
 800b34a:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800b34e:	f7ff b937 	b.w	800a5c0 <_vfprintf_r+0x72c>
 800b352:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800b356:	f7ff b9c7 	b.w	800a6e8 <_vfprintf_r+0x854>
 800b35a:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800b35e:	f7ff b951 	b.w	800a604 <_vfprintf_r+0x770>
 800b362:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800b366:	f7ff ba01 	b.w	800a76c <_vfprintf_r+0x8d8>
 800b36a:	9b08      	ldr	r3, [sp, #32]
 800b36c:	930c      	str	r3, [sp, #48]	; 0x30
 800b36e:	e6fb      	b.n	800b168 <_vfprintf_r+0x12d4>
 800b370:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800b374:	f7ff b8e1 	b.w	800a53a <_vfprintf_r+0x6a6>
 800b378:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800b37c:	f7fe bf04 	b.w	800a188 <_vfprintf_r+0x2f4>
 800b380:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800b384:	f7ff b864 	b.w	800a450 <_vfprintf_r+0x5bc>
 800b388:	cccccccd 	.word	0xcccccccd
 800b38c:	0800ea5c 	.word	0x0800ea5c
 800b390:	0800ea58 	.word	0x0800ea58
 800b394:	0800eac4 	.word	0x0800eac4

0800b398 <__sbprintf>:
 800b398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b39c:	460c      	mov	r4, r1
 800b39e:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 800b3a2:	8989      	ldrh	r1, [r1, #12]
 800b3a4:	6e66      	ldr	r6, [r4, #100]	; 0x64
 800b3a6:	89e5      	ldrh	r5, [r4, #14]
 800b3a8:	9619      	str	r6, [sp, #100]	; 0x64
 800b3aa:	f021 0102 	bic.w	r1, r1, #2
 800b3ae:	4606      	mov	r6, r0
 800b3b0:	69e0      	ldr	r0, [r4, #28]
 800b3b2:	f8ad 100c 	strh.w	r1, [sp, #12]
 800b3b6:	4617      	mov	r7, r2
 800b3b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b3bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b3be:	f8ad 500e 	strh.w	r5, [sp, #14]
 800b3c2:	4698      	mov	r8, r3
 800b3c4:	ad1a      	add	r5, sp, #104	; 0x68
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	9007      	str	r0, [sp, #28]
 800b3ca:	a816      	add	r0, sp, #88	; 0x58
 800b3cc:	9209      	str	r2, [sp, #36]	; 0x24
 800b3ce:	9306      	str	r3, [sp, #24]
 800b3d0:	9500      	str	r5, [sp, #0]
 800b3d2:	9504      	str	r5, [sp, #16]
 800b3d4:	9102      	str	r1, [sp, #8]
 800b3d6:	9105      	str	r1, [sp, #20]
 800b3d8:	f001 fc5e 	bl	800cc98 <__retarget_lock_init_recursive>
 800b3dc:	4643      	mov	r3, r8
 800b3de:	463a      	mov	r2, r7
 800b3e0:	4669      	mov	r1, sp
 800b3e2:	4630      	mov	r0, r6
 800b3e4:	f7fe fd56 	bl	8009e94 <_vfprintf_r>
 800b3e8:	1e05      	subs	r5, r0, #0
 800b3ea:	db07      	blt.n	800b3fc <__sbprintf+0x64>
 800b3ec:	4630      	mov	r0, r6
 800b3ee:	4669      	mov	r1, sp
 800b3f0:	f001 f8b2 	bl	800c558 <_fflush_r>
 800b3f4:	2800      	cmp	r0, #0
 800b3f6:	bf18      	it	ne
 800b3f8:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800b3fc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800b400:	065b      	lsls	r3, r3, #25
 800b402:	d503      	bpl.n	800b40c <__sbprintf+0x74>
 800b404:	89a3      	ldrh	r3, [r4, #12]
 800b406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b40a:	81a3      	strh	r3, [r4, #12]
 800b40c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800b40e:	f001 fc45 	bl	800cc9c <__retarget_lock_close_recursive>
 800b412:	4628      	mov	r0, r5
 800b414:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 800b418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b41c <__swsetup_r>:
 800b41c:	b538      	push	{r3, r4, r5, lr}
 800b41e:	4b31      	ldr	r3, [pc, #196]	; (800b4e4 <__swsetup_r+0xc8>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	4605      	mov	r5, r0
 800b424:	460c      	mov	r4, r1
 800b426:	b113      	cbz	r3, 800b42e <__swsetup_r+0x12>
 800b428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b42a:	2a00      	cmp	r2, #0
 800b42c:	d03a      	beq.n	800b4a4 <__swsetup_r+0x88>
 800b42e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b432:	b293      	uxth	r3, r2
 800b434:	0718      	lsls	r0, r3, #28
 800b436:	d50c      	bpl.n	800b452 <__swsetup_r+0x36>
 800b438:	6920      	ldr	r0, [r4, #16]
 800b43a:	b1a8      	cbz	r0, 800b468 <__swsetup_r+0x4c>
 800b43c:	f013 0201 	ands.w	r2, r3, #1
 800b440:	d020      	beq.n	800b484 <__swsetup_r+0x68>
 800b442:	6963      	ldr	r3, [r4, #20]
 800b444:	2200      	movs	r2, #0
 800b446:	425b      	negs	r3, r3
 800b448:	61a3      	str	r3, [r4, #24]
 800b44a:	60a2      	str	r2, [r4, #8]
 800b44c:	b300      	cbz	r0, 800b490 <__swsetup_r+0x74>
 800b44e:	2000      	movs	r0, #0
 800b450:	bd38      	pop	{r3, r4, r5, pc}
 800b452:	06d9      	lsls	r1, r3, #27
 800b454:	d53e      	bpl.n	800b4d4 <__swsetup_r+0xb8>
 800b456:	0758      	lsls	r0, r3, #29
 800b458:	d428      	bmi.n	800b4ac <__swsetup_r+0x90>
 800b45a:	6920      	ldr	r0, [r4, #16]
 800b45c:	f042 0308 	orr.w	r3, r2, #8
 800b460:	81a3      	strh	r3, [r4, #12]
 800b462:	b29b      	uxth	r3, r3
 800b464:	2800      	cmp	r0, #0
 800b466:	d1e9      	bne.n	800b43c <__swsetup_r+0x20>
 800b468:	f403 7220 	and.w	r2, r3, #640	; 0x280
 800b46c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800b470:	d0e4      	beq.n	800b43c <__swsetup_r+0x20>
 800b472:	4628      	mov	r0, r5
 800b474:	4621      	mov	r1, r4
 800b476:	f001 fc45 	bl	800cd04 <__smakebuf_r>
 800b47a:	89a3      	ldrh	r3, [r4, #12]
 800b47c:	6920      	ldr	r0, [r4, #16]
 800b47e:	f013 0201 	ands.w	r2, r3, #1
 800b482:	d1de      	bne.n	800b442 <__swsetup_r+0x26>
 800b484:	0799      	lsls	r1, r3, #30
 800b486:	bf58      	it	pl
 800b488:	6962      	ldrpl	r2, [r4, #20]
 800b48a:	60a2      	str	r2, [r4, #8]
 800b48c:	2800      	cmp	r0, #0
 800b48e:	d1de      	bne.n	800b44e <__swsetup_r+0x32>
 800b490:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b494:	061a      	lsls	r2, r3, #24
 800b496:	d5db      	bpl.n	800b450 <__swsetup_r+0x34>
 800b498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b49c:	81a3      	strh	r3, [r4, #12]
 800b49e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4a2:	bd38      	pop	{r3, r4, r5, pc}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f001 f8b3 	bl	800c610 <__sinit>
 800b4aa:	e7c0      	b.n	800b42e <__swsetup_r+0x12>
 800b4ac:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b4ae:	b151      	cbz	r1, 800b4c6 <__swsetup_r+0xaa>
 800b4b0:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800b4b4:	4299      	cmp	r1, r3
 800b4b6:	d004      	beq.n	800b4c2 <__swsetup_r+0xa6>
 800b4b8:	4628      	mov	r0, r5
 800b4ba:	f001 f931 	bl	800c720 <_free_r>
 800b4be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	6323      	str	r3, [r4, #48]	; 0x30
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	6920      	ldr	r0, [r4, #16]
 800b4ca:	6063      	str	r3, [r4, #4]
 800b4cc:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 800b4d0:	6020      	str	r0, [r4, #0]
 800b4d2:	e7c3      	b.n	800b45c <__swsetup_r+0x40>
 800b4d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b4d8:	2309      	movs	r3, #9
 800b4da:	602b      	str	r3, [r5, #0]
 800b4dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4e0:	81a2      	strh	r2, [r4, #12]
 800b4e2:	bd38      	pop	{r3, r4, r5, pc}
 800b4e4:	20000038 	.word	0x20000038

0800b4e8 <quorem>:
 800b4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4ec:	6903      	ldr	r3, [r0, #16]
 800b4ee:	690f      	ldr	r7, [r1, #16]
 800b4f0:	42bb      	cmp	r3, r7
 800b4f2:	b083      	sub	sp, #12
 800b4f4:	f2c0 8086 	blt.w	800b604 <quorem+0x11c>
 800b4f8:	3f01      	subs	r7, #1
 800b4fa:	f101 0914 	add.w	r9, r1, #20
 800b4fe:	f100 0a14 	add.w	sl, r0, #20
 800b502:	f859 2027 	ldr.w	r2, [r9, r7, lsl #2]
 800b506:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
 800b50a:	00bc      	lsls	r4, r7, #2
 800b50c:	3201      	adds	r2, #1
 800b50e:	fbb3 f8f2 	udiv	r8, r3, r2
 800b512:	eb0a 0304 	add.w	r3, sl, r4
 800b516:	9400      	str	r4, [sp, #0]
 800b518:	eb09 0b04 	add.w	fp, r9, r4
 800b51c:	9301      	str	r3, [sp, #4]
 800b51e:	f1b8 0f00 	cmp.w	r8, #0
 800b522:	d038      	beq.n	800b596 <quorem+0xae>
 800b524:	2500      	movs	r5, #0
 800b526:	462e      	mov	r6, r5
 800b528:	46ce      	mov	lr, r9
 800b52a:	46d4      	mov	ip, sl
 800b52c:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b530:	f8dc 3000 	ldr.w	r3, [ip]
 800b534:	b2a2      	uxth	r2, r4
 800b536:	fb08 5502 	mla	r5, r8, r2, r5
 800b53a:	0c22      	lsrs	r2, r4, #16
 800b53c:	0c2c      	lsrs	r4, r5, #16
 800b53e:	fb08 4202 	mla	r2, r8, r2, r4
 800b542:	b2ad      	uxth	r5, r5
 800b544:	1b75      	subs	r5, r6, r5
 800b546:	b296      	uxth	r6, r2
 800b548:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
 800b54c:	fa15 f383 	uxtah	r3, r5, r3
 800b550:	eb06 4623 	add.w	r6, r6, r3, asr #16
 800b554:	b29b      	uxth	r3, r3
 800b556:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800b55a:	45f3      	cmp	fp, lr
 800b55c:	ea4f 4512 	mov.w	r5, r2, lsr #16
 800b560:	f84c 3b04 	str.w	r3, [ip], #4
 800b564:	ea4f 4626 	mov.w	r6, r6, asr #16
 800b568:	d2e0      	bcs.n	800b52c <quorem+0x44>
 800b56a:	9b00      	ldr	r3, [sp, #0]
 800b56c:	f85a 3003 	ldr.w	r3, [sl, r3]
 800b570:	b98b      	cbnz	r3, 800b596 <quorem+0xae>
 800b572:	9a01      	ldr	r2, [sp, #4]
 800b574:	1f13      	subs	r3, r2, #4
 800b576:	459a      	cmp	sl, r3
 800b578:	d20c      	bcs.n	800b594 <quorem+0xac>
 800b57a:	f852 3c04 	ldr.w	r3, [r2, #-4]
 800b57e:	b94b      	cbnz	r3, 800b594 <quorem+0xac>
 800b580:	f1a2 0308 	sub.w	r3, r2, #8
 800b584:	e002      	b.n	800b58c <quorem+0xa4>
 800b586:	681a      	ldr	r2, [r3, #0]
 800b588:	3b04      	subs	r3, #4
 800b58a:	b91a      	cbnz	r2, 800b594 <quorem+0xac>
 800b58c:	459a      	cmp	sl, r3
 800b58e:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 800b592:	d3f8      	bcc.n	800b586 <quorem+0x9e>
 800b594:	6107      	str	r7, [r0, #16]
 800b596:	4604      	mov	r4, r0
 800b598:	f002 f93e 	bl	800d818 <__mcmp>
 800b59c:	2800      	cmp	r0, #0
 800b59e:	db2d      	blt.n	800b5fc <quorem+0x114>
 800b5a0:	f108 0801 	add.w	r8, r8, #1
 800b5a4:	4655      	mov	r5, sl
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	f859 1b04 	ldr.w	r1, [r9], #4
 800b5ac:	6828      	ldr	r0, [r5, #0]
 800b5ae:	b28a      	uxth	r2, r1
 800b5b0:	1a9a      	subs	r2, r3, r2
 800b5b2:	0c0b      	lsrs	r3, r1, #16
 800b5b4:	fa12 f280 	uxtah	r2, r2, r0
 800b5b8:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
 800b5bc:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800b5c0:	b292      	uxth	r2, r2
 800b5c2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b5c6:	45cb      	cmp	fp, r9
 800b5c8:	f845 2b04 	str.w	r2, [r5], #4
 800b5cc:	ea4f 4323 	mov.w	r3, r3, asr #16
 800b5d0:	d2ea      	bcs.n	800b5a8 <quorem+0xc0>
 800b5d2:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
 800b5d6:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
 800b5da:	b97a      	cbnz	r2, 800b5fc <quorem+0x114>
 800b5dc:	1f1a      	subs	r2, r3, #4
 800b5de:	4592      	cmp	sl, r2
 800b5e0:	d20b      	bcs.n	800b5fa <quorem+0x112>
 800b5e2:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800b5e6:	b942      	cbnz	r2, 800b5fa <quorem+0x112>
 800b5e8:	3b08      	subs	r3, #8
 800b5ea:	e002      	b.n	800b5f2 <quorem+0x10a>
 800b5ec:	681a      	ldr	r2, [r3, #0]
 800b5ee:	3b04      	subs	r3, #4
 800b5f0:	b91a      	cbnz	r2, 800b5fa <quorem+0x112>
 800b5f2:	459a      	cmp	sl, r3
 800b5f4:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 800b5f8:	d3f8      	bcc.n	800b5ec <quorem+0x104>
 800b5fa:	6127      	str	r7, [r4, #16]
 800b5fc:	4640      	mov	r0, r8
 800b5fe:	b003      	add	sp, #12
 800b600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b604:	2000      	movs	r0, #0
 800b606:	b003      	add	sp, #12
 800b608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b60c:	0000      	movs	r0, r0
	...

0800b610 <_dtoa_r>:
 800b610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b614:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800b616:	b097      	sub	sp, #92	; 0x5c
 800b618:	4614      	mov	r4, r2
 800b61a:	461d      	mov	r5, r3
 800b61c:	4683      	mov	fp, r0
 800b61e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b622:	b149      	cbz	r1, 800b638 <_dtoa_r+0x28>
 800b624:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b626:	604a      	str	r2, [r1, #4]
 800b628:	2301      	movs	r3, #1
 800b62a:	4093      	lsls	r3, r2
 800b62c:	608b      	str	r3, [r1, #8]
 800b62e:	f001 ff03 	bl	800d438 <_Bfree>
 800b632:	2300      	movs	r3, #0
 800b634:	f8cb 3040 	str.w	r3, [fp, #64]	; 0x40
 800b638:	1e2e      	subs	r6, r5, #0
 800b63a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800b63c:	bfb4      	ite	lt
 800b63e:	2301      	movlt	r3, #1
 800b640:	2300      	movge	r3, #0
 800b642:	6013      	str	r3, [r2, #0]
 800b644:	4b78      	ldr	r3, [pc, #480]	; (800b828 <_dtoa_r+0x218>)
 800b646:	bfbc      	itt	lt
 800b648:	f026 4600 	biclt.w	r6, r6, #2147483648	; 0x80000000
 800b64c:	9603      	strlt	r6, [sp, #12]
 800b64e:	43b3      	bics	r3, r6
 800b650:	f000 80a8 	beq.w	800b7a4 <_dtoa_r+0x194>
 800b654:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b658:	2200      	movs	r2, #0
 800b65a:	4640      	mov	r0, r8
 800b65c:	4649      	mov	r1, r9
 800b65e:	2300      	movs	r3, #0
 800b660:	f7f5 fd52 	bl	8001108 <__aeabi_dcmpeq>
 800b664:	4605      	mov	r5, r0
 800b666:	b178      	cbz	r0, 800b688 <_dtoa_r+0x78>
 800b668:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b66a:	2301      	movs	r3, #1
 800b66c:	6013      	str	r3, [r2, #0]
 800b66e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b670:	2b00      	cmp	r3, #0
 800b672:	f000 80c4 	beq.w	800b7fe <_dtoa_r+0x1ee>
 800b676:	4b6d      	ldr	r3, [pc, #436]	; (800b82c <_dtoa_r+0x21c>)
 800b678:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b67a:	6013      	str	r3, [r2, #0]
 800b67c:	3b01      	subs	r3, #1
 800b67e:	9304      	str	r3, [sp, #16]
 800b680:	9804      	ldr	r0, [sp, #16]
 800b682:	b017      	add	sp, #92	; 0x5c
 800b684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b688:	aa14      	add	r2, sp, #80	; 0x50
 800b68a:	ab15      	add	r3, sp, #84	; 0x54
 800b68c:	e9cd 3200 	strd	r3, r2, [sp]
 800b690:	4658      	mov	r0, fp
 800b692:	4642      	mov	r2, r8
 800b694:	464b      	mov	r3, r9
 800b696:	f002 f951 	bl	800d93c <__d2b>
 800b69a:	0d34      	lsrs	r4, r6, #20
 800b69c:	4682      	mov	sl, r0
 800b69e:	f040 80a3 	bne.w	800b7e8 <_dtoa_r+0x1d8>
 800b6a2:	e9dd 5414 	ldrd	r5, r4, [sp, #80]	; 0x50
 800b6a6:	442c      	add	r4, r5
 800b6a8:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800b6ac:	2b20      	cmp	r3, #32
 800b6ae:	f340 8417 	ble.w	800bee0 <_dtoa_r+0x8d0>
 800b6b2:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800b6b6:	409e      	lsls	r6, r3
 800b6b8:	9b02      	ldr	r3, [sp, #8]
 800b6ba:	f204 4012 	addw	r0, r4, #1042	; 0x412
 800b6be:	fa23 f000 	lsr.w	r0, r3, r0
 800b6c2:	4330      	orrs	r0, r6
 800b6c4:	f7f5 fa3e 	bl	8000b44 <__aeabi_ui2d>
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	4680      	mov	r8, r0
 800b6cc:	3c01      	subs	r4, #1
 800b6ce:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800b6d2:	9312      	str	r3, [sp, #72]	; 0x48
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	4b56      	ldr	r3, [pc, #344]	; (800b830 <_dtoa_r+0x220>)
 800b6d8:	4640      	mov	r0, r8
 800b6da:	4649      	mov	r1, r9
 800b6dc:	f7f5 f8f4 	bl	80008c8 <__aeabi_dsub>
 800b6e0:	a34b      	add	r3, pc, #300	; (adr r3, 800b810 <_dtoa_r+0x200>)
 800b6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e6:	f7f5 faa7 	bl	8000c38 <__aeabi_dmul>
 800b6ea:	a34b      	add	r3, pc, #300	; (adr r3, 800b818 <_dtoa_r+0x208>)
 800b6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f0:	f7f5 f8ec 	bl	80008cc <__adddf3>
 800b6f4:	4606      	mov	r6, r0
 800b6f6:	4620      	mov	r0, r4
 800b6f8:	460f      	mov	r7, r1
 800b6fa:	f7f5 fa33 	bl	8000b64 <__aeabi_i2d>
 800b6fe:	a348      	add	r3, pc, #288	; (adr r3, 800b820 <_dtoa_r+0x210>)
 800b700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b704:	f7f5 fa98 	bl	8000c38 <__aeabi_dmul>
 800b708:	4602      	mov	r2, r0
 800b70a:	460b      	mov	r3, r1
 800b70c:	4630      	mov	r0, r6
 800b70e:	4639      	mov	r1, r7
 800b710:	f7f5 f8dc 	bl	80008cc <__adddf3>
 800b714:	4606      	mov	r6, r0
 800b716:	460f      	mov	r7, r1
 800b718:	f7f5 fd3e 	bl	8001198 <__aeabi_d2iz>
 800b71c:	2200      	movs	r2, #0
 800b71e:	9005      	str	r0, [sp, #20]
 800b720:	2300      	movs	r3, #0
 800b722:	4630      	mov	r0, r6
 800b724:	4639      	mov	r1, r7
 800b726:	f7f5 fcf9 	bl	800111c <__aeabi_dcmplt>
 800b72a:	2800      	cmp	r0, #0
 800b72c:	f040 826e 	bne.w	800bc0c <_dtoa_r+0x5fc>
 800b730:	9e05      	ldr	r6, [sp, #20]
 800b732:	2e16      	cmp	r6, #22
 800b734:	f200 825f 	bhi.w	800bbf6 <_dtoa_r+0x5e6>
 800b738:	4b3e      	ldr	r3, [pc, #248]	; (800b834 <_dtoa_r+0x224>)
 800b73a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b73e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b742:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b746:	f7f5 fd07 	bl	8001158 <__aeabi_dcmpgt>
 800b74a:	2800      	cmp	r0, #0
 800b74c:	f000 83c4 	beq.w	800bed8 <_dtoa_r+0x8c8>
 800b750:	1e73      	subs	r3, r6, #1
 800b752:	9305      	str	r3, [sp, #20]
 800b754:	2300      	movs	r3, #0
 800b756:	930a      	str	r3, [sp, #40]	; 0x28
 800b758:	1b2c      	subs	r4, r5, r4
 800b75a:	9b05      	ldr	r3, [sp, #20]
 800b75c:	f1b4 0801 	subs.w	r8, r4, #1
 800b760:	bf46      	itte	mi
 800b762:	f1c4 0901 	rsbmi	r9, r4, #1
 800b766:	f04f 0800 	movmi.w	r8, #0
 800b76a:	f04f 0900 	movpl.w	r9, #0
 800b76e:	2b00      	cmp	r3, #0
 800b770:	f2c0 8244 	blt.w	800bbfc <_dtoa_r+0x5ec>
 800b774:	4498      	add	r8, r3
 800b776:	9309      	str	r3, [sp, #36]	; 0x24
 800b778:	2300      	movs	r3, #0
 800b77a:	9308      	str	r3, [sp, #32]
 800b77c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b77e:	2b09      	cmp	r3, #9
 800b780:	d860      	bhi.n	800b844 <_dtoa_r+0x234>
 800b782:	2b05      	cmp	r3, #5
 800b784:	f340 83aa 	ble.w	800bedc <_dtoa_r+0x8cc>
 800b788:	3b04      	subs	r3, #4
 800b78a:	9320      	str	r3, [sp, #128]	; 0x80
 800b78c:	2500      	movs	r5, #0
 800b78e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b790:	3b02      	subs	r3, #2
 800b792:	2b03      	cmp	r3, #3
 800b794:	f200 848d 	bhi.w	800c0b2 <_dtoa_r+0xaa2>
 800b798:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b79c:	03a903c9 	.word	0x03a903c9
 800b7a0:	04ea03d3 	.word	0x04ea03d3
 800b7a4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b7a6:	f242 730f 	movw	r3, #9999	; 0x270f
 800b7aa:	6013      	str	r3, [r2, #0]
 800b7ac:	9b02      	ldr	r3, [sp, #8]
 800b7ae:	b97b      	cbnz	r3, 800b7d0 <_dtoa_r+0x1c0>
 800b7b0:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800b7b4:	b966      	cbnz	r6, 800b7d0 <_dtoa_r+0x1c0>
 800b7b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	f000 8612 	beq.w	800c3e2 <_dtoa_r+0xdd2>
 800b7be:	4b1e      	ldr	r3, [pc, #120]	; (800b838 <_dtoa_r+0x228>)
 800b7c0:	9304      	str	r3, [sp, #16]
 800b7c2:	3308      	adds	r3, #8
 800b7c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b7c6:	9804      	ldr	r0, [sp, #16]
 800b7c8:	6013      	str	r3, [r2, #0]
 800b7ca:	b017      	add	sp, #92	; 0x5c
 800b7cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b7d2:	b92b      	cbnz	r3, 800b7e0 <_dtoa_r+0x1d0>
 800b7d4:	4b19      	ldr	r3, [pc, #100]	; (800b83c <_dtoa_r+0x22c>)
 800b7d6:	9304      	str	r3, [sp, #16]
 800b7d8:	9804      	ldr	r0, [sp, #16]
 800b7da:	b017      	add	sp, #92	; 0x5c
 800b7dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7e0:	4b16      	ldr	r3, [pc, #88]	; (800b83c <_dtoa_r+0x22c>)
 800b7e2:	9304      	str	r3, [sp, #16]
 800b7e4:	3303      	adds	r3, #3
 800b7e6:	e7ed      	b.n	800b7c4 <_dtoa_r+0x1b4>
 800b7e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b7ec:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800b7f0:	9512      	str	r5, [sp, #72]	; 0x48
 800b7f2:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b7f6:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 800b7fa:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800b7fc:	e76a      	b.n	800b6d4 <_dtoa_r+0xc4>
 800b7fe:	4b10      	ldr	r3, [pc, #64]	; (800b840 <_dtoa_r+0x230>)
 800b800:	9304      	str	r3, [sp, #16]
 800b802:	9804      	ldr	r0, [sp, #16]
 800b804:	b017      	add	sp, #92	; 0x5c
 800b806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b80a:	bf00      	nop
 800b80c:	f3af 8000 	nop.w
 800b810:	636f4361 	.word	0x636f4361
 800b814:	3fd287a7 	.word	0x3fd287a7
 800b818:	8b60c8b3 	.word	0x8b60c8b3
 800b81c:	3fc68a28 	.word	0x3fc68a28
 800b820:	509f79fb 	.word	0x509f79fb
 800b824:	3fd34413 	.word	0x3fd34413
 800b828:	7ff00000 	.word	0x7ff00000
 800b82c:	0800ea91 	.word	0x0800ea91
 800b830:	3ff80000 	.word	0x3ff80000
 800b834:	0800eb20 	.word	0x0800eb20
 800b838:	0800ead4 	.word	0x0800ead4
 800b83c:	0800eae0 	.word	0x0800eae0
 800b840:	0800ea90 	.word	0x0800ea90
 800b844:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b848:	2501      	movs	r5, #1
 800b84a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b84e:	2300      	movs	r3, #0
 800b850:	9320      	str	r3, [sp, #128]	; 0x80
 800b852:	9321      	str	r3, [sp, #132]	; 0x84
 800b854:	2100      	movs	r1, #0
 800b856:	f8cb 1044 	str.w	r1, [fp, #68]	; 0x44
 800b85a:	940b      	str	r4, [sp, #44]	; 0x2c
 800b85c:	4658      	mov	r0, fp
 800b85e:	f001 fdc5 	bl	800d3ec <_Balloc>
 800b862:	2c0e      	cmp	r4, #14
 800b864:	9004      	str	r0, [sp, #16]
 800b866:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 800b86a:	f200 80f9 	bhi.w	800ba60 <_dtoa_r+0x450>
 800b86e:	2d00      	cmp	r5, #0
 800b870:	f000 80f6 	beq.w	800ba60 <_dtoa_r+0x450>
 800b874:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 800b878:	9905      	ldr	r1, [sp, #20]
 800b87a:	461d      	mov	r5, r3
 800b87c:	4626      	mov	r6, r4
 800b87e:	2900      	cmp	r1, #0
 800b880:	e9cd 560c 	strd	r5, r6, [sp, #48]	; 0x30
 800b884:	f340 83d3 	ble.w	800c02e <_dtoa_r+0xa1e>
 800b888:	4b9a      	ldr	r3, [pc, #616]	; (800baf4 <_dtoa_r+0x4e4>)
 800b88a:	f001 020f 	and.w	r2, r1, #15
 800b88e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b896:	110c      	asrs	r4, r1, #4
 800b898:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b89c:	06e3      	lsls	r3, r4, #27
 800b89e:	f140 8488 	bpl.w	800c1b2 <_dtoa_r+0xba2>
 800b8a2:	4b95      	ldr	r3, [pc, #596]	; (800baf8 <_dtoa_r+0x4e8>)
 800b8a4:	4631      	mov	r1, r6
 800b8a6:	4628      	mov	r0, r5
 800b8a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b8ac:	f7f5 faee 	bl	8000e8c <__aeabi_ddiv>
 800b8b0:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b8b4:	f004 040f 	and.w	r4, r4, #15
 800b8b8:	2603      	movs	r6, #3
 800b8ba:	b17c      	cbz	r4, 800b8dc <_dtoa_r+0x2cc>
 800b8bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8c0:	4d8d      	ldr	r5, [pc, #564]	; (800baf8 <_dtoa_r+0x4e8>)
 800b8c2:	07e7      	lsls	r7, r4, #31
 800b8c4:	d504      	bpl.n	800b8d0 <_dtoa_r+0x2c0>
 800b8c6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b8ca:	3601      	adds	r6, #1
 800b8cc:	f7f5 f9b4 	bl	8000c38 <__aeabi_dmul>
 800b8d0:	1064      	asrs	r4, r4, #1
 800b8d2:	f105 0508 	add.w	r5, r5, #8
 800b8d6:	d1f4      	bne.n	800b8c2 <_dtoa_r+0x2b2>
 800b8d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b8e0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b8e4:	f7f5 fad2 	bl	8000e8c <__aeabi_ddiv>
 800b8e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8ee:	b143      	cbz	r3, 800b902 <_dtoa_r+0x2f2>
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	4b82      	ldr	r3, [pc, #520]	; (800bafc <_dtoa_r+0x4ec>)
 800b8f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8f8:	f7f5 fc10 	bl	800111c <__aeabi_dcmplt>
 800b8fc:	2800      	cmp	r0, #0
 800b8fe:	f040 84eb 	bne.w	800c2d8 <_dtoa_r+0xcc8>
 800b902:	4630      	mov	r0, r6
 800b904:	f7f5 f92e 	bl	8000b64 <__aeabi_i2d>
 800b908:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b90c:	f7f5 f994 	bl	8000c38 <__aeabi_dmul>
 800b910:	4b7b      	ldr	r3, [pc, #492]	; (800bb00 <_dtoa_r+0x4f0>)
 800b912:	2200      	movs	r2, #0
 800b914:	f7f4 ffda 	bl	80008cc <__adddf3>
 800b918:	9b06      	ldr	r3, [sp, #24]
 800b91a:	4606      	mov	r6, r0
 800b91c:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 800b920:	2b00      	cmp	r3, #0
 800b922:	f000 840a 	beq.w	800c13a <_dtoa_r+0xb2a>
 800b926:	9b05      	ldr	r3, [sp, #20]
 800b928:	9313      	str	r3, [sp, #76]	; 0x4c
 800b92a:	9b06      	ldr	r3, [sp, #24]
 800b92c:	930e      	str	r3, [sp, #56]	; 0x38
 800b92e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b932:	f7f5 fc31 	bl	8001198 <__aeabi_d2iz>
 800b936:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b938:	4b6e      	ldr	r3, [pc, #440]	; (800baf4 <_dtoa_r+0x4e4>)
 800b93a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b93e:	e953 3402 	ldrd	r3, r4, [r3, #-8]
 800b942:	f100 0530 	add.w	r5, r0, #48	; 0x30
 800b946:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b94a:	f7f5 f90b 	bl	8000b64 <__aeabi_i2d>
 800b94e:	4602      	mov	r2, r0
 800b950:	460b      	mov	r3, r1
 800b952:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b956:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b95a:	f7f4 ffb5 	bl	80008c8 <__aeabi_dsub>
 800b95e:	9b04      	ldr	r3, [sp, #16]
 800b960:	4606      	mov	r6, r0
 800b962:	9807      	ldr	r0, [sp, #28]
 800b964:	1c5c      	adds	r4, r3, #1
 800b966:	b2ed      	uxtb	r5, r5
 800b968:	460f      	mov	r7, r1
 800b96a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b96e:	2800      	cmp	r0, #0
 800b970:	f000 8445 	beq.w	800c1fe <_dtoa_r+0xbee>
 800b974:	2000      	movs	r0, #0
 800b976:	4963      	ldr	r1, [pc, #396]	; (800bb04 <_dtoa_r+0x4f4>)
 800b978:	f7f5 fa88 	bl	8000e8c <__aeabi_ddiv>
 800b97c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b980:	f7f4 ffa2 	bl	80008c8 <__aeabi_dsub>
 800b984:	9a04      	ldr	r2, [sp, #16]
 800b986:	463b      	mov	r3, r7
 800b988:	7015      	strb	r5, [r2, #0]
 800b98a:	4632      	mov	r2, r6
 800b98c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b990:	f7f5 fbe2 	bl	8001158 <__aeabi_dcmpgt>
 800b994:	2800      	cmp	r0, #0
 800b996:	f040 84ef 	bne.w	800c378 <_dtoa_r+0xd68>
 800b99a:	4632      	mov	r2, r6
 800b99c:	463b      	mov	r3, r7
 800b99e:	2000      	movs	r0, #0
 800b9a0:	4956      	ldr	r1, [pc, #344]	; (800bafc <_dtoa_r+0x4ec>)
 800b9a2:	f7f4 ff91 	bl	80008c8 <__aeabi_dsub>
 800b9a6:	4602      	mov	r2, r0
 800b9a8:	460b      	mov	r3, r1
 800b9aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9ae:	f7f5 fbd3 	bl	8001158 <__aeabi_dcmpgt>
 800b9b2:	2800      	cmp	r0, #0
 800b9b4:	f040 84e5 	bne.w	800c382 <_dtoa_r+0xd72>
 800b9b8:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b9ba:	2901      	cmp	r1, #1
 800b9bc:	d04c      	beq.n	800ba58 <_dtoa_r+0x448>
 800b9be:	9a04      	ldr	r2, [sp, #16]
 800b9c0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b9c4:	4411      	add	r1, r2
 800b9c6:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800b9ca:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b9ce:	f8cd a008 	str.w	sl, [sp, #8]
 800b9d2:	468a      	mov	sl, r1
 800b9d4:	e00c      	b.n	800b9f0 <_dtoa_r+0x3e0>
 800b9d6:	2000      	movs	r0, #0
 800b9d8:	4948      	ldr	r1, [pc, #288]	; (800bafc <_dtoa_r+0x4ec>)
 800b9da:	f7f4 ff75 	bl	80008c8 <__aeabi_dsub>
 800b9de:	4642      	mov	r2, r8
 800b9e0:	464b      	mov	r3, r9
 800b9e2:	f7f5 fb9b 	bl	800111c <__aeabi_dcmplt>
 800b9e6:	2800      	cmp	r0, #0
 800b9e8:	f040 84c9 	bne.w	800c37e <_dtoa_r+0xd6e>
 800b9ec:	4554      	cmp	r4, sl
 800b9ee:	d02d      	beq.n	800ba4c <_dtoa_r+0x43c>
 800b9f0:	4640      	mov	r0, r8
 800b9f2:	4649      	mov	r1, r9
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	4b44      	ldr	r3, [pc, #272]	; (800bb08 <_dtoa_r+0x4f8>)
 800b9f8:	f7f5 f91e 	bl	8000c38 <__aeabi_dmul>
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	4b42      	ldr	r3, [pc, #264]	; (800bb08 <_dtoa_r+0x4f8>)
 800ba00:	4680      	mov	r8, r0
 800ba02:	4689      	mov	r9, r1
 800ba04:	4630      	mov	r0, r6
 800ba06:	4639      	mov	r1, r7
 800ba08:	f7f5 f916 	bl	8000c38 <__aeabi_dmul>
 800ba0c:	460f      	mov	r7, r1
 800ba0e:	4606      	mov	r6, r0
 800ba10:	f7f5 fbc2 	bl	8001198 <__aeabi_d2iz>
 800ba14:	4605      	mov	r5, r0
 800ba16:	f7f5 f8a5 	bl	8000b64 <__aeabi_i2d>
 800ba1a:	4602      	mov	r2, r0
 800ba1c:	460b      	mov	r3, r1
 800ba1e:	4630      	mov	r0, r6
 800ba20:	4639      	mov	r1, r7
 800ba22:	f7f4 ff51 	bl	80008c8 <__aeabi_dsub>
 800ba26:	3530      	adds	r5, #48	; 0x30
 800ba28:	b2ed      	uxtb	r5, r5
 800ba2a:	4642      	mov	r2, r8
 800ba2c:	464b      	mov	r3, r9
 800ba2e:	f804 5b01 	strb.w	r5, [r4], #1
 800ba32:	4606      	mov	r6, r0
 800ba34:	460f      	mov	r7, r1
 800ba36:	f7f5 fb71 	bl	800111c <__aeabi_dcmplt>
 800ba3a:	4632      	mov	r2, r6
 800ba3c:	463b      	mov	r3, r7
 800ba3e:	2800      	cmp	r0, #0
 800ba40:	d0c9      	beq.n	800b9d6 <_dtoa_r+0x3c6>
 800ba42:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ba44:	f8dd a008 	ldr.w	sl, [sp, #8]
 800ba48:	9305      	str	r3, [sp, #20]
 800ba4a:	e219      	b.n	800be80 <_dtoa_r+0x870>
 800ba4c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800ba50:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800ba54:	f8dd a008 	ldr.w	sl, [sp, #8]
 800ba58:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800ba5c:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ba60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	f2c0 80ad 	blt.w	800bbc2 <_dtoa_r+0x5b2>
 800ba68:	9a05      	ldr	r2, [sp, #20]
 800ba6a:	2a0e      	cmp	r2, #14
 800ba6c:	f300 80a9 	bgt.w	800bbc2 <_dtoa_r+0x5b2>
 800ba70:	4b20      	ldr	r3, [pc, #128]	; (800baf4 <_dtoa_r+0x4e4>)
 800ba72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba76:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ba7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	f2c0 82b3 	blt.w	800bfe8 <_dtoa_r+0x9d8>
 800ba82:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ba86:	4642      	mov	r2, r8
 800ba88:	464b      	mov	r3, r9
 800ba8a:	4630      	mov	r0, r6
 800ba8c:	4639      	mov	r1, r7
 800ba8e:	f7f5 f9fd 	bl	8000e8c <__aeabi_ddiv>
 800ba92:	f7f5 fb81 	bl	8001198 <__aeabi_d2iz>
 800ba96:	4605      	mov	r5, r0
 800ba98:	f7f5 f864 	bl	8000b64 <__aeabi_i2d>
 800ba9c:	4642      	mov	r2, r8
 800ba9e:	464b      	mov	r3, r9
 800baa0:	f7f5 f8ca 	bl	8000c38 <__aeabi_dmul>
 800baa4:	4602      	mov	r2, r0
 800baa6:	460b      	mov	r3, r1
 800baa8:	4630      	mov	r0, r6
 800baaa:	4639      	mov	r1, r7
 800baac:	f7f4 ff0c 	bl	80008c8 <__aeabi_dsub>
 800bab0:	9a04      	ldr	r2, [sp, #16]
 800bab2:	f105 0330 	add.w	r3, r5, #48	; 0x30
 800bab6:	7013      	strb	r3, [r2, #0]
 800bab8:	9b06      	ldr	r3, [sp, #24]
 800baba:	2b01      	cmp	r3, #1
 800babc:	4606      	mov	r6, r0
 800babe:	460f      	mov	r7, r1
 800bac0:	f102 0401 	add.w	r4, r2, #1
 800bac4:	d053      	beq.n	800bb6e <_dtoa_r+0x55e>
 800bac6:	2200      	movs	r2, #0
 800bac8:	4b0f      	ldr	r3, [pc, #60]	; (800bb08 <_dtoa_r+0x4f8>)
 800baca:	f7f5 f8b5 	bl	8000c38 <__aeabi_dmul>
 800bace:	2200      	movs	r2, #0
 800bad0:	2300      	movs	r3, #0
 800bad2:	4606      	mov	r6, r0
 800bad4:	460f      	mov	r7, r1
 800bad6:	f7f5 fb17 	bl	8001108 <__aeabi_dcmpeq>
 800bada:	2800      	cmp	r0, #0
 800badc:	f040 81d0 	bne.w	800be80 <_dtoa_r+0x870>
 800bae0:	f8cd a008 	str.w	sl, [sp, #8]
 800bae4:	f8dd a018 	ldr.w	sl, [sp, #24]
 800bae8:	f8cd b018 	str.w	fp, [sp, #24]
 800baec:	f8dd b010 	ldr.w	fp, [sp, #16]
 800baf0:	e017      	b.n	800bb22 <_dtoa_r+0x512>
 800baf2:	bf00      	nop
 800baf4:	0800eb20 	.word	0x0800eb20
 800baf8:	0800eaf8 	.word	0x0800eaf8
 800bafc:	3ff00000 	.word	0x3ff00000
 800bb00:	401c0000 	.word	0x401c0000
 800bb04:	3fe00000 	.word	0x3fe00000
 800bb08:	40240000 	.word	0x40240000
 800bb0c:	f7f5 f894 	bl	8000c38 <__aeabi_dmul>
 800bb10:	2200      	movs	r2, #0
 800bb12:	2300      	movs	r3, #0
 800bb14:	4606      	mov	r6, r0
 800bb16:	460f      	mov	r7, r1
 800bb18:	f7f5 faf6 	bl	8001108 <__aeabi_dcmpeq>
 800bb1c:	2800      	cmp	r0, #0
 800bb1e:	f040 8331 	bne.w	800c184 <_dtoa_r+0xb74>
 800bb22:	4642      	mov	r2, r8
 800bb24:	464b      	mov	r3, r9
 800bb26:	4630      	mov	r0, r6
 800bb28:	4639      	mov	r1, r7
 800bb2a:	f7f5 f9af 	bl	8000e8c <__aeabi_ddiv>
 800bb2e:	f7f5 fb33 	bl	8001198 <__aeabi_d2iz>
 800bb32:	4605      	mov	r5, r0
 800bb34:	f7f5 f816 	bl	8000b64 <__aeabi_i2d>
 800bb38:	4642      	mov	r2, r8
 800bb3a:	464b      	mov	r3, r9
 800bb3c:	f7f5 f87c 	bl	8000c38 <__aeabi_dmul>
 800bb40:	4602      	mov	r2, r0
 800bb42:	460b      	mov	r3, r1
 800bb44:	4630      	mov	r0, r6
 800bb46:	4639      	mov	r1, r7
 800bb48:	f7f4 febe 	bl	80008c8 <__aeabi_dsub>
 800bb4c:	f105 0c30 	add.w	ip, r5, #48	; 0x30
 800bb50:	f804 cb01 	strb.w	ip, [r4], #1
 800bb54:	eba4 0c0b 	sub.w	ip, r4, fp
 800bb58:	45e2      	cmp	sl, ip
 800bb5a:	4606      	mov	r6, r0
 800bb5c:	460f      	mov	r7, r1
 800bb5e:	f04f 0200 	mov.w	r2, #0
 800bb62:	4bb8      	ldr	r3, [pc, #736]	; (800be44 <_dtoa_r+0x834>)
 800bb64:	d1d2      	bne.n	800bb0c <_dtoa_r+0x4fc>
 800bb66:	f8dd a008 	ldr.w	sl, [sp, #8]
 800bb6a:	f8dd b018 	ldr.w	fp, [sp, #24]
 800bb6e:	4632      	mov	r2, r6
 800bb70:	463b      	mov	r3, r7
 800bb72:	4630      	mov	r0, r6
 800bb74:	4639      	mov	r1, r7
 800bb76:	f7f4 fea9 	bl	80008cc <__adddf3>
 800bb7a:	4642      	mov	r2, r8
 800bb7c:	464b      	mov	r3, r9
 800bb7e:	4606      	mov	r6, r0
 800bb80:	460f      	mov	r7, r1
 800bb82:	f7f5 fae9 	bl	8001158 <__aeabi_dcmpgt>
 800bb86:	b958      	cbnz	r0, 800bba0 <_dtoa_r+0x590>
 800bb88:	4642      	mov	r2, r8
 800bb8a:	464b      	mov	r3, r9
 800bb8c:	4630      	mov	r0, r6
 800bb8e:	4639      	mov	r1, r7
 800bb90:	f7f5 faba 	bl	8001108 <__aeabi_dcmpeq>
 800bb94:	2800      	cmp	r0, #0
 800bb96:	f000 8173 	beq.w	800be80 <_dtoa_r+0x870>
 800bb9a:	07eb      	lsls	r3, r5, #31
 800bb9c:	f140 8170 	bpl.w	800be80 <_dtoa_r+0x870>
 800bba0:	f814 5c01 	ldrb.w	r5, [r4, #-1]
 800bba4:	9a04      	ldr	r2, [sp, #16]
 800bba6:	e005      	b.n	800bbb4 <_dtoa_r+0x5a4>
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	f000 831e 	beq.w	800c1ea <_dtoa_r+0xbda>
 800bbae:	f813 5c01 	ldrb.w	r5, [r3, #-1]
 800bbb2:	461c      	mov	r4, r3
 800bbb4:	2d39      	cmp	r5, #57	; 0x39
 800bbb6:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
 800bbba:	d0f5      	beq.n	800bba8 <_dtoa_r+0x598>
 800bbbc:	3501      	adds	r5, #1
 800bbbe:	701d      	strb	r5, [r3, #0]
 800bbc0:	e15e      	b.n	800be80 <_dtoa_r+0x870>
 800bbc2:	9a07      	ldr	r2, [sp, #28]
 800bbc4:	b392      	cbz	r2, 800bc2c <_dtoa_r+0x61c>
 800bbc6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bbc8:	2a01      	cmp	r2, #1
 800bbca:	f340 8202 	ble.w	800bfd2 <_dtoa_r+0x9c2>
 800bbce:	9b06      	ldr	r3, [sp, #24]
 800bbd0:	1e5f      	subs	r7, r3, #1
 800bbd2:	9b08      	ldr	r3, [sp, #32]
 800bbd4:	42bb      	cmp	r3, r7
 800bbd6:	f2c0 82da 	blt.w	800c18e <_dtoa_r+0xb7e>
 800bbda:	1bdf      	subs	r7, r3, r7
 800bbdc:	9b06      	ldr	r3, [sp, #24]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	f2c0 82f9 	blt.w	800c1d6 <_dtoa_r+0xbc6>
 800bbe4:	464c      	mov	r4, r9
 800bbe6:	4498      	add	r8, r3
 800bbe8:	4499      	add	r9, r3
 800bbea:	2101      	movs	r1, #1
 800bbec:	4658      	mov	r0, fp
 800bbee:	f001 fcbd 	bl	800d56c <__i2b>
 800bbf2:	4605      	mov	r5, r0
 800bbf4:	e01d      	b.n	800bc32 <_dtoa_r+0x622>
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	930a      	str	r3, [sp, #40]	; 0x28
 800bbfa:	e5ad      	b.n	800b758 <_dtoa_r+0x148>
 800bbfc:	9b05      	ldr	r3, [sp, #20]
 800bbfe:	eba9 0903 	sub.w	r9, r9, r3
 800bc02:	425b      	negs	r3, r3
 800bc04:	9308      	str	r3, [sp, #32]
 800bc06:	2300      	movs	r3, #0
 800bc08:	9309      	str	r3, [sp, #36]	; 0x24
 800bc0a:	e5b7      	b.n	800b77c <_dtoa_r+0x16c>
 800bc0c:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800bc10:	4640      	mov	r0, r8
 800bc12:	f7f4 ffa7 	bl	8000b64 <__aeabi_i2d>
 800bc16:	4632      	mov	r2, r6
 800bc18:	463b      	mov	r3, r7
 800bc1a:	f7f5 fa75 	bl	8001108 <__aeabi_dcmpeq>
 800bc1e:	2800      	cmp	r0, #0
 800bc20:	f47f ad86 	bne.w	800b730 <_dtoa_r+0x120>
 800bc24:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800bc28:	9305      	str	r3, [sp, #20]
 800bc2a:	e581      	b.n	800b730 <_dtoa_r+0x120>
 800bc2c:	9f08      	ldr	r7, [sp, #32]
 800bc2e:	9d07      	ldr	r5, [sp, #28]
 800bc30:	464c      	mov	r4, r9
 800bc32:	2c00      	cmp	r4, #0
 800bc34:	dd0b      	ble.n	800bc4e <_dtoa_r+0x63e>
 800bc36:	f1b8 0f00 	cmp.w	r8, #0
 800bc3a:	dd08      	ble.n	800bc4e <_dtoa_r+0x63e>
 800bc3c:	4544      	cmp	r4, r8
 800bc3e:	4623      	mov	r3, r4
 800bc40:	bfa8      	it	ge
 800bc42:	4643      	movge	r3, r8
 800bc44:	eba9 0903 	sub.w	r9, r9, r3
 800bc48:	1ae4      	subs	r4, r4, r3
 800bc4a:	eba8 0803 	sub.w	r8, r8, r3
 800bc4e:	9b08      	ldr	r3, [sp, #32]
 800bc50:	b16b      	cbz	r3, 800bc6e <_dtoa_r+0x65e>
 800bc52:	9a07      	ldr	r2, [sp, #28]
 800bc54:	2a00      	cmp	r2, #0
 800bc56:	f000 828e 	beq.w	800c176 <_dtoa_r+0xb66>
 800bc5a:	1bde      	subs	r6, r3, r7
 800bc5c:	2f00      	cmp	r7, #0
 800bc5e:	f040 818e 	bne.w	800bf7e <_dtoa_r+0x96e>
 800bc62:	4651      	mov	r1, sl
 800bc64:	4632      	mov	r2, r6
 800bc66:	4658      	mov	r0, fp
 800bc68:	f001 fd30 	bl	800d6cc <__pow5mult>
 800bc6c:	4682      	mov	sl, r0
 800bc6e:	2101      	movs	r1, #1
 800bc70:	4658      	mov	r0, fp
 800bc72:	f001 fc7b 	bl	800d56c <__i2b>
 800bc76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc78:	4606      	mov	r6, r0
 800bc7a:	2a00      	cmp	r2, #0
 800bc7c:	f040 8118 	bne.w	800beb0 <_dtoa_r+0x8a0>
 800bc80:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800bc82:	2b01      	cmp	r3, #1
 800bc84:	f340 8160 	ble.w	800bf48 <_dtoa_r+0x938>
 800bc88:	2001      	movs	r0, #1
 800bc8a:	4440      	add	r0, r8
 800bc8c:	f010 001f 	ands.w	r0, r0, #31
 800bc90:	f000 8109 	beq.w	800bea6 <_dtoa_r+0x896>
 800bc94:	f1c0 0320 	rsb	r3, r0, #32
 800bc98:	2b04      	cmp	r3, #4
 800bc9a:	f340 83a6 	ble.w	800c3ea <_dtoa_r+0xdda>
 800bc9e:	f1c0 001c 	rsb	r0, r0, #28
 800bca2:	4481      	add	r9, r0
 800bca4:	4404      	add	r4, r0
 800bca6:	4480      	add	r8, r0
 800bca8:	f1b9 0f00 	cmp.w	r9, #0
 800bcac:	dd05      	ble.n	800bcba <_dtoa_r+0x6aa>
 800bcae:	4651      	mov	r1, sl
 800bcb0:	464a      	mov	r2, r9
 800bcb2:	4658      	mov	r0, fp
 800bcb4:	f001 fd5a 	bl	800d76c <__lshift>
 800bcb8:	4682      	mov	sl, r0
 800bcba:	f1b8 0f00 	cmp.w	r8, #0
 800bcbe:	dd05      	ble.n	800bccc <_dtoa_r+0x6bc>
 800bcc0:	4631      	mov	r1, r6
 800bcc2:	4642      	mov	r2, r8
 800bcc4:	4658      	mov	r0, fp
 800bcc6:	f001 fd51 	bl	800d76c <__lshift>
 800bcca:	4606      	mov	r6, r0
 800bccc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d173      	bne.n	800bdba <_dtoa_r+0x7aa>
 800bcd2:	9b06      	ldr	r3, [sp, #24]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	f340 8209 	ble.w	800c0ec <_dtoa_r+0xadc>
 800bcda:	9b07      	ldr	r3, [sp, #28]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	f000 8085 	beq.w	800bdec <_dtoa_r+0x7dc>
 800bce2:	2c00      	cmp	r4, #0
 800bce4:	f300 8160 	bgt.w	800bfa8 <_dtoa_r+0x998>
 800bce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	f040 81c8 	bne.w	800c080 <_dtoa_r+0xa70>
 800bcf0:	46a8      	mov	r8, r5
 800bcf2:	9a02      	ldr	r2, [sp, #8]
 800bcf4:	9f04      	ldr	r7, [sp, #16]
 800bcf6:	f002 0201 	and.w	r2, r2, #1
 800bcfa:	9209      	str	r2, [sp, #36]	; 0x24
 800bcfc:	9a06      	ldr	r2, [sp, #24]
 800bcfe:	1e7b      	subs	r3, r7, #1
 800bd00:	441a      	add	r2, r3
 800bd02:	9207      	str	r2, [sp, #28]
 800bd04:	4631      	mov	r1, r6
 800bd06:	4650      	mov	r0, sl
 800bd08:	f7ff fbee 	bl	800b4e8 <quorem>
 800bd0c:	4629      	mov	r1, r5
 800bd0e:	4681      	mov	r9, r0
 800bd10:	9008      	str	r0, [sp, #32]
 800bd12:	4650      	mov	r0, sl
 800bd14:	f001 fd80 	bl	800d818 <__mcmp>
 800bd18:	4631      	mov	r1, r6
 800bd1a:	9002      	str	r0, [sp, #8]
 800bd1c:	4642      	mov	r2, r8
 800bd1e:	4658      	mov	r0, fp
 800bd20:	f001 fd96 	bl	800d850 <__mdiff>
 800bd24:	68c3      	ldr	r3, [r0, #12]
 800bd26:	4604      	mov	r4, r0
 800bd28:	f109 0930 	add.w	r9, r9, #48	; 0x30
 800bd2c:	4601      	mov	r1, r0
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	f040 81d7 	bne.w	800c0e2 <_dtoa_r+0xad2>
 800bd34:	4650      	mov	r0, sl
 800bd36:	f001 fd6f 	bl	800d818 <__mcmp>
 800bd3a:	4621      	mov	r1, r4
 800bd3c:	9006      	str	r0, [sp, #24]
 800bd3e:	4658      	mov	r0, fp
 800bd40:	f001 fb7a 	bl	800d438 <_Bfree>
 800bd44:	9b06      	ldr	r3, [sp, #24]
 800bd46:	b933      	cbnz	r3, 800bd56 <_dtoa_r+0x746>
 800bd48:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bd4a:	b922      	cbnz	r2, 800bd56 <_dtoa_r+0x746>
 800bd4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	f000 831b 	beq.w	800c38a <_dtoa_r+0xd7a>
 800bd54:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800bd56:	9a02      	ldr	r2, [sp, #8]
 800bd58:	2a00      	cmp	r2, #0
 800bd5a:	f2c0 8220 	blt.w	800c19e <_dtoa_r+0xb8e>
 800bd5e:	d105      	bne.n	800bd6c <_dtoa_r+0x75c>
 800bd60:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bd62:	b91a      	cbnz	r2, 800bd6c <_dtoa_r+0x75c>
 800bd64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd66:	2a00      	cmp	r2, #0
 800bd68:	f000 8219 	beq.w	800c19e <_dtoa_r+0xb8e>
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	f107 0401 	add.w	r4, r7, #1
 800bd72:	f300 8225 	bgt.w	800c1c0 <_dtoa_r+0xbb0>
 800bd76:	9b07      	ldr	r3, [sp, #28]
 800bd78:	f887 9000 	strb.w	r9, [r7]
 800bd7c:	42bb      	cmp	r3, r7
 800bd7e:	f000 822e 	beq.w	800c1de <_dtoa_r+0xbce>
 800bd82:	4651      	mov	r1, sl
 800bd84:	2300      	movs	r3, #0
 800bd86:	220a      	movs	r2, #10
 800bd88:	4658      	mov	r0, fp
 800bd8a:	f001 fb5f 	bl	800d44c <__multadd>
 800bd8e:	4545      	cmp	r5, r8
 800bd90:	4682      	mov	sl, r0
 800bd92:	4629      	mov	r1, r5
 800bd94:	f04f 0300 	mov.w	r3, #0
 800bd98:	f04f 020a 	mov.w	r2, #10
 800bd9c:	4658      	mov	r0, fp
 800bd9e:	f000 819a 	beq.w	800c0d6 <_dtoa_r+0xac6>
 800bda2:	f001 fb53 	bl	800d44c <__multadd>
 800bda6:	4641      	mov	r1, r8
 800bda8:	4605      	mov	r5, r0
 800bdaa:	2300      	movs	r3, #0
 800bdac:	220a      	movs	r2, #10
 800bdae:	4658      	mov	r0, fp
 800bdb0:	f001 fb4c 	bl	800d44c <__multadd>
 800bdb4:	4627      	mov	r7, r4
 800bdb6:	4680      	mov	r8, r0
 800bdb8:	e7a4      	b.n	800bd04 <_dtoa_r+0x6f4>
 800bdba:	4631      	mov	r1, r6
 800bdbc:	4650      	mov	r0, sl
 800bdbe:	f001 fd2b 	bl	800d818 <__mcmp>
 800bdc2:	2800      	cmp	r0, #0
 800bdc4:	da85      	bge.n	800bcd2 <_dtoa_r+0x6c2>
 800bdc6:	9f05      	ldr	r7, [sp, #20]
 800bdc8:	4651      	mov	r1, sl
 800bdca:	2300      	movs	r3, #0
 800bdcc:	220a      	movs	r2, #10
 800bdce:	4658      	mov	r0, fp
 800bdd0:	3f01      	subs	r7, #1
 800bdd2:	9705      	str	r7, [sp, #20]
 800bdd4:	f001 fb3a 	bl	800d44c <__multadd>
 800bdd8:	9b07      	ldr	r3, [sp, #28]
 800bdda:	4682      	mov	sl, r0
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	f040 82e4 	bne.w	800c3aa <_dtoa_r+0xd9a>
 800bde2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	f340 82ec 	ble.w	800c3c2 <_dtoa_r+0xdb2>
 800bdea:	9306      	str	r3, [sp, #24]
 800bdec:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800bdf0:	9f06      	ldr	r7, [sp, #24]
 800bdf2:	4644      	mov	r4, r8
 800bdf4:	e002      	b.n	800bdfc <_dtoa_r+0x7ec>
 800bdf6:	f001 fb29 	bl	800d44c <__multadd>
 800bdfa:	4682      	mov	sl, r0
 800bdfc:	4631      	mov	r1, r6
 800bdfe:	4650      	mov	r0, sl
 800be00:	f7ff fb72 	bl	800b4e8 <quorem>
 800be04:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800be08:	f804 9b01 	strb.w	r9, [r4], #1
 800be0c:	eba4 0308 	sub.w	r3, r4, r8
 800be10:	429f      	cmp	r7, r3
 800be12:	f04f 020a 	mov.w	r2, #10
 800be16:	f04f 0300 	mov.w	r3, #0
 800be1a:	4651      	mov	r1, sl
 800be1c:	4658      	mov	r0, fp
 800be1e:	dcea      	bgt.n	800bdf6 <_dtoa_r+0x7e6>
 800be20:	2300      	movs	r3, #0
 800be22:	9302      	str	r3, [sp, #8]
 800be24:	4651      	mov	r1, sl
 800be26:	2201      	movs	r2, #1
 800be28:	4658      	mov	r0, fp
 800be2a:	f001 fc9f 	bl	800d76c <__lshift>
 800be2e:	4631      	mov	r1, r6
 800be30:	4682      	mov	sl, r0
 800be32:	f001 fcf1 	bl	800d818 <__mcmp>
 800be36:	2800      	cmp	r0, #0
 800be38:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 800be3c:	f340 80bb 	ble.w	800bfb6 <_dtoa_r+0x9a6>
 800be40:	9904      	ldr	r1, [sp, #16]
 800be42:	e007      	b.n	800be54 <_dtoa_r+0x844>
 800be44:	40240000 	.word	0x40240000
 800be48:	4299      	cmp	r1, r3
 800be4a:	f000 815c 	beq.w	800c106 <_dtoa_r+0xaf6>
 800be4e:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 800be52:	461c      	mov	r4, r3
 800be54:	2a39      	cmp	r2, #57	; 0x39
 800be56:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
 800be5a:	d0f5      	beq.n	800be48 <_dtoa_r+0x838>
 800be5c:	3201      	adds	r2, #1
 800be5e:	701a      	strb	r2, [r3, #0]
 800be60:	4631      	mov	r1, r6
 800be62:	4658      	mov	r0, fp
 800be64:	f001 fae8 	bl	800d438 <_Bfree>
 800be68:	b155      	cbz	r5, 800be80 <_dtoa_r+0x870>
 800be6a:	9902      	ldr	r1, [sp, #8]
 800be6c:	b121      	cbz	r1, 800be78 <_dtoa_r+0x868>
 800be6e:	42a9      	cmp	r1, r5
 800be70:	d002      	beq.n	800be78 <_dtoa_r+0x868>
 800be72:	4658      	mov	r0, fp
 800be74:	f001 fae0 	bl	800d438 <_Bfree>
 800be78:	4629      	mov	r1, r5
 800be7a:	4658      	mov	r0, fp
 800be7c:	f001 fadc 	bl	800d438 <_Bfree>
 800be80:	4651      	mov	r1, sl
 800be82:	4658      	mov	r0, fp
 800be84:	f001 fad8 	bl	800d438 <_Bfree>
 800be88:	2200      	movs	r2, #0
 800be8a:	9b05      	ldr	r3, [sp, #20]
 800be8c:	7022      	strb	r2, [r4, #0]
 800be8e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800be90:	3301      	adds	r3, #1
 800be92:	6013      	str	r3, [r2, #0]
 800be94:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800be96:	2b00      	cmp	r3, #0
 800be98:	f43f abf2 	beq.w	800b680 <_dtoa_r+0x70>
 800be9c:	9804      	ldr	r0, [sp, #16]
 800be9e:	601c      	str	r4, [r3, #0]
 800bea0:	b017      	add	sp, #92	; 0x5c
 800bea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bea6:	201c      	movs	r0, #28
 800bea8:	4481      	add	r9, r0
 800beaa:	4404      	add	r4, r0
 800beac:	4480      	add	r8, r0
 800beae:	e6fb      	b.n	800bca8 <_dtoa_r+0x698>
 800beb0:	4601      	mov	r1, r0
 800beb2:	4658      	mov	r0, fp
 800beb4:	f001 fc0a 	bl	800d6cc <__pow5mult>
 800beb8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800beba:	2b01      	cmp	r3, #1
 800bebc:	4606      	mov	r6, r0
 800bebe:	f340 80f3 	ble.w	800c0a8 <_dtoa_r+0xa98>
 800bec2:	2300      	movs	r3, #0
 800bec4:	9309      	str	r3, [sp, #36]	; 0x24
 800bec6:	6933      	ldr	r3, [r6, #16]
 800bec8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800becc:	6918      	ldr	r0, [r3, #16]
 800bece:	f001 fafd 	bl	800d4cc <__hi0bits>
 800bed2:	f1c0 0020 	rsb	r0, r0, #32
 800bed6:	e6d8      	b.n	800bc8a <_dtoa_r+0x67a>
 800bed8:	900a      	str	r0, [sp, #40]	; 0x28
 800beda:	e43d      	b.n	800b758 <_dtoa_r+0x148>
 800bedc:	2501      	movs	r5, #1
 800bede:	e456      	b.n	800b78e <_dtoa_r+0x17e>
 800bee0:	f1c3 0620 	rsb	r6, r3, #32
 800bee4:	9b02      	ldr	r3, [sp, #8]
 800bee6:	fa03 f006 	lsl.w	r0, r3, r6
 800beea:	f7ff bbeb 	b.w	800b6c4 <_dtoa_r+0xb4>
 800beee:	2300      	movs	r3, #0
 800bef0:	9307      	str	r3, [sp, #28]
 800bef2:	9b05      	ldr	r3, [sp, #20]
 800bef4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bef6:	4413      	add	r3, r2
 800bef8:	930b      	str	r3, [sp, #44]	; 0x2c
 800befa:	3301      	adds	r3, #1
 800befc:	2b01      	cmp	r3, #1
 800befe:	461e      	mov	r6, r3
 800bf00:	9306      	str	r3, [sp, #24]
 800bf02:	bfb8      	it	lt
 800bf04:	2601      	movlt	r6, #1
 800bf06:	2100      	movs	r1, #0
 800bf08:	2e17      	cmp	r6, #23
 800bf0a:	f8cb 1044 	str.w	r1, [fp, #68]	; 0x44
 800bf0e:	9c06      	ldr	r4, [sp, #24]
 800bf10:	f77f aca4 	ble.w	800b85c <_dtoa_r+0x24c>
 800bf14:	2201      	movs	r2, #1
 800bf16:	2304      	movs	r3, #4
 800bf18:	005b      	lsls	r3, r3, #1
 800bf1a:	f103 0014 	add.w	r0, r3, #20
 800bf1e:	42b0      	cmp	r0, r6
 800bf20:	4611      	mov	r1, r2
 800bf22:	f102 0201 	add.w	r2, r2, #1
 800bf26:	d9f7      	bls.n	800bf18 <_dtoa_r+0x908>
 800bf28:	f8cb 1044 	str.w	r1, [fp, #68]	; 0x44
 800bf2c:	e496      	b.n	800b85c <_dtoa_r+0x24c>
 800bf2e:	2300      	movs	r3, #0
 800bf30:	9307      	str	r3, [sp, #28]
 800bf32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	f340 80ed 	ble.w	800c114 <_dtoa_r+0xb04>
 800bf3a:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf3c:	9306      	str	r3, [sp, #24]
 800bf3e:	461e      	mov	r6, r3
 800bf40:	e7e1      	b.n	800bf06 <_dtoa_r+0x8f6>
 800bf42:	2301      	movs	r3, #1
 800bf44:	9307      	str	r3, [sp, #28]
 800bf46:	e7f4      	b.n	800bf32 <_dtoa_r+0x922>
 800bf48:	9b02      	ldr	r3, [sp, #8]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	f47f ae9c 	bne.w	800bc88 <_dtoa_r+0x678>
 800bf50:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800bf54:	f3c2 0313 	ubfx	r3, r2, #0, #20
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	f040 8199 	bne.w	800c290 <_dtoa_r+0xc80>
 800bf5e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800bf62:	0d1b      	lsrs	r3, r3, #20
 800bf64:	051b      	lsls	r3, r3, #20
 800bf66:	b123      	cbz	r3, 800bf72 <_dtoa_r+0x962>
 800bf68:	f109 0901 	add.w	r9, r9, #1
 800bf6c:	f108 0801 	add.w	r8, r8, #1
 800bf70:	2301      	movs	r3, #1
 800bf72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf74:	9309      	str	r3, [sp, #36]	; 0x24
 800bf76:	2a00      	cmp	r2, #0
 800bf78:	f43f ae86 	beq.w	800bc88 <_dtoa_r+0x678>
 800bf7c:	e7a3      	b.n	800bec6 <_dtoa_r+0x8b6>
 800bf7e:	463a      	mov	r2, r7
 800bf80:	4629      	mov	r1, r5
 800bf82:	4658      	mov	r0, fp
 800bf84:	f001 fba2 	bl	800d6cc <__pow5mult>
 800bf88:	4652      	mov	r2, sl
 800bf8a:	4601      	mov	r1, r0
 800bf8c:	4605      	mov	r5, r0
 800bf8e:	4658      	mov	r0, fp
 800bf90:	f001 faf6 	bl	800d580 <__multiply>
 800bf94:	4651      	mov	r1, sl
 800bf96:	4607      	mov	r7, r0
 800bf98:	4658      	mov	r0, fp
 800bf9a:	f001 fa4d 	bl	800d438 <_Bfree>
 800bf9e:	46ba      	mov	sl, r7
 800bfa0:	2e00      	cmp	r6, #0
 800bfa2:	f43f ae64 	beq.w	800bc6e <_dtoa_r+0x65e>
 800bfa6:	e65c      	b.n	800bc62 <_dtoa_r+0x652>
 800bfa8:	4629      	mov	r1, r5
 800bfaa:	4622      	mov	r2, r4
 800bfac:	4658      	mov	r0, fp
 800bfae:	f001 fbdd 	bl	800d76c <__lshift>
 800bfb2:	4605      	mov	r5, r0
 800bfb4:	e698      	b.n	800bce8 <_dtoa_r+0x6d8>
 800bfb6:	d107      	bne.n	800bfc8 <_dtoa_r+0x9b8>
 800bfb8:	f019 0f01 	tst.w	r9, #1
 800bfbc:	f47f af40 	bne.w	800be40 <_dtoa_r+0x830>
 800bfc0:	e002      	b.n	800bfc8 <_dtoa_r+0x9b8>
 800bfc2:	f814 2c02 	ldrb.w	r2, [r4, #-2]
 800bfc6:	461c      	mov	r4, r3
 800bfc8:	2a30      	cmp	r2, #48	; 0x30
 800bfca:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
 800bfce:	d0f8      	beq.n	800bfc2 <_dtoa_r+0x9b2>
 800bfd0:	e746      	b.n	800be60 <_dtoa_r+0x850>
 800bfd2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bfd4:	2a00      	cmp	r2, #0
 800bfd6:	f000 8153 	beq.w	800c280 <_dtoa_r+0xc70>
 800bfda:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bfde:	464c      	mov	r4, r9
 800bfe0:	4498      	add	r8, r3
 800bfe2:	4499      	add	r9, r3
 800bfe4:	9f08      	ldr	r7, [sp, #32]
 800bfe6:	e600      	b.n	800bbea <_dtoa_r+0x5da>
 800bfe8:	9b06      	ldr	r3, [sp, #24]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	f73f ad49 	bgt.w	800ba82 <_dtoa_r+0x472>
 800bff0:	f040 80bb 	bne.w	800c16a <_dtoa_r+0xb5a>
 800bff4:	2200      	movs	r2, #0
 800bff6:	4bb2      	ldr	r3, [pc, #712]	; (800c2c0 <_dtoa_r+0xcb0>)
 800bff8:	4640      	mov	r0, r8
 800bffa:	4649      	mov	r1, r9
 800bffc:	f7f4 fe1c 	bl	8000c38 <__aeabi_dmul>
 800c000:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c004:	f7f5 f89e 	bl	8001144 <__aeabi_dcmpge>
 800c008:	9e06      	ldr	r6, [sp, #24]
 800c00a:	4635      	mov	r5, r6
 800c00c:	2800      	cmp	r0, #0
 800c00e:	d175      	bne.n	800c0fc <_dtoa_r+0xaec>
 800c010:	9a05      	ldr	r2, [sp, #20]
 800c012:	3201      	adds	r2, #1
 800c014:	9205      	str	r2, [sp, #20]
 800c016:	9a04      	ldr	r2, [sp, #16]
 800c018:	2331      	movs	r3, #49	; 0x31
 800c01a:	7013      	strb	r3, [r2, #0]
 800c01c:	1c54      	adds	r4, r2, #1
 800c01e:	4631      	mov	r1, r6
 800c020:	4658      	mov	r0, fp
 800c022:	f001 fa09 	bl	800d438 <_Bfree>
 800c026:	2d00      	cmp	r5, #0
 800c028:	f47f af26 	bne.w	800be78 <_dtoa_r+0x868>
 800c02c:	e728      	b.n	800be80 <_dtoa_r+0x870>
 800c02e:	f000 813f 	beq.w	800c2b0 <_dtoa_r+0xca0>
 800c032:	9b05      	ldr	r3, [sp, #20]
 800c034:	425c      	negs	r4, r3
 800c036:	4ba3      	ldr	r3, [pc, #652]	; (800c2c4 <_dtoa_r+0xcb4>)
 800c038:	f004 020f 	and.w	r2, r4, #15
 800c03c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c044:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c048:	f7f4 fdf6 	bl	8000c38 <__aeabi_dmul>
 800c04c:	1124      	asrs	r4, r4, #4
 800c04e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c052:	f000 81bb 	beq.w	800c3cc <_dtoa_r+0xdbc>
 800c056:	4d9c      	ldr	r5, [pc, #624]	; (800c2c8 <_dtoa_r+0xcb8>)
 800c058:	2300      	movs	r3, #0
 800c05a:	2602      	movs	r6, #2
 800c05c:	07e2      	lsls	r2, r4, #31
 800c05e:	d505      	bpl.n	800c06c <_dtoa_r+0xa5c>
 800c060:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c064:	f7f4 fde8 	bl	8000c38 <__aeabi_dmul>
 800c068:	3601      	adds	r6, #1
 800c06a:	2301      	movs	r3, #1
 800c06c:	1064      	asrs	r4, r4, #1
 800c06e:	f105 0508 	add.w	r5, r5, #8
 800c072:	d1f3      	bne.n	800c05c <_dtoa_r+0xa4c>
 800c074:	2b00      	cmp	r3, #0
 800c076:	f43f ac39 	beq.w	800b8ec <_dtoa_r+0x2dc>
 800c07a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c07e:	e435      	b.n	800b8ec <_dtoa_r+0x2dc>
 800c080:	6869      	ldr	r1, [r5, #4]
 800c082:	4658      	mov	r0, fp
 800c084:	f001 f9b2 	bl	800d3ec <_Balloc>
 800c088:	692b      	ldr	r3, [r5, #16]
 800c08a:	3302      	adds	r3, #2
 800c08c:	009a      	lsls	r2, r3, #2
 800c08e:	4604      	mov	r4, r0
 800c090:	f105 010c 	add.w	r1, r5, #12
 800c094:	300c      	adds	r0, #12
 800c096:	f7f4 fab9 	bl	800060c <memcpy>
 800c09a:	4621      	mov	r1, r4
 800c09c:	2201      	movs	r2, #1
 800c09e:	4658      	mov	r0, fp
 800c0a0:	f001 fb64 	bl	800d76c <__lshift>
 800c0a4:	4680      	mov	r8, r0
 800c0a6:	e624      	b.n	800bcf2 <_dtoa_r+0x6e2>
 800c0a8:	9b02      	ldr	r3, [sp, #8]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	f43f af50 	beq.w	800bf50 <_dtoa_r+0x940>
 800c0b0:	e707      	b.n	800bec2 <_dtoa_r+0x8b2>
 800c0b2:	2400      	movs	r4, #0
 800c0b4:	f8cb 4044 	str.w	r4, [fp, #68]	; 0x44
 800c0b8:	4621      	mov	r1, r4
 800c0ba:	4658      	mov	r0, fp
 800c0bc:	f001 f996 	bl	800d3ec <_Balloc>
 800c0c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c0c4:	930b      	str	r3, [sp, #44]	; 0x2c
 800c0c6:	9306      	str	r3, [sp, #24]
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	9004      	str	r0, [sp, #16]
 800c0cc:	9421      	str	r4, [sp, #132]	; 0x84
 800c0ce:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 800c0d2:	9307      	str	r3, [sp, #28]
 800c0d4:	e4c4      	b.n	800ba60 <_dtoa_r+0x450>
 800c0d6:	f001 f9b9 	bl	800d44c <__multadd>
 800c0da:	4627      	mov	r7, r4
 800c0dc:	4605      	mov	r5, r0
 800c0de:	4680      	mov	r8, r0
 800c0e0:	e610      	b.n	800bd04 <_dtoa_r+0x6f4>
 800c0e2:	4658      	mov	r0, fp
 800c0e4:	f001 f9a8 	bl	800d438 <_Bfree>
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	e634      	b.n	800bd56 <_dtoa_r+0x746>
 800c0ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c0ee:	2b02      	cmp	r3, #2
 800c0f0:	f77f adf3 	ble.w	800bcda <_dtoa_r+0x6ca>
 800c0f4:	9b06      	ldr	r3, [sp, #24]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	f000 80cc 	beq.w	800c294 <_dtoa_r+0xc84>
 800c0fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c0fe:	9c04      	ldr	r4, [sp, #16]
 800c100:	43db      	mvns	r3, r3
 800c102:	9305      	str	r3, [sp, #20]
 800c104:	e78b      	b.n	800c01e <_dtoa_r+0xa0e>
 800c106:	9a05      	ldr	r2, [sp, #20]
 800c108:	3201      	adds	r2, #1
 800c10a:	9205      	str	r2, [sp, #20]
 800c10c:	9a04      	ldr	r2, [sp, #16]
 800c10e:	2331      	movs	r3, #49	; 0x31
 800c110:	7013      	strb	r3, [r2, #0]
 800c112:	e6a5      	b.n	800be60 <_dtoa_r+0x850>
 800c114:	2401      	movs	r4, #1
 800c116:	9421      	str	r4, [sp, #132]	; 0x84
 800c118:	9406      	str	r4, [sp, #24]
 800c11a:	f7ff bb9b 	b.w	800b854 <_dtoa_r+0x244>
 800c11e:	4630      	mov	r0, r6
 800c120:	f7f4 fd20 	bl	8000b64 <__aeabi_i2d>
 800c124:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c128:	f7f4 fd86 	bl	8000c38 <__aeabi_dmul>
 800c12c:	2200      	movs	r2, #0
 800c12e:	4b67      	ldr	r3, [pc, #412]	; (800c2cc <_dtoa_r+0xcbc>)
 800c130:	f7f4 fbcc 	bl	80008cc <__adddf3>
 800c134:	4606      	mov	r6, r0
 800c136:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 800c13a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c13e:	2200      	movs	r2, #0
 800c140:	4b5f      	ldr	r3, [pc, #380]	; (800c2c0 <_dtoa_r+0xcb0>)
 800c142:	f7f4 fbc1 	bl	80008c8 <__aeabi_dsub>
 800c146:	4632      	mov	r2, r6
 800c148:	463b      	mov	r3, r7
 800c14a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c14e:	f7f5 f803 	bl	8001158 <__aeabi_dcmpgt>
 800c152:	2800      	cmp	r0, #0
 800c154:	d146      	bne.n	800c1e4 <_dtoa_r+0xbd4>
 800c156:	4632      	mov	r2, r6
 800c158:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c15c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c160:	f7f4 ffdc 	bl	800111c <__aeabi_dcmplt>
 800c164:	2800      	cmp	r0, #0
 800c166:	f43f ac77 	beq.w	800ba58 <_dtoa_r+0x448>
 800c16a:	2600      	movs	r6, #0
 800c16c:	4635      	mov	r5, r6
 800c16e:	e7c5      	b.n	800c0fc <_dtoa_r+0xaec>
 800c170:	2301      	movs	r3, #1
 800c172:	9307      	str	r3, [sp, #28]
 800c174:	e6bd      	b.n	800bef2 <_dtoa_r+0x8e2>
 800c176:	4651      	mov	r1, sl
 800c178:	9a08      	ldr	r2, [sp, #32]
 800c17a:	4658      	mov	r0, fp
 800c17c:	f001 faa6 	bl	800d6cc <__pow5mult>
 800c180:	4682      	mov	sl, r0
 800c182:	e574      	b.n	800bc6e <_dtoa_r+0x65e>
 800c184:	f8dd a008 	ldr.w	sl, [sp, #8]
 800c188:	f8dd b018 	ldr.w	fp, [sp, #24]
 800c18c:	e678      	b.n	800be80 <_dtoa_r+0x870>
 800c18e:	9b08      	ldr	r3, [sp, #32]
 800c190:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c192:	1afb      	subs	r3, r7, r3
 800c194:	441a      	add	r2, r3
 800c196:	e9cd 7208 	strd	r7, r2, [sp, #32]
 800c19a:	2700      	movs	r7, #0
 800c19c:	e51e      	b.n	800bbdc <_dtoa_r+0x5cc>
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	f107 0401 	add.w	r4, r7, #1
 800c1a4:	f300 80bc 	bgt.w	800c320 <_dtoa_r+0xd10>
 800c1a8:	9502      	str	r5, [sp, #8]
 800c1aa:	f887 9000 	strb.w	r9, [r7]
 800c1ae:	4645      	mov	r5, r8
 800c1b0:	e656      	b.n	800be60 <_dtoa_r+0x850>
 800c1b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c1b6:	2602      	movs	r6, #2
 800c1b8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c1bc:	f7ff bb7d 	b.w	800b8ba <_dtoa_r+0x2aa>
 800c1c0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c1c4:	f000 80be 	beq.w	800c344 <_dtoa_r+0xd34>
 800c1c8:	f109 0901 	add.w	r9, r9, #1
 800c1cc:	9502      	str	r5, [sp, #8]
 800c1ce:	f887 9000 	strb.w	r9, [r7]
 800c1d2:	4645      	mov	r5, r8
 800c1d4:	e644      	b.n	800be60 <_dtoa_r+0x850>
 800c1d6:	9b06      	ldr	r3, [sp, #24]
 800c1d8:	eba9 0403 	sub.w	r4, r9, r3
 800c1dc:	e505      	b.n	800bbea <_dtoa_r+0x5da>
 800c1de:	9502      	str	r5, [sp, #8]
 800c1e0:	4645      	mov	r5, r8
 800c1e2:	e61f      	b.n	800be24 <_dtoa_r+0x814>
 800c1e4:	2600      	movs	r6, #0
 800c1e6:	4635      	mov	r5, r6
 800c1e8:	e712      	b.n	800c010 <_dtoa_r+0xa00>
 800c1ea:	9a04      	ldr	r2, [sp, #16]
 800c1ec:	2330      	movs	r3, #48	; 0x30
 800c1ee:	7013      	strb	r3, [r2, #0]
 800c1f0:	9b05      	ldr	r3, [sp, #20]
 800c1f2:	f814 5c01 	ldrb.w	r5, [r4, #-1]
 800c1f6:	3301      	adds	r3, #1
 800c1f8:	9305      	str	r3, [sp, #20]
 800c1fa:	4613      	mov	r3, r2
 800c1fc:	e4de      	b.n	800bbbc <_dtoa_r+0x5ac>
 800c1fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c202:	f7f4 fd19 	bl	8000c38 <__aeabi_dmul>
 800c206:	9b04      	ldr	r3, [sp, #16]
 800c208:	701d      	strb	r5, [r3, #0]
 800c20a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c20c:	2b01      	cmp	r3, #1
 800c20e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c212:	d023      	beq.n	800c25c <_dtoa_r+0xc4c>
 800c214:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c216:	9a04      	ldr	r2, [sp, #16]
 800c218:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c21c:	4413      	add	r3, r2
 800c21e:	46c1      	mov	r9, r8
 800c220:	4698      	mov	r8, r3
 800c222:	2200      	movs	r2, #0
 800c224:	4b2a      	ldr	r3, [pc, #168]	; (800c2d0 <_dtoa_r+0xcc0>)
 800c226:	4630      	mov	r0, r6
 800c228:	4639      	mov	r1, r7
 800c22a:	f7f4 fd05 	bl	8000c38 <__aeabi_dmul>
 800c22e:	460f      	mov	r7, r1
 800c230:	4606      	mov	r6, r0
 800c232:	f7f4 ffb1 	bl	8001198 <__aeabi_d2iz>
 800c236:	4605      	mov	r5, r0
 800c238:	f7f4 fc94 	bl	8000b64 <__aeabi_i2d>
 800c23c:	3530      	adds	r5, #48	; 0x30
 800c23e:	4602      	mov	r2, r0
 800c240:	460b      	mov	r3, r1
 800c242:	4630      	mov	r0, r6
 800c244:	4639      	mov	r1, r7
 800c246:	f7f4 fb3f 	bl	80008c8 <__aeabi_dsub>
 800c24a:	f804 5b01 	strb.w	r5, [r4], #1
 800c24e:	4544      	cmp	r4, r8
 800c250:	4606      	mov	r6, r0
 800c252:	460f      	mov	r7, r1
 800c254:	d1e5      	bne.n	800c222 <_dtoa_r+0xc12>
 800c256:	46c8      	mov	r8, r9
 800c258:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800c25c:	4b1d      	ldr	r3, [pc, #116]	; (800c2d4 <_dtoa_r+0xcc4>)
 800c25e:	2200      	movs	r2, #0
 800c260:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c264:	f7f4 fb32 	bl	80008cc <__adddf3>
 800c268:	4632      	mov	r2, r6
 800c26a:	463b      	mov	r3, r7
 800c26c:	f7f4 ff56 	bl	800111c <__aeabi_dcmplt>
 800c270:	2800      	cmp	r0, #0
 800c272:	d06d      	beq.n	800c350 <_dtoa_r+0xd40>
 800c274:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c276:	9305      	str	r3, [sp, #20]
 800c278:	f814 5c01 	ldrb.w	r5, [r4, #-1]
 800c27c:	9a04      	ldr	r2, [sp, #16]
 800c27e:	e499      	b.n	800bbb4 <_dtoa_r+0x5a4>
 800c280:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c282:	9f08      	ldr	r7, [sp, #32]
 800c284:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c288:	464c      	mov	r4, r9
 800c28a:	4498      	add	r8, r3
 800c28c:	4499      	add	r9, r3
 800c28e:	e4ac      	b.n	800bbea <_dtoa_r+0x5da>
 800c290:	2300      	movs	r3, #0
 800c292:	e66e      	b.n	800bf72 <_dtoa_r+0x962>
 800c294:	4631      	mov	r1, r6
 800c296:	2205      	movs	r2, #5
 800c298:	4658      	mov	r0, fp
 800c29a:	f001 f8d7 	bl	800d44c <__multadd>
 800c29e:	4601      	mov	r1, r0
 800c2a0:	4606      	mov	r6, r0
 800c2a2:	4650      	mov	r0, sl
 800c2a4:	f001 fab8 	bl	800d818 <__mcmp>
 800c2a8:	2800      	cmp	r0, #0
 800c2aa:	f73f aeb1 	bgt.w	800c010 <_dtoa_r+0xa00>
 800c2ae:	e725      	b.n	800c0fc <_dtoa_r+0xaec>
 800c2b0:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800c2b4:	2602      	movs	r6, #2
 800c2b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c2ba:	f7ff bb17 	b.w	800b8ec <_dtoa_r+0x2dc>
 800c2be:	bf00      	nop
 800c2c0:	40140000 	.word	0x40140000
 800c2c4:	0800eb20 	.word	0x0800eb20
 800c2c8:	0800eaf8 	.word	0x0800eaf8
 800c2cc:	401c0000 	.word	0x401c0000
 800c2d0:	40240000 	.word	0x40240000
 800c2d4:	3fe00000 	.word	0x3fe00000
 800c2d8:	9b06      	ldr	r3, [sp, #24]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	f43f af1f 	beq.w	800c11e <_dtoa_r+0xb0e>
 800c2e0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800c2e2:	2c00      	cmp	r4, #0
 800c2e4:	f77f abb8 	ble.w	800ba58 <_dtoa_r+0x448>
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	4b42      	ldr	r3, [pc, #264]	; (800c3f4 <_dtoa_r+0xde4>)
 800c2ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2f0:	f7f4 fca2 	bl	8000c38 <__aeabi_dmul>
 800c2f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2f8:	1c70      	adds	r0, r6, #1
 800c2fa:	f7f4 fc33 	bl	8000b64 <__aeabi_i2d>
 800c2fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c302:	f7f4 fc99 	bl	8000c38 <__aeabi_dmul>
 800c306:	4b3c      	ldr	r3, [pc, #240]	; (800c3f8 <_dtoa_r+0xde8>)
 800c308:	2200      	movs	r2, #0
 800c30a:	f7f4 fadf 	bl	80008cc <__adddf3>
 800c30e:	9b05      	ldr	r3, [sp, #20]
 800c310:	940e      	str	r4, [sp, #56]	; 0x38
 800c312:	3b01      	subs	r3, #1
 800c314:	4606      	mov	r6, r0
 800c316:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 800c31a:	9313      	str	r3, [sp, #76]	; 0x4c
 800c31c:	f7ff bb07 	b.w	800b92e <_dtoa_r+0x31e>
 800c320:	4651      	mov	r1, sl
 800c322:	2201      	movs	r2, #1
 800c324:	4658      	mov	r0, fp
 800c326:	f001 fa21 	bl	800d76c <__lshift>
 800c32a:	4631      	mov	r1, r6
 800c32c:	4682      	mov	sl, r0
 800c32e:	f001 fa73 	bl	800d818 <__mcmp>
 800c332:	2800      	cmp	r0, #0
 800c334:	dd32      	ble.n	800c39c <_dtoa_r+0xd8c>
 800c336:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c33a:	d003      	beq.n	800c344 <_dtoa_r+0xd34>
 800c33c:	9b08      	ldr	r3, [sp, #32]
 800c33e:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c342:	e731      	b.n	800c1a8 <_dtoa_r+0xb98>
 800c344:	2239      	movs	r2, #57	; 0x39
 800c346:	9502      	str	r5, [sp, #8]
 800c348:	703a      	strb	r2, [r7, #0]
 800c34a:	4645      	mov	r5, r8
 800c34c:	9904      	ldr	r1, [sp, #16]
 800c34e:	e581      	b.n	800be54 <_dtoa_r+0x844>
 800c350:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c354:	2000      	movs	r0, #0
 800c356:	4929      	ldr	r1, [pc, #164]	; (800c3fc <_dtoa_r+0xdec>)
 800c358:	f7f4 fab6 	bl	80008c8 <__aeabi_dsub>
 800c35c:	4632      	mov	r2, r6
 800c35e:	463b      	mov	r3, r7
 800c360:	f7f4 fefa 	bl	8001158 <__aeabi_dcmpgt>
 800c364:	b910      	cbnz	r0, 800c36c <_dtoa_r+0xd5c>
 800c366:	f7ff bb77 	b.w	800ba58 <_dtoa_r+0x448>
 800c36a:	4614      	mov	r4, r2
 800c36c:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800c370:	2b30      	cmp	r3, #48	; 0x30
 800c372:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
 800c376:	d0f8      	beq.n	800c36a <_dtoa_r+0xd5a>
 800c378:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c37a:	9305      	str	r3, [sp, #20]
 800c37c:	e580      	b.n	800be80 <_dtoa_r+0x870>
 800c37e:	f8dd a008 	ldr.w	sl, [sp, #8]
 800c382:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c384:	9305      	str	r3, [sp, #20]
 800c386:	9a04      	ldr	r2, [sp, #16]
 800c388:	e414      	b.n	800bbb4 <_dtoa_r+0x5a4>
 800c38a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c38e:	f107 0401 	add.w	r4, r7, #1
 800c392:	d0d7      	beq.n	800c344 <_dtoa_r+0xd34>
 800c394:	9b02      	ldr	r3, [sp, #8]
 800c396:	2b00      	cmp	r3, #0
 800c398:	dcd0      	bgt.n	800c33c <_dtoa_r+0xd2c>
 800c39a:	e705      	b.n	800c1a8 <_dtoa_r+0xb98>
 800c39c:	f47f af04 	bne.w	800c1a8 <_dtoa_r+0xb98>
 800c3a0:	f019 0f01 	tst.w	r9, #1
 800c3a4:	f43f af00 	beq.w	800c1a8 <_dtoa_r+0xb98>
 800c3a8:	e7c5      	b.n	800c336 <_dtoa_r+0xd26>
 800c3aa:	4629      	mov	r1, r5
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	220a      	movs	r2, #10
 800c3b0:	4658      	mov	r0, fp
 800c3b2:	f001 f84b 	bl	800d44c <__multadd>
 800c3b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	4605      	mov	r5, r0
 800c3bc:	dd09      	ble.n	800c3d2 <_dtoa_r+0xdc2>
 800c3be:	9306      	str	r3, [sp, #24]
 800c3c0:	e48f      	b.n	800bce2 <_dtoa_r+0x6d2>
 800c3c2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c3c4:	2b02      	cmp	r3, #2
 800c3c6:	dc09      	bgt.n	800c3dc <_dtoa_r+0xdcc>
 800c3c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3ca:	e50e      	b.n	800bdea <_dtoa_r+0x7da>
 800c3cc:	2602      	movs	r6, #2
 800c3ce:	f7ff ba8d 	b.w	800b8ec <_dtoa_r+0x2dc>
 800c3d2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c3d4:	2b02      	cmp	r3, #2
 800c3d6:	dc01      	bgt.n	800c3dc <_dtoa_r+0xdcc>
 800c3d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3da:	e7f0      	b.n	800c3be <_dtoa_r+0xdae>
 800c3dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3de:	9306      	str	r3, [sp, #24]
 800c3e0:	e688      	b.n	800c0f4 <_dtoa_r+0xae4>
 800c3e2:	4b07      	ldr	r3, [pc, #28]	; (800c400 <_dtoa_r+0xdf0>)
 800c3e4:	9304      	str	r3, [sp, #16]
 800c3e6:	f7ff b94b 	b.w	800b680 <_dtoa_r+0x70>
 800c3ea:	f43f ac5d 	beq.w	800bca8 <_dtoa_r+0x698>
 800c3ee:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 800c3f2:	e559      	b.n	800bea8 <_dtoa_r+0x898>
 800c3f4:	40240000 	.word	0x40240000
 800c3f8:	401c0000 	.word	0x401c0000
 800c3fc:	3fe00000 	.word	0x3fe00000
 800c400:	0800ead4 	.word	0x0800ead4

0800c404 <__sflush_r>:
 800c404:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 800c408:	b29a      	uxth	r2, r3
 800c40a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c40e:	460c      	mov	r4, r1
 800c410:	0711      	lsls	r1, r2, #28
 800c412:	4680      	mov	r8, r0
 800c414:	d444      	bmi.n	800c4a0 <__sflush_r+0x9c>
 800c416:	6862      	ldr	r2, [r4, #4]
 800c418:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c41c:	2a00      	cmp	r2, #0
 800c41e:	81a3      	strh	r3, [r4, #12]
 800c420:	dd59      	ble.n	800c4d6 <__sflush_r+0xd2>
 800c422:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800c424:	2d00      	cmp	r5, #0
 800c426:	d053      	beq.n	800c4d0 <__sflush_r+0xcc>
 800c428:	2200      	movs	r2, #0
 800c42a:	b29b      	uxth	r3, r3
 800c42c:	f8d8 6000 	ldr.w	r6, [r8]
 800c430:	69e1      	ldr	r1, [r4, #28]
 800c432:	f8c8 2000 	str.w	r2, [r8]
 800c436:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
 800c43a:	f040 8083 	bne.w	800c544 <__sflush_r+0x140>
 800c43e:	2301      	movs	r3, #1
 800c440:	4640      	mov	r0, r8
 800c442:	47a8      	blx	r5
 800c444:	1c42      	adds	r2, r0, #1
 800c446:	d04a      	beq.n	800c4de <__sflush_r+0xda>
 800c448:	89a3      	ldrh	r3, [r4, #12]
 800c44a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800c44c:	69e1      	ldr	r1, [r4, #28]
 800c44e:	075b      	lsls	r3, r3, #29
 800c450:	d505      	bpl.n	800c45e <__sflush_r+0x5a>
 800c452:	6862      	ldr	r2, [r4, #4]
 800c454:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c456:	1a80      	subs	r0, r0, r2
 800c458:	b10b      	cbz	r3, 800c45e <__sflush_r+0x5a>
 800c45a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c45c:	1ac0      	subs	r0, r0, r3
 800c45e:	4602      	mov	r2, r0
 800c460:	2300      	movs	r3, #0
 800c462:	4640      	mov	r0, r8
 800c464:	47a8      	blx	r5
 800c466:	1c47      	adds	r7, r0, #1
 800c468:	d045      	beq.n	800c4f6 <__sflush_r+0xf2>
 800c46a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c46e:	6922      	ldr	r2, [r4, #16]
 800c470:	6022      	str	r2, [r4, #0]
 800c472:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c476:	2200      	movs	r2, #0
 800c478:	81a3      	strh	r3, [r4, #12]
 800c47a:	04db      	lsls	r3, r3, #19
 800c47c:	6062      	str	r2, [r4, #4]
 800c47e:	d500      	bpl.n	800c482 <__sflush_r+0x7e>
 800c480:	6520      	str	r0, [r4, #80]	; 0x50
 800c482:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c484:	f8c8 6000 	str.w	r6, [r8]
 800c488:	b311      	cbz	r1, 800c4d0 <__sflush_r+0xcc>
 800c48a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800c48e:	4299      	cmp	r1, r3
 800c490:	d002      	beq.n	800c498 <__sflush_r+0x94>
 800c492:	4640      	mov	r0, r8
 800c494:	f000 f944 	bl	800c720 <_free_r>
 800c498:	2000      	movs	r0, #0
 800c49a:	6320      	str	r0, [r4, #48]	; 0x30
 800c49c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4a0:	6926      	ldr	r6, [r4, #16]
 800c4a2:	b1ae      	cbz	r6, 800c4d0 <__sflush_r+0xcc>
 800c4a4:	6825      	ldr	r5, [r4, #0]
 800c4a6:	6026      	str	r6, [r4, #0]
 800c4a8:	0792      	lsls	r2, r2, #30
 800c4aa:	bf0c      	ite	eq
 800c4ac:	6963      	ldreq	r3, [r4, #20]
 800c4ae:	2300      	movne	r3, #0
 800c4b0:	1bad      	subs	r5, r5, r6
 800c4b2:	60a3      	str	r3, [r4, #8]
 800c4b4:	e00a      	b.n	800c4cc <__sflush_r+0xc8>
 800c4b6:	462b      	mov	r3, r5
 800c4b8:	4632      	mov	r2, r6
 800c4ba:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800c4bc:	69e1      	ldr	r1, [r4, #28]
 800c4be:	4640      	mov	r0, r8
 800c4c0:	47b8      	blx	r7
 800c4c2:	2800      	cmp	r0, #0
 800c4c4:	eba5 0500 	sub.w	r5, r5, r0
 800c4c8:	4406      	add	r6, r0
 800c4ca:	dd2b      	ble.n	800c524 <__sflush_r+0x120>
 800c4cc:	2d00      	cmp	r5, #0
 800c4ce:	dcf2      	bgt.n	800c4b6 <__sflush_r+0xb2>
 800c4d0:	2000      	movs	r0, #0
 800c4d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4d6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800c4d8:	2a00      	cmp	r2, #0
 800c4da:	dca2      	bgt.n	800c422 <__sflush_r+0x1e>
 800c4dc:	e7f8      	b.n	800c4d0 <__sflush_r+0xcc>
 800c4de:	f8d8 3000 	ldr.w	r3, [r8]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d0b0      	beq.n	800c448 <__sflush_r+0x44>
 800c4e6:	2b1d      	cmp	r3, #29
 800c4e8:	d001      	beq.n	800c4ee <__sflush_r+0xea>
 800c4ea:	2b16      	cmp	r3, #22
 800c4ec:	d12c      	bne.n	800c548 <__sflush_r+0x144>
 800c4ee:	f8c8 6000 	str.w	r6, [r8]
 800c4f2:	2000      	movs	r0, #0
 800c4f4:	e7ed      	b.n	800c4d2 <__sflush_r+0xce>
 800c4f6:	f8d8 1000 	ldr.w	r1, [r8]
 800c4fa:	291d      	cmp	r1, #29
 800c4fc:	d81a      	bhi.n	800c534 <__sflush_r+0x130>
 800c4fe:	4b15      	ldr	r3, [pc, #84]	; (800c554 <__sflush_r+0x150>)
 800c500:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c504:	40cb      	lsrs	r3, r1
 800c506:	43db      	mvns	r3, r3
 800c508:	f013 0301 	ands.w	r3, r3, #1
 800c50c:	d114      	bne.n	800c538 <__sflush_r+0x134>
 800c50e:	6925      	ldr	r5, [r4, #16]
 800c510:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c514:	e9c4 5300 	strd	r5, r3, [r4]
 800c518:	04d5      	lsls	r5, r2, #19
 800c51a:	81a2      	strh	r2, [r4, #12]
 800c51c:	d5b1      	bpl.n	800c482 <__sflush_r+0x7e>
 800c51e:	2900      	cmp	r1, #0
 800c520:	d1af      	bne.n	800c482 <__sflush_r+0x7e>
 800c522:	e7ad      	b.n	800c480 <__sflush_r+0x7c>
 800c524:	89a3      	ldrh	r3, [r4, #12]
 800c526:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c52a:	81a3      	strh	r3, [r4, #12]
 800c52c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c534:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c538:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c53c:	81a2      	strh	r2, [r4, #12]
 800c53e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c542:	e7c6      	b.n	800c4d2 <__sflush_r+0xce>
 800c544:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800c546:	e782      	b.n	800c44e <__sflush_r+0x4a>
 800c548:	89a3      	ldrh	r3, [r4, #12]
 800c54a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c54e:	81a3      	strh	r3, [r4, #12]
 800c550:	e7bf      	b.n	800c4d2 <__sflush_r+0xce>
 800c552:	bf00      	nop
 800c554:	20400001 	.word	0x20400001

0800c558 <_fflush_r>:
 800c558:	b538      	push	{r3, r4, r5, lr}
 800c55a:	460d      	mov	r5, r1
 800c55c:	4604      	mov	r4, r0
 800c55e:	b108      	cbz	r0, 800c564 <_fflush_r+0xc>
 800c560:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c562:	b1a3      	cbz	r3, 800c58e <_fflush_r+0x36>
 800c564:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
 800c568:	b1b8      	cbz	r0, 800c59a <_fflush_r+0x42>
 800c56a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c56c:	07db      	lsls	r3, r3, #31
 800c56e:	d401      	bmi.n	800c574 <_fflush_r+0x1c>
 800c570:	0581      	lsls	r1, r0, #22
 800c572:	d51a      	bpl.n	800c5aa <_fflush_r+0x52>
 800c574:	4620      	mov	r0, r4
 800c576:	4629      	mov	r1, r5
 800c578:	f7ff ff44 	bl	800c404 <__sflush_r>
 800c57c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c57e:	07da      	lsls	r2, r3, #31
 800c580:	4604      	mov	r4, r0
 800c582:	d402      	bmi.n	800c58a <_fflush_r+0x32>
 800c584:	89ab      	ldrh	r3, [r5, #12]
 800c586:	059b      	lsls	r3, r3, #22
 800c588:	d50a      	bpl.n	800c5a0 <_fflush_r+0x48>
 800c58a:	4620      	mov	r0, r4
 800c58c:	bd38      	pop	{r3, r4, r5, pc}
 800c58e:	f000 f83f 	bl	800c610 <__sinit>
 800c592:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
 800c596:	2800      	cmp	r0, #0
 800c598:	d1e7      	bne.n	800c56a <_fflush_r+0x12>
 800c59a:	4604      	mov	r4, r0
 800c59c:	4620      	mov	r0, r4
 800c59e:	bd38      	pop	{r3, r4, r5, pc}
 800c5a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5a2:	f000 fb7f 	bl	800cca4 <__retarget_lock_release_recursive>
 800c5a6:	4620      	mov	r0, r4
 800c5a8:	bd38      	pop	{r3, r4, r5, pc}
 800c5aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5ac:	f000 fb78 	bl	800cca0 <__retarget_lock_acquire_recursive>
 800c5b0:	e7e0      	b.n	800c574 <_fflush_r+0x1c>
 800c5b2:	bf00      	nop

0800c5b4 <std>:
 800c5b4:	b510      	push	{r4, lr}
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	4604      	mov	r4, r0
 800c5ba:	8181      	strh	r1, [r0, #12]
 800c5bc:	81c2      	strh	r2, [r0, #14]
 800c5be:	e9c0 3300 	strd	r3, r3, [r0]
 800c5c2:	6083      	str	r3, [r0, #8]
 800c5c4:	6643      	str	r3, [r0, #100]	; 0x64
 800c5c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c5ca:	6183      	str	r3, [r0, #24]
 800c5cc:	4619      	mov	r1, r3
 800c5ce:	2208      	movs	r2, #8
 800c5d0:	305c      	adds	r0, #92	; 0x5c
 800c5d2:	f7fc f80b 	bl	80085ec <memset>
 800c5d6:	4807      	ldr	r0, [pc, #28]	; (800c5f4 <std+0x40>)
 800c5d8:	4907      	ldr	r1, [pc, #28]	; (800c5f8 <std+0x44>)
 800c5da:	4a08      	ldr	r2, [pc, #32]	; (800c5fc <std+0x48>)
 800c5dc:	4b08      	ldr	r3, [pc, #32]	; (800c600 <std+0x4c>)
 800c5de:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c5e0:	e9c4 4007 	strd	r4, r0, [r4, #28]
 800c5e4:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
 800c5e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c5ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5f0:	f000 bb52 	b.w	800cc98 <__retarget_lock_init_recursive>
 800c5f4:	0800dd6d 	.word	0x0800dd6d
 800c5f8:	0800dd91 	.word	0x0800dd91
 800c5fc:	0800ddcd 	.word	0x0800ddcd
 800c600:	0800dded 	.word	0x0800dded

0800c604 <_cleanup_r>:
 800c604:	4901      	ldr	r1, [pc, #4]	; (800c60c <_cleanup_r+0x8>)
 800c606:	f000 bafd 	b.w	800cc04 <_fwalk_reent>
 800c60a:	bf00      	nop
 800c60c:	0800e049 	.word	0x0800e049

0800c610 <__sinit>:
 800c610:	b510      	push	{r4, lr}
 800c612:	4604      	mov	r4, r0
 800c614:	4812      	ldr	r0, [pc, #72]	; (800c660 <__sinit+0x50>)
 800c616:	f000 fb43 	bl	800cca0 <__retarget_lock_acquire_recursive>
 800c61a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c61c:	b9d2      	cbnz	r2, 800c654 <__sinit+0x44>
 800c61e:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 800c622:	4810      	ldr	r0, [pc, #64]	; (800c664 <__sinit+0x54>)
 800c624:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 800c628:	2103      	movs	r1, #3
 800c62a:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 800c62e:	63e0      	str	r0, [r4, #60]	; 0x3c
 800c630:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
 800c634:	6860      	ldr	r0, [r4, #4]
 800c636:	2104      	movs	r1, #4
 800c638:	f7ff ffbc 	bl	800c5b4 <std>
 800c63c:	2201      	movs	r2, #1
 800c63e:	2109      	movs	r1, #9
 800c640:	68a0      	ldr	r0, [r4, #8]
 800c642:	f7ff ffb7 	bl	800c5b4 <std>
 800c646:	2202      	movs	r2, #2
 800c648:	2112      	movs	r1, #18
 800c64a:	68e0      	ldr	r0, [r4, #12]
 800c64c:	f7ff ffb2 	bl	800c5b4 <std>
 800c650:	2301      	movs	r3, #1
 800c652:	63a3      	str	r3, [r4, #56]	; 0x38
 800c654:	4802      	ldr	r0, [pc, #8]	; (800c660 <__sinit+0x50>)
 800c656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c65a:	f000 bb23 	b.w	800cca4 <__retarget_lock_release_recursive>
 800c65e:	bf00      	nop
 800c660:	2000332c 	.word	0x2000332c
 800c664:	0800c605 	.word	0x0800c605

0800c668 <__sfp_lock_acquire>:
 800c668:	4801      	ldr	r0, [pc, #4]	; (800c670 <__sfp_lock_acquire+0x8>)
 800c66a:	f000 bb19 	b.w	800cca0 <__retarget_lock_acquire_recursive>
 800c66e:	bf00      	nop
 800c670:	20003340 	.word	0x20003340

0800c674 <__sfp_lock_release>:
 800c674:	4801      	ldr	r0, [pc, #4]	; (800c67c <__sfp_lock_release+0x8>)
 800c676:	f000 bb15 	b.w	800cca4 <__retarget_lock_release_recursive>
 800c67a:	bf00      	nop
 800c67c:	20003340 	.word	0x20003340

0800c680 <_malloc_trim_r>:
 800c680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c682:	4f24      	ldr	r7, [pc, #144]	; (800c714 <_malloc_trim_r+0x94>)
 800c684:	460c      	mov	r4, r1
 800c686:	4606      	mov	r6, r0
 800c688:	f000 fea4 	bl	800d3d4 <__malloc_lock>
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	685d      	ldr	r5, [r3, #4]
 800c690:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
 800c694:	310f      	adds	r1, #15
 800c696:	f025 0503 	bic.w	r5, r5, #3
 800c69a:	4429      	add	r1, r5
 800c69c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 800c6a0:	f021 010f 	bic.w	r1, r1, #15
 800c6a4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 800c6a8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800c6ac:	db07      	blt.n	800c6be <_malloc_trim_r+0x3e>
 800c6ae:	2100      	movs	r1, #0
 800c6b0:	4630      	mov	r0, r6
 800c6b2:	f001 fb49 	bl	800dd48 <_sbrk_r>
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	442b      	add	r3, r5
 800c6ba:	4298      	cmp	r0, r3
 800c6bc:	d004      	beq.n	800c6c8 <_malloc_trim_r+0x48>
 800c6be:	4630      	mov	r0, r6
 800c6c0:	f000 fe8e 	bl	800d3e0 <__malloc_unlock>
 800c6c4:	2000      	movs	r0, #0
 800c6c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6c8:	4261      	negs	r1, r4
 800c6ca:	4630      	mov	r0, r6
 800c6cc:	f001 fb3c 	bl	800dd48 <_sbrk_r>
 800c6d0:	3001      	adds	r0, #1
 800c6d2:	d00d      	beq.n	800c6f0 <_malloc_trim_r+0x70>
 800c6d4:	4b10      	ldr	r3, [pc, #64]	; (800c718 <_malloc_trim_r+0x98>)
 800c6d6:	68ba      	ldr	r2, [r7, #8]
 800c6d8:	6819      	ldr	r1, [r3, #0]
 800c6da:	1b2d      	subs	r5, r5, r4
 800c6dc:	f045 0501 	orr.w	r5, r5, #1
 800c6e0:	4630      	mov	r0, r6
 800c6e2:	1b09      	subs	r1, r1, r4
 800c6e4:	6055      	str	r5, [r2, #4]
 800c6e6:	6019      	str	r1, [r3, #0]
 800c6e8:	f000 fe7a 	bl	800d3e0 <__malloc_unlock>
 800c6ec:	2001      	movs	r0, #1
 800c6ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6f0:	2100      	movs	r1, #0
 800c6f2:	4630      	mov	r0, r6
 800c6f4:	f001 fb28 	bl	800dd48 <_sbrk_r>
 800c6f8:	68ba      	ldr	r2, [r7, #8]
 800c6fa:	1a83      	subs	r3, r0, r2
 800c6fc:	2b0f      	cmp	r3, #15
 800c6fe:	ddde      	ble.n	800c6be <_malloc_trim_r+0x3e>
 800c700:	4c06      	ldr	r4, [pc, #24]	; (800c71c <_malloc_trim_r+0x9c>)
 800c702:	4905      	ldr	r1, [pc, #20]	; (800c718 <_malloc_trim_r+0x98>)
 800c704:	6824      	ldr	r4, [r4, #0]
 800c706:	f043 0301 	orr.w	r3, r3, #1
 800c70a:	1b00      	subs	r0, r0, r4
 800c70c:	6053      	str	r3, [r2, #4]
 800c70e:	6008      	str	r0, [r1, #0]
 800c710:	e7d5      	b.n	800c6be <_malloc_trim_r+0x3e>
 800c712:	bf00      	nop
 800c714:	200005d4 	.word	0x200005d4
 800c718:	200019fc 	.word	0x200019fc
 800c71c:	200009dc 	.word	0x200009dc

0800c720 <_free_r>:
 800c720:	2900      	cmp	r1, #0
 800c722:	d053      	beq.n	800c7cc <_free_r+0xac>
 800c724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c726:	460c      	mov	r4, r1
 800c728:	4606      	mov	r6, r0
 800c72a:	f000 fe53 	bl	800d3d4 <__malloc_lock>
 800c72e:	f854 cc04 	ldr.w	ip, [r4, #-4]
 800c732:	4f71      	ldr	r7, [pc, #452]	; (800c8f8 <_free_r+0x1d8>)
 800c734:	f02c 0101 	bic.w	r1, ip, #1
 800c738:	f1a4 0508 	sub.w	r5, r4, #8
 800c73c:	186b      	adds	r3, r5, r1
 800c73e:	68b8      	ldr	r0, [r7, #8]
 800c740:	685a      	ldr	r2, [r3, #4]
 800c742:	4298      	cmp	r0, r3
 800c744:	f022 0203 	bic.w	r2, r2, #3
 800c748:	d053      	beq.n	800c7f2 <_free_r+0xd2>
 800c74a:	f01c 0f01 	tst.w	ip, #1
 800c74e:	605a      	str	r2, [r3, #4]
 800c750:	eb03 0002 	add.w	r0, r3, r2
 800c754:	d13b      	bne.n	800c7ce <_free_r+0xae>
 800c756:	f854 cc08 	ldr.w	ip, [r4, #-8]
 800c75a:	6840      	ldr	r0, [r0, #4]
 800c75c:	eba5 050c 	sub.w	r5, r5, ip
 800c760:	f107 0e08 	add.w	lr, r7, #8
 800c764:	68ac      	ldr	r4, [r5, #8]
 800c766:	4574      	cmp	r4, lr
 800c768:	4461      	add	r1, ip
 800c76a:	f000 0001 	and.w	r0, r0, #1
 800c76e:	d075      	beq.n	800c85c <_free_r+0x13c>
 800c770:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 800c774:	f8c4 c00c 	str.w	ip, [r4, #12]
 800c778:	f8cc 4008 	str.w	r4, [ip, #8]
 800c77c:	b360      	cbz	r0, 800c7d8 <_free_r+0xb8>
 800c77e:	f041 0301 	orr.w	r3, r1, #1
 800c782:	606b      	str	r3, [r5, #4]
 800c784:	5069      	str	r1, [r5, r1]
 800c786:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c78a:	d350      	bcc.n	800c82e <_free_r+0x10e>
 800c78c:	0a4b      	lsrs	r3, r1, #9
 800c78e:	2b04      	cmp	r3, #4
 800c790:	d870      	bhi.n	800c874 <_free_r+0x154>
 800c792:	098b      	lsrs	r3, r1, #6
 800c794:	f103 0439 	add.w	r4, r3, #57	; 0x39
 800c798:	00e4      	lsls	r4, r4, #3
 800c79a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c79e:	1938      	adds	r0, r7, r4
 800c7a0:	593b      	ldr	r3, [r7, r4]
 800c7a2:	3808      	subs	r0, #8
 800c7a4:	4298      	cmp	r0, r3
 800c7a6:	d078      	beq.n	800c89a <_free_r+0x17a>
 800c7a8:	685a      	ldr	r2, [r3, #4]
 800c7aa:	f022 0203 	bic.w	r2, r2, #3
 800c7ae:	428a      	cmp	r2, r1
 800c7b0:	d971      	bls.n	800c896 <_free_r+0x176>
 800c7b2:	689b      	ldr	r3, [r3, #8]
 800c7b4:	4298      	cmp	r0, r3
 800c7b6:	d1f7      	bne.n	800c7a8 <_free_r+0x88>
 800c7b8:	68c3      	ldr	r3, [r0, #12]
 800c7ba:	e9c5 0302 	strd	r0, r3, [r5, #8]
 800c7be:	609d      	str	r5, [r3, #8]
 800c7c0:	60c5      	str	r5, [r0, #12]
 800c7c2:	4630      	mov	r0, r6
 800c7c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c7c8:	f000 be0a 	b.w	800d3e0 <__malloc_unlock>
 800c7cc:	4770      	bx	lr
 800c7ce:	6840      	ldr	r0, [r0, #4]
 800c7d0:	f000 0001 	and.w	r0, r0, #1
 800c7d4:	2800      	cmp	r0, #0
 800c7d6:	d1d2      	bne.n	800c77e <_free_r+0x5e>
 800c7d8:	6898      	ldr	r0, [r3, #8]
 800c7da:	4c48      	ldr	r4, [pc, #288]	; (800c8fc <_free_r+0x1dc>)
 800c7dc:	4411      	add	r1, r2
 800c7de:	42a0      	cmp	r0, r4
 800c7e0:	f041 0201 	orr.w	r2, r1, #1
 800c7e4:	d062      	beq.n	800c8ac <_free_r+0x18c>
 800c7e6:	68db      	ldr	r3, [r3, #12]
 800c7e8:	60c3      	str	r3, [r0, #12]
 800c7ea:	6098      	str	r0, [r3, #8]
 800c7ec:	606a      	str	r2, [r5, #4]
 800c7ee:	5069      	str	r1, [r5, r1]
 800c7f0:	e7c9      	b.n	800c786 <_free_r+0x66>
 800c7f2:	f01c 0f01 	tst.w	ip, #1
 800c7f6:	440a      	add	r2, r1
 800c7f8:	d107      	bne.n	800c80a <_free_r+0xea>
 800c7fa:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800c7fe:	1aed      	subs	r5, r5, r3
 800c800:	441a      	add	r2, r3
 800c802:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 800c806:	60cb      	str	r3, [r1, #12]
 800c808:	6099      	str	r1, [r3, #8]
 800c80a:	4b3d      	ldr	r3, [pc, #244]	; (800c900 <_free_r+0x1e0>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	f042 0101 	orr.w	r1, r2, #1
 800c812:	4293      	cmp	r3, r2
 800c814:	6069      	str	r1, [r5, #4]
 800c816:	60bd      	str	r5, [r7, #8]
 800c818:	d804      	bhi.n	800c824 <_free_r+0x104>
 800c81a:	4b3a      	ldr	r3, [pc, #232]	; (800c904 <_free_r+0x1e4>)
 800c81c:	4630      	mov	r0, r6
 800c81e:	6819      	ldr	r1, [r3, #0]
 800c820:	f7ff ff2e 	bl	800c680 <_malloc_trim_r>
 800c824:	4630      	mov	r0, r6
 800c826:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c82a:	f000 bdd9 	b.w	800d3e0 <__malloc_unlock>
 800c82e:	08c9      	lsrs	r1, r1, #3
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	1c4a      	adds	r2, r1, #1
 800c834:	2301      	movs	r3, #1
 800c836:	1089      	asrs	r1, r1, #2
 800c838:	408b      	lsls	r3, r1
 800c83a:	4303      	orrs	r3, r0
 800c83c:	eb07 01c2 	add.w	r1, r7, r2, lsl #3
 800c840:	f857 0032 	ldr.w	r0, [r7, r2, lsl #3]
 800c844:	607b      	str	r3, [r7, #4]
 800c846:	3908      	subs	r1, #8
 800c848:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800c84c:	f847 5032 	str.w	r5, [r7, r2, lsl #3]
 800c850:	60c5      	str	r5, [r0, #12]
 800c852:	4630      	mov	r0, r6
 800c854:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c858:	f000 bdc2 	b.w	800d3e0 <__malloc_unlock>
 800c85c:	2800      	cmp	r0, #0
 800c85e:	d145      	bne.n	800c8ec <_free_r+0x1cc>
 800c860:	440a      	add	r2, r1
 800c862:	e9d3 1302 	ldrd	r1, r3, [r3, #8]
 800c866:	f042 0001 	orr.w	r0, r2, #1
 800c86a:	60cb      	str	r3, [r1, #12]
 800c86c:	6099      	str	r1, [r3, #8]
 800c86e:	6068      	str	r0, [r5, #4]
 800c870:	50aa      	str	r2, [r5, r2]
 800c872:	e7d7      	b.n	800c824 <_free_r+0x104>
 800c874:	2b14      	cmp	r3, #20
 800c876:	d908      	bls.n	800c88a <_free_r+0x16a>
 800c878:	2b54      	cmp	r3, #84	; 0x54
 800c87a:	d81e      	bhi.n	800c8ba <_free_r+0x19a>
 800c87c:	0b0b      	lsrs	r3, r1, #12
 800c87e:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 800c882:	00e4      	lsls	r4, r4, #3
 800c884:	f103 026e 	add.w	r2, r3, #110	; 0x6e
 800c888:	e789      	b.n	800c79e <_free_r+0x7e>
 800c88a:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 800c88e:	00e4      	lsls	r4, r4, #3
 800c890:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 800c894:	e783      	b.n	800c79e <_free_r+0x7e>
 800c896:	4618      	mov	r0, r3
 800c898:	e78e      	b.n	800c7b8 <_free_r+0x98>
 800c89a:	1093      	asrs	r3, r2, #2
 800c89c:	6879      	ldr	r1, [r7, #4]
 800c89e:	2201      	movs	r2, #1
 800c8a0:	fa02 f303 	lsl.w	r3, r2, r3
 800c8a4:	430b      	orrs	r3, r1
 800c8a6:	607b      	str	r3, [r7, #4]
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	e786      	b.n	800c7ba <_free_r+0x9a>
 800c8ac:	e9c7 5504 	strd	r5, r5, [r7, #16]
 800c8b0:	e9c5 0002 	strd	r0, r0, [r5, #8]
 800c8b4:	606a      	str	r2, [r5, #4]
 800c8b6:	5069      	str	r1, [r5, r1]
 800c8b8:	e7b4      	b.n	800c824 <_free_r+0x104>
 800c8ba:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800c8be:	d806      	bhi.n	800c8ce <_free_r+0x1ae>
 800c8c0:	0bcb      	lsrs	r3, r1, #15
 800c8c2:	f103 0478 	add.w	r4, r3, #120	; 0x78
 800c8c6:	00e4      	lsls	r4, r4, #3
 800c8c8:	f103 0277 	add.w	r2, r3, #119	; 0x77
 800c8cc:	e767      	b.n	800c79e <_free_r+0x7e>
 800c8ce:	f240 5254 	movw	r2, #1364	; 0x554
 800c8d2:	4293      	cmp	r3, r2
 800c8d4:	d806      	bhi.n	800c8e4 <_free_r+0x1c4>
 800c8d6:	0c8b      	lsrs	r3, r1, #18
 800c8d8:	f103 047d 	add.w	r4, r3, #125	; 0x7d
 800c8dc:	00e4      	lsls	r4, r4, #3
 800c8de:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 800c8e2:	e75c      	b.n	800c79e <_free_r+0x7e>
 800c8e4:	f44f 747e 	mov.w	r4, #1016	; 0x3f8
 800c8e8:	227e      	movs	r2, #126	; 0x7e
 800c8ea:	e758      	b.n	800c79e <_free_r+0x7e>
 800c8ec:	f041 0201 	orr.w	r2, r1, #1
 800c8f0:	606a      	str	r2, [r5, #4]
 800c8f2:	6019      	str	r1, [r3, #0]
 800c8f4:	e796      	b.n	800c824 <_free_r+0x104>
 800c8f6:	bf00      	nop
 800c8f8:	200005d4 	.word	0x200005d4
 800c8fc:	200005dc 	.word	0x200005dc
 800c900:	200009e0 	.word	0x200009e0
 800c904:	20001a2c 	.word	0x20001a2c

0800c908 <__sfvwrite_r>:
 800c908:	6893      	ldr	r3, [r2, #8]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	f000 80e4 	beq.w	800cad8 <__sfvwrite_r+0x1d0>
 800c910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c914:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 800c918:	b29b      	uxth	r3, r3
 800c91a:	460c      	mov	r4, r1
 800c91c:	0719      	lsls	r1, r3, #28
 800c91e:	b083      	sub	sp, #12
 800c920:	4682      	mov	sl, r0
 800c922:	4690      	mov	r8, r2
 800c924:	d535      	bpl.n	800c992 <__sfvwrite_r+0x8a>
 800c926:	6922      	ldr	r2, [r4, #16]
 800c928:	b39a      	cbz	r2, 800c992 <__sfvwrite_r+0x8a>
 800c92a:	f013 0202 	ands.w	r2, r3, #2
 800c92e:	f8d8 6000 	ldr.w	r6, [r8]
 800c932:	d03d      	beq.n	800c9b0 <__sfvwrite_r+0xa8>
 800c934:	2700      	movs	r7, #0
 800c936:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800c93a:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 800c93e:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 800cc00 <__sfvwrite_r+0x2f8>
 800c942:	463d      	mov	r5, r7
 800c944:	454d      	cmp	r5, r9
 800c946:	462b      	mov	r3, r5
 800c948:	463a      	mov	r2, r7
 800c94a:	bf28      	it	cs
 800c94c:	464b      	movcs	r3, r9
 800c94e:	4661      	mov	r1, ip
 800c950:	4650      	mov	r0, sl
 800c952:	b1d5      	cbz	r5, 800c98a <__sfvwrite_r+0x82>
 800c954:	47d8      	blx	fp
 800c956:	2800      	cmp	r0, #0
 800c958:	f340 80c6 	ble.w	800cae8 <__sfvwrite_r+0x1e0>
 800c95c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c960:	1a1b      	subs	r3, r3, r0
 800c962:	4407      	add	r7, r0
 800c964:	1a2d      	subs	r5, r5, r0
 800c966:	f8c8 3008 	str.w	r3, [r8, #8]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	f000 80b0 	beq.w	800cad0 <__sfvwrite_r+0x1c8>
 800c970:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 800c974:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800c978:	454d      	cmp	r5, r9
 800c97a:	462b      	mov	r3, r5
 800c97c:	463a      	mov	r2, r7
 800c97e:	bf28      	it	cs
 800c980:	464b      	movcs	r3, r9
 800c982:	4661      	mov	r1, ip
 800c984:	4650      	mov	r0, sl
 800c986:	2d00      	cmp	r5, #0
 800c988:	d1e4      	bne.n	800c954 <__sfvwrite_r+0x4c>
 800c98a:	e9d6 7500 	ldrd	r7, r5, [r6]
 800c98e:	3608      	adds	r6, #8
 800c990:	e7d8      	b.n	800c944 <__sfvwrite_r+0x3c>
 800c992:	4621      	mov	r1, r4
 800c994:	4650      	mov	r0, sl
 800c996:	f7fe fd41 	bl	800b41c <__swsetup_r>
 800c99a:	2800      	cmp	r0, #0
 800c99c:	f040 812a 	bne.w	800cbf4 <__sfvwrite_r+0x2ec>
 800c9a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9a4:	f8d8 6000 	ldr.w	r6, [r8]
 800c9a8:	b29b      	uxth	r3, r3
 800c9aa:	f013 0202 	ands.w	r2, r3, #2
 800c9ae:	d1c1      	bne.n	800c934 <__sfvwrite_r+0x2c>
 800c9b0:	f013 0901 	ands.w	r9, r3, #1
 800c9b4:	d15d      	bne.n	800ca72 <__sfvwrite_r+0x16a>
 800c9b6:	68a7      	ldr	r7, [r4, #8]
 800c9b8:	6820      	ldr	r0, [r4, #0]
 800c9ba:	464d      	mov	r5, r9
 800c9bc:	2d00      	cmp	r5, #0
 800c9be:	d054      	beq.n	800ca6a <__sfvwrite_r+0x162>
 800c9c0:	059a      	lsls	r2, r3, #22
 800c9c2:	f140 809b 	bpl.w	800cafc <__sfvwrite_r+0x1f4>
 800c9c6:	42af      	cmp	r7, r5
 800c9c8:	46bb      	mov	fp, r7
 800c9ca:	f200 80d8 	bhi.w	800cb7e <__sfvwrite_r+0x276>
 800c9ce:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800c9d2:	d02f      	beq.n	800ca34 <__sfvwrite_r+0x12c>
 800c9d4:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
 800c9d8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800c9dc:	eba0 0b01 	sub.w	fp, r0, r1
 800c9e0:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 800c9e4:	1c68      	adds	r0, r5, #1
 800c9e6:	107f      	asrs	r7, r7, #1
 800c9e8:	4458      	add	r0, fp
 800c9ea:	42b8      	cmp	r0, r7
 800c9ec:	463a      	mov	r2, r7
 800c9ee:	bf84      	itt	hi
 800c9f0:	4607      	movhi	r7, r0
 800c9f2:	463a      	movhi	r2, r7
 800c9f4:	055b      	lsls	r3, r3, #21
 800c9f6:	f140 80d3 	bpl.w	800cba0 <__sfvwrite_r+0x298>
 800c9fa:	4611      	mov	r1, r2
 800c9fc:	4650      	mov	r0, sl
 800c9fe:	f000 f9cb 	bl	800cd98 <_malloc_r>
 800ca02:	2800      	cmp	r0, #0
 800ca04:	f000 80f0 	beq.w	800cbe8 <__sfvwrite_r+0x2e0>
 800ca08:	465a      	mov	r2, fp
 800ca0a:	6921      	ldr	r1, [r4, #16]
 800ca0c:	9001      	str	r0, [sp, #4]
 800ca0e:	f7f3 fdfd 	bl	800060c <memcpy>
 800ca12:	89a2      	ldrh	r2, [r4, #12]
 800ca14:	9b01      	ldr	r3, [sp, #4]
 800ca16:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800ca1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ca1e:	81a2      	strh	r2, [r4, #12]
 800ca20:	eba7 020b 	sub.w	r2, r7, fp
 800ca24:	eb03 000b 	add.w	r0, r3, fp
 800ca28:	6167      	str	r7, [r4, #20]
 800ca2a:	6123      	str	r3, [r4, #16]
 800ca2c:	6020      	str	r0, [r4, #0]
 800ca2e:	60a2      	str	r2, [r4, #8]
 800ca30:	462f      	mov	r7, r5
 800ca32:	46ab      	mov	fp, r5
 800ca34:	465a      	mov	r2, fp
 800ca36:	4649      	mov	r1, r9
 800ca38:	f000 fc68 	bl	800d30c <memmove>
 800ca3c:	68a2      	ldr	r2, [r4, #8]
 800ca3e:	6823      	ldr	r3, [r4, #0]
 800ca40:	1bd2      	subs	r2, r2, r7
 800ca42:	445b      	add	r3, fp
 800ca44:	462f      	mov	r7, r5
 800ca46:	60a2      	str	r2, [r4, #8]
 800ca48:	6023      	str	r3, [r4, #0]
 800ca4a:	2500      	movs	r5, #0
 800ca4c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ca50:	1bdb      	subs	r3, r3, r7
 800ca52:	44b9      	add	r9, r7
 800ca54:	f8c8 3008 	str.w	r3, [r8, #8]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d039      	beq.n	800cad0 <__sfvwrite_r+0x1c8>
 800ca5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca60:	68a7      	ldr	r7, [r4, #8]
 800ca62:	6820      	ldr	r0, [r4, #0]
 800ca64:	b29b      	uxth	r3, r3
 800ca66:	2d00      	cmp	r5, #0
 800ca68:	d1aa      	bne.n	800c9c0 <__sfvwrite_r+0xb8>
 800ca6a:	e9d6 9500 	ldrd	r9, r5, [r6]
 800ca6e:	3608      	adds	r6, #8
 800ca70:	e7a4      	b.n	800c9bc <__sfvwrite_r+0xb4>
 800ca72:	4633      	mov	r3, r6
 800ca74:	4691      	mov	r9, r2
 800ca76:	4610      	mov	r0, r2
 800ca78:	4617      	mov	r7, r2
 800ca7a:	464e      	mov	r6, r9
 800ca7c:	469b      	mov	fp, r3
 800ca7e:	2f00      	cmp	r7, #0
 800ca80:	d06b      	beq.n	800cb5a <__sfvwrite_r+0x252>
 800ca82:	2800      	cmp	r0, #0
 800ca84:	d071      	beq.n	800cb6a <__sfvwrite_r+0x262>
 800ca86:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 800ca8a:	6820      	ldr	r0, [r4, #0]
 800ca8c:	45b9      	cmp	r9, r7
 800ca8e:	464b      	mov	r3, r9
 800ca90:	bf28      	it	cs
 800ca92:	463b      	movcs	r3, r7
 800ca94:	4288      	cmp	r0, r1
 800ca96:	d903      	bls.n	800caa0 <__sfvwrite_r+0x198>
 800ca98:	68a5      	ldr	r5, [r4, #8]
 800ca9a:	4415      	add	r5, r2
 800ca9c:	42ab      	cmp	r3, r5
 800ca9e:	dc71      	bgt.n	800cb84 <__sfvwrite_r+0x27c>
 800caa0:	429a      	cmp	r2, r3
 800caa2:	f300 8093 	bgt.w	800cbcc <__sfvwrite_r+0x2c4>
 800caa6:	4613      	mov	r3, r2
 800caa8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800caaa:	69e1      	ldr	r1, [r4, #28]
 800caac:	4632      	mov	r2, r6
 800caae:	4650      	mov	r0, sl
 800cab0:	47a8      	blx	r5
 800cab2:	1e05      	subs	r5, r0, #0
 800cab4:	dd18      	ble.n	800cae8 <__sfvwrite_r+0x1e0>
 800cab6:	ebb9 0905 	subs.w	r9, r9, r5
 800caba:	d00f      	beq.n	800cadc <__sfvwrite_r+0x1d4>
 800cabc:	2001      	movs	r0, #1
 800cabe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cac2:	1b5b      	subs	r3, r3, r5
 800cac4:	442e      	add	r6, r5
 800cac6:	1b7f      	subs	r7, r7, r5
 800cac8:	f8c8 3008 	str.w	r3, [r8, #8]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d1d6      	bne.n	800ca7e <__sfvwrite_r+0x176>
 800cad0:	2000      	movs	r0, #0
 800cad2:	b003      	add	sp, #12
 800cad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cad8:	2000      	movs	r0, #0
 800cada:	4770      	bx	lr
 800cadc:	4621      	mov	r1, r4
 800cade:	4650      	mov	r0, sl
 800cae0:	f7ff fd3a 	bl	800c558 <_fflush_r>
 800cae4:	2800      	cmp	r0, #0
 800cae6:	d0ea      	beq.n	800cabe <__sfvwrite_r+0x1b6>
 800cae8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800caec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800caf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800caf4:	81a3      	strh	r3, [r4, #12]
 800caf6:	b003      	add	sp, #12
 800caf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cafc:	6923      	ldr	r3, [r4, #16]
 800cafe:	4283      	cmp	r3, r0
 800cb00:	d315      	bcc.n	800cb2e <__sfvwrite_r+0x226>
 800cb02:	6961      	ldr	r1, [r4, #20]
 800cb04:	42a9      	cmp	r1, r5
 800cb06:	d812      	bhi.n	800cb2e <__sfvwrite_r+0x226>
 800cb08:	4b3c      	ldr	r3, [pc, #240]	; (800cbfc <__sfvwrite_r+0x2f4>)
 800cb0a:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800cb0c:	429d      	cmp	r5, r3
 800cb0e:	bf94      	ite	ls
 800cb10:	462b      	movls	r3, r5
 800cb12:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
 800cb16:	464a      	mov	r2, r9
 800cb18:	fb93 f3f1 	sdiv	r3, r3, r1
 800cb1c:	4650      	mov	r0, sl
 800cb1e:	fb01 f303 	mul.w	r3, r1, r3
 800cb22:	69e1      	ldr	r1, [r4, #28]
 800cb24:	47b8      	blx	r7
 800cb26:	1e07      	subs	r7, r0, #0
 800cb28:	ddde      	ble.n	800cae8 <__sfvwrite_r+0x1e0>
 800cb2a:	1bed      	subs	r5, r5, r7
 800cb2c:	e78e      	b.n	800ca4c <__sfvwrite_r+0x144>
 800cb2e:	42af      	cmp	r7, r5
 800cb30:	bf28      	it	cs
 800cb32:	462f      	movcs	r7, r5
 800cb34:	463a      	mov	r2, r7
 800cb36:	4649      	mov	r1, r9
 800cb38:	f000 fbe8 	bl	800d30c <memmove>
 800cb3c:	68a3      	ldr	r3, [r4, #8]
 800cb3e:	6822      	ldr	r2, [r4, #0]
 800cb40:	1bdb      	subs	r3, r3, r7
 800cb42:	443a      	add	r2, r7
 800cb44:	60a3      	str	r3, [r4, #8]
 800cb46:	6022      	str	r2, [r4, #0]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d1ee      	bne.n	800cb2a <__sfvwrite_r+0x222>
 800cb4c:	4621      	mov	r1, r4
 800cb4e:	4650      	mov	r0, sl
 800cb50:	f7ff fd02 	bl	800c558 <_fflush_r>
 800cb54:	2800      	cmp	r0, #0
 800cb56:	d0e8      	beq.n	800cb2a <__sfvwrite_r+0x222>
 800cb58:	e7c6      	b.n	800cae8 <__sfvwrite_r+0x1e0>
 800cb5a:	f10b 0308 	add.w	r3, fp, #8
 800cb5e:	e953 6702 	ldrd	r6, r7, [r3, #-8]
 800cb62:	469b      	mov	fp, r3
 800cb64:	3308      	adds	r3, #8
 800cb66:	2f00      	cmp	r7, #0
 800cb68:	d0f9      	beq.n	800cb5e <__sfvwrite_r+0x256>
 800cb6a:	463a      	mov	r2, r7
 800cb6c:	210a      	movs	r1, #10
 800cb6e:	4630      	mov	r0, r6
 800cb70:	f7f3 fe56 	bl	8000820 <memchr>
 800cb74:	b338      	cbz	r0, 800cbc6 <__sfvwrite_r+0x2be>
 800cb76:	3001      	adds	r0, #1
 800cb78:	eba0 0906 	sub.w	r9, r0, r6
 800cb7c:	e783      	b.n	800ca86 <__sfvwrite_r+0x17e>
 800cb7e:	462f      	mov	r7, r5
 800cb80:	46ab      	mov	fp, r5
 800cb82:	e757      	b.n	800ca34 <__sfvwrite_r+0x12c>
 800cb84:	4631      	mov	r1, r6
 800cb86:	462a      	mov	r2, r5
 800cb88:	f000 fbc0 	bl	800d30c <memmove>
 800cb8c:	6823      	ldr	r3, [r4, #0]
 800cb8e:	442b      	add	r3, r5
 800cb90:	6023      	str	r3, [r4, #0]
 800cb92:	4621      	mov	r1, r4
 800cb94:	4650      	mov	r0, sl
 800cb96:	f7ff fcdf 	bl	800c558 <_fflush_r>
 800cb9a:	2800      	cmp	r0, #0
 800cb9c:	d08b      	beq.n	800cab6 <__sfvwrite_r+0x1ae>
 800cb9e:	e7a3      	b.n	800cae8 <__sfvwrite_r+0x1e0>
 800cba0:	4650      	mov	r0, sl
 800cba2:	f000 ff23 	bl	800d9ec <_realloc_r>
 800cba6:	4603      	mov	r3, r0
 800cba8:	2800      	cmp	r0, #0
 800cbaa:	f47f af39 	bne.w	800ca20 <__sfvwrite_r+0x118>
 800cbae:	6921      	ldr	r1, [r4, #16]
 800cbb0:	4650      	mov	r0, sl
 800cbb2:	f7ff fdb5 	bl	800c720 <_free_r>
 800cbb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbba:	220c      	movs	r2, #12
 800cbbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cbc0:	f8ca 2000 	str.w	r2, [sl]
 800cbc4:	e792      	b.n	800caec <__sfvwrite_r+0x1e4>
 800cbc6:	f107 0901 	add.w	r9, r7, #1
 800cbca:	e75c      	b.n	800ca86 <__sfvwrite_r+0x17e>
 800cbcc:	461a      	mov	r2, r3
 800cbce:	4631      	mov	r1, r6
 800cbd0:	9301      	str	r3, [sp, #4]
 800cbd2:	f000 fb9b 	bl	800d30c <memmove>
 800cbd6:	9b01      	ldr	r3, [sp, #4]
 800cbd8:	68a1      	ldr	r1, [r4, #8]
 800cbda:	6822      	ldr	r2, [r4, #0]
 800cbdc:	1ac9      	subs	r1, r1, r3
 800cbde:	441a      	add	r2, r3
 800cbe0:	60a1      	str	r1, [r4, #8]
 800cbe2:	6022      	str	r2, [r4, #0]
 800cbe4:	461d      	mov	r5, r3
 800cbe6:	e766      	b.n	800cab6 <__sfvwrite_r+0x1ae>
 800cbe8:	230c      	movs	r3, #12
 800cbea:	f8ca 3000 	str.w	r3, [sl]
 800cbee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbf2:	e77b      	b.n	800caec <__sfvwrite_r+0x1e4>
 800cbf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cbf8:	e76b      	b.n	800cad2 <__sfvwrite_r+0x1ca>
 800cbfa:	bf00      	nop
 800cbfc:	7ffffffe 	.word	0x7ffffffe
 800cc00:	7ffffc00 	.word	0x7ffffc00

0800cc04 <_fwalk_reent>:
 800cc04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc08:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 800cc0c:	d01f      	beq.n	800cc4e <_fwalk_reent+0x4a>
 800cc0e:	4688      	mov	r8, r1
 800cc10:	4606      	mov	r6, r0
 800cc12:	f04f 0900 	mov.w	r9, #0
 800cc16:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
 800cc1a:	3d01      	subs	r5, #1
 800cc1c:	d411      	bmi.n	800cc42 <_fwalk_reent+0x3e>
 800cc1e:	89a3      	ldrh	r3, [r4, #12]
 800cc20:	2b01      	cmp	r3, #1
 800cc22:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800cc26:	4621      	mov	r1, r4
 800cc28:	4630      	mov	r0, r6
 800cc2a:	d906      	bls.n	800cc3a <_fwalk_reent+0x36>
 800cc2c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800cc30:	3301      	adds	r3, #1
 800cc32:	d002      	beq.n	800cc3a <_fwalk_reent+0x36>
 800cc34:	47c0      	blx	r8
 800cc36:	ea49 0900 	orr.w	r9, r9, r0
 800cc3a:	1c6b      	adds	r3, r5, #1
 800cc3c:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800cc40:	d1ed      	bne.n	800cc1e <_fwalk_reent+0x1a>
 800cc42:	683f      	ldr	r7, [r7, #0]
 800cc44:	2f00      	cmp	r7, #0
 800cc46:	d1e6      	bne.n	800cc16 <_fwalk_reent+0x12>
 800cc48:	4648      	mov	r0, r9
 800cc4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc4e:	46b9      	mov	r9, r7
 800cc50:	4648      	mov	r0, r9
 800cc52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc56:	bf00      	nop

0800cc58 <__locale_mb_cur_max>:
 800cc58:	4b04      	ldr	r3, [pc, #16]	; (800cc6c <__locale_mb_cur_max+0x14>)
 800cc5a:	4a05      	ldr	r2, [pc, #20]	; (800cc70 <__locale_mb_cur_max+0x18>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	bf08      	it	eq
 800cc64:	4613      	moveq	r3, r2
 800cc66:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800cc6a:	4770      	bx	lr
 800cc6c:	20000038 	.word	0x20000038
 800cc70:	20000468 	.word	0x20000468

0800cc74 <__locale_ctype_ptr_l>:
 800cc74:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800cc78:	4770      	bx	lr
 800cc7a:	bf00      	nop

0800cc7c <_localeconv_r>:
 800cc7c:	4a04      	ldr	r2, [pc, #16]	; (800cc90 <_localeconv_r+0x14>)
 800cc7e:	4b05      	ldr	r3, [pc, #20]	; (800cc94 <_localeconv_r+0x18>)
 800cc80:	6812      	ldr	r2, [r2, #0]
 800cc82:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800cc84:	2800      	cmp	r0, #0
 800cc86:	bf08      	it	eq
 800cc88:	4618      	moveq	r0, r3
 800cc8a:	30f0      	adds	r0, #240	; 0xf0
 800cc8c:	4770      	bx	lr
 800cc8e:	bf00      	nop
 800cc90:	20000038 	.word	0x20000038
 800cc94:	20000468 	.word	0x20000468

0800cc98 <__retarget_lock_init_recursive>:
 800cc98:	4770      	bx	lr
 800cc9a:	bf00      	nop

0800cc9c <__retarget_lock_close_recursive>:
 800cc9c:	4770      	bx	lr
 800cc9e:	bf00      	nop

0800cca0 <__retarget_lock_acquire_recursive>:
 800cca0:	4770      	bx	lr
 800cca2:	bf00      	nop

0800cca4 <__retarget_lock_release_recursive>:
 800cca4:	4770      	bx	lr
 800cca6:	bf00      	nop

0800cca8 <__swhatbuf_r>:
 800cca8:	b570      	push	{r4, r5, r6, lr}
 800ccaa:	460c      	mov	r4, r1
 800ccac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccb0:	2900      	cmp	r1, #0
 800ccb2:	b096      	sub	sp, #88	; 0x58
 800ccb4:	4615      	mov	r5, r2
 800ccb6:	461e      	mov	r6, r3
 800ccb8:	da0f      	bge.n	800ccda <__swhatbuf_r+0x32>
 800ccba:	89a2      	ldrh	r2, [r4, #12]
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	f012 0080 	ands.w	r0, r2, #128	; 0x80
 800ccc2:	6033      	str	r3, [r6, #0]
 800ccc4:	d104      	bne.n	800ccd0 <__swhatbuf_r+0x28>
 800ccc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccca:	602b      	str	r3, [r5, #0]
 800cccc:	b016      	add	sp, #88	; 0x58
 800ccce:	bd70      	pop	{r4, r5, r6, pc}
 800ccd0:	2240      	movs	r2, #64	; 0x40
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	602a      	str	r2, [r5, #0]
 800ccd6:	b016      	add	sp, #88	; 0x58
 800ccd8:	bd70      	pop	{r4, r5, r6, pc}
 800ccda:	466a      	mov	r2, sp
 800ccdc:	f001 fa9e 	bl	800e21c <_fstat_r>
 800cce0:	2800      	cmp	r0, #0
 800cce2:	dbea      	blt.n	800ccba <__swhatbuf_r+0x12>
 800cce4:	9b01      	ldr	r3, [sp, #4]
 800cce6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800ccea:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 800ccee:	fab3 f383 	clz	r3, r3
 800ccf2:	095b      	lsrs	r3, r3, #5
 800ccf4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ccf8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800ccfc:	6033      	str	r3, [r6, #0]
 800ccfe:	602a      	str	r2, [r5, #0]
 800cd00:	b016      	add	sp, #88	; 0x58
 800cd02:	bd70      	pop	{r4, r5, r6, pc}

0800cd04 <__smakebuf_r>:
 800cd04:	898a      	ldrh	r2, [r1, #12]
 800cd06:	0792      	lsls	r2, r2, #30
 800cd08:	460b      	mov	r3, r1
 800cd0a:	d506      	bpl.n	800cd1a <__smakebuf_r+0x16>
 800cd0c:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cd10:	2101      	movs	r1, #1
 800cd12:	601a      	str	r2, [r3, #0]
 800cd14:	e9c3 2104 	strd	r2, r1, [r3, #16]
 800cd18:	4770      	bx	lr
 800cd1a:	b570      	push	{r4, r5, r6, lr}
 800cd1c:	b082      	sub	sp, #8
 800cd1e:	ab01      	add	r3, sp, #4
 800cd20:	466a      	mov	r2, sp
 800cd22:	460c      	mov	r4, r1
 800cd24:	4605      	mov	r5, r0
 800cd26:	f7ff ffbf 	bl	800cca8 <__swhatbuf_r>
 800cd2a:	9900      	ldr	r1, [sp, #0]
 800cd2c:	4606      	mov	r6, r0
 800cd2e:	4628      	mov	r0, r5
 800cd30:	f000 f832 	bl	800cd98 <_malloc_r>
 800cd34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd38:	b1d8      	cbz	r0, 800cd72 <__smakebuf_r+0x6e>
 800cd3a:	4916      	ldr	r1, [pc, #88]	; (800cd94 <__smakebuf_r+0x90>)
 800cd3c:	63e9      	str	r1, [r5, #60]	; 0x3c
 800cd3e:	9a01      	ldr	r2, [sp, #4]
 800cd40:	9900      	ldr	r1, [sp, #0]
 800cd42:	6020      	str	r0, [r4, #0]
 800cd44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd48:	81a3      	strh	r3, [r4, #12]
 800cd4a:	e9c4 0104 	strd	r0, r1, [r4, #16]
 800cd4e:	b91a      	cbnz	r2, 800cd58 <__smakebuf_r+0x54>
 800cd50:	4333      	orrs	r3, r6
 800cd52:	81a3      	strh	r3, [r4, #12]
 800cd54:	b002      	add	sp, #8
 800cd56:	bd70      	pop	{r4, r5, r6, pc}
 800cd58:	4628      	mov	r0, r5
 800cd5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd5e:	f001 fa71 	bl	800e244 <_isatty_r>
 800cd62:	b1a0      	cbz	r0, 800cd8e <__smakebuf_r+0x8a>
 800cd64:	89a3      	ldrh	r3, [r4, #12]
 800cd66:	f023 0303 	bic.w	r3, r3, #3
 800cd6a:	f043 0301 	orr.w	r3, r3, #1
 800cd6e:	b21b      	sxth	r3, r3
 800cd70:	e7ee      	b.n	800cd50 <__smakebuf_r+0x4c>
 800cd72:	059a      	lsls	r2, r3, #22
 800cd74:	d4ee      	bmi.n	800cd54 <__smakebuf_r+0x50>
 800cd76:	f023 0303 	bic.w	r3, r3, #3
 800cd7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cd7e:	f043 0302 	orr.w	r3, r3, #2
 800cd82:	2101      	movs	r1, #1
 800cd84:	81a3      	strh	r3, [r4, #12]
 800cd86:	6022      	str	r2, [r4, #0]
 800cd88:	e9c4 2104 	strd	r2, r1, [r4, #16]
 800cd8c:	e7e2      	b.n	800cd54 <__smakebuf_r+0x50>
 800cd8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd92:	e7dd      	b.n	800cd50 <__smakebuf_r+0x4c>
 800cd94:	0800c605 	.word	0x0800c605

0800cd98 <_malloc_r>:
 800cd98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd9c:	f101 050b 	add.w	r5, r1, #11
 800cda0:	2d16      	cmp	r5, #22
 800cda2:	b083      	sub	sp, #12
 800cda4:	4606      	mov	r6, r0
 800cda6:	d823      	bhi.n	800cdf0 <_malloc_r+0x58>
 800cda8:	2910      	cmp	r1, #16
 800cdaa:	f200 80b9 	bhi.w	800cf20 <_malloc_r+0x188>
 800cdae:	f000 fb11 	bl	800d3d4 <__malloc_lock>
 800cdb2:	2510      	movs	r5, #16
 800cdb4:	2318      	movs	r3, #24
 800cdb6:	2002      	movs	r0, #2
 800cdb8:	4fc5      	ldr	r7, [pc, #788]	; (800d0d0 <_malloc_r+0x338>)
 800cdba:	443b      	add	r3, r7
 800cdbc:	f1a3 0208 	sub.w	r2, r3, #8
 800cdc0:	685c      	ldr	r4, [r3, #4]
 800cdc2:	4294      	cmp	r4, r2
 800cdc4:	f000 8166 	beq.w	800d094 <_malloc_r+0x2fc>
 800cdc8:	6863      	ldr	r3, [r4, #4]
 800cdca:	f023 0303 	bic.w	r3, r3, #3
 800cdce:	4423      	add	r3, r4
 800cdd0:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
 800cdd4:	685a      	ldr	r2, [r3, #4]
 800cdd6:	60e9      	str	r1, [r5, #12]
 800cdd8:	f042 0201 	orr.w	r2, r2, #1
 800cddc:	608d      	str	r5, [r1, #8]
 800cdde:	4630      	mov	r0, r6
 800cde0:	605a      	str	r2, [r3, #4]
 800cde2:	f000 fafd 	bl	800d3e0 <__malloc_unlock>
 800cde6:	3408      	adds	r4, #8
 800cde8:	4620      	mov	r0, r4
 800cdea:	b003      	add	sp, #12
 800cdec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdf0:	f035 0507 	bics.w	r5, r5, #7
 800cdf4:	f100 8094 	bmi.w	800cf20 <_malloc_r+0x188>
 800cdf8:	42a9      	cmp	r1, r5
 800cdfa:	f200 8091 	bhi.w	800cf20 <_malloc_r+0x188>
 800cdfe:	f000 fae9 	bl	800d3d4 <__malloc_lock>
 800ce02:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 800ce06:	f0c0 8183 	bcc.w	800d110 <_malloc_r+0x378>
 800ce0a:	0a6b      	lsrs	r3, r5, #9
 800ce0c:	f000 808f 	beq.w	800cf2e <_malloc_r+0x196>
 800ce10:	2b04      	cmp	r3, #4
 800ce12:	f200 8146 	bhi.w	800d0a2 <_malloc_r+0x30a>
 800ce16:	09ab      	lsrs	r3, r5, #6
 800ce18:	f103 0039 	add.w	r0, r3, #57	; 0x39
 800ce1c:	f103 0c38 	add.w	ip, r3, #56	; 0x38
 800ce20:	00c3      	lsls	r3, r0, #3
 800ce22:	4fab      	ldr	r7, [pc, #684]	; (800d0d0 <_malloc_r+0x338>)
 800ce24:	443b      	add	r3, r7
 800ce26:	f1a3 0108 	sub.w	r1, r3, #8
 800ce2a:	685c      	ldr	r4, [r3, #4]
 800ce2c:	42a1      	cmp	r1, r4
 800ce2e:	d106      	bne.n	800ce3e <_malloc_r+0xa6>
 800ce30:	e00c      	b.n	800ce4c <_malloc_r+0xb4>
 800ce32:	2a00      	cmp	r2, #0
 800ce34:	f280 811d 	bge.w	800d072 <_malloc_r+0x2da>
 800ce38:	68e4      	ldr	r4, [r4, #12]
 800ce3a:	42a1      	cmp	r1, r4
 800ce3c:	d006      	beq.n	800ce4c <_malloc_r+0xb4>
 800ce3e:	6863      	ldr	r3, [r4, #4]
 800ce40:	f023 0303 	bic.w	r3, r3, #3
 800ce44:	1b5a      	subs	r2, r3, r5
 800ce46:	2a0f      	cmp	r2, #15
 800ce48:	ddf3      	ble.n	800ce32 <_malloc_r+0x9a>
 800ce4a:	4660      	mov	r0, ip
 800ce4c:	693c      	ldr	r4, [r7, #16]
 800ce4e:	f8df c294 	ldr.w	ip, [pc, #660]	; 800d0e4 <_malloc_r+0x34c>
 800ce52:	4564      	cmp	r4, ip
 800ce54:	d071      	beq.n	800cf3a <_malloc_r+0x1a2>
 800ce56:	6863      	ldr	r3, [r4, #4]
 800ce58:	f023 0303 	bic.w	r3, r3, #3
 800ce5c:	1b5a      	subs	r2, r3, r5
 800ce5e:	2a0f      	cmp	r2, #15
 800ce60:	f300 8144 	bgt.w	800d0ec <_malloc_r+0x354>
 800ce64:	2a00      	cmp	r2, #0
 800ce66:	e9c7 cc04 	strd	ip, ip, [r7, #16]
 800ce6a:	f280 8126 	bge.w	800d0ba <_malloc_r+0x322>
 800ce6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ce72:	f080 8169 	bcs.w	800d148 <_malloc_r+0x3b0>
 800ce76:	08db      	lsrs	r3, r3, #3
 800ce78:	1c59      	adds	r1, r3, #1
 800ce7a:	687a      	ldr	r2, [r7, #4]
 800ce7c:	f857 8031 	ldr.w	r8, [r7, r1, lsl #3]
 800ce80:	f8c4 8008 	str.w	r8, [r4, #8]
 800ce84:	f04f 0e01 	mov.w	lr, #1
 800ce88:	109b      	asrs	r3, r3, #2
 800ce8a:	fa0e f303 	lsl.w	r3, lr, r3
 800ce8e:	eb07 0ec1 	add.w	lr, r7, r1, lsl #3
 800ce92:	4313      	orrs	r3, r2
 800ce94:	f1ae 0208 	sub.w	r2, lr, #8
 800ce98:	60e2      	str	r2, [r4, #12]
 800ce9a:	607b      	str	r3, [r7, #4]
 800ce9c:	f847 4031 	str.w	r4, [r7, r1, lsl #3]
 800cea0:	f8c8 400c 	str.w	r4, [r8, #12]
 800cea4:	1082      	asrs	r2, r0, #2
 800cea6:	2401      	movs	r4, #1
 800cea8:	4094      	lsls	r4, r2
 800ceaa:	429c      	cmp	r4, r3
 800ceac:	d84b      	bhi.n	800cf46 <_malloc_r+0x1ae>
 800ceae:	421c      	tst	r4, r3
 800ceb0:	d106      	bne.n	800cec0 <_malloc_r+0x128>
 800ceb2:	f020 0003 	bic.w	r0, r0, #3
 800ceb6:	0064      	lsls	r4, r4, #1
 800ceb8:	421c      	tst	r4, r3
 800ceba:	f100 0004 	add.w	r0, r0, #4
 800cebe:	d0fa      	beq.n	800ceb6 <_malloc_r+0x11e>
 800cec0:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 800cec4:	46ce      	mov	lr, r9
 800cec6:	4680      	mov	r8, r0
 800cec8:	f8de 300c 	ldr.w	r3, [lr, #12]
 800cecc:	459e      	cmp	lr, r3
 800cece:	d107      	bne.n	800cee0 <_malloc_r+0x148>
 800ced0:	e122      	b.n	800d118 <_malloc_r+0x380>
 800ced2:	2a00      	cmp	r2, #0
 800ced4:	f280 8129 	bge.w	800d12a <_malloc_r+0x392>
 800ced8:	68db      	ldr	r3, [r3, #12]
 800ceda:	459e      	cmp	lr, r3
 800cedc:	f000 811c 	beq.w	800d118 <_malloc_r+0x380>
 800cee0:	6859      	ldr	r1, [r3, #4]
 800cee2:	f021 0103 	bic.w	r1, r1, #3
 800cee6:	1b4a      	subs	r2, r1, r5
 800cee8:	2a0f      	cmp	r2, #15
 800ceea:	ddf2      	ble.n	800ced2 <_malloc_r+0x13a>
 800ceec:	e9d3 8e02 	ldrd	r8, lr, [r3, #8]
 800cef0:	195c      	adds	r4, r3, r5
 800cef2:	f045 0501 	orr.w	r5, r5, #1
 800cef6:	605d      	str	r5, [r3, #4]
 800cef8:	f042 0501 	orr.w	r5, r2, #1
 800cefc:	f8c8 e00c 	str.w	lr, [r8, #12]
 800cf00:	4630      	mov	r0, r6
 800cf02:	f8ce 8008 	str.w	r8, [lr, #8]
 800cf06:	e9c7 4404 	strd	r4, r4, [r7, #16]
 800cf0a:	e9c4 cc02 	strd	ip, ip, [r4, #8]
 800cf0e:	6065      	str	r5, [r4, #4]
 800cf10:	505a      	str	r2, [r3, r1]
 800cf12:	9301      	str	r3, [sp, #4]
 800cf14:	f000 fa64 	bl	800d3e0 <__malloc_unlock>
 800cf18:	9b01      	ldr	r3, [sp, #4]
 800cf1a:	f103 0408 	add.w	r4, r3, #8
 800cf1e:	e763      	b.n	800cde8 <_malloc_r+0x50>
 800cf20:	2400      	movs	r4, #0
 800cf22:	230c      	movs	r3, #12
 800cf24:	4620      	mov	r0, r4
 800cf26:	6033      	str	r3, [r6, #0]
 800cf28:	b003      	add	sp, #12
 800cf2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cf32:	2040      	movs	r0, #64	; 0x40
 800cf34:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 800cf38:	e773      	b.n	800ce22 <_malloc_r+0x8a>
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	1082      	asrs	r2, r0, #2
 800cf3e:	2401      	movs	r4, #1
 800cf40:	4094      	lsls	r4, r2
 800cf42:	429c      	cmp	r4, r3
 800cf44:	d9b3      	bls.n	800ceae <_malloc_r+0x116>
 800cf46:	68bc      	ldr	r4, [r7, #8]
 800cf48:	6863      	ldr	r3, [r4, #4]
 800cf4a:	f023 0903 	bic.w	r9, r3, #3
 800cf4e:	45a9      	cmp	r9, r5
 800cf50:	d303      	bcc.n	800cf5a <_malloc_r+0x1c2>
 800cf52:	eba9 0305 	sub.w	r3, r9, r5
 800cf56:	2b0f      	cmp	r3, #15
 800cf58:	dc7b      	bgt.n	800d052 <_malloc_r+0x2ba>
 800cf5a:	4b5e      	ldr	r3, [pc, #376]	; (800d0d4 <_malloc_r+0x33c>)
 800cf5c:	f8df a188 	ldr.w	sl, [pc, #392]	; 800d0e8 <_malloc_r+0x350>
 800cf60:	681a      	ldr	r2, [r3, #0]
 800cf62:	f8da 3000 	ldr.w	r3, [sl]
 800cf66:	3301      	adds	r3, #1
 800cf68:	eb05 0802 	add.w	r8, r5, r2
 800cf6c:	f000 8148 	beq.w	800d200 <_malloc_r+0x468>
 800cf70:	f508 5880 	add.w	r8, r8, #4096	; 0x1000
 800cf74:	f108 080f 	add.w	r8, r8, #15
 800cf78:	f428 687f 	bic.w	r8, r8, #4080	; 0xff0
 800cf7c:	f028 080f 	bic.w	r8, r8, #15
 800cf80:	4641      	mov	r1, r8
 800cf82:	4630      	mov	r0, r6
 800cf84:	f000 fee0 	bl	800dd48 <_sbrk_r>
 800cf88:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800cf8c:	4683      	mov	fp, r0
 800cf8e:	f000 8104 	beq.w	800d19a <_malloc_r+0x402>
 800cf92:	eb04 0009 	add.w	r0, r4, r9
 800cf96:	4558      	cmp	r0, fp
 800cf98:	f200 80fd 	bhi.w	800d196 <_malloc_r+0x3fe>
 800cf9c:	4a4e      	ldr	r2, [pc, #312]	; (800d0d8 <_malloc_r+0x340>)
 800cf9e:	6813      	ldr	r3, [r2, #0]
 800cfa0:	4443      	add	r3, r8
 800cfa2:	6013      	str	r3, [r2, #0]
 800cfa4:	f000 814d 	beq.w	800d242 <_malloc_r+0x4aa>
 800cfa8:	f8da 1000 	ldr.w	r1, [sl]
 800cfac:	3101      	adds	r1, #1
 800cfae:	bf1b      	ittet	ne
 800cfb0:	ebab 0000 	subne.w	r0, fp, r0
 800cfb4:	181b      	addne	r3, r3, r0
 800cfb6:	f8ca b000 	streq.w	fp, [sl]
 800cfba:	6013      	strne	r3, [r2, #0]
 800cfbc:	f01b 0307 	ands.w	r3, fp, #7
 800cfc0:	f000 8134 	beq.w	800d22c <_malloc_r+0x494>
 800cfc4:	f1c3 0108 	rsb	r1, r3, #8
 800cfc8:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800cfcc:	448b      	add	fp, r1
 800cfce:	3308      	adds	r3, #8
 800cfd0:	44d8      	add	r8, fp
 800cfd2:	f3c8 080b 	ubfx	r8, r8, #0, #12
 800cfd6:	eba3 0808 	sub.w	r8, r3, r8
 800cfda:	4641      	mov	r1, r8
 800cfdc:	4630      	mov	r0, r6
 800cfde:	9201      	str	r2, [sp, #4]
 800cfe0:	f000 feb2 	bl	800dd48 <_sbrk_r>
 800cfe4:	1c43      	adds	r3, r0, #1
 800cfe6:	9a01      	ldr	r2, [sp, #4]
 800cfe8:	f000 8146 	beq.w	800d278 <_malloc_r+0x4e0>
 800cfec:	eba0 010b 	sub.w	r1, r0, fp
 800cff0:	4441      	add	r1, r8
 800cff2:	f041 0101 	orr.w	r1, r1, #1
 800cff6:	6813      	ldr	r3, [r2, #0]
 800cff8:	f8c7 b008 	str.w	fp, [r7, #8]
 800cffc:	4443      	add	r3, r8
 800cffe:	42bc      	cmp	r4, r7
 800d000:	f8cb 1004 	str.w	r1, [fp, #4]
 800d004:	6013      	str	r3, [r2, #0]
 800d006:	d015      	beq.n	800d034 <_malloc_r+0x29c>
 800d008:	f1b9 0f0f 	cmp.w	r9, #15
 800d00c:	f240 8130 	bls.w	800d270 <_malloc_r+0x4d8>
 800d010:	6860      	ldr	r0, [r4, #4]
 800d012:	f1a9 010c 	sub.w	r1, r9, #12
 800d016:	f021 0107 	bic.w	r1, r1, #7
 800d01a:	f000 0001 	and.w	r0, r0, #1
 800d01e:	eb04 0c01 	add.w	ip, r4, r1
 800d022:	4308      	orrs	r0, r1
 800d024:	f04f 0e05 	mov.w	lr, #5
 800d028:	290f      	cmp	r1, #15
 800d02a:	6060      	str	r0, [r4, #4]
 800d02c:	e9cc ee01 	strd	lr, lr, [ip, #4]
 800d030:	f200 813a 	bhi.w	800d2a8 <_malloc_r+0x510>
 800d034:	4a29      	ldr	r2, [pc, #164]	; (800d0dc <_malloc_r+0x344>)
 800d036:	482a      	ldr	r0, [pc, #168]	; (800d0e0 <_malloc_r+0x348>)
 800d038:	6811      	ldr	r1, [r2, #0]
 800d03a:	68bc      	ldr	r4, [r7, #8]
 800d03c:	428b      	cmp	r3, r1
 800d03e:	6801      	ldr	r1, [r0, #0]
 800d040:	bf88      	it	hi
 800d042:	6013      	strhi	r3, [r2, #0]
 800d044:	6862      	ldr	r2, [r4, #4]
 800d046:	428b      	cmp	r3, r1
 800d048:	f022 0203 	bic.w	r2, r2, #3
 800d04c:	bf88      	it	hi
 800d04e:	6003      	strhi	r3, [r0, #0]
 800d050:	e0a7      	b.n	800d1a2 <_malloc_r+0x40a>
 800d052:	1962      	adds	r2, r4, r5
 800d054:	f043 0301 	orr.w	r3, r3, #1
 800d058:	f045 0501 	orr.w	r5, r5, #1
 800d05c:	6065      	str	r5, [r4, #4]
 800d05e:	4630      	mov	r0, r6
 800d060:	60ba      	str	r2, [r7, #8]
 800d062:	6053      	str	r3, [r2, #4]
 800d064:	f000 f9bc 	bl	800d3e0 <__malloc_unlock>
 800d068:	3408      	adds	r4, #8
 800d06a:	4620      	mov	r0, r4
 800d06c:	b003      	add	sp, #12
 800d06e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d072:	4423      	add	r3, r4
 800d074:	68e1      	ldr	r1, [r4, #12]
 800d076:	685a      	ldr	r2, [r3, #4]
 800d078:	68a5      	ldr	r5, [r4, #8]
 800d07a:	f042 0201 	orr.w	r2, r2, #1
 800d07e:	60e9      	str	r1, [r5, #12]
 800d080:	4630      	mov	r0, r6
 800d082:	608d      	str	r5, [r1, #8]
 800d084:	605a      	str	r2, [r3, #4]
 800d086:	f000 f9ab 	bl	800d3e0 <__malloc_unlock>
 800d08a:	3408      	adds	r4, #8
 800d08c:	4620      	mov	r0, r4
 800d08e:	b003      	add	sp, #12
 800d090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d094:	68dc      	ldr	r4, [r3, #12]
 800d096:	42a3      	cmp	r3, r4
 800d098:	bf08      	it	eq
 800d09a:	3002      	addeq	r0, #2
 800d09c:	f43f aed6 	beq.w	800ce4c <_malloc_r+0xb4>
 800d0a0:	e692      	b.n	800cdc8 <_malloc_r+0x30>
 800d0a2:	2b14      	cmp	r3, #20
 800d0a4:	d971      	bls.n	800d18a <_malloc_r+0x3f2>
 800d0a6:	2b54      	cmp	r3, #84	; 0x54
 800d0a8:	f200 80ad 	bhi.w	800d206 <_malloc_r+0x46e>
 800d0ac:	0b2b      	lsrs	r3, r5, #12
 800d0ae:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 800d0b2:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
 800d0b6:	00c3      	lsls	r3, r0, #3
 800d0b8:	e6b3      	b.n	800ce22 <_malloc_r+0x8a>
 800d0ba:	4423      	add	r3, r4
 800d0bc:	4630      	mov	r0, r6
 800d0be:	685a      	ldr	r2, [r3, #4]
 800d0c0:	f042 0201 	orr.w	r2, r2, #1
 800d0c4:	605a      	str	r2, [r3, #4]
 800d0c6:	3408      	adds	r4, #8
 800d0c8:	f000 f98a 	bl	800d3e0 <__malloc_unlock>
 800d0cc:	e68c      	b.n	800cde8 <_malloc_r+0x50>
 800d0ce:	bf00      	nop
 800d0d0:	200005d4 	.word	0x200005d4
 800d0d4:	20001a2c 	.word	0x20001a2c
 800d0d8:	200019fc 	.word	0x200019fc
 800d0dc:	20001a24 	.word	0x20001a24
 800d0e0:	20001a28 	.word	0x20001a28
 800d0e4:	200005dc 	.word	0x200005dc
 800d0e8:	200009dc 	.word	0x200009dc
 800d0ec:	1961      	adds	r1, r4, r5
 800d0ee:	f045 0e01 	orr.w	lr, r5, #1
 800d0f2:	f042 0501 	orr.w	r5, r2, #1
 800d0f6:	f8c4 e004 	str.w	lr, [r4, #4]
 800d0fa:	4630      	mov	r0, r6
 800d0fc:	e9c7 1104 	strd	r1, r1, [r7, #16]
 800d100:	e9c1 cc02 	strd	ip, ip, [r1, #8]
 800d104:	604d      	str	r5, [r1, #4]
 800d106:	50e2      	str	r2, [r4, r3]
 800d108:	f000 f96a 	bl	800d3e0 <__malloc_unlock>
 800d10c:	3408      	adds	r4, #8
 800d10e:	e66b      	b.n	800cde8 <_malloc_r+0x50>
 800d110:	08e8      	lsrs	r0, r5, #3
 800d112:	f105 0308 	add.w	r3, r5, #8
 800d116:	e64f      	b.n	800cdb8 <_malloc_r+0x20>
 800d118:	f108 0801 	add.w	r8, r8, #1
 800d11c:	f018 0f03 	tst.w	r8, #3
 800d120:	f10e 0e08 	add.w	lr, lr, #8
 800d124:	f47f aed0 	bne.w	800cec8 <_malloc_r+0x130>
 800d128:	e052      	b.n	800d1d0 <_malloc_r+0x438>
 800d12a:	4419      	add	r1, r3
 800d12c:	461c      	mov	r4, r3
 800d12e:	684a      	ldr	r2, [r1, #4]
 800d130:	68db      	ldr	r3, [r3, #12]
 800d132:	f854 5f08 	ldr.w	r5, [r4, #8]!
 800d136:	f042 0201 	orr.w	r2, r2, #1
 800d13a:	604a      	str	r2, [r1, #4]
 800d13c:	4630      	mov	r0, r6
 800d13e:	60eb      	str	r3, [r5, #12]
 800d140:	609d      	str	r5, [r3, #8]
 800d142:	f000 f94d 	bl	800d3e0 <__malloc_unlock>
 800d146:	e64f      	b.n	800cde8 <_malloc_r+0x50>
 800d148:	0a5a      	lsrs	r2, r3, #9
 800d14a:	2a04      	cmp	r2, #4
 800d14c:	d935      	bls.n	800d1ba <_malloc_r+0x422>
 800d14e:	2a14      	cmp	r2, #20
 800d150:	d86f      	bhi.n	800d232 <_malloc_r+0x49a>
 800d152:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 800d156:	00c9      	lsls	r1, r1, #3
 800d158:	325b      	adds	r2, #91	; 0x5b
 800d15a:	eb07 0e01 	add.w	lr, r7, r1
 800d15e:	5879      	ldr	r1, [r7, r1]
 800d160:	f1ae 0e08 	sub.w	lr, lr, #8
 800d164:	458e      	cmp	lr, r1
 800d166:	d058      	beq.n	800d21a <_malloc_r+0x482>
 800d168:	684a      	ldr	r2, [r1, #4]
 800d16a:	f022 0203 	bic.w	r2, r2, #3
 800d16e:	429a      	cmp	r2, r3
 800d170:	d902      	bls.n	800d178 <_malloc_r+0x3e0>
 800d172:	6889      	ldr	r1, [r1, #8]
 800d174:	458e      	cmp	lr, r1
 800d176:	d1f7      	bne.n	800d168 <_malloc_r+0x3d0>
 800d178:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	e9c4 1e02 	strd	r1, lr, [r4, #8]
 800d182:	f8ce 4008 	str.w	r4, [lr, #8]
 800d186:	60cc      	str	r4, [r1, #12]
 800d188:	e68c      	b.n	800cea4 <_malloc_r+0x10c>
 800d18a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 800d18e:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
 800d192:	00c3      	lsls	r3, r0, #3
 800d194:	e645      	b.n	800ce22 <_malloc_r+0x8a>
 800d196:	42bc      	cmp	r4, r7
 800d198:	d072      	beq.n	800d280 <_malloc_r+0x4e8>
 800d19a:	68bc      	ldr	r4, [r7, #8]
 800d19c:	6862      	ldr	r2, [r4, #4]
 800d19e:	f022 0203 	bic.w	r2, r2, #3
 800d1a2:	4295      	cmp	r5, r2
 800d1a4:	eba2 0305 	sub.w	r3, r2, r5
 800d1a8:	d802      	bhi.n	800d1b0 <_malloc_r+0x418>
 800d1aa:	2b0f      	cmp	r3, #15
 800d1ac:	f73f af51 	bgt.w	800d052 <_malloc_r+0x2ba>
 800d1b0:	4630      	mov	r0, r6
 800d1b2:	f000 f915 	bl	800d3e0 <__malloc_unlock>
 800d1b6:	2400      	movs	r4, #0
 800d1b8:	e616      	b.n	800cde8 <_malloc_r+0x50>
 800d1ba:	099a      	lsrs	r2, r3, #6
 800d1bc:	f102 0139 	add.w	r1, r2, #57	; 0x39
 800d1c0:	00c9      	lsls	r1, r1, #3
 800d1c2:	3238      	adds	r2, #56	; 0x38
 800d1c4:	e7c9      	b.n	800d15a <_malloc_r+0x3c2>
 800d1c6:	f8d9 9000 	ldr.w	r9, [r9]
 800d1ca:	4599      	cmp	r9, r3
 800d1cc:	f040 8083 	bne.w	800d2d6 <_malloc_r+0x53e>
 800d1d0:	f010 0f03 	tst.w	r0, #3
 800d1d4:	f1a9 0308 	sub.w	r3, r9, #8
 800d1d8:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 800d1dc:	d1f3      	bne.n	800d1c6 <_malloc_r+0x42e>
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	ea23 0304 	bic.w	r3, r3, r4
 800d1e4:	607b      	str	r3, [r7, #4]
 800d1e6:	0064      	lsls	r4, r4, #1
 800d1e8:	429c      	cmp	r4, r3
 800d1ea:	f63f aeac 	bhi.w	800cf46 <_malloc_r+0x1ae>
 800d1ee:	b91c      	cbnz	r4, 800d1f8 <_malloc_r+0x460>
 800d1f0:	e6a9      	b.n	800cf46 <_malloc_r+0x1ae>
 800d1f2:	0064      	lsls	r4, r4, #1
 800d1f4:	f108 0804 	add.w	r8, r8, #4
 800d1f8:	421c      	tst	r4, r3
 800d1fa:	d0fa      	beq.n	800d1f2 <_malloc_r+0x45a>
 800d1fc:	4640      	mov	r0, r8
 800d1fe:	e65f      	b.n	800cec0 <_malloc_r+0x128>
 800d200:	f108 0810 	add.w	r8, r8, #16
 800d204:	e6bc      	b.n	800cf80 <_malloc_r+0x1e8>
 800d206:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800d20a:	d826      	bhi.n	800d25a <_malloc_r+0x4c2>
 800d20c:	0beb      	lsrs	r3, r5, #15
 800d20e:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800d212:	f103 0c77 	add.w	ip, r3, #119	; 0x77
 800d216:	00c3      	lsls	r3, r0, #3
 800d218:	e603      	b.n	800ce22 <_malloc_r+0x8a>
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	1092      	asrs	r2, r2, #2
 800d21e:	f04f 0801 	mov.w	r8, #1
 800d222:	fa08 f202 	lsl.w	r2, r8, r2
 800d226:	4313      	orrs	r3, r2
 800d228:	607b      	str	r3, [r7, #4]
 800d22a:	e7a8      	b.n	800d17e <_malloc_r+0x3e6>
 800d22c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d230:	e6ce      	b.n	800cfd0 <_malloc_r+0x238>
 800d232:	2a54      	cmp	r2, #84	; 0x54
 800d234:	d829      	bhi.n	800d28a <_malloc_r+0x4f2>
 800d236:	0b1a      	lsrs	r2, r3, #12
 800d238:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 800d23c:	00c9      	lsls	r1, r1, #3
 800d23e:	326e      	adds	r2, #110	; 0x6e
 800d240:	e78b      	b.n	800d15a <_malloc_r+0x3c2>
 800d242:	f3c0 010b 	ubfx	r1, r0, #0, #12
 800d246:	2900      	cmp	r1, #0
 800d248:	f47f aeae 	bne.w	800cfa8 <_malloc_r+0x210>
 800d24c:	eb09 0208 	add.w	r2, r9, r8
 800d250:	68b9      	ldr	r1, [r7, #8]
 800d252:	f042 0201 	orr.w	r2, r2, #1
 800d256:	604a      	str	r2, [r1, #4]
 800d258:	e6ec      	b.n	800d034 <_malloc_r+0x29c>
 800d25a:	f240 5254 	movw	r2, #1364	; 0x554
 800d25e:	4293      	cmp	r3, r2
 800d260:	d81c      	bhi.n	800d29c <_malloc_r+0x504>
 800d262:	0cab      	lsrs	r3, r5, #18
 800d264:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 800d268:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
 800d26c:	00c3      	lsls	r3, r0, #3
 800d26e:	e5d8      	b.n	800ce22 <_malloc_r+0x8a>
 800d270:	2301      	movs	r3, #1
 800d272:	f8cb 3004 	str.w	r3, [fp, #4]
 800d276:	e79b      	b.n	800d1b0 <_malloc_r+0x418>
 800d278:	2101      	movs	r1, #1
 800d27a:	f04f 0800 	mov.w	r8, #0
 800d27e:	e6ba      	b.n	800cff6 <_malloc_r+0x25e>
 800d280:	4a16      	ldr	r2, [pc, #88]	; (800d2dc <_malloc_r+0x544>)
 800d282:	6813      	ldr	r3, [r2, #0]
 800d284:	4443      	add	r3, r8
 800d286:	6013      	str	r3, [r2, #0]
 800d288:	e68e      	b.n	800cfa8 <_malloc_r+0x210>
 800d28a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800d28e:	d814      	bhi.n	800d2ba <_malloc_r+0x522>
 800d290:	0bda      	lsrs	r2, r3, #15
 800d292:	f102 0178 	add.w	r1, r2, #120	; 0x78
 800d296:	00c9      	lsls	r1, r1, #3
 800d298:	3277      	adds	r2, #119	; 0x77
 800d29a:	e75e      	b.n	800d15a <_malloc_r+0x3c2>
 800d29c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 800d2a0:	207f      	movs	r0, #127	; 0x7f
 800d2a2:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 800d2a6:	e5bc      	b.n	800ce22 <_malloc_r+0x8a>
 800d2a8:	f104 0108 	add.w	r1, r4, #8
 800d2ac:	4630      	mov	r0, r6
 800d2ae:	9201      	str	r2, [sp, #4]
 800d2b0:	f7ff fa36 	bl	800c720 <_free_r>
 800d2b4:	9a01      	ldr	r2, [sp, #4]
 800d2b6:	6813      	ldr	r3, [r2, #0]
 800d2b8:	e6bc      	b.n	800d034 <_malloc_r+0x29c>
 800d2ba:	f240 5154 	movw	r1, #1364	; 0x554
 800d2be:	428a      	cmp	r2, r1
 800d2c0:	d805      	bhi.n	800d2ce <_malloc_r+0x536>
 800d2c2:	0c9a      	lsrs	r2, r3, #18
 800d2c4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 800d2c8:	00c9      	lsls	r1, r1, #3
 800d2ca:	327c      	adds	r2, #124	; 0x7c
 800d2cc:	e745      	b.n	800d15a <_malloc_r+0x3c2>
 800d2ce:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800d2d2:	227e      	movs	r2, #126	; 0x7e
 800d2d4:	e741      	b.n	800d15a <_malloc_r+0x3c2>
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	e785      	b.n	800d1e6 <_malloc_r+0x44e>
 800d2da:	bf00      	nop
 800d2dc:	200019fc 	.word	0x200019fc

0800d2e0 <__ascii_mbtowc>:
 800d2e0:	b082      	sub	sp, #8
 800d2e2:	b149      	cbz	r1, 800d2f8 <__ascii_mbtowc+0x18>
 800d2e4:	b15a      	cbz	r2, 800d2fe <__ascii_mbtowc+0x1e>
 800d2e6:	b16b      	cbz	r3, 800d304 <__ascii_mbtowc+0x24>
 800d2e8:	7813      	ldrb	r3, [r2, #0]
 800d2ea:	600b      	str	r3, [r1, #0]
 800d2ec:	7812      	ldrb	r2, [r2, #0]
 800d2ee:	1c10      	adds	r0, r2, #0
 800d2f0:	bf18      	it	ne
 800d2f2:	2001      	movne	r0, #1
 800d2f4:	b002      	add	sp, #8
 800d2f6:	4770      	bx	lr
 800d2f8:	a901      	add	r1, sp, #4
 800d2fa:	2a00      	cmp	r2, #0
 800d2fc:	d1f3      	bne.n	800d2e6 <__ascii_mbtowc+0x6>
 800d2fe:	4610      	mov	r0, r2
 800d300:	b002      	add	sp, #8
 800d302:	4770      	bx	lr
 800d304:	f06f 0001 	mvn.w	r0, #1
 800d308:	e7f4      	b.n	800d2f4 <__ascii_mbtowc+0x14>
 800d30a:	bf00      	nop

0800d30c <memmove>:
 800d30c:	4288      	cmp	r0, r1
 800d30e:	b4f0      	push	{r4, r5, r6, r7}
 800d310:	d90d      	bls.n	800d32e <memmove+0x22>
 800d312:	188b      	adds	r3, r1, r2
 800d314:	4283      	cmp	r3, r0
 800d316:	d90a      	bls.n	800d32e <memmove+0x22>
 800d318:	1884      	adds	r4, r0, r2
 800d31a:	b132      	cbz	r2, 800d32a <memmove+0x1e>
 800d31c:	4622      	mov	r2, r4
 800d31e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d322:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d326:	4299      	cmp	r1, r3
 800d328:	d1f9      	bne.n	800d31e <memmove+0x12>
 800d32a:	bcf0      	pop	{r4, r5, r6, r7}
 800d32c:	4770      	bx	lr
 800d32e:	2a0f      	cmp	r2, #15
 800d330:	d949      	bls.n	800d3c6 <memmove+0xba>
 800d332:	ea40 0301 	orr.w	r3, r0, r1
 800d336:	079b      	lsls	r3, r3, #30
 800d338:	d147      	bne.n	800d3ca <memmove+0xbe>
 800d33a:	f1a2 0310 	sub.w	r3, r2, #16
 800d33e:	091b      	lsrs	r3, r3, #4
 800d340:	f101 0720 	add.w	r7, r1, #32
 800d344:	eb07 1703 	add.w	r7, r7, r3, lsl #4
 800d348:	f101 0410 	add.w	r4, r1, #16
 800d34c:	f100 0510 	add.w	r5, r0, #16
 800d350:	f854 6c10 	ldr.w	r6, [r4, #-16]
 800d354:	f845 6c10 	str.w	r6, [r5, #-16]
 800d358:	f854 6c0c 	ldr.w	r6, [r4, #-12]
 800d35c:	f845 6c0c 	str.w	r6, [r5, #-12]
 800d360:	f854 6c08 	ldr.w	r6, [r4, #-8]
 800d364:	f845 6c08 	str.w	r6, [r5, #-8]
 800d368:	f854 6c04 	ldr.w	r6, [r4, #-4]
 800d36c:	f845 6c04 	str.w	r6, [r5, #-4]
 800d370:	3410      	adds	r4, #16
 800d372:	42bc      	cmp	r4, r7
 800d374:	f105 0510 	add.w	r5, r5, #16
 800d378:	d1ea      	bne.n	800d350 <memmove+0x44>
 800d37a:	3301      	adds	r3, #1
 800d37c:	f002 050f 	and.w	r5, r2, #15
 800d380:	011b      	lsls	r3, r3, #4
 800d382:	2d03      	cmp	r5, #3
 800d384:	4419      	add	r1, r3
 800d386:	4403      	add	r3, r0
 800d388:	d921      	bls.n	800d3ce <memmove+0xc2>
 800d38a:	1f1f      	subs	r7, r3, #4
 800d38c:	460e      	mov	r6, r1
 800d38e:	462c      	mov	r4, r5
 800d390:	3c04      	subs	r4, #4
 800d392:	f856 cb04 	ldr.w	ip, [r6], #4
 800d396:	f847 cf04 	str.w	ip, [r7, #4]!
 800d39a:	2c03      	cmp	r4, #3
 800d39c:	d8f8      	bhi.n	800d390 <memmove+0x84>
 800d39e:	1f2c      	subs	r4, r5, #4
 800d3a0:	f024 0403 	bic.w	r4, r4, #3
 800d3a4:	3404      	adds	r4, #4
 800d3a6:	4423      	add	r3, r4
 800d3a8:	4421      	add	r1, r4
 800d3aa:	f002 0203 	and.w	r2, r2, #3
 800d3ae:	2a00      	cmp	r2, #0
 800d3b0:	d0bb      	beq.n	800d32a <memmove+0x1e>
 800d3b2:	3b01      	subs	r3, #1
 800d3b4:	440a      	add	r2, r1
 800d3b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d3ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d3be:	4291      	cmp	r1, r2
 800d3c0:	d1f9      	bne.n	800d3b6 <memmove+0xaa>
 800d3c2:	bcf0      	pop	{r4, r5, r6, r7}
 800d3c4:	4770      	bx	lr
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	e7f1      	b.n	800d3ae <memmove+0xa2>
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	e7f1      	b.n	800d3b2 <memmove+0xa6>
 800d3ce:	462a      	mov	r2, r5
 800d3d0:	e7ed      	b.n	800d3ae <memmove+0xa2>
 800d3d2:	bf00      	nop

0800d3d4 <__malloc_lock>:
 800d3d4:	4801      	ldr	r0, [pc, #4]	; (800d3dc <__malloc_lock+0x8>)
 800d3d6:	f7ff bc63 	b.w	800cca0 <__retarget_lock_acquire_recursive>
 800d3da:	bf00      	nop
 800d3dc:	20003330 	.word	0x20003330

0800d3e0 <__malloc_unlock>:
 800d3e0:	4801      	ldr	r0, [pc, #4]	; (800d3e8 <__malloc_unlock+0x8>)
 800d3e2:	f7ff bc5f 	b.w	800cca4 <__retarget_lock_release_recursive>
 800d3e6:	bf00      	nop
 800d3e8:	20003330 	.word	0x20003330

0800d3ec <_Balloc>:
 800d3ec:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800d3ee:	b570      	push	{r4, r5, r6, lr}
 800d3f0:	4605      	mov	r5, r0
 800d3f2:	460c      	mov	r4, r1
 800d3f4:	b14b      	cbz	r3, 800d40a <_Balloc+0x1e>
 800d3f6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d3fa:	b180      	cbz	r0, 800d41e <_Balloc+0x32>
 800d3fc:	6802      	ldr	r2, [r0, #0]
 800d3fe:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800d402:	2300      	movs	r3, #0
 800d404:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d408:	bd70      	pop	{r4, r5, r6, pc}
 800d40a:	2221      	movs	r2, #33	; 0x21
 800d40c:	2104      	movs	r1, #4
 800d40e:	f000 fdd5 	bl	800dfbc <_calloc_r>
 800d412:	4603      	mov	r3, r0
 800d414:	64e8      	str	r0, [r5, #76]	; 0x4c
 800d416:	2800      	cmp	r0, #0
 800d418:	d1ed      	bne.n	800d3f6 <_Balloc+0xa>
 800d41a:	2000      	movs	r0, #0
 800d41c:	bd70      	pop	{r4, r5, r6, pc}
 800d41e:	2101      	movs	r1, #1
 800d420:	fa01 f604 	lsl.w	r6, r1, r4
 800d424:	1d72      	adds	r2, r6, #5
 800d426:	4628      	mov	r0, r5
 800d428:	0092      	lsls	r2, r2, #2
 800d42a:	f000 fdc7 	bl	800dfbc <_calloc_r>
 800d42e:	2800      	cmp	r0, #0
 800d430:	d0f3      	beq.n	800d41a <_Balloc+0x2e>
 800d432:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800d436:	e7e4      	b.n	800d402 <_Balloc+0x16>

0800d438 <_Bfree>:
 800d438:	b131      	cbz	r1, 800d448 <_Bfree+0x10>
 800d43a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800d43c:	684a      	ldr	r2, [r1, #4]
 800d43e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d442:	6008      	str	r0, [r1, #0]
 800d444:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800d448:	4770      	bx	lr
 800d44a:	bf00      	nop

0800d44c <__multadd>:
 800d44c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d44e:	690c      	ldr	r4, [r1, #16]
 800d450:	b083      	sub	sp, #12
 800d452:	460d      	mov	r5, r1
 800d454:	4606      	mov	r6, r0
 800d456:	f101 0c14 	add.w	ip, r1, #20
 800d45a:	2700      	movs	r7, #0
 800d45c:	f8dc 0000 	ldr.w	r0, [ip]
 800d460:	b281      	uxth	r1, r0
 800d462:	fb02 3301 	mla	r3, r2, r1, r3
 800d466:	0c01      	lsrs	r1, r0, #16
 800d468:	0c18      	lsrs	r0, r3, #16
 800d46a:	fb02 0101 	mla	r1, r2, r1, r0
 800d46e:	b29b      	uxth	r3, r3
 800d470:	3701      	adds	r7, #1
 800d472:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 800d476:	42bc      	cmp	r4, r7
 800d478:	f84c 3b04 	str.w	r3, [ip], #4
 800d47c:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800d480:	dcec      	bgt.n	800d45c <__multadd+0x10>
 800d482:	b13b      	cbz	r3, 800d494 <__multadd+0x48>
 800d484:	68aa      	ldr	r2, [r5, #8]
 800d486:	42a2      	cmp	r2, r4
 800d488:	dd07      	ble.n	800d49a <__multadd+0x4e>
 800d48a:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 800d48e:	3401      	adds	r4, #1
 800d490:	6153      	str	r3, [r2, #20]
 800d492:	612c      	str	r4, [r5, #16]
 800d494:	4628      	mov	r0, r5
 800d496:	b003      	add	sp, #12
 800d498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d49a:	6869      	ldr	r1, [r5, #4]
 800d49c:	9301      	str	r3, [sp, #4]
 800d49e:	3101      	adds	r1, #1
 800d4a0:	4630      	mov	r0, r6
 800d4a2:	f7ff ffa3 	bl	800d3ec <_Balloc>
 800d4a6:	692a      	ldr	r2, [r5, #16]
 800d4a8:	3202      	adds	r2, #2
 800d4aa:	f105 010c 	add.w	r1, r5, #12
 800d4ae:	4607      	mov	r7, r0
 800d4b0:	0092      	lsls	r2, r2, #2
 800d4b2:	300c      	adds	r0, #12
 800d4b4:	f7f3 f8aa 	bl	800060c <memcpy>
 800d4b8:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 800d4ba:	6869      	ldr	r1, [r5, #4]
 800d4bc:	9b01      	ldr	r3, [sp, #4]
 800d4be:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800d4c2:	6028      	str	r0, [r5, #0]
 800d4c4:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 800d4c8:	463d      	mov	r5, r7
 800d4ca:	e7de      	b.n	800d48a <__multadd+0x3e>

0800d4cc <__hi0bits>:
 800d4cc:	0c02      	lsrs	r2, r0, #16
 800d4ce:	0412      	lsls	r2, r2, #16
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	b9c2      	cbnz	r2, 800d506 <__hi0bits+0x3a>
 800d4d4:	0403      	lsls	r3, r0, #16
 800d4d6:	2010      	movs	r0, #16
 800d4d8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d4dc:	bf04      	itt	eq
 800d4de:	021b      	lsleq	r3, r3, #8
 800d4e0:	3008      	addeq	r0, #8
 800d4e2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d4e6:	bf04      	itt	eq
 800d4e8:	011b      	lsleq	r3, r3, #4
 800d4ea:	3004      	addeq	r0, #4
 800d4ec:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d4f0:	bf04      	itt	eq
 800d4f2:	009b      	lsleq	r3, r3, #2
 800d4f4:	3002      	addeq	r0, #2
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	db04      	blt.n	800d504 <__hi0bits+0x38>
 800d4fa:	005b      	lsls	r3, r3, #1
 800d4fc:	d501      	bpl.n	800d502 <__hi0bits+0x36>
 800d4fe:	3001      	adds	r0, #1
 800d500:	4770      	bx	lr
 800d502:	2020      	movs	r0, #32
 800d504:	4770      	bx	lr
 800d506:	2000      	movs	r0, #0
 800d508:	e7e6      	b.n	800d4d8 <__hi0bits+0xc>
 800d50a:	bf00      	nop

0800d50c <__lo0bits>:
 800d50c:	6803      	ldr	r3, [r0, #0]
 800d50e:	f013 0207 	ands.w	r2, r3, #7
 800d512:	4601      	mov	r1, r0
 800d514:	d007      	beq.n	800d526 <__lo0bits+0x1a>
 800d516:	07da      	lsls	r2, r3, #31
 800d518:	d41f      	bmi.n	800d55a <__lo0bits+0x4e>
 800d51a:	0798      	lsls	r0, r3, #30
 800d51c:	d51f      	bpl.n	800d55e <__lo0bits+0x52>
 800d51e:	085b      	lsrs	r3, r3, #1
 800d520:	600b      	str	r3, [r1, #0]
 800d522:	2001      	movs	r0, #1
 800d524:	4770      	bx	lr
 800d526:	b298      	uxth	r0, r3
 800d528:	b1a0      	cbz	r0, 800d554 <__lo0bits+0x48>
 800d52a:	4610      	mov	r0, r2
 800d52c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d530:	bf04      	itt	eq
 800d532:	0a1b      	lsreq	r3, r3, #8
 800d534:	3008      	addeq	r0, #8
 800d536:	071a      	lsls	r2, r3, #28
 800d538:	bf04      	itt	eq
 800d53a:	091b      	lsreq	r3, r3, #4
 800d53c:	3004      	addeq	r0, #4
 800d53e:	079a      	lsls	r2, r3, #30
 800d540:	bf04      	itt	eq
 800d542:	089b      	lsreq	r3, r3, #2
 800d544:	3002      	addeq	r0, #2
 800d546:	07da      	lsls	r2, r3, #31
 800d548:	d402      	bmi.n	800d550 <__lo0bits+0x44>
 800d54a:	085b      	lsrs	r3, r3, #1
 800d54c:	d00b      	beq.n	800d566 <__lo0bits+0x5a>
 800d54e:	3001      	adds	r0, #1
 800d550:	600b      	str	r3, [r1, #0]
 800d552:	4770      	bx	lr
 800d554:	0c1b      	lsrs	r3, r3, #16
 800d556:	2010      	movs	r0, #16
 800d558:	e7e8      	b.n	800d52c <__lo0bits+0x20>
 800d55a:	2000      	movs	r0, #0
 800d55c:	4770      	bx	lr
 800d55e:	089b      	lsrs	r3, r3, #2
 800d560:	600b      	str	r3, [r1, #0]
 800d562:	2002      	movs	r0, #2
 800d564:	4770      	bx	lr
 800d566:	2020      	movs	r0, #32
 800d568:	4770      	bx	lr
 800d56a:	bf00      	nop

0800d56c <__i2b>:
 800d56c:	b510      	push	{r4, lr}
 800d56e:	460c      	mov	r4, r1
 800d570:	2101      	movs	r1, #1
 800d572:	f7ff ff3b 	bl	800d3ec <_Balloc>
 800d576:	2201      	movs	r2, #1
 800d578:	e9c0 2404 	strd	r2, r4, [r0, #16]
 800d57c:	bd10      	pop	{r4, pc}
 800d57e:	bf00      	nop

0800d580 <__multiply>:
 800d580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d584:	690e      	ldr	r6, [r1, #16]
 800d586:	6914      	ldr	r4, [r2, #16]
 800d588:	42a6      	cmp	r6, r4
 800d58a:	b083      	sub	sp, #12
 800d58c:	460f      	mov	r7, r1
 800d58e:	4615      	mov	r5, r2
 800d590:	da04      	bge.n	800d59c <__multiply+0x1c>
 800d592:	4632      	mov	r2, r6
 800d594:	462f      	mov	r7, r5
 800d596:	4626      	mov	r6, r4
 800d598:	460d      	mov	r5, r1
 800d59a:	4614      	mov	r4, r2
 800d59c:	e9d7 1301 	ldrd	r1, r3, [r7, #4]
 800d5a0:	eb06 0804 	add.w	r8, r6, r4
 800d5a4:	4543      	cmp	r3, r8
 800d5a6:	bfb8      	it	lt
 800d5a8:	3101      	addlt	r1, #1
 800d5aa:	f7ff ff1f 	bl	800d3ec <_Balloc>
 800d5ae:	f100 0914 	add.w	r9, r0, #20
 800d5b2:	eb09 0e88 	add.w	lr, r9, r8, lsl #2
 800d5b6:	45f1      	cmp	r9, lr
 800d5b8:	9000      	str	r0, [sp, #0]
 800d5ba:	d205      	bcs.n	800d5c8 <__multiply+0x48>
 800d5bc:	464b      	mov	r3, r9
 800d5be:	2200      	movs	r2, #0
 800d5c0:	f843 2b04 	str.w	r2, [r3], #4
 800d5c4:	459e      	cmp	lr, r3
 800d5c6:	d8fb      	bhi.n	800d5c0 <__multiply+0x40>
 800d5c8:	f105 0a14 	add.w	sl, r5, #20
 800d5cc:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
 800d5d0:	f107 0314 	add.w	r3, r7, #20
 800d5d4:	45a2      	cmp	sl, r4
 800d5d6:	eb03 0c86 	add.w	ip, r3, r6, lsl #2
 800d5da:	d261      	bcs.n	800d6a0 <__multiply+0x120>
 800d5dc:	1b64      	subs	r4, r4, r5
 800d5de:	3c15      	subs	r4, #21
 800d5e0:	f024 0403 	bic.w	r4, r4, #3
 800d5e4:	f8cd e004 	str.w	lr, [sp, #4]
 800d5e8:	44a2      	add	sl, r4
 800d5ea:	f105 0210 	add.w	r2, r5, #16
 800d5ee:	469e      	mov	lr, r3
 800d5f0:	e005      	b.n	800d5fe <__multiply+0x7e>
 800d5f2:	0c2d      	lsrs	r5, r5, #16
 800d5f4:	d12b      	bne.n	800d64e <__multiply+0xce>
 800d5f6:	4592      	cmp	sl, r2
 800d5f8:	f109 0904 	add.w	r9, r9, #4
 800d5fc:	d04e      	beq.n	800d69c <__multiply+0x11c>
 800d5fe:	f852 5f04 	ldr.w	r5, [r2, #4]!
 800d602:	fa1f fb85 	uxth.w	fp, r5
 800d606:	f1bb 0f00 	cmp.w	fp, #0
 800d60a:	d0f2      	beq.n	800d5f2 <__multiply+0x72>
 800d60c:	4677      	mov	r7, lr
 800d60e:	464e      	mov	r6, r9
 800d610:	2000      	movs	r0, #0
 800d612:	e000      	b.n	800d616 <__multiply+0x96>
 800d614:	4626      	mov	r6, r4
 800d616:	f857 1b04 	ldr.w	r1, [r7], #4
 800d61a:	6834      	ldr	r4, [r6, #0]
 800d61c:	b28b      	uxth	r3, r1
 800d61e:	b2a5      	uxth	r5, r4
 800d620:	0c09      	lsrs	r1, r1, #16
 800d622:	0c24      	lsrs	r4, r4, #16
 800d624:	fb0b 5303 	mla	r3, fp, r3, r5
 800d628:	4403      	add	r3, r0
 800d62a:	fb0b 4001 	mla	r0, fp, r1, r4
 800d62e:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 800d632:	4634      	mov	r4, r6
 800d634:	b29b      	uxth	r3, r3
 800d636:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d63a:	45bc      	cmp	ip, r7
 800d63c:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800d640:	f844 3b04 	str.w	r3, [r4], #4
 800d644:	d8e6      	bhi.n	800d614 <__multiply+0x94>
 800d646:	6070      	str	r0, [r6, #4]
 800d648:	6815      	ldr	r5, [r2, #0]
 800d64a:	0c2d      	lsrs	r5, r5, #16
 800d64c:	d0d3      	beq.n	800d5f6 <__multiply+0x76>
 800d64e:	f8d9 3000 	ldr.w	r3, [r9]
 800d652:	4676      	mov	r6, lr
 800d654:	4618      	mov	r0, r3
 800d656:	46cb      	mov	fp, r9
 800d658:	2100      	movs	r1, #0
 800d65a:	e000      	b.n	800d65e <__multiply+0xde>
 800d65c:	46a3      	mov	fp, r4
 800d65e:	8834      	ldrh	r4, [r6, #0]
 800d660:	0c00      	lsrs	r0, r0, #16
 800d662:	fb05 0004 	mla	r0, r5, r4, r0
 800d666:	4401      	add	r1, r0
 800d668:	b29b      	uxth	r3, r3
 800d66a:	465c      	mov	r4, fp
 800d66c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800d670:	f844 3b04 	str.w	r3, [r4], #4
 800d674:	f856 3b04 	ldr.w	r3, [r6], #4
 800d678:	f8db 0004 	ldr.w	r0, [fp, #4]
 800d67c:	0c1b      	lsrs	r3, r3, #16
 800d67e:	b287      	uxth	r7, r0
 800d680:	fb05 7303 	mla	r3, r5, r3, r7
 800d684:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 800d688:	45b4      	cmp	ip, r6
 800d68a:	ea4f 4113 	mov.w	r1, r3, lsr #16
 800d68e:	d8e5      	bhi.n	800d65c <__multiply+0xdc>
 800d690:	4592      	cmp	sl, r2
 800d692:	f8cb 3004 	str.w	r3, [fp, #4]
 800d696:	f109 0904 	add.w	r9, r9, #4
 800d69a:	d1b0      	bne.n	800d5fe <__multiply+0x7e>
 800d69c:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d6a0:	f1b8 0f00 	cmp.w	r8, #0
 800d6a4:	dd0b      	ble.n	800d6be <__multiply+0x13e>
 800d6a6:	f85e 3c04 	ldr.w	r3, [lr, #-4]
 800d6aa:	f1ae 0e04 	sub.w	lr, lr, #4
 800d6ae:	b11b      	cbz	r3, 800d6b8 <__multiply+0x138>
 800d6b0:	e005      	b.n	800d6be <__multiply+0x13e>
 800d6b2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d6b6:	b913      	cbnz	r3, 800d6be <__multiply+0x13e>
 800d6b8:	f1b8 0801 	subs.w	r8, r8, #1
 800d6bc:	d1f9      	bne.n	800d6b2 <__multiply+0x132>
 800d6be:	9800      	ldr	r0, [sp, #0]
 800d6c0:	f8c0 8010 	str.w	r8, [r0, #16]
 800d6c4:	b003      	add	sp, #12
 800d6c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6ca:	bf00      	nop

0800d6cc <__pow5mult>:
 800d6cc:	f012 0303 	ands.w	r3, r2, #3
 800d6d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6d4:	4614      	mov	r4, r2
 800d6d6:	4607      	mov	r7, r0
 800d6d8:	d12e      	bne.n	800d738 <__pow5mult+0x6c>
 800d6da:	460d      	mov	r5, r1
 800d6dc:	10a4      	asrs	r4, r4, #2
 800d6de:	d01c      	beq.n	800d71a <__pow5mult+0x4e>
 800d6e0:	6cbe      	ldr	r6, [r7, #72]	; 0x48
 800d6e2:	b396      	cbz	r6, 800d74a <__pow5mult+0x7e>
 800d6e4:	07e3      	lsls	r3, r4, #31
 800d6e6:	f04f 0800 	mov.w	r8, #0
 800d6ea:	d406      	bmi.n	800d6fa <__pow5mult+0x2e>
 800d6ec:	1064      	asrs	r4, r4, #1
 800d6ee:	d014      	beq.n	800d71a <__pow5mult+0x4e>
 800d6f0:	6830      	ldr	r0, [r6, #0]
 800d6f2:	b1a8      	cbz	r0, 800d720 <__pow5mult+0x54>
 800d6f4:	4606      	mov	r6, r0
 800d6f6:	07e3      	lsls	r3, r4, #31
 800d6f8:	d5f8      	bpl.n	800d6ec <__pow5mult+0x20>
 800d6fa:	4632      	mov	r2, r6
 800d6fc:	4629      	mov	r1, r5
 800d6fe:	4638      	mov	r0, r7
 800d700:	f7ff ff3e 	bl	800d580 <__multiply>
 800d704:	b1b5      	cbz	r5, 800d734 <__pow5mult+0x68>
 800d706:	686a      	ldr	r2, [r5, #4]
 800d708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d70a:	1064      	asrs	r4, r4, #1
 800d70c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d710:	6029      	str	r1, [r5, #0]
 800d712:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800d716:	4605      	mov	r5, r0
 800d718:	d1ea      	bne.n	800d6f0 <__pow5mult+0x24>
 800d71a:	4628      	mov	r0, r5
 800d71c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d720:	4632      	mov	r2, r6
 800d722:	4631      	mov	r1, r6
 800d724:	4638      	mov	r0, r7
 800d726:	f7ff ff2b 	bl	800d580 <__multiply>
 800d72a:	6030      	str	r0, [r6, #0]
 800d72c:	f8c0 8000 	str.w	r8, [r0]
 800d730:	4606      	mov	r6, r0
 800d732:	e7e0      	b.n	800d6f6 <__pow5mult+0x2a>
 800d734:	4605      	mov	r5, r0
 800d736:	e7d9      	b.n	800d6ec <__pow5mult+0x20>
 800d738:	3b01      	subs	r3, #1
 800d73a:	4a0b      	ldr	r2, [pc, #44]	; (800d768 <__pow5mult+0x9c>)
 800d73c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d740:	2300      	movs	r3, #0
 800d742:	f7ff fe83 	bl	800d44c <__multadd>
 800d746:	4605      	mov	r5, r0
 800d748:	e7c8      	b.n	800d6dc <__pow5mult+0x10>
 800d74a:	2101      	movs	r1, #1
 800d74c:	4638      	mov	r0, r7
 800d74e:	f7ff fe4d 	bl	800d3ec <_Balloc>
 800d752:	f240 2371 	movw	r3, #625	; 0x271
 800d756:	6143      	str	r3, [r0, #20]
 800d758:	2201      	movs	r2, #1
 800d75a:	2300      	movs	r3, #0
 800d75c:	6102      	str	r2, [r0, #16]
 800d75e:	4606      	mov	r6, r0
 800d760:	64b8      	str	r0, [r7, #72]	; 0x48
 800d762:	6003      	str	r3, [r0, #0]
 800d764:	e7be      	b.n	800d6e4 <__pow5mult+0x18>
 800d766:	bf00      	nop
 800d768:	0800ebe8 	.word	0x0800ebe8

0800d76c <__lshift>:
 800d76c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d770:	4691      	mov	r9, r2
 800d772:	690a      	ldr	r2, [r1, #16]
 800d774:	460e      	mov	r6, r1
 800d776:	ea4f 1469 	mov.w	r4, r9, asr #5
 800d77a:	e9d1 1301 	ldrd	r1, r3, [r1, #4]
 800d77e:	eb04 0802 	add.w	r8, r4, r2
 800d782:	f108 0501 	add.w	r5, r8, #1
 800d786:	429d      	cmp	r5, r3
 800d788:	4607      	mov	r7, r0
 800d78a:	dd04      	ble.n	800d796 <__lshift+0x2a>
 800d78c:	005b      	lsls	r3, r3, #1
 800d78e:	429d      	cmp	r5, r3
 800d790:	f101 0101 	add.w	r1, r1, #1
 800d794:	dcfa      	bgt.n	800d78c <__lshift+0x20>
 800d796:	4638      	mov	r0, r7
 800d798:	f7ff fe28 	bl	800d3ec <_Balloc>
 800d79c:	2c00      	cmp	r4, #0
 800d79e:	f100 0314 	add.w	r3, r0, #20
 800d7a2:	dd37      	ble.n	800d814 <__lshift+0xa8>
 800d7a4:	eb03 0184 	add.w	r1, r3, r4, lsl #2
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	f843 2b04 	str.w	r2, [r3], #4
 800d7ae:	428b      	cmp	r3, r1
 800d7b0:	d1fb      	bne.n	800d7aa <__lshift+0x3e>
 800d7b2:	6934      	ldr	r4, [r6, #16]
 800d7b4:	f106 0314 	add.w	r3, r6, #20
 800d7b8:	f019 091f 	ands.w	r9, r9, #31
 800d7bc:	eb03 0c84 	add.w	ip, r3, r4, lsl #2
 800d7c0:	d020      	beq.n	800d804 <__lshift+0x98>
 800d7c2:	f1c9 0e20 	rsb	lr, r9, #32
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	e000      	b.n	800d7cc <__lshift+0x60>
 800d7ca:	4651      	mov	r1, sl
 800d7cc:	681c      	ldr	r4, [r3, #0]
 800d7ce:	468a      	mov	sl, r1
 800d7d0:	fa04 f409 	lsl.w	r4, r4, r9
 800d7d4:	4314      	orrs	r4, r2
 800d7d6:	f84a 4b04 	str.w	r4, [sl], #4
 800d7da:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7de:	4563      	cmp	r3, ip
 800d7e0:	fa22 f20e 	lsr.w	r2, r2, lr
 800d7e4:	d3f1      	bcc.n	800d7ca <__lshift+0x5e>
 800d7e6:	604a      	str	r2, [r1, #4]
 800d7e8:	b10a      	cbz	r2, 800d7ee <__lshift+0x82>
 800d7ea:	f108 0502 	add.w	r5, r8, #2
 800d7ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7f0:	6872      	ldr	r2, [r6, #4]
 800d7f2:	3d01      	subs	r5, #1
 800d7f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d7f8:	6105      	str	r5, [r0, #16]
 800d7fa:	6031      	str	r1, [r6, #0]
 800d7fc:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 800d800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d804:	3904      	subs	r1, #4
 800d806:	f853 2b04 	ldr.w	r2, [r3], #4
 800d80a:	f841 2f04 	str.w	r2, [r1, #4]!
 800d80e:	459c      	cmp	ip, r3
 800d810:	d8f9      	bhi.n	800d806 <__lshift+0x9a>
 800d812:	e7ec      	b.n	800d7ee <__lshift+0x82>
 800d814:	4619      	mov	r1, r3
 800d816:	e7cc      	b.n	800d7b2 <__lshift+0x46>

0800d818 <__mcmp>:
 800d818:	b430      	push	{r4, r5}
 800d81a:	690b      	ldr	r3, [r1, #16]
 800d81c:	4605      	mov	r5, r0
 800d81e:	6900      	ldr	r0, [r0, #16]
 800d820:	1ac0      	subs	r0, r0, r3
 800d822:	d10f      	bne.n	800d844 <__mcmp+0x2c>
 800d824:	009b      	lsls	r3, r3, #2
 800d826:	3514      	adds	r5, #20
 800d828:	3114      	adds	r1, #20
 800d82a:	4419      	add	r1, r3
 800d82c:	442b      	add	r3, r5
 800d82e:	e001      	b.n	800d834 <__mcmp+0x1c>
 800d830:	429d      	cmp	r5, r3
 800d832:	d207      	bcs.n	800d844 <__mcmp+0x2c>
 800d834:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800d838:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d83c:	4294      	cmp	r4, r2
 800d83e:	d0f7      	beq.n	800d830 <__mcmp+0x18>
 800d840:	d302      	bcc.n	800d848 <__mcmp+0x30>
 800d842:	2001      	movs	r0, #1
 800d844:	bc30      	pop	{r4, r5}
 800d846:	4770      	bx	lr
 800d848:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d84c:	e7fa      	b.n	800d844 <__mcmp+0x2c>
 800d84e:	bf00      	nop

0800d850 <__mdiff>:
 800d850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d854:	6913      	ldr	r3, [r2, #16]
 800d856:	690d      	ldr	r5, [r1, #16]
 800d858:	1aed      	subs	r5, r5, r3
 800d85a:	2d00      	cmp	r5, #0
 800d85c:	460e      	mov	r6, r1
 800d85e:	4690      	mov	r8, r2
 800d860:	f101 0414 	add.w	r4, r1, #20
 800d864:	f102 0714 	add.w	r7, r2, #20
 800d868:	d114      	bne.n	800d894 <__mdiff+0x44>
 800d86a:	009b      	lsls	r3, r3, #2
 800d86c:	18e2      	adds	r2, r4, r3
 800d86e:	443b      	add	r3, r7
 800d870:	e001      	b.n	800d876 <__mdiff+0x26>
 800d872:	42a2      	cmp	r2, r4
 800d874:	d959      	bls.n	800d92a <__mdiff+0xda>
 800d876:	f852 cd04 	ldr.w	ip, [r2, #-4]!
 800d87a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d87e:	458c      	cmp	ip, r1
 800d880:	d0f7      	beq.n	800d872 <__mdiff+0x22>
 800d882:	d209      	bcs.n	800d898 <__mdiff+0x48>
 800d884:	4622      	mov	r2, r4
 800d886:	4633      	mov	r3, r6
 800d888:	463c      	mov	r4, r7
 800d88a:	4646      	mov	r6, r8
 800d88c:	4617      	mov	r7, r2
 800d88e:	4698      	mov	r8, r3
 800d890:	2501      	movs	r5, #1
 800d892:	e001      	b.n	800d898 <__mdiff+0x48>
 800d894:	dbf6      	blt.n	800d884 <__mdiff+0x34>
 800d896:	2500      	movs	r5, #0
 800d898:	6871      	ldr	r1, [r6, #4]
 800d89a:	f7ff fda7 	bl	800d3ec <_Balloc>
 800d89e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800d8a2:	6936      	ldr	r6, [r6, #16]
 800d8a4:	60c5      	str	r5, [r0, #12]
 800d8a6:	eb07 0e83 	add.w	lr, r7, r3, lsl #2
 800d8aa:	46bc      	mov	ip, r7
 800d8ac:	f100 0514 	add.w	r5, r0, #20
 800d8b0:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d8ba:	f854 8b04 	ldr.w	r8, [r4], #4
 800d8be:	b28a      	uxth	r2, r1
 800d8c0:	fa13 f388 	uxtah	r3, r3, r8
 800d8c4:	0c09      	lsrs	r1, r1, #16
 800d8c6:	1a9a      	subs	r2, r3, r2
 800d8c8:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
 800d8cc:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800d8d0:	b292      	uxth	r2, r2
 800d8d2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d8d6:	45e6      	cmp	lr, ip
 800d8d8:	f845 2b04 	str.w	r2, [r5], #4
 800d8dc:	ea4f 4323 	mov.w	r3, r3, asr #16
 800d8e0:	d8e9      	bhi.n	800d8b6 <__mdiff+0x66>
 800d8e2:	42a7      	cmp	r7, r4
 800d8e4:	d917      	bls.n	800d916 <__mdiff+0xc6>
 800d8e6:	46ae      	mov	lr, r5
 800d8e8:	46a4      	mov	ip, r4
 800d8ea:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d8ee:	fa13 f382 	uxtah	r3, r3, r2
 800d8f2:	1419      	asrs	r1, r3, #16
 800d8f4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d8f8:	b29b      	uxth	r3, r3
 800d8fa:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
 800d8fe:	4567      	cmp	r7, ip
 800d900:	f84e 2b04 	str.w	r2, [lr], #4
 800d904:	ea4f 4321 	mov.w	r3, r1, asr #16
 800d908:	d8ef      	bhi.n	800d8ea <__mdiff+0x9a>
 800d90a:	43e4      	mvns	r4, r4
 800d90c:	4427      	add	r7, r4
 800d90e:	f027 0703 	bic.w	r7, r7, #3
 800d912:	3704      	adds	r7, #4
 800d914:	443d      	add	r5, r7
 800d916:	3d04      	subs	r5, #4
 800d918:	b922      	cbnz	r2, 800d924 <__mdiff+0xd4>
 800d91a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800d91e:	3e01      	subs	r6, #1
 800d920:	2b00      	cmp	r3, #0
 800d922:	d0fa      	beq.n	800d91a <__mdiff+0xca>
 800d924:	6106      	str	r6, [r0, #16]
 800d926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d92a:	2100      	movs	r1, #0
 800d92c:	f7ff fd5e 	bl	800d3ec <_Balloc>
 800d930:	2201      	movs	r2, #1
 800d932:	2300      	movs	r3, #0
 800d934:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800d938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d93c <__d2b>:
 800d93c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d940:	2101      	movs	r1, #1
 800d942:	b082      	sub	sp, #8
 800d944:	461c      	mov	r4, r3
 800d946:	4690      	mov	r8, r2
 800d948:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800d94c:	f7ff fd4e 	bl	800d3ec <_Balloc>
 800d950:	4623      	mov	r3, r4
 800d952:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800d956:	4607      	mov	r7, r0
 800d958:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d95c:	b10c      	cbz	r4, 800d962 <__d2b+0x26>
 800d95e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d962:	f1b8 0200 	subs.w	r2, r8, #0
 800d966:	9301      	str	r3, [sp, #4]
 800d968:	d01f      	beq.n	800d9aa <__d2b+0x6e>
 800d96a:	a802      	add	r0, sp, #8
 800d96c:	f840 2d08 	str.w	r2, [r0, #-8]!
 800d970:	f7ff fdcc 	bl	800d50c <__lo0bits>
 800d974:	2800      	cmp	r0, #0
 800d976:	d12d      	bne.n	800d9d4 <__d2b+0x98>
 800d978:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d97c:	617a      	str	r2, [r7, #20]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	bf0c      	ite	eq
 800d982:	2101      	moveq	r1, #1
 800d984:	2102      	movne	r1, #2
 800d986:	61bb      	str	r3, [r7, #24]
 800d988:	6139      	str	r1, [r7, #16]
 800d98a:	b9c4      	cbnz	r4, 800d9be <__d2b+0x82>
 800d98c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800d990:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d994:	6030      	str	r0, [r6, #0]
 800d996:	6918      	ldr	r0, [r3, #16]
 800d998:	f7ff fd98 	bl	800d4cc <__hi0bits>
 800d99c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d9a0:	6028      	str	r0, [r5, #0]
 800d9a2:	4638      	mov	r0, r7
 800d9a4:	b002      	add	sp, #8
 800d9a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9aa:	a801      	add	r0, sp, #4
 800d9ac:	f7ff fdae 	bl	800d50c <__lo0bits>
 800d9b0:	9b01      	ldr	r3, [sp, #4]
 800d9b2:	617b      	str	r3, [r7, #20]
 800d9b4:	2101      	movs	r1, #1
 800d9b6:	3020      	adds	r0, #32
 800d9b8:	6139      	str	r1, [r7, #16]
 800d9ba:	2c00      	cmp	r4, #0
 800d9bc:	d0e6      	beq.n	800d98c <__d2b+0x50>
 800d9be:	f2a4 4333 	subw	r3, r4, #1075	; 0x433
 800d9c2:	4403      	add	r3, r0
 800d9c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d9c8:	6033      	str	r3, [r6, #0]
 800d9ca:	6028      	str	r0, [r5, #0]
 800d9cc:	4638      	mov	r0, r7
 800d9ce:	b002      	add	sp, #8
 800d9d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9d4:	e9dd 1300 	ldrd	r1, r3, [sp]
 800d9d8:	f1c0 0220 	rsb	r2, r0, #32
 800d9dc:	fa03 f202 	lsl.w	r2, r3, r2
 800d9e0:	430a      	orrs	r2, r1
 800d9e2:	40c3      	lsrs	r3, r0
 800d9e4:	9301      	str	r3, [sp, #4]
 800d9e6:	617a      	str	r2, [r7, #20]
 800d9e8:	e7c9      	b.n	800d97e <__d2b+0x42>
 800d9ea:	bf00      	nop

0800d9ec <_realloc_r>:
 800d9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9f0:	4692      	mov	sl, r2
 800d9f2:	b083      	sub	sp, #12
 800d9f4:	2900      	cmp	r1, #0
 800d9f6:	f000 80a1 	beq.w	800db3c <_realloc_r+0x150>
 800d9fa:	460d      	mov	r5, r1
 800d9fc:	4680      	mov	r8, r0
 800d9fe:	f10a 040b 	add.w	r4, sl, #11
 800da02:	f7ff fce7 	bl	800d3d4 <__malloc_lock>
 800da06:	f855 2c04 	ldr.w	r2, [r5, #-4]
 800da0a:	2c16      	cmp	r4, #22
 800da0c:	f022 0603 	bic.w	r6, r2, #3
 800da10:	f1a5 0708 	sub.w	r7, r5, #8
 800da14:	d83e      	bhi.n	800da94 <_realloc_r+0xa8>
 800da16:	2410      	movs	r4, #16
 800da18:	4621      	mov	r1, r4
 800da1a:	45a2      	cmp	sl, r4
 800da1c:	d83f      	bhi.n	800da9e <_realloc_r+0xb2>
 800da1e:	428e      	cmp	r6, r1
 800da20:	eb07 0906 	add.w	r9, r7, r6
 800da24:	da74      	bge.n	800db10 <_realloc_r+0x124>
 800da26:	4bc7      	ldr	r3, [pc, #796]	; (800dd44 <_realloc_r+0x358>)
 800da28:	6898      	ldr	r0, [r3, #8]
 800da2a:	4548      	cmp	r0, r9
 800da2c:	f000 80aa 	beq.w	800db84 <_realloc_r+0x198>
 800da30:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800da34:	f020 0301 	bic.w	r3, r0, #1
 800da38:	444b      	add	r3, r9
 800da3a:	685b      	ldr	r3, [r3, #4]
 800da3c:	07db      	lsls	r3, r3, #31
 800da3e:	f140 8083 	bpl.w	800db48 <_realloc_r+0x15c>
 800da42:	07d2      	lsls	r2, r2, #31
 800da44:	d534      	bpl.n	800dab0 <_realloc_r+0xc4>
 800da46:	4651      	mov	r1, sl
 800da48:	4640      	mov	r0, r8
 800da4a:	f7ff f9a5 	bl	800cd98 <_malloc_r>
 800da4e:	4682      	mov	sl, r0
 800da50:	b1e0      	cbz	r0, 800da8c <_realloc_r+0xa0>
 800da52:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800da56:	f023 0301 	bic.w	r3, r3, #1
 800da5a:	443b      	add	r3, r7
 800da5c:	f1a0 0208 	sub.w	r2, r0, #8
 800da60:	4293      	cmp	r3, r2
 800da62:	f000 80f9 	beq.w	800dc58 <_realloc_r+0x26c>
 800da66:	1f32      	subs	r2, r6, #4
 800da68:	2a24      	cmp	r2, #36	; 0x24
 800da6a:	f200 8107 	bhi.w	800dc7c <_realloc_r+0x290>
 800da6e:	2a13      	cmp	r2, #19
 800da70:	6829      	ldr	r1, [r5, #0]
 800da72:	f200 80e6 	bhi.w	800dc42 <_realloc_r+0x256>
 800da76:	4603      	mov	r3, r0
 800da78:	462a      	mov	r2, r5
 800da7a:	6019      	str	r1, [r3, #0]
 800da7c:	6851      	ldr	r1, [r2, #4]
 800da7e:	6059      	str	r1, [r3, #4]
 800da80:	6892      	ldr	r2, [r2, #8]
 800da82:	609a      	str	r2, [r3, #8]
 800da84:	4629      	mov	r1, r5
 800da86:	4640      	mov	r0, r8
 800da88:	f7fe fe4a 	bl	800c720 <_free_r>
 800da8c:	4640      	mov	r0, r8
 800da8e:	f7ff fca7 	bl	800d3e0 <__malloc_unlock>
 800da92:	e04f      	b.n	800db34 <_realloc_r+0x148>
 800da94:	f024 0407 	bic.w	r4, r4, #7
 800da98:	2c00      	cmp	r4, #0
 800da9a:	4621      	mov	r1, r4
 800da9c:	dabd      	bge.n	800da1a <_realloc_r+0x2e>
 800da9e:	f04f 0a00 	mov.w	sl, #0
 800daa2:	230c      	movs	r3, #12
 800daa4:	4650      	mov	r0, sl
 800daa6:	f8c8 3000 	str.w	r3, [r8]
 800daaa:	b003      	add	sp, #12
 800daac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dab0:	f855 3c08 	ldr.w	r3, [r5, #-8]
 800dab4:	eba7 0b03 	sub.w	fp, r7, r3
 800dab8:	f8db 2004 	ldr.w	r2, [fp, #4]
 800dabc:	f022 0203 	bic.w	r2, r2, #3
 800dac0:	18b3      	adds	r3, r6, r2
 800dac2:	428b      	cmp	r3, r1
 800dac4:	dbbf      	blt.n	800da46 <_realloc_r+0x5a>
 800dac6:	46da      	mov	sl, fp
 800dac8:	f8db 100c 	ldr.w	r1, [fp, #12]
 800dacc:	f85a 0f08 	ldr.w	r0, [sl, #8]!
 800dad0:	1f32      	subs	r2, r6, #4
 800dad2:	2a24      	cmp	r2, #36	; 0x24
 800dad4:	60c1      	str	r1, [r0, #12]
 800dad6:	eb0b 0903 	add.w	r9, fp, r3
 800dada:	6088      	str	r0, [r1, #8]
 800dadc:	f200 80c6 	bhi.w	800dc6c <_realloc_r+0x280>
 800dae0:	2a13      	cmp	r2, #19
 800dae2:	6829      	ldr	r1, [r5, #0]
 800dae4:	f240 80c0 	bls.w	800dc68 <_realloc_r+0x27c>
 800dae8:	f8cb 1008 	str.w	r1, [fp, #8]
 800daec:	6869      	ldr	r1, [r5, #4]
 800daee:	f8cb 100c 	str.w	r1, [fp, #12]
 800daf2:	2a1b      	cmp	r2, #27
 800daf4:	68a9      	ldr	r1, [r5, #8]
 800daf6:	f200 80d8 	bhi.w	800dcaa <_realloc_r+0x2be>
 800dafa:	f10b 0210 	add.w	r2, fp, #16
 800dafe:	3508      	adds	r5, #8
 800db00:	6011      	str	r1, [r2, #0]
 800db02:	6869      	ldr	r1, [r5, #4]
 800db04:	6051      	str	r1, [r2, #4]
 800db06:	68a9      	ldr	r1, [r5, #8]
 800db08:	6091      	str	r1, [r2, #8]
 800db0a:	461e      	mov	r6, r3
 800db0c:	465f      	mov	r7, fp
 800db0e:	4655      	mov	r5, sl
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	1b32      	subs	r2, r6, r4
 800db14:	2a0f      	cmp	r2, #15
 800db16:	f003 0301 	and.w	r3, r3, #1
 800db1a:	d822      	bhi.n	800db62 <_realloc_r+0x176>
 800db1c:	4333      	orrs	r3, r6
 800db1e:	607b      	str	r3, [r7, #4]
 800db20:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800db24:	f043 0301 	orr.w	r3, r3, #1
 800db28:	f8c9 3004 	str.w	r3, [r9, #4]
 800db2c:	4640      	mov	r0, r8
 800db2e:	f7ff fc57 	bl	800d3e0 <__malloc_unlock>
 800db32:	46aa      	mov	sl, r5
 800db34:	4650      	mov	r0, sl
 800db36:	b003      	add	sp, #12
 800db38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db3c:	4611      	mov	r1, r2
 800db3e:	b003      	add	sp, #12
 800db40:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db44:	f7ff b928 	b.w	800cd98 <_malloc_r>
 800db48:	f020 0003 	bic.w	r0, r0, #3
 800db4c:	1833      	adds	r3, r6, r0
 800db4e:	428b      	cmp	r3, r1
 800db50:	db61      	blt.n	800dc16 <_realloc_r+0x22a>
 800db52:	e9d9 1202 	ldrd	r1, r2, [r9, #8]
 800db56:	461e      	mov	r6, r3
 800db58:	60ca      	str	r2, [r1, #12]
 800db5a:	eb07 0903 	add.w	r9, r7, r3
 800db5e:	6091      	str	r1, [r2, #8]
 800db60:	e7d6      	b.n	800db10 <_realloc_r+0x124>
 800db62:	1939      	adds	r1, r7, r4
 800db64:	4323      	orrs	r3, r4
 800db66:	f042 0201 	orr.w	r2, r2, #1
 800db6a:	607b      	str	r3, [r7, #4]
 800db6c:	604a      	str	r2, [r1, #4]
 800db6e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800db72:	f043 0301 	orr.w	r3, r3, #1
 800db76:	3108      	adds	r1, #8
 800db78:	f8c9 3004 	str.w	r3, [r9, #4]
 800db7c:	4640      	mov	r0, r8
 800db7e:	f7fe fdcf 	bl	800c720 <_free_r>
 800db82:	e7d3      	b.n	800db2c <_realloc_r+0x140>
 800db84:	6840      	ldr	r0, [r0, #4]
 800db86:	f020 0903 	bic.w	r9, r0, #3
 800db8a:	44b1      	add	r9, r6
 800db8c:	f104 0010 	add.w	r0, r4, #16
 800db90:	4581      	cmp	r9, r0
 800db92:	da77      	bge.n	800dc84 <_realloc_r+0x298>
 800db94:	07d2      	lsls	r2, r2, #31
 800db96:	f53f af56 	bmi.w	800da46 <_realloc_r+0x5a>
 800db9a:	f855 2c08 	ldr.w	r2, [r5, #-8]
 800db9e:	eba7 0b02 	sub.w	fp, r7, r2
 800dba2:	f8db 2004 	ldr.w	r2, [fp, #4]
 800dba6:	f022 0203 	bic.w	r2, r2, #3
 800dbaa:	4491      	add	r9, r2
 800dbac:	4548      	cmp	r0, r9
 800dbae:	dc87      	bgt.n	800dac0 <_realloc_r+0xd4>
 800dbb0:	46da      	mov	sl, fp
 800dbb2:	f8db 100c 	ldr.w	r1, [fp, #12]
 800dbb6:	f85a 0f08 	ldr.w	r0, [sl, #8]!
 800dbba:	1f32      	subs	r2, r6, #4
 800dbbc:	2a24      	cmp	r2, #36	; 0x24
 800dbbe:	60c1      	str	r1, [r0, #12]
 800dbc0:	6088      	str	r0, [r1, #8]
 800dbc2:	f200 80a1 	bhi.w	800dd08 <_realloc_r+0x31c>
 800dbc6:	2a13      	cmp	r2, #19
 800dbc8:	6829      	ldr	r1, [r5, #0]
 800dbca:	f240 809b 	bls.w	800dd04 <_realloc_r+0x318>
 800dbce:	f8cb 1008 	str.w	r1, [fp, #8]
 800dbd2:	6869      	ldr	r1, [r5, #4]
 800dbd4:	f8cb 100c 	str.w	r1, [fp, #12]
 800dbd8:	2a1b      	cmp	r2, #27
 800dbda:	68a9      	ldr	r1, [r5, #8]
 800dbdc:	f200 809b 	bhi.w	800dd16 <_realloc_r+0x32a>
 800dbe0:	f10b 0210 	add.w	r2, fp, #16
 800dbe4:	3508      	adds	r5, #8
 800dbe6:	6011      	str	r1, [r2, #0]
 800dbe8:	6869      	ldr	r1, [r5, #4]
 800dbea:	6051      	str	r1, [r2, #4]
 800dbec:	68a9      	ldr	r1, [r5, #8]
 800dbee:	6091      	str	r1, [r2, #8]
 800dbf0:	eb0b 0104 	add.w	r1, fp, r4
 800dbf4:	eba9 0204 	sub.w	r2, r9, r4
 800dbf8:	f042 0201 	orr.w	r2, r2, #1
 800dbfc:	6099      	str	r1, [r3, #8]
 800dbfe:	604a      	str	r2, [r1, #4]
 800dc00:	f8db 3004 	ldr.w	r3, [fp, #4]
 800dc04:	f003 0301 	and.w	r3, r3, #1
 800dc08:	431c      	orrs	r4, r3
 800dc0a:	4640      	mov	r0, r8
 800dc0c:	f8cb 4004 	str.w	r4, [fp, #4]
 800dc10:	f7ff fbe6 	bl	800d3e0 <__malloc_unlock>
 800dc14:	e78e      	b.n	800db34 <_realloc_r+0x148>
 800dc16:	07d3      	lsls	r3, r2, #31
 800dc18:	f53f af15 	bmi.w	800da46 <_realloc_r+0x5a>
 800dc1c:	f855 3c08 	ldr.w	r3, [r5, #-8]
 800dc20:	eba7 0b03 	sub.w	fp, r7, r3
 800dc24:	f8db 2004 	ldr.w	r2, [fp, #4]
 800dc28:	f022 0203 	bic.w	r2, r2, #3
 800dc2c:	4410      	add	r0, r2
 800dc2e:	1983      	adds	r3, r0, r6
 800dc30:	428b      	cmp	r3, r1
 800dc32:	f6ff af45 	blt.w	800dac0 <_realloc_r+0xd4>
 800dc36:	e9d9 1202 	ldrd	r1, r2, [r9, #8]
 800dc3a:	46da      	mov	sl, fp
 800dc3c:	60ca      	str	r2, [r1, #12]
 800dc3e:	6091      	str	r1, [r2, #8]
 800dc40:	e742      	b.n	800dac8 <_realloc_r+0xdc>
 800dc42:	6001      	str	r1, [r0, #0]
 800dc44:	686b      	ldr	r3, [r5, #4]
 800dc46:	6043      	str	r3, [r0, #4]
 800dc48:	2a1b      	cmp	r2, #27
 800dc4a:	d83a      	bhi.n	800dcc2 <_realloc_r+0x2d6>
 800dc4c:	f105 0208 	add.w	r2, r5, #8
 800dc50:	f100 0308 	add.w	r3, r0, #8
 800dc54:	68a9      	ldr	r1, [r5, #8]
 800dc56:	e710      	b.n	800da7a <_realloc_r+0x8e>
 800dc58:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800dc5c:	f023 0303 	bic.w	r3, r3, #3
 800dc60:	441e      	add	r6, r3
 800dc62:	eb07 0906 	add.w	r9, r7, r6
 800dc66:	e753      	b.n	800db10 <_realloc_r+0x124>
 800dc68:	4652      	mov	r2, sl
 800dc6a:	e749      	b.n	800db00 <_realloc_r+0x114>
 800dc6c:	4629      	mov	r1, r5
 800dc6e:	4650      	mov	r0, sl
 800dc70:	461e      	mov	r6, r3
 800dc72:	465f      	mov	r7, fp
 800dc74:	f7ff fb4a 	bl	800d30c <memmove>
 800dc78:	4655      	mov	r5, sl
 800dc7a:	e749      	b.n	800db10 <_realloc_r+0x124>
 800dc7c:	4629      	mov	r1, r5
 800dc7e:	f7ff fb45 	bl	800d30c <memmove>
 800dc82:	e6ff      	b.n	800da84 <_realloc_r+0x98>
 800dc84:	4427      	add	r7, r4
 800dc86:	eba9 0904 	sub.w	r9, r9, r4
 800dc8a:	f049 0201 	orr.w	r2, r9, #1
 800dc8e:	609f      	str	r7, [r3, #8]
 800dc90:	607a      	str	r2, [r7, #4]
 800dc92:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800dc96:	f003 0301 	and.w	r3, r3, #1
 800dc9a:	431c      	orrs	r4, r3
 800dc9c:	4640      	mov	r0, r8
 800dc9e:	f845 4c04 	str.w	r4, [r5, #-4]
 800dca2:	f7ff fb9d 	bl	800d3e0 <__malloc_unlock>
 800dca6:	46aa      	mov	sl, r5
 800dca8:	e744      	b.n	800db34 <_realloc_r+0x148>
 800dcaa:	f8cb 1010 	str.w	r1, [fp, #16]
 800dcae:	68e9      	ldr	r1, [r5, #12]
 800dcb0:	f8cb 1014 	str.w	r1, [fp, #20]
 800dcb4:	2a24      	cmp	r2, #36	; 0x24
 800dcb6:	d010      	beq.n	800dcda <_realloc_r+0x2ee>
 800dcb8:	6929      	ldr	r1, [r5, #16]
 800dcba:	f10b 0218 	add.w	r2, fp, #24
 800dcbe:	3510      	adds	r5, #16
 800dcc0:	e71e      	b.n	800db00 <_realloc_r+0x114>
 800dcc2:	68ab      	ldr	r3, [r5, #8]
 800dcc4:	6083      	str	r3, [r0, #8]
 800dcc6:	68eb      	ldr	r3, [r5, #12]
 800dcc8:	60c3      	str	r3, [r0, #12]
 800dcca:	2a24      	cmp	r2, #36	; 0x24
 800dccc:	d010      	beq.n	800dcf0 <_realloc_r+0x304>
 800dcce:	f105 0210 	add.w	r2, r5, #16
 800dcd2:	f100 0310 	add.w	r3, r0, #16
 800dcd6:	6929      	ldr	r1, [r5, #16]
 800dcd8:	e6cf      	b.n	800da7a <_realloc_r+0x8e>
 800dcda:	692a      	ldr	r2, [r5, #16]
 800dcdc:	f8cb 2018 	str.w	r2, [fp, #24]
 800dce0:	696a      	ldr	r2, [r5, #20]
 800dce2:	f8cb 201c 	str.w	r2, [fp, #28]
 800dce6:	69a9      	ldr	r1, [r5, #24]
 800dce8:	f10b 0220 	add.w	r2, fp, #32
 800dcec:	3518      	adds	r5, #24
 800dcee:	e707      	b.n	800db00 <_realloc_r+0x114>
 800dcf0:	692b      	ldr	r3, [r5, #16]
 800dcf2:	6103      	str	r3, [r0, #16]
 800dcf4:	696b      	ldr	r3, [r5, #20]
 800dcf6:	6143      	str	r3, [r0, #20]
 800dcf8:	69a9      	ldr	r1, [r5, #24]
 800dcfa:	f105 0218 	add.w	r2, r5, #24
 800dcfe:	f100 0318 	add.w	r3, r0, #24
 800dd02:	e6ba      	b.n	800da7a <_realloc_r+0x8e>
 800dd04:	4652      	mov	r2, sl
 800dd06:	e76e      	b.n	800dbe6 <_realloc_r+0x1fa>
 800dd08:	4629      	mov	r1, r5
 800dd0a:	4650      	mov	r0, sl
 800dd0c:	9301      	str	r3, [sp, #4]
 800dd0e:	f7ff fafd 	bl	800d30c <memmove>
 800dd12:	9b01      	ldr	r3, [sp, #4]
 800dd14:	e76c      	b.n	800dbf0 <_realloc_r+0x204>
 800dd16:	f8cb 1010 	str.w	r1, [fp, #16]
 800dd1a:	68e9      	ldr	r1, [r5, #12]
 800dd1c:	f8cb 1014 	str.w	r1, [fp, #20]
 800dd20:	2a24      	cmp	r2, #36	; 0x24
 800dd22:	d004      	beq.n	800dd2e <_realloc_r+0x342>
 800dd24:	6929      	ldr	r1, [r5, #16]
 800dd26:	f10b 0218 	add.w	r2, fp, #24
 800dd2a:	3510      	adds	r5, #16
 800dd2c:	e75b      	b.n	800dbe6 <_realloc_r+0x1fa>
 800dd2e:	692a      	ldr	r2, [r5, #16]
 800dd30:	f8cb 2018 	str.w	r2, [fp, #24]
 800dd34:	696a      	ldr	r2, [r5, #20]
 800dd36:	f8cb 201c 	str.w	r2, [fp, #28]
 800dd3a:	69a9      	ldr	r1, [r5, #24]
 800dd3c:	f10b 0220 	add.w	r2, fp, #32
 800dd40:	3518      	adds	r5, #24
 800dd42:	e750      	b.n	800dbe6 <_realloc_r+0x1fa>
 800dd44:	200005d4 	.word	0x200005d4

0800dd48 <_sbrk_r>:
 800dd48:	b538      	push	{r3, r4, r5, lr}
 800dd4a:	4c07      	ldr	r4, [pc, #28]	; (800dd68 <_sbrk_r+0x20>)
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	4605      	mov	r5, r0
 800dd50:	4608      	mov	r0, r1
 800dd52:	6023      	str	r3, [r4, #0]
 800dd54:	f7f9 fcd2 	bl	80076fc <_sbrk>
 800dd58:	1c43      	adds	r3, r0, #1
 800dd5a:	d000      	beq.n	800dd5e <_sbrk_r+0x16>
 800dd5c:	bd38      	pop	{r3, r4, r5, pc}
 800dd5e:	6823      	ldr	r3, [r4, #0]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d0fb      	beq.n	800dd5c <_sbrk_r+0x14>
 800dd64:	602b      	str	r3, [r5, #0]
 800dd66:	bd38      	pop	{r3, r4, r5, pc}
 800dd68:	20003344 	.word	0x20003344

0800dd6c <__sread>:
 800dd6c:	b510      	push	{r4, lr}
 800dd6e:	460c      	mov	r4, r1
 800dd70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd74:	f000 fa8e 	bl	800e294 <_read_r>
 800dd78:	2800      	cmp	r0, #0
 800dd7a:	db03      	blt.n	800dd84 <__sread+0x18>
 800dd7c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800dd7e:	4403      	add	r3, r0
 800dd80:	6523      	str	r3, [r4, #80]	; 0x50
 800dd82:	bd10      	pop	{r4, pc}
 800dd84:	89a3      	ldrh	r3, [r4, #12]
 800dd86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dd8a:	81a3      	strh	r3, [r4, #12]
 800dd8c:	bd10      	pop	{r4, pc}
 800dd8e:	bf00      	nop

0800dd90 <__swrite>:
 800dd90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd94:	4616      	mov	r6, r2
 800dd96:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dd9a:	461f      	mov	r7, r3
 800dd9c:	05d3      	lsls	r3, r2, #23
 800dd9e:	460c      	mov	r4, r1
 800dda0:	4605      	mov	r5, r0
 800dda2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dda6:	d507      	bpl.n	800ddb8 <__swrite+0x28>
 800dda8:	2200      	movs	r2, #0
 800ddaa:	2302      	movs	r3, #2
 800ddac:	f000 fa5c 	bl	800e268 <_lseek_r>
 800ddb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ddb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ddb8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ddbc:	81a2      	strh	r2, [r4, #12]
 800ddbe:	463b      	mov	r3, r7
 800ddc0:	4632      	mov	r2, r6
 800ddc2:	4628      	mov	r0, r5
 800ddc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ddc8:	f000 b8e2 	b.w	800df90 <_write_r>

0800ddcc <__sseek>:
 800ddcc:	b510      	push	{r4, lr}
 800ddce:	460c      	mov	r4, r1
 800ddd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddd4:	f000 fa48 	bl	800e268 <_lseek_r>
 800ddd8:	89a3      	ldrh	r3, [r4, #12]
 800ddda:	1c42      	adds	r2, r0, #1
 800dddc:	bf0e      	itee	eq
 800ddde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dde2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dde6:	6520      	strne	r0, [r4, #80]	; 0x50
 800dde8:	81a3      	strh	r3, [r4, #12]
 800ddea:	bd10      	pop	{r4, pc}

0800ddec <__sclose>:
 800ddec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddf0:	f000 b918 	b.w	800e024 <_close_r>

0800ddf4 <__ssprint_r>:
 800ddf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddf8:	6893      	ldr	r3, [r2, #8]
 800ddfa:	b083      	sub	sp, #12
 800ddfc:	4690      	mov	r8, r2
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d06c      	beq.n	800dedc <__ssprint_r+0xe8>
 800de02:	6817      	ldr	r7, [r2, #0]
 800de04:	688d      	ldr	r5, [r1, #8]
 800de06:	4682      	mov	sl, r0
 800de08:	460c      	mov	r4, r1
 800de0a:	6808      	ldr	r0, [r1, #0]
 800de0c:	3708      	adds	r7, #8
 800de0e:	e042      	b.n	800de96 <__ssprint_r+0xa2>
 800de10:	89a3      	ldrh	r3, [r4, #12]
 800de12:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800de16:	d02d      	beq.n	800de74 <__ssprint_r+0x80>
 800de18:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
 800de1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800de20:	eba0 0b01 	sub.w	fp, r0, r1
 800de24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800de28:	1c70      	adds	r0, r6, #1
 800de2a:	106d      	asrs	r5, r5, #1
 800de2c:	4458      	add	r0, fp
 800de2e:	42a8      	cmp	r0, r5
 800de30:	462a      	mov	r2, r5
 800de32:	bf84      	itt	hi
 800de34:	4605      	movhi	r5, r0
 800de36:	462a      	movhi	r2, r5
 800de38:	055b      	lsls	r3, r3, #21
 800de3a:	d536      	bpl.n	800deaa <__ssprint_r+0xb6>
 800de3c:	4611      	mov	r1, r2
 800de3e:	4650      	mov	r0, sl
 800de40:	f7fe ffaa 	bl	800cd98 <_malloc_r>
 800de44:	2800      	cmp	r0, #0
 800de46:	d03a      	beq.n	800debe <__ssprint_r+0xca>
 800de48:	465a      	mov	r2, fp
 800de4a:	6921      	ldr	r1, [r4, #16]
 800de4c:	9001      	str	r0, [sp, #4]
 800de4e:	f7f2 fbdd 	bl	800060c <memcpy>
 800de52:	89a2      	ldrh	r2, [r4, #12]
 800de54:	9b01      	ldr	r3, [sp, #4]
 800de56:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800de5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800de5e:	81a2      	strh	r2, [r4, #12]
 800de60:	eba5 020b 	sub.w	r2, r5, fp
 800de64:	eb03 000b 	add.w	r0, r3, fp
 800de68:	6165      	str	r5, [r4, #20]
 800de6a:	6123      	str	r3, [r4, #16]
 800de6c:	6020      	str	r0, [r4, #0]
 800de6e:	60a2      	str	r2, [r4, #8]
 800de70:	4635      	mov	r5, r6
 800de72:	46b3      	mov	fp, r6
 800de74:	465a      	mov	r2, fp
 800de76:	4649      	mov	r1, r9
 800de78:	f7ff fa48 	bl	800d30c <memmove>
 800de7c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800de80:	68a2      	ldr	r2, [r4, #8]
 800de82:	6820      	ldr	r0, [r4, #0]
 800de84:	1b55      	subs	r5, r2, r5
 800de86:	4458      	add	r0, fp
 800de88:	1b9e      	subs	r6, r3, r6
 800de8a:	60a5      	str	r5, [r4, #8]
 800de8c:	6020      	str	r0, [r4, #0]
 800de8e:	f8c8 6008 	str.w	r6, [r8, #8]
 800de92:	b31e      	cbz	r6, 800dedc <__ssprint_r+0xe8>
 800de94:	3708      	adds	r7, #8
 800de96:	e957 9602 	ldrd	r9, r6, [r7, #-8]
 800de9a:	46ab      	mov	fp, r5
 800de9c:	2e00      	cmp	r6, #0
 800de9e:	d0f9      	beq.n	800de94 <__ssprint_r+0xa0>
 800dea0:	42ae      	cmp	r6, r5
 800dea2:	d2b5      	bcs.n	800de10 <__ssprint_r+0x1c>
 800dea4:	4635      	mov	r5, r6
 800dea6:	46b3      	mov	fp, r6
 800dea8:	e7e4      	b.n	800de74 <__ssprint_r+0x80>
 800deaa:	4650      	mov	r0, sl
 800deac:	f7ff fd9e 	bl	800d9ec <_realloc_r>
 800deb0:	4603      	mov	r3, r0
 800deb2:	2800      	cmp	r0, #0
 800deb4:	d1d4      	bne.n	800de60 <__ssprint_r+0x6c>
 800deb6:	6921      	ldr	r1, [r4, #16]
 800deb8:	4650      	mov	r0, sl
 800deba:	f7fe fc31 	bl	800c720 <_free_r>
 800debe:	230c      	movs	r3, #12
 800dec0:	f8ca 3000 	str.w	r3, [sl]
 800dec4:	89a3      	ldrh	r3, [r4, #12]
 800dec6:	2200      	movs	r2, #0
 800dec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800decc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ded0:	81a3      	strh	r3, [r4, #12]
 800ded2:	e9c8 2201 	strd	r2, r2, [r8, #4]
 800ded6:	b003      	add	sp, #12
 800ded8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dedc:	2000      	movs	r0, #0
 800dede:	f8c8 0004 	str.w	r0, [r8, #4]
 800dee2:	b003      	add	sp, #12
 800dee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dee8 <__sprint_r.part.0>:
 800dee8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deec:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800deee:	049c      	lsls	r4, r3, #18
 800def0:	4692      	mov	sl, r2
 800def2:	d52d      	bpl.n	800df50 <__sprint_r.part.0+0x68>
 800def4:	6893      	ldr	r3, [r2, #8]
 800def6:	6812      	ldr	r2, [r2, #0]
 800def8:	b343      	cbz	r3, 800df4c <__sprint_r.part.0+0x64>
 800defa:	460e      	mov	r6, r1
 800defc:	4607      	mov	r7, r0
 800defe:	f102 0908 	add.w	r9, r2, #8
 800df02:	e959 5b02 	ldrd	r5, fp, [r9, #-8]
 800df06:	ea5f 089b 	movs.w	r8, fp, lsr #2
 800df0a:	d015      	beq.n	800df38 <__sprint_r.part.0+0x50>
 800df0c:	3d04      	subs	r5, #4
 800df0e:	2400      	movs	r4, #0
 800df10:	e001      	b.n	800df16 <__sprint_r.part.0+0x2e>
 800df12:	45a0      	cmp	r8, r4
 800df14:	d00e      	beq.n	800df34 <__sprint_r.part.0+0x4c>
 800df16:	4632      	mov	r2, r6
 800df18:	f855 1f04 	ldr.w	r1, [r5, #4]!
 800df1c:	4638      	mov	r0, r7
 800df1e:	f000 f94b 	bl	800e1b8 <_fputwc_r>
 800df22:	1c43      	adds	r3, r0, #1
 800df24:	f104 0401 	add.w	r4, r4, #1
 800df28:	d1f3      	bne.n	800df12 <__sprint_r.part.0+0x2a>
 800df2a:	2300      	movs	r3, #0
 800df2c:	e9ca 3301 	strd	r3, r3, [sl, #4]
 800df30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df34:	f8da 3008 	ldr.w	r3, [sl, #8]
 800df38:	f02b 0b03 	bic.w	fp, fp, #3
 800df3c:	eba3 030b 	sub.w	r3, r3, fp
 800df40:	f8ca 3008 	str.w	r3, [sl, #8]
 800df44:	f109 0908 	add.w	r9, r9, #8
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d1da      	bne.n	800df02 <__sprint_r.part.0+0x1a>
 800df4c:	2000      	movs	r0, #0
 800df4e:	e7ec      	b.n	800df2a <__sprint_r.part.0+0x42>
 800df50:	f7fe fcda 	bl	800c908 <__sfvwrite_r>
 800df54:	2300      	movs	r3, #0
 800df56:	e9ca 3301 	strd	r3, r3, [sl, #4]
 800df5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df5e:	bf00      	nop

0800df60 <__sprint_r>:
 800df60:	6893      	ldr	r3, [r2, #8]
 800df62:	b10b      	cbz	r3, 800df68 <__sprint_r+0x8>
 800df64:	f7ff bfc0 	b.w	800dee8 <__sprint_r.part.0>
 800df68:	b410      	push	{r4}
 800df6a:	4618      	mov	r0, r3
 800df6c:	6053      	str	r3, [r2, #4]
 800df6e:	bc10      	pop	{r4}
 800df70:	4770      	bx	lr
 800df72:	bf00      	nop

0800df74 <__ascii_wctomb>:
 800df74:	b121      	cbz	r1, 800df80 <__ascii_wctomb+0xc>
 800df76:	2aff      	cmp	r2, #255	; 0xff
 800df78:	d804      	bhi.n	800df84 <__ascii_wctomb+0x10>
 800df7a:	700a      	strb	r2, [r1, #0]
 800df7c:	2001      	movs	r0, #1
 800df7e:	4770      	bx	lr
 800df80:	4608      	mov	r0, r1
 800df82:	4770      	bx	lr
 800df84:	238a      	movs	r3, #138	; 0x8a
 800df86:	6003      	str	r3, [r0, #0]
 800df88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800df8c:	4770      	bx	lr
 800df8e:	bf00      	nop

0800df90 <_write_r>:
 800df90:	b570      	push	{r4, r5, r6, lr}
 800df92:	460d      	mov	r5, r1
 800df94:	4c08      	ldr	r4, [pc, #32]	; (800dfb8 <_write_r+0x28>)
 800df96:	4611      	mov	r1, r2
 800df98:	4606      	mov	r6, r0
 800df9a:	461a      	mov	r2, r3
 800df9c:	4628      	mov	r0, r5
 800df9e:	2300      	movs	r3, #0
 800dfa0:	6023      	str	r3, [r4, #0]
 800dfa2:	f7f8 fe5f 	bl	8006c64 <_write>
 800dfa6:	1c43      	adds	r3, r0, #1
 800dfa8:	d000      	beq.n	800dfac <_write_r+0x1c>
 800dfaa:	bd70      	pop	{r4, r5, r6, pc}
 800dfac:	6823      	ldr	r3, [r4, #0]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d0fb      	beq.n	800dfaa <_write_r+0x1a>
 800dfb2:	6033      	str	r3, [r6, #0]
 800dfb4:	bd70      	pop	{r4, r5, r6, pc}
 800dfb6:	bf00      	nop
 800dfb8:	20003344 	.word	0x20003344

0800dfbc <_calloc_r>:
 800dfbc:	b510      	push	{r4, lr}
 800dfbe:	fb02 f101 	mul.w	r1, r2, r1
 800dfc2:	f7fe fee9 	bl	800cd98 <_malloc_r>
 800dfc6:	4604      	mov	r4, r0
 800dfc8:	b1d8      	cbz	r0, 800e002 <_calloc_r+0x46>
 800dfca:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800dfce:	f022 0203 	bic.w	r2, r2, #3
 800dfd2:	3a04      	subs	r2, #4
 800dfd4:	2a24      	cmp	r2, #36	; 0x24
 800dfd6:	d81d      	bhi.n	800e014 <_calloc_r+0x58>
 800dfd8:	2a13      	cmp	r2, #19
 800dfda:	d914      	bls.n	800e006 <_calloc_r+0x4a>
 800dfdc:	2300      	movs	r3, #0
 800dfde:	2a1b      	cmp	r2, #27
 800dfe0:	e9c0 3300 	strd	r3, r3, [r0]
 800dfe4:	d91b      	bls.n	800e01e <_calloc_r+0x62>
 800dfe6:	2a24      	cmp	r2, #36	; 0x24
 800dfe8:	e9c0 3302 	strd	r3, r3, [r0, #8]
 800dfec:	bf0a      	itet	eq
 800dfee:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
 800dff2:	f100 0210 	addne.w	r2, r0, #16
 800dff6:	f100 0218 	addeq.w	r2, r0, #24
 800dffa:	2300      	movs	r3, #0
 800dffc:	e9c2 3300 	strd	r3, r3, [r2]
 800e000:	6093      	str	r3, [r2, #8]
 800e002:	4620      	mov	r0, r4
 800e004:	bd10      	pop	{r4, pc}
 800e006:	4602      	mov	r2, r0
 800e008:	2300      	movs	r3, #0
 800e00a:	e9c2 3300 	strd	r3, r3, [r2]
 800e00e:	6093      	str	r3, [r2, #8]
 800e010:	4620      	mov	r0, r4
 800e012:	bd10      	pop	{r4, pc}
 800e014:	2100      	movs	r1, #0
 800e016:	f7fa fae9 	bl	80085ec <memset>
 800e01a:	4620      	mov	r0, r4
 800e01c:	bd10      	pop	{r4, pc}
 800e01e:	f100 0208 	add.w	r2, r0, #8
 800e022:	e7f1      	b.n	800e008 <_calloc_r+0x4c>

0800e024 <_close_r>:
 800e024:	b538      	push	{r3, r4, r5, lr}
 800e026:	4c07      	ldr	r4, [pc, #28]	; (800e044 <_close_r+0x20>)
 800e028:	2300      	movs	r3, #0
 800e02a:	4605      	mov	r5, r0
 800e02c:	4608      	mov	r0, r1
 800e02e:	6023      	str	r3, [r4, #0]
 800e030:	f7f9 fb49 	bl	80076c6 <_close>
 800e034:	1c43      	adds	r3, r0, #1
 800e036:	d000      	beq.n	800e03a <_close_r+0x16>
 800e038:	bd38      	pop	{r3, r4, r5, pc}
 800e03a:	6823      	ldr	r3, [r4, #0]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d0fb      	beq.n	800e038 <_close_r+0x14>
 800e040:	602b      	str	r3, [r5, #0]
 800e042:	bd38      	pop	{r3, r4, r5, pc}
 800e044:	20003344 	.word	0x20003344

0800e048 <_fclose_r>:
 800e048:	b570      	push	{r4, r5, r6, lr}
 800e04a:	2900      	cmp	r1, #0
 800e04c:	d048      	beq.n	800e0e0 <_fclose_r+0x98>
 800e04e:	4605      	mov	r5, r0
 800e050:	460c      	mov	r4, r1
 800e052:	b110      	cbz	r0, 800e05a <_fclose_r+0x12>
 800e054:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e056:	2b00      	cmp	r3, #0
 800e058:	d048      	beq.n	800e0ec <_fclose_r+0xa4>
 800e05a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e05c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e060:	07d0      	lsls	r0, r2, #31
 800e062:	d440      	bmi.n	800e0e6 <_fclose_r+0x9e>
 800e064:	0599      	lsls	r1, r3, #22
 800e066:	d530      	bpl.n	800e0ca <_fclose_r+0x82>
 800e068:	4621      	mov	r1, r4
 800e06a:	4628      	mov	r0, r5
 800e06c:	f7fe f9ca 	bl	800c404 <__sflush_r>
 800e070:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e072:	4606      	mov	r6, r0
 800e074:	b133      	cbz	r3, 800e084 <_fclose_r+0x3c>
 800e076:	69e1      	ldr	r1, [r4, #28]
 800e078:	4628      	mov	r0, r5
 800e07a:	4798      	blx	r3
 800e07c:	2800      	cmp	r0, #0
 800e07e:	bfb8      	it	lt
 800e080:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 800e084:	89a3      	ldrh	r3, [r4, #12]
 800e086:	061a      	lsls	r2, r3, #24
 800e088:	d43c      	bmi.n	800e104 <_fclose_r+0xbc>
 800e08a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e08c:	b141      	cbz	r1, 800e0a0 <_fclose_r+0x58>
 800e08e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800e092:	4299      	cmp	r1, r3
 800e094:	d002      	beq.n	800e09c <_fclose_r+0x54>
 800e096:	4628      	mov	r0, r5
 800e098:	f7fe fb42 	bl	800c720 <_free_r>
 800e09c:	2300      	movs	r3, #0
 800e09e:	6323      	str	r3, [r4, #48]	; 0x30
 800e0a0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e0a2:	b121      	cbz	r1, 800e0ae <_fclose_r+0x66>
 800e0a4:	4628      	mov	r0, r5
 800e0a6:	f7fe fb3b 	bl	800c720 <_free_r>
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	6463      	str	r3, [r4, #68]	; 0x44
 800e0ae:	f7fe fadb 	bl	800c668 <__sfp_lock_acquire>
 800e0b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	07db      	lsls	r3, r3, #31
 800e0b8:	81a2      	strh	r2, [r4, #12]
 800e0ba:	d51f      	bpl.n	800e0fc <_fclose_r+0xb4>
 800e0bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0be:	f7fe fded 	bl	800cc9c <__retarget_lock_close_recursive>
 800e0c2:	f7fe fad7 	bl	800c674 <__sfp_lock_release>
 800e0c6:	4630      	mov	r0, r6
 800e0c8:	bd70      	pop	{r4, r5, r6, pc}
 800e0ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0cc:	f7fe fde8 	bl	800cca0 <__retarget_lock_acquire_recursive>
 800e0d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d1c7      	bne.n	800e068 <_fclose_r+0x20>
 800e0d8:	6e66      	ldr	r6, [r4, #100]	; 0x64
 800e0da:	f016 0601 	ands.w	r6, r6, #1
 800e0de:	d016      	beq.n	800e10e <_fclose_r+0xc6>
 800e0e0:	2600      	movs	r6, #0
 800e0e2:	4630      	mov	r0, r6
 800e0e4:	bd70      	pop	{r4, r5, r6, pc}
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d0fa      	beq.n	800e0e0 <_fclose_r+0x98>
 800e0ea:	e7bd      	b.n	800e068 <_fclose_r+0x20>
 800e0ec:	f7fe fa90 	bl	800c610 <__sinit>
 800e0f0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e0f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0f6:	07d0      	lsls	r0, r2, #31
 800e0f8:	d4f5      	bmi.n	800e0e6 <_fclose_r+0x9e>
 800e0fa:	e7b3      	b.n	800e064 <_fclose_r+0x1c>
 800e0fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0fe:	f7fe fdd1 	bl	800cca4 <__retarget_lock_release_recursive>
 800e102:	e7db      	b.n	800e0bc <_fclose_r+0x74>
 800e104:	6921      	ldr	r1, [r4, #16]
 800e106:	4628      	mov	r0, r5
 800e108:	f7fe fb0a 	bl	800c720 <_free_r>
 800e10c:	e7bd      	b.n	800e08a <_fclose_r+0x42>
 800e10e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e110:	f7fe fdc8 	bl	800cca4 <__retarget_lock_release_recursive>
 800e114:	4630      	mov	r0, r6
 800e116:	bd70      	pop	{r4, r5, r6, pc}

0800e118 <__fputwc>:
 800e118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e11c:	b082      	sub	sp, #8
 800e11e:	4681      	mov	r9, r0
 800e120:	4688      	mov	r8, r1
 800e122:	4614      	mov	r4, r2
 800e124:	f7fe fd98 	bl	800cc58 <__locale_mb_cur_max>
 800e128:	2801      	cmp	r0, #1
 800e12a:	d103      	bne.n	800e134 <__fputwc+0x1c>
 800e12c:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800e130:	2bfe      	cmp	r3, #254	; 0xfe
 800e132:	d933      	bls.n	800e19c <__fputwc+0x84>
 800e134:	4642      	mov	r2, r8
 800e136:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800e13a:	a901      	add	r1, sp, #4
 800e13c:	4648      	mov	r0, r9
 800e13e:	f000 f917 	bl	800e370 <_wcrtomb_r>
 800e142:	1c42      	adds	r2, r0, #1
 800e144:	4606      	mov	r6, r0
 800e146:	d02f      	beq.n	800e1a8 <__fputwc+0x90>
 800e148:	b320      	cbz	r0, 800e194 <__fputwc+0x7c>
 800e14a:	f89d c004 	ldrb.w	ip, [sp, #4]
 800e14e:	2500      	movs	r5, #0
 800e150:	f10d 0a04 	add.w	sl, sp, #4
 800e154:	e009      	b.n	800e16a <__fputwc+0x52>
 800e156:	6823      	ldr	r3, [r4, #0]
 800e158:	1c5a      	adds	r2, r3, #1
 800e15a:	6022      	str	r2, [r4, #0]
 800e15c:	f883 c000 	strb.w	ip, [r3]
 800e160:	3501      	adds	r5, #1
 800e162:	42b5      	cmp	r5, r6
 800e164:	d216      	bcs.n	800e194 <__fputwc+0x7c>
 800e166:	f815 c00a 	ldrb.w	ip, [r5, sl]
 800e16a:	68a3      	ldr	r3, [r4, #8]
 800e16c:	3b01      	subs	r3, #1
 800e16e:	2b00      	cmp	r3, #0
 800e170:	60a3      	str	r3, [r4, #8]
 800e172:	daf0      	bge.n	800e156 <__fputwc+0x3e>
 800e174:	69a7      	ldr	r7, [r4, #24]
 800e176:	42bb      	cmp	r3, r7
 800e178:	4661      	mov	r1, ip
 800e17a:	4622      	mov	r2, r4
 800e17c:	4648      	mov	r0, r9
 800e17e:	db02      	blt.n	800e186 <__fputwc+0x6e>
 800e180:	f1bc 0f0a 	cmp.w	ip, #10
 800e184:	d1e7      	bne.n	800e156 <__fputwc+0x3e>
 800e186:	f000 f89b 	bl	800e2c0 <__swbuf_r>
 800e18a:	1c43      	adds	r3, r0, #1
 800e18c:	d1e8      	bne.n	800e160 <__fputwc+0x48>
 800e18e:	b002      	add	sp, #8
 800e190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e194:	4640      	mov	r0, r8
 800e196:	b002      	add	sp, #8
 800e198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e19c:	fa5f fc88 	uxtb.w	ip, r8
 800e1a0:	4606      	mov	r6, r0
 800e1a2:	f88d c004 	strb.w	ip, [sp, #4]
 800e1a6:	e7d2      	b.n	800e14e <__fputwc+0x36>
 800e1a8:	89a3      	ldrh	r3, [r4, #12]
 800e1aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1ae:	81a3      	strh	r3, [r4, #12]
 800e1b0:	b002      	add	sp, #8
 800e1b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1b6:	bf00      	nop

0800e1b8 <_fputwc_r>:
 800e1b8:	b530      	push	{r4, r5, lr}
 800e1ba:	4605      	mov	r5, r0
 800e1bc:	6e50      	ldr	r0, [r2, #100]	; 0x64
 800e1be:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 800e1c2:	07c0      	lsls	r0, r0, #31
 800e1c4:	4614      	mov	r4, r2
 800e1c6:	b083      	sub	sp, #12
 800e1c8:	b29a      	uxth	r2, r3
 800e1ca:	d401      	bmi.n	800e1d0 <_fputwc_r+0x18>
 800e1cc:	0590      	lsls	r0, r2, #22
 800e1ce:	d51c      	bpl.n	800e20a <_fputwc_r+0x52>
 800e1d0:	0490      	lsls	r0, r2, #18
 800e1d2:	d406      	bmi.n	800e1e2 <_fputwc_r+0x2a>
 800e1d4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e1d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e1da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e1de:	81a3      	strh	r3, [r4, #12]
 800e1e0:	6662      	str	r2, [r4, #100]	; 0x64
 800e1e2:	4628      	mov	r0, r5
 800e1e4:	4622      	mov	r2, r4
 800e1e6:	f7ff ff97 	bl	800e118 <__fputwc>
 800e1ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e1ec:	07da      	lsls	r2, r3, #31
 800e1ee:	4605      	mov	r5, r0
 800e1f0:	d402      	bmi.n	800e1f8 <_fputwc_r+0x40>
 800e1f2:	89a3      	ldrh	r3, [r4, #12]
 800e1f4:	059b      	lsls	r3, r3, #22
 800e1f6:	d502      	bpl.n	800e1fe <_fputwc_r+0x46>
 800e1f8:	4628      	mov	r0, r5
 800e1fa:	b003      	add	sp, #12
 800e1fc:	bd30      	pop	{r4, r5, pc}
 800e1fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e200:	f7fe fd50 	bl	800cca4 <__retarget_lock_release_recursive>
 800e204:	4628      	mov	r0, r5
 800e206:	b003      	add	sp, #12
 800e208:	bd30      	pop	{r4, r5, pc}
 800e20a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e20c:	9101      	str	r1, [sp, #4]
 800e20e:	f7fe fd47 	bl	800cca0 <__retarget_lock_acquire_recursive>
 800e212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e216:	9901      	ldr	r1, [sp, #4]
 800e218:	b29a      	uxth	r2, r3
 800e21a:	e7d9      	b.n	800e1d0 <_fputwc_r+0x18>

0800e21c <_fstat_r>:
 800e21c:	b538      	push	{r3, r4, r5, lr}
 800e21e:	460b      	mov	r3, r1
 800e220:	4c07      	ldr	r4, [pc, #28]	; (800e240 <_fstat_r+0x24>)
 800e222:	4605      	mov	r5, r0
 800e224:	4611      	mov	r1, r2
 800e226:	4618      	mov	r0, r3
 800e228:	2300      	movs	r3, #0
 800e22a:	6023      	str	r3, [r4, #0]
 800e22c:	f7f9 fa53 	bl	80076d6 <_fstat>
 800e230:	1c43      	adds	r3, r0, #1
 800e232:	d000      	beq.n	800e236 <_fstat_r+0x1a>
 800e234:	bd38      	pop	{r3, r4, r5, pc}
 800e236:	6823      	ldr	r3, [r4, #0]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d0fb      	beq.n	800e234 <_fstat_r+0x18>
 800e23c:	602b      	str	r3, [r5, #0]
 800e23e:	bd38      	pop	{r3, r4, r5, pc}
 800e240:	20003344 	.word	0x20003344

0800e244 <_isatty_r>:
 800e244:	b538      	push	{r3, r4, r5, lr}
 800e246:	4c07      	ldr	r4, [pc, #28]	; (800e264 <_isatty_r+0x20>)
 800e248:	2300      	movs	r3, #0
 800e24a:	4605      	mov	r5, r0
 800e24c:	4608      	mov	r0, r1
 800e24e:	6023      	str	r3, [r4, #0]
 800e250:	f7f9 fa92 	bl	8007778 <_isatty>
 800e254:	1c43      	adds	r3, r0, #1
 800e256:	d000      	beq.n	800e25a <_isatty_r+0x16>
 800e258:	bd38      	pop	{r3, r4, r5, pc}
 800e25a:	6823      	ldr	r3, [r4, #0]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d0fb      	beq.n	800e258 <_isatty_r+0x14>
 800e260:	602b      	str	r3, [r5, #0]
 800e262:	bd38      	pop	{r3, r4, r5, pc}
 800e264:	20003344 	.word	0x20003344

0800e268 <_lseek_r>:
 800e268:	b570      	push	{r4, r5, r6, lr}
 800e26a:	460d      	mov	r5, r1
 800e26c:	4c08      	ldr	r4, [pc, #32]	; (800e290 <_lseek_r+0x28>)
 800e26e:	4611      	mov	r1, r2
 800e270:	4606      	mov	r6, r0
 800e272:	461a      	mov	r2, r3
 800e274:	4628      	mov	r0, r5
 800e276:	2300      	movs	r3, #0
 800e278:	6023      	str	r3, [r4, #0]
 800e27a:	f7f9 fa0b 	bl	8007694 <_lseek>
 800e27e:	1c43      	adds	r3, r0, #1
 800e280:	d000      	beq.n	800e284 <_lseek_r+0x1c>
 800e282:	bd70      	pop	{r4, r5, r6, pc}
 800e284:	6823      	ldr	r3, [r4, #0]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d0fb      	beq.n	800e282 <_lseek_r+0x1a>
 800e28a:	6033      	str	r3, [r6, #0]
 800e28c:	bd70      	pop	{r4, r5, r6, pc}
 800e28e:	bf00      	nop
 800e290:	20003344 	.word	0x20003344

0800e294 <_read_r>:
 800e294:	b570      	push	{r4, r5, r6, lr}
 800e296:	460d      	mov	r5, r1
 800e298:	4c08      	ldr	r4, [pc, #32]	; (800e2bc <_read_r+0x28>)
 800e29a:	4611      	mov	r1, r2
 800e29c:	4606      	mov	r6, r0
 800e29e:	461a      	mov	r2, r3
 800e2a0:	4628      	mov	r0, r5
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	6023      	str	r3, [r4, #0]
 800e2a6:	f7f9 fa02 	bl	80076ae <_read>
 800e2aa:	1c43      	adds	r3, r0, #1
 800e2ac:	d000      	beq.n	800e2b0 <_read_r+0x1c>
 800e2ae:	bd70      	pop	{r4, r5, r6, pc}
 800e2b0:	6823      	ldr	r3, [r4, #0]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d0fb      	beq.n	800e2ae <_read_r+0x1a>
 800e2b6:	6033      	str	r3, [r6, #0]
 800e2b8:	bd70      	pop	{r4, r5, r6, pc}
 800e2ba:	bf00      	nop
 800e2bc:	20003344 	.word	0x20003344

0800e2c0 <__swbuf_r>:
 800e2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2c2:	460d      	mov	r5, r1
 800e2c4:	4614      	mov	r4, r2
 800e2c6:	4606      	mov	r6, r0
 800e2c8:	b110      	cbz	r0, 800e2d0 <__swbuf_r+0x10>
 800e2ca:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d043      	beq.n	800e358 <__swbuf_r+0x98>
 800e2d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e2d4:	69a3      	ldr	r3, [r4, #24]
 800e2d6:	60a3      	str	r3, [r4, #8]
 800e2d8:	b291      	uxth	r1, r2
 800e2da:	0708      	lsls	r0, r1, #28
 800e2dc:	d51b      	bpl.n	800e316 <__swbuf_r+0x56>
 800e2de:	6923      	ldr	r3, [r4, #16]
 800e2e0:	b1cb      	cbz	r3, 800e316 <__swbuf_r+0x56>
 800e2e2:	b2ed      	uxtb	r5, r5
 800e2e4:	0489      	lsls	r1, r1, #18
 800e2e6:	462f      	mov	r7, r5
 800e2e8:	d522      	bpl.n	800e330 <__swbuf_r+0x70>
 800e2ea:	6822      	ldr	r2, [r4, #0]
 800e2ec:	6961      	ldr	r1, [r4, #20]
 800e2ee:	1ad3      	subs	r3, r2, r3
 800e2f0:	4299      	cmp	r1, r3
 800e2f2:	dd29      	ble.n	800e348 <__swbuf_r+0x88>
 800e2f4:	3301      	adds	r3, #1
 800e2f6:	68a1      	ldr	r1, [r4, #8]
 800e2f8:	1c50      	adds	r0, r2, #1
 800e2fa:	3901      	subs	r1, #1
 800e2fc:	60a1      	str	r1, [r4, #8]
 800e2fe:	6020      	str	r0, [r4, #0]
 800e300:	7015      	strb	r5, [r2, #0]
 800e302:	6962      	ldr	r2, [r4, #20]
 800e304:	429a      	cmp	r2, r3
 800e306:	d02a      	beq.n	800e35e <__swbuf_r+0x9e>
 800e308:	89a3      	ldrh	r3, [r4, #12]
 800e30a:	07db      	lsls	r3, r3, #31
 800e30c:	d501      	bpl.n	800e312 <__swbuf_r+0x52>
 800e30e:	2d0a      	cmp	r5, #10
 800e310:	d025      	beq.n	800e35e <__swbuf_r+0x9e>
 800e312:	4638      	mov	r0, r7
 800e314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e316:	4621      	mov	r1, r4
 800e318:	4630      	mov	r0, r6
 800e31a:	f7fd f87f 	bl	800b41c <__swsetup_r>
 800e31e:	bb20      	cbnz	r0, 800e36a <__swbuf_r+0xaa>
 800e320:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e324:	6923      	ldr	r3, [r4, #16]
 800e326:	b291      	uxth	r1, r2
 800e328:	b2ed      	uxtb	r5, r5
 800e32a:	0489      	lsls	r1, r1, #18
 800e32c:	462f      	mov	r7, r5
 800e32e:	d4dc      	bmi.n	800e2ea <__swbuf_r+0x2a>
 800e330:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800e332:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e336:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800e33a:	81a2      	strh	r2, [r4, #12]
 800e33c:	6822      	ldr	r2, [r4, #0]
 800e33e:	6661      	str	r1, [r4, #100]	; 0x64
 800e340:	6961      	ldr	r1, [r4, #20]
 800e342:	1ad3      	subs	r3, r2, r3
 800e344:	4299      	cmp	r1, r3
 800e346:	dcd5      	bgt.n	800e2f4 <__swbuf_r+0x34>
 800e348:	4621      	mov	r1, r4
 800e34a:	4630      	mov	r0, r6
 800e34c:	f7fe f904 	bl	800c558 <_fflush_r>
 800e350:	b958      	cbnz	r0, 800e36a <__swbuf_r+0xaa>
 800e352:	6822      	ldr	r2, [r4, #0]
 800e354:	2301      	movs	r3, #1
 800e356:	e7ce      	b.n	800e2f6 <__swbuf_r+0x36>
 800e358:	f7fe f95a 	bl	800c610 <__sinit>
 800e35c:	e7b8      	b.n	800e2d0 <__swbuf_r+0x10>
 800e35e:	4621      	mov	r1, r4
 800e360:	4630      	mov	r0, r6
 800e362:	f7fe f8f9 	bl	800c558 <_fflush_r>
 800e366:	2800      	cmp	r0, #0
 800e368:	d0d3      	beq.n	800e312 <__swbuf_r+0x52>
 800e36a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e36e:	e7d0      	b.n	800e312 <__swbuf_r+0x52>

0800e370 <_wcrtomb_r>:
 800e370:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e372:	4c11      	ldr	r4, [pc, #68]	; (800e3b8 <_wcrtomb_r+0x48>)
 800e374:	6824      	ldr	r4, [r4, #0]
 800e376:	b085      	sub	sp, #20
 800e378:	4606      	mov	r6, r0
 800e37a:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800e37c:	461f      	mov	r7, r3
 800e37e:	b151      	cbz	r1, 800e396 <_wcrtomb_r+0x26>
 800e380:	4d0e      	ldr	r5, [pc, #56]	; (800e3bc <_wcrtomb_r+0x4c>)
 800e382:	2c00      	cmp	r4, #0
 800e384:	bf08      	it	eq
 800e386:	462c      	moveq	r4, r5
 800e388:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 800e38c:	47a0      	blx	r4
 800e38e:	1c43      	adds	r3, r0, #1
 800e390:	d00c      	beq.n	800e3ac <_wcrtomb_r+0x3c>
 800e392:	b005      	add	sp, #20
 800e394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e396:	4a09      	ldr	r2, [pc, #36]	; (800e3bc <_wcrtomb_r+0x4c>)
 800e398:	2c00      	cmp	r4, #0
 800e39a:	bf08      	it	eq
 800e39c:	4614      	moveq	r4, r2
 800e39e:	460a      	mov	r2, r1
 800e3a0:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 800e3a4:	a901      	add	r1, sp, #4
 800e3a6:	47a0      	blx	r4
 800e3a8:	1c43      	adds	r3, r0, #1
 800e3aa:	d1f2      	bne.n	800e392 <_wcrtomb_r+0x22>
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	238a      	movs	r3, #138	; 0x8a
 800e3b0:	603a      	str	r2, [r7, #0]
 800e3b2:	6033      	str	r3, [r6, #0]
 800e3b4:	b005      	add	sp, #20
 800e3b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3b8:	20000038 	.word	0x20000038
 800e3bc:	20000468 	.word	0x20000468
