
./bin/main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000200 <OSStartHighRdy>:
@              e) Enable interrupts (tasks will run with interrupts enabled).
@********************************************************************************************************

.thumb_func
OSStartHighRdy:
    CPSID   I                                                   @ Prevent interruption during context switch
 8000200:	b672      	cpsid	i
    MOVW    R0, #:lower16:NVIC_SYSPRI14                         @ Set the PendSV exception priority
 8000202:	f64e 5022 	movw	r0, #60706	; 0xed22
    MOVT    R0, #:upper16:NVIC_SYSPRI14
 8000206:	f2ce 0000 	movt	r0, #57344	; 0xe000

    MOVW    R1, #:lower16:NVIC_PENDSV_PRI
 800020a:	f240 01ff 	movw	r1, #255	; 0xff
    MOVT    R1, #:upper16:NVIC_PENDSV_PRI
 800020e:	f2c0 0100 	movt	r1, #0
    STRB    R1, [R0]
 8000212:	7001      	strb	r1, [r0, #0]

    MOVW    R0, #:lower16:OS_CPU_ExceptStkBase                  @ Initialize the MSP to the OS_CPU_ExceptStkBase
 8000214:	f243 3010 	movw	r0, #13072	; 0x3310
    MOVT    R0, #:upper16:OS_CPU_ExceptStkBase
 8000218:	f2c2 0000 	movt	r0, #8192	; 0x2000
    LDR     R1, [R0]
 800021c:	6801      	ldr	r1, [r0, #0]
    MSR     MSP, R1
 800021e:	f381 8808 	msr	MSP, r1

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 8000222:	f242 00a8 	movw	r0, #8360	; 0x20a8
    MOVT    R0, #:upper16:OSPrioCur
 8000226:	f2c2 0000 	movt	r0, #8192	; 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 800022a:	f242 019c 	movw	r1, #8348	; 0x209c
    MOVT    R1, #:upper16:OSPrioHighRdy
 800022e:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDRB    R2, [R1]
 8000232:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 8000234:	7002      	strb	r2, [r0, #0]

    MOVW    R5, #:lower16:OSTCBCurPtr
 8000236:	f242 1574 	movw	r5, #8564	; 0x2174
    MOVT    R5, #:upper16:OSTCBCurPtr
 800023a:	f2c2 0500 	movt	r5, #8192	; 0x2000
    MOVW    R1, #:lower16:OSTCBHighRdyPtr                       @ OSTCBCurPtr = OSTCBHighRdyPtr;
 800023e:	f242 1180 	movw	r1, #8576	; 0x2180
    MOVT    R1, #:upper16:OSTCBHighRdyPtr
 8000242:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDR     R2, [R1]
 8000246:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R5]
 8000248:	602a      	str	r2, [r5, #0]

    LDR     R0, [R2]                                            @ R0 is new process SP; SP = OSTCBHighRdyPtr->StkPtr;
 800024a:	6810      	ldr	r0, [r2, #0]
    MSR     PSP, R0                                             @ Load PSP with new process SP
 800024c:	f380 8809 	msr	PSP, r0

    MRS     R0, CONTROL
 8000250:	f3ef 8014 	mrs	r0, CONTROL
    ORR     R0, R0, #2
 8000254:	f040 0002 	orr.w	r0, r0, #2
    MSR     CONTROL, R0
 8000258:	f380 8814 	msr	CONTROL, r0
    ISB                                                         @ Sync instruction stream
 800025c:	f3bf 8f6f 	isb	sy

    LDMFD    SP!, {R4-R11}                                      @ Restore r4-11 from new process stack
 8000260:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    LDMFD    SP!, {R0-R3}                                       @ Restore r0, r3
 8000264:	bc0f      	pop	{r0, r1, r2, r3}
    LDMFD    SP!, {R12, LR}                                     @ Load R12 and LR
 8000266:	e8bd 5000 	ldmia.w	sp!, {ip, lr}
    LDMFD    SP!, {R1, R2}                                      @ Load PC and discard xPSR
 800026a:	bc06      	pop	{r1, r2}
    CPSIE    I
 800026c:	b662      	cpsie	i
    BX       R1
 800026e:	4708      	bx	r1

08000270 <OSCtxSw>:
@              triggers the PendSV exception which is where the real work is done.
@********************************************************************************************************

.thumb_func
OSCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 8000270:	4818      	ldr	r0, [pc, #96]	; (80002d4 <OS_CPU_PendSVHandler+0x50>)
    LDR     R1, =NVIC_PENDSVSET
 8000272:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    STR     R1, [R0]
 8000276:	6001      	str	r1, [r0, #0]
    BX      LR
 8000278:	4770      	bx	lr

0800027a <OSIntCtxSw>:
@              be handled when there are no more interrupts active and interrupts are enabled.
@********************************************************************************************************

.thumb_func
OSIntCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 800027a:	4816      	ldr	r0, [pc, #88]	; (80002d4 <OS_CPU_PendSVHandler+0x50>)
    LDR     R1, =NVIC_PENDSVSET
 800027c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    STR     R1, [R0]
 8000280:	6001      	str	r1, [r0, #0]
    BX      LR
 8000282:	4770      	bx	lr

08000284 <OS_CPU_PendSVHandler>:
@              therefore safe to assume that context being switched out was using the process stack (PSP).
@********************************************************************************************************

.thumb_func
OS_CPU_PendSVHandler:
    CPSID   I                                                   @ Prevent interruption during context switch
 8000284:	b672      	cpsid	i
    MRS     R0, PSP                                             @ PSP is process stack pointer
 8000286:	f3ef 8009 	mrs	r0, PSP
    STMFD   R0!, {R4-R11}                                       @ Save remaining regs r4-11 on process stack
 800028a:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

    MOVW    R5, #:lower16:OSTCBCurPtr                           @ OSTCBCurPtr->OSTCBStkPtr = SP;
 800028e:	f242 1574 	movw	r5, #8564	; 0x2174
    MOVT    R5, #:upper16:OSTCBCurPtr
 8000292:	f2c2 0500 	movt	r5, #8192	; 0x2000
    LDR     R6, [R5]
 8000296:	682e      	ldr	r6, [r5, #0]
    STR     R0, [R6]                                            @ R0 is SP of process being switched out
 8000298:	6030      	str	r0, [r6, #0]

                                                                @ At this point, entire context of process has been saved
    MOV     R4, LR                                              @ Save LR exc_return value
 800029a:	4674      	mov	r4, lr
    BL      OSTaskSwHook                                        @ OSTaskSwHook();
 800029c:	f005 ff0a 	bl	80060b4 <OSTaskSwHook>

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 80002a0:	f242 00a8 	movw	r0, #8360	; 0x20a8
    MOVT    R0, #:upper16:OSPrioCur
 80002a4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 80002a8:	f242 019c 	movw	r1, #8348	; 0x209c
    MOVT    R1, #:upper16:OSPrioHighRdy
 80002ac:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDRB    R2, [R1]
 80002b0:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 80002b2:	7002      	strb	r2, [r0, #0]

    MOVW    R1, #:lower16:OSTCBHighRdyPtr                      @ OSTCBCurPtr = OSTCBHighRdyPtr;
 80002b4:	f242 1180 	movw	r1, #8576	; 0x2180
    MOVT    R1, #:upper16:OSTCBHighRdyPtr
 80002b8:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDR     R2, [R1]
 80002bc:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R5]
 80002be:	602a      	str	r2, [r5, #0]

    ORR     LR, R4, #0xF4                                       @ Ensure exception return uses process stack
 80002c0:	f044 0ef4 	orr.w	lr, r4, #244	; 0xf4
    LDR     R0, [R2]                                            @ R0 is new process SP; SP = OSTCBHighRdyPtr->StkPtr;
 80002c4:	6810      	ldr	r0, [r2, #0]
    LDMFD   R0!, {R4-R11}                                       @ Restore r4-11 from new process stack
 80002c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, R0                                             @ Load PSP with new process SP
 80002ca:	f380 8809 	msr	PSP, r0
    CPSIE   I
 80002ce:	b662      	cpsie	i
    BX      LR                                                  @ Exception return will restore remaining context
 80002d0:	4770      	bx	lr
 80002d2:	0000      	.short	0x0000
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 80002d4:	e000ed04 	.word	0xe000ed04

080002d8 <CPU_IntDis>:
@              void  CPU_IntEn (void);
@********************************************************************************************************

.thumb_func
CPU_IntDis:
        CPSID   I
 80002d8:	b672      	cpsid	i
        BX      LR
 80002da:	4770      	bx	lr

080002dc <CPU_IntEn>:

.thumb_func
CPU_IntEn:
        CPSIE   I
 80002dc:	b662      	cpsie	i
        BX      LR
 80002de:	4770      	bx	lr

080002e0 <CPU_SR_Save>:
@                       }
@********************************************************************************************************

.thumb_func
CPU_SR_Save:
        MRS     R0, PRIMASK                     @ Set prio int mask to mask all (except faults)
 80002e0:	f3ef 8010 	mrs	r0, PRIMASK
        CPSID   I
 80002e4:	b672      	cpsid	i
        BX      LR
 80002e6:	4770      	bx	lr

080002e8 <CPU_SR_Restore>:

.thumb_func
CPU_SR_Restore:                                  @ See Note #2.
        MSR     PRIMASK, R0
 80002e8:	f380 8810 	msr	PRIMASK, r0
        BX      LR
 80002ec:	4770      	bx	lr

080002ee <CPU_WaitForInt>:
@ Argument(s) : none.
@********************************************************************************************************

.thumb_func
CPU_WaitForInt:
        WFI                                     @ Wait for interrupt
 80002ee:	bf30      	wfi
        BX      LR
 80002f0:	4770      	bx	lr

080002f2 <CPU_WaitForExcept>:
@ Argument(s) : none.
@********************************************************************************************************

.thumb_func
CPU_WaitForExcept:
        WFE                                     @ Wait for exception
 80002f2:	bf20      	wfe
        BX      LR
 80002f4:	4770      	bx	lr

080002f6 <CPU_CntLeadZeros>:
@                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
@********************************************************************************************************

.thumb_func
CPU_CntLeadZeros:
        CLZ     R0, R0                          @ Count leading zeros
 80002f6:	fab0 f080 	clz	r0, r0
        BX      LR
 80002fa:	4770      	bx	lr

080002fc <CPU_CntTrailZeros>:
@                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
@********************************************************************************************************

.thumb_func
CPU_CntTrailZeros:
        RBIT    R0, R0                          @ Reverse bits
 80002fc:	fa90 f0a0 	rbit	r0, r0
        CLZ     R0, R0                          @ Count trailing zeros
 8000300:	fab0 f080 	clz	r0, r0
        BX      LR
 8000304:	4770      	bx	lr

08000306 <CPU_RevBits>:
@                       'val's final bit  N       =  'val's original bit  0
@********************************************************************************************************

.thumb_func
CPU_RevBits:
        RBIT    R0, R0                          @ Reverse bits
 8000306:	fa90 f0a0 	rbit	r0, r0
        BX      LR
 800030a:	4770      	bx	lr

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800031c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000320:	f000 b972 	b.w	8000608 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9e08      	ldr	r6, [sp, #32]
 8000342:	4604      	mov	r4, r0
 8000344:	4688      	mov	r8, r1
 8000346:	2b00      	cmp	r3, #0
 8000348:	d14b      	bne.n	80003e2 <__udivmoddi4+0xa6>
 800034a:	428a      	cmp	r2, r1
 800034c:	4615      	mov	r5, r2
 800034e:	d967      	bls.n	8000420 <__udivmoddi4+0xe4>
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0720 	rsb	r7, r2, #32
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	fa20 f707 	lsr.w	r7, r0, r7
 8000362:	4095      	lsls	r5, r2
 8000364:	ea47 0803 	orr.w	r8, r7, r3
 8000368:	4094      	lsls	r4, r2
 800036a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800036e:	0c23      	lsrs	r3, r4, #16
 8000370:	fbb8 f7fe 	udiv	r7, r8, lr
 8000374:	fa1f fc85 	uxth.w	ip, r5
 8000378:	fb0e 8817 	mls	r8, lr, r7, r8
 800037c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000380:	fb07 f10c 	mul.w	r1, r7, ip
 8000384:	4299      	cmp	r1, r3
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x60>
 8000388:	18eb      	adds	r3, r5, r3
 800038a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800038e:	f080 811b 	bcs.w	80005c8 <__udivmoddi4+0x28c>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 8118 	bls.w	80005c8 <__udivmoddi4+0x28c>
 8000398:	3f02      	subs	r7, #2
 800039a:	442b      	add	r3, r5
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003ac:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d909      	bls.n	80003c8 <__udivmoddi4+0x8c>
 80003b4:	192c      	adds	r4, r5, r4
 80003b6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003ba:	f080 8107 	bcs.w	80005cc <__udivmoddi4+0x290>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	f240 8104 	bls.w	80005cc <__udivmoddi4+0x290>
 80003c4:	3802      	subs	r0, #2
 80003c6:	442c      	add	r4, r5
 80003c8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003cc:	eba4 040c 	sub.w	r4, r4, ip
 80003d0:	2700      	movs	r7, #0
 80003d2:	b11e      	cbz	r6, 80003dc <__udivmoddi4+0xa0>
 80003d4:	40d4      	lsrs	r4, r2
 80003d6:	2300      	movs	r3, #0
 80003d8:	e9c6 4300 	strd	r4, r3, [r6]
 80003dc:	4639      	mov	r1, r7
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d909      	bls.n	80003fa <__udivmoddi4+0xbe>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	f000 80eb 	beq.w	80005c2 <__udivmoddi4+0x286>
 80003ec:	2700      	movs	r7, #0
 80003ee:	e9c6 0100 	strd	r0, r1, [r6]
 80003f2:	4638      	mov	r0, r7
 80003f4:	4639      	mov	r1, r7
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	fab3 f783 	clz	r7, r3
 80003fe:	2f00      	cmp	r7, #0
 8000400:	d147      	bne.n	8000492 <__udivmoddi4+0x156>
 8000402:	428b      	cmp	r3, r1
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xd0>
 8000406:	4282      	cmp	r2, r0
 8000408:	f200 80fa 	bhi.w	8000600 <__udivmoddi4+0x2c4>
 800040c:	1a84      	subs	r4, r0, r2
 800040e:	eb61 0303 	sbc.w	r3, r1, r3
 8000412:	2001      	movs	r0, #1
 8000414:	4698      	mov	r8, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d0e0      	beq.n	80003dc <__udivmoddi4+0xa0>
 800041a:	e9c6 4800 	strd	r4, r8, [r6]
 800041e:	e7dd      	b.n	80003dc <__udivmoddi4+0xa0>
 8000420:	b902      	cbnz	r2, 8000424 <__udivmoddi4+0xe8>
 8000422:	deff      	udf	#255	; 0xff
 8000424:	fab2 f282 	clz	r2, r2
 8000428:	2a00      	cmp	r2, #0
 800042a:	f040 808f 	bne.w	800054c <__udivmoddi4+0x210>
 800042e:	1b49      	subs	r1, r1, r5
 8000430:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000434:	fa1f f885 	uxth.w	r8, r5
 8000438:	2701      	movs	r7, #1
 800043a:	fbb1 fcfe 	udiv	ip, r1, lr
 800043e:	0c23      	lsrs	r3, r4, #16
 8000440:	fb0e 111c 	mls	r1, lr, ip, r1
 8000444:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000448:	fb08 f10c 	mul.w	r1, r8, ip
 800044c:	4299      	cmp	r1, r3
 800044e:	d907      	bls.n	8000460 <__udivmoddi4+0x124>
 8000450:	18eb      	adds	r3, r5, r3
 8000452:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000456:	d202      	bcs.n	800045e <__udivmoddi4+0x122>
 8000458:	4299      	cmp	r1, r3
 800045a:	f200 80cd 	bhi.w	80005f8 <__udivmoddi4+0x2bc>
 800045e:	4684      	mov	ip, r0
 8000460:	1a59      	subs	r1, r3, r1
 8000462:	b2a3      	uxth	r3, r4
 8000464:	fbb1 f0fe 	udiv	r0, r1, lr
 8000468:	fb0e 1410 	mls	r4, lr, r0, r1
 800046c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000470:	fb08 f800 	mul.w	r8, r8, r0
 8000474:	45a0      	cmp	r8, r4
 8000476:	d907      	bls.n	8000488 <__udivmoddi4+0x14c>
 8000478:	192c      	adds	r4, r5, r4
 800047a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800047e:	d202      	bcs.n	8000486 <__udivmoddi4+0x14a>
 8000480:	45a0      	cmp	r8, r4
 8000482:	f200 80b6 	bhi.w	80005f2 <__udivmoddi4+0x2b6>
 8000486:	4618      	mov	r0, r3
 8000488:	eba4 0408 	sub.w	r4, r4, r8
 800048c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000490:	e79f      	b.n	80003d2 <__udivmoddi4+0x96>
 8000492:	f1c7 0c20 	rsb	ip, r7, #32
 8000496:	40bb      	lsls	r3, r7
 8000498:	fa22 fe0c 	lsr.w	lr, r2, ip
 800049c:	ea4e 0e03 	orr.w	lr, lr, r3
 80004a0:	fa01 f407 	lsl.w	r4, r1, r7
 80004a4:	fa20 f50c 	lsr.w	r5, r0, ip
 80004a8:	fa21 f30c 	lsr.w	r3, r1, ip
 80004ac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004b0:	4325      	orrs	r5, r4
 80004b2:	fbb3 f9f8 	udiv	r9, r3, r8
 80004b6:	0c2c      	lsrs	r4, r5, #16
 80004b8:	fb08 3319 	mls	r3, r8, r9, r3
 80004bc:	fa1f fa8e 	uxth.w	sl, lr
 80004c0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004c4:	fb09 f40a 	mul.w	r4, r9, sl
 80004c8:	429c      	cmp	r4, r3
 80004ca:	fa02 f207 	lsl.w	r2, r2, r7
 80004ce:	fa00 f107 	lsl.w	r1, r0, r7
 80004d2:	d90b      	bls.n	80004ec <__udivmoddi4+0x1b0>
 80004d4:	eb1e 0303 	adds.w	r3, lr, r3
 80004d8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004dc:	f080 8087 	bcs.w	80005ee <__udivmoddi4+0x2b2>
 80004e0:	429c      	cmp	r4, r3
 80004e2:	f240 8084 	bls.w	80005ee <__udivmoddi4+0x2b2>
 80004e6:	f1a9 0902 	sub.w	r9, r9, #2
 80004ea:	4473      	add	r3, lr
 80004ec:	1b1b      	subs	r3, r3, r4
 80004ee:	b2ad      	uxth	r5, r5
 80004f0:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f4:	fb08 3310 	mls	r3, r8, r0, r3
 80004f8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004fc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000500:	45a2      	cmp	sl, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x1da>
 8000504:	eb1e 0404 	adds.w	r4, lr, r4
 8000508:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800050c:	d26b      	bcs.n	80005e6 <__udivmoddi4+0x2aa>
 800050e:	45a2      	cmp	sl, r4
 8000510:	d969      	bls.n	80005e6 <__udivmoddi4+0x2aa>
 8000512:	3802      	subs	r0, #2
 8000514:	4474      	add	r4, lr
 8000516:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051a:	fba0 8902 	umull	r8, r9, r0, r2
 800051e:	eba4 040a 	sub.w	r4, r4, sl
 8000522:	454c      	cmp	r4, r9
 8000524:	46c2      	mov	sl, r8
 8000526:	464b      	mov	r3, r9
 8000528:	d354      	bcc.n	80005d4 <__udivmoddi4+0x298>
 800052a:	d051      	beq.n	80005d0 <__udivmoddi4+0x294>
 800052c:	2e00      	cmp	r6, #0
 800052e:	d069      	beq.n	8000604 <__udivmoddi4+0x2c8>
 8000530:	ebb1 050a 	subs.w	r5, r1, sl
 8000534:	eb64 0403 	sbc.w	r4, r4, r3
 8000538:	fa04 fc0c 	lsl.w	ip, r4, ip
 800053c:	40fd      	lsrs	r5, r7
 800053e:	40fc      	lsrs	r4, r7
 8000540:	ea4c 0505 	orr.w	r5, ip, r5
 8000544:	e9c6 5400 	strd	r5, r4, [r6]
 8000548:	2700      	movs	r7, #0
 800054a:	e747      	b.n	80003dc <__udivmoddi4+0xa0>
 800054c:	f1c2 0320 	rsb	r3, r2, #32
 8000550:	fa20 f703 	lsr.w	r7, r0, r3
 8000554:	4095      	lsls	r5, r2
 8000556:	fa01 f002 	lsl.w	r0, r1, r2
 800055a:	fa21 f303 	lsr.w	r3, r1, r3
 800055e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000562:	4338      	orrs	r0, r7
 8000564:	0c01      	lsrs	r1, r0, #16
 8000566:	fbb3 f7fe 	udiv	r7, r3, lr
 800056a:	fa1f f885 	uxth.w	r8, r5
 800056e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb07 f308 	mul.w	r3, r7, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	fa04 f402 	lsl.w	r4, r4, r2
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x256>
 8000582:	1869      	adds	r1, r5, r1
 8000584:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000588:	d22f      	bcs.n	80005ea <__udivmoddi4+0x2ae>
 800058a:	428b      	cmp	r3, r1
 800058c:	d92d      	bls.n	80005ea <__udivmoddi4+0x2ae>
 800058e:	3f02      	subs	r7, #2
 8000590:	4429      	add	r1, r5
 8000592:	1acb      	subs	r3, r1, r3
 8000594:	b281      	uxth	r1, r0
 8000596:	fbb3 f0fe 	udiv	r0, r3, lr
 800059a:	fb0e 3310 	mls	r3, lr, r0, r3
 800059e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a2:	fb00 f308 	mul.w	r3, r0, r8
 80005a6:	428b      	cmp	r3, r1
 80005a8:	d907      	bls.n	80005ba <__udivmoddi4+0x27e>
 80005aa:	1869      	adds	r1, r5, r1
 80005ac:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80005b0:	d217      	bcs.n	80005e2 <__udivmoddi4+0x2a6>
 80005b2:	428b      	cmp	r3, r1
 80005b4:	d915      	bls.n	80005e2 <__udivmoddi4+0x2a6>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4429      	add	r1, r5
 80005ba:	1ac9      	subs	r1, r1, r3
 80005bc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005c0:	e73b      	b.n	800043a <__udivmoddi4+0xfe>
 80005c2:	4637      	mov	r7, r6
 80005c4:	4630      	mov	r0, r6
 80005c6:	e709      	b.n	80003dc <__udivmoddi4+0xa0>
 80005c8:	4607      	mov	r7, r0
 80005ca:	e6e7      	b.n	800039c <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fb      	b.n	80003c8 <__udivmoddi4+0x8c>
 80005d0:	4541      	cmp	r1, r8
 80005d2:	d2ab      	bcs.n	800052c <__udivmoddi4+0x1f0>
 80005d4:	ebb8 0a02 	subs.w	sl, r8, r2
 80005d8:	eb69 020e 	sbc.w	r2, r9, lr
 80005dc:	3801      	subs	r0, #1
 80005de:	4613      	mov	r3, r2
 80005e0:	e7a4      	b.n	800052c <__udivmoddi4+0x1f0>
 80005e2:	4660      	mov	r0, ip
 80005e4:	e7e9      	b.n	80005ba <__udivmoddi4+0x27e>
 80005e6:	4618      	mov	r0, r3
 80005e8:	e795      	b.n	8000516 <__udivmoddi4+0x1da>
 80005ea:	4667      	mov	r7, ip
 80005ec:	e7d1      	b.n	8000592 <__udivmoddi4+0x256>
 80005ee:	4681      	mov	r9, r0
 80005f0:	e77c      	b.n	80004ec <__udivmoddi4+0x1b0>
 80005f2:	3802      	subs	r0, #2
 80005f4:	442c      	add	r4, r5
 80005f6:	e747      	b.n	8000488 <__udivmoddi4+0x14c>
 80005f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80005fc:	442b      	add	r3, r5
 80005fe:	e72f      	b.n	8000460 <__udivmoddi4+0x124>
 8000600:	4638      	mov	r0, r7
 8000602:	e708      	b.n	8000416 <__udivmoddi4+0xda>
 8000604:	4637      	mov	r7, r6
 8000606:	e6e9      	b.n	80003dc <__udivmoddi4+0xa0>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <memcpy>:
 800060c:	4684      	mov	ip, r0
 800060e:	ea41 0300 	orr.w	r3, r1, r0
 8000612:	f013 0303 	ands.w	r3, r3, #3
 8000616:	d16d      	bne.n	80006f4 <memcpy+0xe8>
 8000618:	3a40      	subs	r2, #64	; 0x40
 800061a:	d341      	bcc.n	80006a0 <memcpy+0x94>
 800061c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000620:	f840 3b04 	str.w	r3, [r0], #4
 8000624:	f851 3b04 	ldr.w	r3, [r1], #4
 8000628:	f840 3b04 	str.w	r3, [r0], #4
 800062c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000630:	f840 3b04 	str.w	r3, [r0], #4
 8000634:	f851 3b04 	ldr.w	r3, [r1], #4
 8000638:	f840 3b04 	str.w	r3, [r0], #4
 800063c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000640:	f840 3b04 	str.w	r3, [r0], #4
 8000644:	f851 3b04 	ldr.w	r3, [r1], #4
 8000648:	f840 3b04 	str.w	r3, [r0], #4
 800064c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000650:	f840 3b04 	str.w	r3, [r0], #4
 8000654:	f851 3b04 	ldr.w	r3, [r1], #4
 8000658:	f840 3b04 	str.w	r3, [r0], #4
 800065c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000660:	f840 3b04 	str.w	r3, [r0], #4
 8000664:	f851 3b04 	ldr.w	r3, [r1], #4
 8000668:	f840 3b04 	str.w	r3, [r0], #4
 800066c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000670:	f840 3b04 	str.w	r3, [r0], #4
 8000674:	f851 3b04 	ldr.w	r3, [r1], #4
 8000678:	f840 3b04 	str.w	r3, [r0], #4
 800067c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000680:	f840 3b04 	str.w	r3, [r0], #4
 8000684:	f851 3b04 	ldr.w	r3, [r1], #4
 8000688:	f840 3b04 	str.w	r3, [r0], #4
 800068c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000690:	f840 3b04 	str.w	r3, [r0], #4
 8000694:	f851 3b04 	ldr.w	r3, [r1], #4
 8000698:	f840 3b04 	str.w	r3, [r0], #4
 800069c:	3a40      	subs	r2, #64	; 0x40
 800069e:	d2bd      	bcs.n	800061c <memcpy+0x10>
 80006a0:	3230      	adds	r2, #48	; 0x30
 80006a2:	d311      	bcc.n	80006c8 <memcpy+0xbc>
 80006a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80006a8:	f840 3b04 	str.w	r3, [r0], #4
 80006ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80006b0:	f840 3b04 	str.w	r3, [r0], #4
 80006b4:	f851 3b04 	ldr.w	r3, [r1], #4
 80006b8:	f840 3b04 	str.w	r3, [r0], #4
 80006bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80006c0:	f840 3b04 	str.w	r3, [r0], #4
 80006c4:	3a10      	subs	r2, #16
 80006c6:	d2ed      	bcs.n	80006a4 <memcpy+0x98>
 80006c8:	320c      	adds	r2, #12
 80006ca:	d305      	bcc.n	80006d8 <memcpy+0xcc>
 80006cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80006d0:	f840 3b04 	str.w	r3, [r0], #4
 80006d4:	3a04      	subs	r2, #4
 80006d6:	d2f9      	bcs.n	80006cc <memcpy+0xc0>
 80006d8:	3204      	adds	r2, #4
 80006da:	d008      	beq.n	80006ee <memcpy+0xe2>
 80006dc:	07d2      	lsls	r2, r2, #31
 80006de:	bf1c      	itt	ne
 80006e0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80006e4:	f800 3b01 	strbne.w	r3, [r0], #1
 80006e8:	d301      	bcc.n	80006ee <memcpy+0xe2>
 80006ea:	880b      	ldrh	r3, [r1, #0]
 80006ec:	8003      	strh	r3, [r0, #0]
 80006ee:	4660      	mov	r0, ip
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	2a08      	cmp	r2, #8
 80006f6:	d313      	bcc.n	8000720 <memcpy+0x114>
 80006f8:	078b      	lsls	r3, r1, #30
 80006fa:	d08d      	beq.n	8000618 <memcpy+0xc>
 80006fc:	f010 0303 	ands.w	r3, r0, #3
 8000700:	d08a      	beq.n	8000618 <memcpy+0xc>
 8000702:	f1c3 0304 	rsb	r3, r3, #4
 8000706:	1ad2      	subs	r2, r2, r3
 8000708:	07db      	lsls	r3, r3, #31
 800070a:	bf1c      	itt	ne
 800070c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000710:	f800 3b01 	strbne.w	r3, [r0], #1
 8000714:	d380      	bcc.n	8000618 <memcpy+0xc>
 8000716:	f831 3b02 	ldrh.w	r3, [r1], #2
 800071a:	f820 3b02 	strh.w	r3, [r0], #2
 800071e:	e77b      	b.n	8000618 <memcpy+0xc>
 8000720:	3a04      	subs	r2, #4
 8000722:	d3d9      	bcc.n	80006d8 <memcpy+0xcc>
 8000724:	3a01      	subs	r2, #1
 8000726:	f811 3b01 	ldrb.w	r3, [r1], #1
 800072a:	f800 3b01 	strb.w	r3, [r0], #1
 800072e:	d2f9      	bcs.n	8000724 <memcpy+0x118>
 8000730:	780b      	ldrb	r3, [r1, #0]
 8000732:	7003      	strb	r3, [r0, #0]
 8000734:	784b      	ldrb	r3, [r1, #1]
 8000736:	7043      	strb	r3, [r0, #1]
 8000738:	788b      	ldrb	r3, [r1, #2]
 800073a:	7083      	strb	r3, [r0, #2]
 800073c:	4660      	mov	r0, ip
 800073e:	4770      	bx	lr

08000740 <strlen>:
 8000740:	f890 f000 	pld	[r0]
 8000744:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8000748:	f020 0107 	bic.w	r1, r0, #7
 800074c:	f06f 0c00 	mvn.w	ip, #0
 8000750:	f010 0407 	ands.w	r4, r0, #7
 8000754:	f891 f020 	pld	[r1, #32]
 8000758:	f040 8049 	bne.w	80007ee <strlen+0xae>
 800075c:	f04f 0400 	mov.w	r4, #0
 8000760:	f06f 0007 	mvn.w	r0, #7
 8000764:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000768:	f891 f040 	pld	[r1, #64]	; 0x40
 800076c:	f100 0008 	add.w	r0, r0, #8
 8000770:	fa82 f24c 	uadd8	r2, r2, ip
 8000774:	faa4 f28c 	sel	r2, r4, ip
 8000778:	fa83 f34c 	uadd8	r3, r3, ip
 800077c:	faa2 f38c 	sel	r3, r2, ip
 8000780:	bb4b      	cbnz	r3, 80007d6 <strlen+0x96>
 8000782:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8000786:	fa82 f24c 	uadd8	r2, r2, ip
 800078a:	f100 0008 	add.w	r0, r0, #8
 800078e:	faa4 f28c 	sel	r2, r4, ip
 8000792:	fa83 f34c 	uadd8	r3, r3, ip
 8000796:	faa2 f38c 	sel	r3, r2, ip
 800079a:	b9e3      	cbnz	r3, 80007d6 <strlen+0x96>
 800079c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 80007a0:	fa82 f24c 	uadd8	r2, r2, ip
 80007a4:	f100 0008 	add.w	r0, r0, #8
 80007a8:	faa4 f28c 	sel	r2, r4, ip
 80007ac:	fa83 f34c 	uadd8	r3, r3, ip
 80007b0:	faa2 f38c 	sel	r3, r2, ip
 80007b4:	b97b      	cbnz	r3, 80007d6 <strlen+0x96>
 80007b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80007ba:	f101 0120 	add.w	r1, r1, #32
 80007be:	fa82 f24c 	uadd8	r2, r2, ip
 80007c2:	f100 0008 	add.w	r0, r0, #8
 80007c6:	faa4 f28c 	sel	r2, r4, ip
 80007ca:	fa83 f34c 	uadd8	r3, r3, ip
 80007ce:	faa2 f38c 	sel	r3, r2, ip
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d0c6      	beq.n	8000764 <strlen+0x24>
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	bf04      	itt	eq
 80007da:	3004      	addeq	r0, #4
 80007dc:	461a      	moveq	r2, r3
 80007de:	ba12      	rev	r2, r2
 80007e0:	fab2 f282 	clz	r2, r2
 80007e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 80007e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80007ec:	4770      	bx	lr
 80007ee:	e9d1 2300 	ldrd	r2, r3, [r1]
 80007f2:	f004 0503 	and.w	r5, r4, #3
 80007f6:	f1c4 0000 	rsb	r0, r4, #0
 80007fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80007fe:	f014 0f04 	tst.w	r4, #4
 8000802:	f891 f040 	pld	[r1, #64]	; 0x40
 8000806:	fa0c f505 	lsl.w	r5, ip, r5
 800080a:	ea62 0205 	orn	r2, r2, r5
 800080e:	bf1c      	itt	ne
 8000810:	ea63 0305 	ornne	r3, r3, r5
 8000814:	4662      	movne	r2, ip
 8000816:	f04f 0400 	mov.w	r4, #0
 800081a:	e7a9      	b.n	8000770 <strlen+0x30>
 800081c:	0000      	movs	r0, r0
	...

08000820 <memchr>:
 8000820:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000824:	2a10      	cmp	r2, #16
 8000826:	db2b      	blt.n	8000880 <memchr+0x60>
 8000828:	f010 0f07 	tst.w	r0, #7
 800082c:	d008      	beq.n	8000840 <memchr+0x20>
 800082e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000832:	3a01      	subs	r2, #1
 8000834:	428b      	cmp	r3, r1
 8000836:	d02d      	beq.n	8000894 <memchr+0x74>
 8000838:	f010 0f07 	tst.w	r0, #7
 800083c:	b342      	cbz	r2, 8000890 <memchr+0x70>
 800083e:	d1f6      	bne.n	800082e <memchr+0xe>
 8000840:	b4f0      	push	{r4, r5, r6, r7}
 8000842:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000846:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800084a:	f022 0407 	bic.w	r4, r2, #7
 800084e:	f07f 0700 	mvns.w	r7, #0
 8000852:	2300      	movs	r3, #0
 8000854:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000858:	3c08      	subs	r4, #8
 800085a:	ea85 0501 	eor.w	r5, r5, r1
 800085e:	ea86 0601 	eor.w	r6, r6, r1
 8000862:	fa85 f547 	uadd8	r5, r5, r7
 8000866:	faa3 f587 	sel	r5, r3, r7
 800086a:	fa86 f647 	uadd8	r6, r6, r7
 800086e:	faa5 f687 	sel	r6, r5, r7
 8000872:	b98e      	cbnz	r6, 8000898 <memchr+0x78>
 8000874:	d1ee      	bne.n	8000854 <memchr+0x34>
 8000876:	bcf0      	pop	{r4, r5, r6, r7}
 8000878:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800087c:	f002 0207 	and.w	r2, r2, #7
 8000880:	b132      	cbz	r2, 8000890 <memchr+0x70>
 8000882:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000886:	3a01      	subs	r2, #1
 8000888:	ea83 0301 	eor.w	r3, r3, r1
 800088c:	b113      	cbz	r3, 8000894 <memchr+0x74>
 800088e:	d1f8      	bne.n	8000882 <memchr+0x62>
 8000890:	2000      	movs	r0, #0
 8000892:	4770      	bx	lr
 8000894:	3801      	subs	r0, #1
 8000896:	4770      	bx	lr
 8000898:	2d00      	cmp	r5, #0
 800089a:	bf06      	itte	eq
 800089c:	4635      	moveq	r5, r6
 800089e:	3803      	subeq	r0, #3
 80008a0:	3807      	subne	r0, #7
 80008a2:	f015 0f01 	tst.w	r5, #1
 80008a6:	d107      	bne.n	80008b8 <memchr+0x98>
 80008a8:	3001      	adds	r0, #1
 80008aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80008ae:	bf02      	ittt	eq
 80008b0:	3001      	addeq	r0, #1
 80008b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80008b6:	3001      	addeq	r0, #1
 80008b8:	bcf0      	pop	{r4, r5, r6, r7}
 80008ba:	3801      	subs	r0, #1
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop

080008c0 <__aeabi_drsub>:
 80008c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80008c4:	e002      	b.n	80008cc <__adddf3>
 80008c6:	bf00      	nop

080008c8 <__aeabi_dsub>:
 80008c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080008cc <__adddf3>:
 80008cc:	b530      	push	{r4, r5, lr}
 80008ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80008d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80008d6:	ea94 0f05 	teq	r4, r5
 80008da:	bf08      	it	eq
 80008dc:	ea90 0f02 	teqeq	r0, r2
 80008e0:	bf1f      	itttt	ne
 80008e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80008e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80008ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80008ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80008f2:	f000 80e2 	beq.w	8000aba <__adddf3+0x1ee>
 80008f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80008fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80008fe:	bfb8      	it	lt
 8000900:	426d      	neglt	r5, r5
 8000902:	dd0c      	ble.n	800091e <__adddf3+0x52>
 8000904:	442c      	add	r4, r5
 8000906:	ea80 0202 	eor.w	r2, r0, r2
 800090a:	ea81 0303 	eor.w	r3, r1, r3
 800090e:	ea82 0000 	eor.w	r0, r2, r0
 8000912:	ea83 0101 	eor.w	r1, r3, r1
 8000916:	ea80 0202 	eor.w	r2, r0, r2
 800091a:	ea81 0303 	eor.w	r3, r1, r3
 800091e:	2d36      	cmp	r5, #54	; 0x36
 8000920:	bf88      	it	hi
 8000922:	bd30      	pophi	{r4, r5, pc}
 8000924:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000928:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800092c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000930:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000934:	d002      	beq.n	800093c <__adddf3+0x70>
 8000936:	4240      	negs	r0, r0
 8000938:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800093c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000940:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000944:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000948:	d002      	beq.n	8000950 <__adddf3+0x84>
 800094a:	4252      	negs	r2, r2
 800094c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000950:	ea94 0f05 	teq	r4, r5
 8000954:	f000 80a7 	beq.w	8000aa6 <__adddf3+0x1da>
 8000958:	f1a4 0401 	sub.w	r4, r4, #1
 800095c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000960:	db0d      	blt.n	800097e <__adddf3+0xb2>
 8000962:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000966:	fa22 f205 	lsr.w	r2, r2, r5
 800096a:	1880      	adds	r0, r0, r2
 800096c:	f141 0100 	adc.w	r1, r1, #0
 8000970:	fa03 f20e 	lsl.w	r2, r3, lr
 8000974:	1880      	adds	r0, r0, r2
 8000976:	fa43 f305 	asr.w	r3, r3, r5
 800097a:	4159      	adcs	r1, r3
 800097c:	e00e      	b.n	800099c <__adddf3+0xd0>
 800097e:	f1a5 0520 	sub.w	r5, r5, #32
 8000982:	f10e 0e20 	add.w	lr, lr, #32
 8000986:	2a01      	cmp	r2, #1
 8000988:	fa03 fc0e 	lsl.w	ip, r3, lr
 800098c:	bf28      	it	cs
 800098e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000992:	fa43 f305 	asr.w	r3, r3, r5
 8000996:	18c0      	adds	r0, r0, r3
 8000998:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800099c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80009a0:	d507      	bpl.n	80009b2 <__adddf3+0xe6>
 80009a2:	f04f 0e00 	mov.w	lr, #0
 80009a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80009aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80009ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80009b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80009b6:	d31b      	bcc.n	80009f0 <__adddf3+0x124>
 80009b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80009bc:	d30c      	bcc.n	80009d8 <__adddf3+0x10c>
 80009be:	0849      	lsrs	r1, r1, #1
 80009c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80009c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80009c8:	f104 0401 	add.w	r4, r4, #1
 80009cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80009d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80009d4:	f080 809a 	bcs.w	8000b0c <__adddf3+0x240>
 80009d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80009dc:	bf08      	it	eq
 80009de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e2:	f150 0000 	adcs.w	r0, r0, #0
 80009e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ea:	ea41 0105 	orr.w	r1, r1, r5
 80009ee:	bd30      	pop	{r4, r5, pc}
 80009f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80009f4:	4140      	adcs	r0, r0
 80009f6:	eb41 0101 	adc.w	r1, r1, r1
 80009fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000a02:	d1e9      	bne.n	80009d8 <__adddf3+0x10c>
 8000a04:	f091 0f00 	teq	r1, #0
 8000a08:	bf04      	itt	eq
 8000a0a:	4601      	moveq	r1, r0
 8000a0c:	2000      	moveq	r0, #0
 8000a0e:	fab1 f381 	clz	r3, r1
 8000a12:	bf08      	it	eq
 8000a14:	3320      	addeq	r3, #32
 8000a16:	f1a3 030b 	sub.w	r3, r3, #11
 8000a1a:	f1b3 0220 	subs.w	r2, r3, #32
 8000a1e:	da0c      	bge.n	8000a3a <__adddf3+0x16e>
 8000a20:	320c      	adds	r2, #12
 8000a22:	dd08      	ble.n	8000a36 <__adddf3+0x16a>
 8000a24:	f102 0c14 	add.w	ip, r2, #20
 8000a28:	f1c2 020c 	rsb	r2, r2, #12
 8000a2c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000a30:	fa21 f102 	lsr.w	r1, r1, r2
 8000a34:	e00c      	b.n	8000a50 <__adddf3+0x184>
 8000a36:	f102 0214 	add.w	r2, r2, #20
 8000a3a:	bfd8      	it	le
 8000a3c:	f1c2 0c20 	rsble	ip, r2, #32
 8000a40:	fa01 f102 	lsl.w	r1, r1, r2
 8000a44:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000a48:	bfdc      	itt	le
 8000a4a:	ea41 010c 	orrle.w	r1, r1, ip
 8000a4e:	4090      	lslle	r0, r2
 8000a50:	1ae4      	subs	r4, r4, r3
 8000a52:	bfa2      	ittt	ge
 8000a54:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000a58:	4329      	orrge	r1, r5
 8000a5a:	bd30      	popge	{r4, r5, pc}
 8000a5c:	ea6f 0404 	mvn.w	r4, r4
 8000a60:	3c1f      	subs	r4, #31
 8000a62:	da1c      	bge.n	8000a9e <__adddf3+0x1d2>
 8000a64:	340c      	adds	r4, #12
 8000a66:	dc0e      	bgt.n	8000a86 <__adddf3+0x1ba>
 8000a68:	f104 0414 	add.w	r4, r4, #20
 8000a6c:	f1c4 0220 	rsb	r2, r4, #32
 8000a70:	fa20 f004 	lsr.w	r0, r0, r4
 8000a74:	fa01 f302 	lsl.w	r3, r1, r2
 8000a78:	ea40 0003 	orr.w	r0, r0, r3
 8000a7c:	fa21 f304 	lsr.w	r3, r1, r4
 8000a80:	ea45 0103 	orr.w	r1, r5, r3
 8000a84:	bd30      	pop	{r4, r5, pc}
 8000a86:	f1c4 040c 	rsb	r4, r4, #12
 8000a8a:	f1c4 0220 	rsb	r2, r4, #32
 8000a8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a92:	fa01 f304 	lsl.w	r3, r1, r4
 8000a96:	ea40 0003 	orr.w	r0, r0, r3
 8000a9a:	4629      	mov	r1, r5
 8000a9c:	bd30      	pop	{r4, r5, pc}
 8000a9e:	fa21 f004 	lsr.w	r0, r1, r4
 8000aa2:	4629      	mov	r1, r5
 8000aa4:	bd30      	pop	{r4, r5, pc}
 8000aa6:	f094 0f00 	teq	r4, #0
 8000aaa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000aae:	bf06      	itte	eq
 8000ab0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000ab4:	3401      	addeq	r4, #1
 8000ab6:	3d01      	subne	r5, #1
 8000ab8:	e74e      	b.n	8000958 <__adddf3+0x8c>
 8000aba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000abe:	bf18      	it	ne
 8000ac0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000ac4:	d029      	beq.n	8000b1a <__adddf3+0x24e>
 8000ac6:	ea94 0f05 	teq	r4, r5
 8000aca:	bf08      	it	eq
 8000acc:	ea90 0f02 	teqeq	r0, r2
 8000ad0:	d005      	beq.n	8000ade <__adddf3+0x212>
 8000ad2:	ea54 0c00 	orrs.w	ip, r4, r0
 8000ad6:	bf04      	itt	eq
 8000ad8:	4619      	moveq	r1, r3
 8000ada:	4610      	moveq	r0, r2
 8000adc:	bd30      	pop	{r4, r5, pc}
 8000ade:	ea91 0f03 	teq	r1, r3
 8000ae2:	bf1e      	ittt	ne
 8000ae4:	2100      	movne	r1, #0
 8000ae6:	2000      	movne	r0, #0
 8000ae8:	bd30      	popne	{r4, r5, pc}
 8000aea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000aee:	d105      	bne.n	8000afc <__adddf3+0x230>
 8000af0:	0040      	lsls	r0, r0, #1
 8000af2:	4149      	adcs	r1, r1
 8000af4:	bf28      	it	cs
 8000af6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000afa:	bd30      	pop	{r4, r5, pc}
 8000afc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000b00:	bf3c      	itt	cc
 8000b02:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000b06:	bd30      	popcc	{r4, r5, pc}
 8000b08:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000b0c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000b10:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	bd30      	pop	{r4, r5, pc}
 8000b1a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000b1e:	bf1a      	itte	ne
 8000b20:	4619      	movne	r1, r3
 8000b22:	4610      	movne	r0, r2
 8000b24:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000b28:	bf1c      	itt	ne
 8000b2a:	460b      	movne	r3, r1
 8000b2c:	4602      	movne	r2, r0
 8000b2e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000b32:	bf06      	itte	eq
 8000b34:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000b38:	ea91 0f03 	teqeq	r1, r3
 8000b3c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000b40:	bd30      	pop	{r4, r5, pc}
 8000b42:	bf00      	nop

08000b44 <__aeabi_ui2d>:
 8000b44:	f090 0f00 	teq	r0, #0
 8000b48:	bf04      	itt	eq
 8000b4a:	2100      	moveq	r1, #0
 8000b4c:	4770      	bxeq	lr
 8000b4e:	b530      	push	{r4, r5, lr}
 8000b50:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000b54:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000b58:	f04f 0500 	mov.w	r5, #0
 8000b5c:	f04f 0100 	mov.w	r1, #0
 8000b60:	e750      	b.n	8000a04 <__adddf3+0x138>
 8000b62:	bf00      	nop

08000b64 <__aeabi_i2d>:
 8000b64:	f090 0f00 	teq	r0, #0
 8000b68:	bf04      	itt	eq
 8000b6a:	2100      	moveq	r1, #0
 8000b6c:	4770      	bxeq	lr
 8000b6e:	b530      	push	{r4, r5, lr}
 8000b70:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000b74:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000b78:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000b7c:	bf48      	it	mi
 8000b7e:	4240      	negmi	r0, r0
 8000b80:	f04f 0100 	mov.w	r1, #0
 8000b84:	e73e      	b.n	8000a04 <__adddf3+0x138>
 8000b86:	bf00      	nop

08000b88 <__aeabi_f2d>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000b8e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b92:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000b96:	bf1f      	itttt	ne
 8000b98:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000b9c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000ba0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000ba4:	4770      	bxne	lr
 8000ba6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000baa:	bf08      	it	eq
 8000bac:	4770      	bxeq	lr
 8000bae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000bb2:	bf04      	itt	eq
 8000bb4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000bb8:	4770      	bxeq	lr
 8000bba:	b530      	push	{r4, r5, lr}
 8000bbc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000bc0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000bc4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000bc8:	e71c      	b.n	8000a04 <__adddf3+0x138>
 8000bca:	bf00      	nop

08000bcc <__aeabi_ul2d>:
 8000bcc:	ea50 0201 	orrs.w	r2, r0, r1
 8000bd0:	bf08      	it	eq
 8000bd2:	4770      	bxeq	lr
 8000bd4:	b530      	push	{r4, r5, lr}
 8000bd6:	f04f 0500 	mov.w	r5, #0
 8000bda:	e00a      	b.n	8000bf2 <__aeabi_l2d+0x16>

08000bdc <__aeabi_l2d>:
 8000bdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000be0:	bf08      	it	eq
 8000be2:	4770      	bxeq	lr
 8000be4:	b530      	push	{r4, r5, lr}
 8000be6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000bea:	d502      	bpl.n	8000bf2 <__aeabi_l2d+0x16>
 8000bec:	4240      	negs	r0, r0
 8000bee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000bf6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000bfa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000bfe:	f43f aed8 	beq.w	80009b2 <__adddf3+0xe6>
 8000c02:	f04f 0203 	mov.w	r2, #3
 8000c06:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000c0a:	bf18      	it	ne
 8000c0c:	3203      	addne	r2, #3
 8000c0e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000c12:	bf18      	it	ne
 8000c14:	3203      	addne	r2, #3
 8000c16:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000c1a:	f1c2 0320 	rsb	r3, r2, #32
 8000c1e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000c22:	fa20 f002 	lsr.w	r0, r0, r2
 8000c26:	fa01 fe03 	lsl.w	lr, r1, r3
 8000c2a:	ea40 000e 	orr.w	r0, r0, lr
 8000c2e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c32:	4414      	add	r4, r2
 8000c34:	e6bd      	b.n	80009b2 <__adddf3+0xe6>
 8000c36:	bf00      	nop

08000c38 <__aeabi_dmul>:
 8000c38:	b570      	push	{r4, r5, r6, lr}
 8000c3a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c3e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000c42:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000c46:	bf1d      	ittte	ne
 8000c48:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000c4c:	ea94 0f0c 	teqne	r4, ip
 8000c50:	ea95 0f0c 	teqne	r5, ip
 8000c54:	f000 f8de 	bleq	8000e14 <__aeabi_dmul+0x1dc>
 8000c58:	442c      	add	r4, r5
 8000c5a:	ea81 0603 	eor.w	r6, r1, r3
 8000c5e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000c62:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000c66:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000c6a:	bf18      	it	ne
 8000c6c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000c70:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000c78:	d038      	beq.n	8000cec <__aeabi_dmul+0xb4>
 8000c7a:	fba0 ce02 	umull	ip, lr, r0, r2
 8000c7e:	f04f 0500 	mov.w	r5, #0
 8000c82:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000c86:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000c8a:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000c8e:	f04f 0600 	mov.w	r6, #0
 8000c92:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000c96:	f09c 0f00 	teq	ip, #0
 8000c9a:	bf18      	it	ne
 8000c9c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000ca0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000ca4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000ca8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000cac:	d204      	bcs.n	8000cb8 <__aeabi_dmul+0x80>
 8000cae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000cb2:	416d      	adcs	r5, r5
 8000cb4:	eb46 0606 	adc.w	r6, r6, r6
 8000cb8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000cbc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000cc0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000cc4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000cc8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000ccc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000cd0:	bf88      	it	hi
 8000cd2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000cd6:	d81e      	bhi.n	8000d16 <__aeabi_dmul+0xde>
 8000cd8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000cdc:	bf08      	it	eq
 8000cde:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000ce2:	f150 0000 	adcs.w	r0, r0, #0
 8000ce6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000cea:	bd70      	pop	{r4, r5, r6, pc}
 8000cec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000cf0:	ea46 0101 	orr.w	r1, r6, r1
 8000cf4:	ea40 0002 	orr.w	r0, r0, r2
 8000cf8:	ea81 0103 	eor.w	r1, r1, r3
 8000cfc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000d00:	bfc2      	ittt	gt
 8000d02:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000d06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000d0a:	bd70      	popgt	{r4, r5, r6, pc}
 8000d0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d10:	f04f 0e00 	mov.w	lr, #0
 8000d14:	3c01      	subs	r4, #1
 8000d16:	f300 80ab 	bgt.w	8000e70 <__aeabi_dmul+0x238>
 8000d1a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000d1e:	bfde      	ittt	le
 8000d20:	2000      	movle	r0, #0
 8000d22:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000d26:	bd70      	pople	{r4, r5, r6, pc}
 8000d28:	f1c4 0400 	rsb	r4, r4, #0
 8000d2c:	3c20      	subs	r4, #32
 8000d2e:	da35      	bge.n	8000d9c <__aeabi_dmul+0x164>
 8000d30:	340c      	adds	r4, #12
 8000d32:	dc1b      	bgt.n	8000d6c <__aeabi_dmul+0x134>
 8000d34:	f104 0414 	add.w	r4, r4, #20
 8000d38:	f1c4 0520 	rsb	r5, r4, #32
 8000d3c:	fa00 f305 	lsl.w	r3, r0, r5
 8000d40:	fa20 f004 	lsr.w	r0, r0, r4
 8000d44:	fa01 f205 	lsl.w	r2, r1, r5
 8000d48:	ea40 0002 	orr.w	r0, r0, r2
 8000d4c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000d50:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000d54:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000d58:	fa21 f604 	lsr.w	r6, r1, r4
 8000d5c:	eb42 0106 	adc.w	r1, r2, r6
 8000d60:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000d64:	bf08      	it	eq
 8000d66:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000d6a:	bd70      	pop	{r4, r5, r6, pc}
 8000d6c:	f1c4 040c 	rsb	r4, r4, #12
 8000d70:	f1c4 0520 	rsb	r5, r4, #32
 8000d74:	fa00 f304 	lsl.w	r3, r0, r4
 8000d78:	fa20 f005 	lsr.w	r0, r0, r5
 8000d7c:	fa01 f204 	lsl.w	r2, r1, r4
 8000d80:	ea40 0002 	orr.w	r0, r0, r2
 8000d84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000d88:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000d8c:	f141 0100 	adc.w	r1, r1, #0
 8000d90:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000d94:	bf08      	it	eq
 8000d96:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000d9a:	bd70      	pop	{r4, r5, r6, pc}
 8000d9c:	f1c4 0520 	rsb	r5, r4, #32
 8000da0:	fa00 f205 	lsl.w	r2, r0, r5
 8000da4:	ea4e 0e02 	orr.w	lr, lr, r2
 8000da8:	fa20 f304 	lsr.w	r3, r0, r4
 8000dac:	fa01 f205 	lsl.w	r2, r1, r5
 8000db0:	ea43 0302 	orr.w	r3, r3, r2
 8000db4:	fa21 f004 	lsr.w	r0, r1, r4
 8000db8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000dbc:	fa21 f204 	lsr.w	r2, r1, r4
 8000dc0:	ea20 0002 	bic.w	r0, r0, r2
 8000dc4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000dc8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000dcc:	bf08      	it	eq
 8000dce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000dd2:	bd70      	pop	{r4, r5, r6, pc}
 8000dd4:	f094 0f00 	teq	r4, #0
 8000dd8:	d10f      	bne.n	8000dfa <__aeabi_dmul+0x1c2>
 8000dda:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000dde:	0040      	lsls	r0, r0, #1
 8000de0:	eb41 0101 	adc.w	r1, r1, r1
 8000de4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000de8:	bf08      	it	eq
 8000dea:	3c01      	subeq	r4, #1
 8000dec:	d0f7      	beq.n	8000dde <__aeabi_dmul+0x1a6>
 8000dee:	ea41 0106 	orr.w	r1, r1, r6
 8000df2:	f095 0f00 	teq	r5, #0
 8000df6:	bf18      	it	ne
 8000df8:	4770      	bxne	lr
 8000dfa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000dfe:	0052      	lsls	r2, r2, #1
 8000e00:	eb43 0303 	adc.w	r3, r3, r3
 8000e04:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000e08:	bf08      	it	eq
 8000e0a:	3d01      	subeq	r5, #1
 8000e0c:	d0f7      	beq.n	8000dfe <__aeabi_dmul+0x1c6>
 8000e0e:	ea43 0306 	orr.w	r3, r3, r6
 8000e12:	4770      	bx	lr
 8000e14:	ea94 0f0c 	teq	r4, ip
 8000e18:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000e1c:	bf18      	it	ne
 8000e1e:	ea95 0f0c 	teqne	r5, ip
 8000e22:	d00c      	beq.n	8000e3e <__aeabi_dmul+0x206>
 8000e24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000e28:	bf18      	it	ne
 8000e2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000e2e:	d1d1      	bne.n	8000dd4 <__aeabi_dmul+0x19c>
 8000e30:	ea81 0103 	eor.w	r1, r1, r3
 8000e34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000e38:	f04f 0000 	mov.w	r0, #0
 8000e3c:	bd70      	pop	{r4, r5, r6, pc}
 8000e3e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000e42:	bf06      	itte	eq
 8000e44:	4610      	moveq	r0, r2
 8000e46:	4619      	moveq	r1, r3
 8000e48:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000e4c:	d019      	beq.n	8000e82 <__aeabi_dmul+0x24a>
 8000e4e:	ea94 0f0c 	teq	r4, ip
 8000e52:	d102      	bne.n	8000e5a <__aeabi_dmul+0x222>
 8000e54:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000e58:	d113      	bne.n	8000e82 <__aeabi_dmul+0x24a>
 8000e5a:	ea95 0f0c 	teq	r5, ip
 8000e5e:	d105      	bne.n	8000e6c <__aeabi_dmul+0x234>
 8000e60:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000e64:	bf1c      	itt	ne
 8000e66:	4610      	movne	r0, r2
 8000e68:	4619      	movne	r1, r3
 8000e6a:	d10a      	bne.n	8000e82 <__aeabi_dmul+0x24a>
 8000e6c:	ea81 0103 	eor.w	r1, r1, r3
 8000e70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000e74:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000e78:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000e7c:	f04f 0000 	mov.w	r0, #0
 8000e80:	bd70      	pop	{r4, r5, r6, pc}
 8000e82:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000e86:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000e8a:	bd70      	pop	{r4, r5, r6, pc}

08000e8c <__aeabi_ddiv>:
 8000e8c:	b570      	push	{r4, r5, r6, lr}
 8000e8e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e92:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000e96:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000e9a:	bf1d      	ittte	ne
 8000e9c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000ea0:	ea94 0f0c 	teqne	r4, ip
 8000ea4:	ea95 0f0c 	teqne	r5, ip
 8000ea8:	f000 f8a7 	bleq	8000ffa <__aeabi_ddiv+0x16e>
 8000eac:	eba4 0405 	sub.w	r4, r4, r5
 8000eb0:	ea81 0e03 	eor.w	lr, r1, r3
 8000eb4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000eb8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000ebc:	f000 8088 	beq.w	8000fd0 <__aeabi_ddiv+0x144>
 8000ec0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000ec4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000ec8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000ecc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000ed0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000ed4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000ed8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000edc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000ee0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000ee4:	429d      	cmp	r5, r3
 8000ee6:	bf08      	it	eq
 8000ee8:	4296      	cmpeq	r6, r2
 8000eea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000eee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000ef2:	d202      	bcs.n	8000efa <__aeabi_ddiv+0x6e>
 8000ef4:	085b      	lsrs	r3, r3, #1
 8000ef6:	ea4f 0232 	mov.w	r2, r2, rrx
 8000efa:	1ab6      	subs	r6, r6, r2
 8000efc:	eb65 0503 	sbc.w	r5, r5, r3
 8000f00:	085b      	lsrs	r3, r3, #1
 8000f02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000f06:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000f0a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000f0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000f12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000f16:	bf22      	ittt	cs
 8000f18:	1ab6      	subcs	r6, r6, r2
 8000f1a:	4675      	movcs	r5, lr
 8000f1c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f20:	085b      	lsrs	r3, r3, #1
 8000f22:	ea4f 0232 	mov.w	r2, r2, rrx
 8000f26:	ebb6 0e02 	subs.w	lr, r6, r2
 8000f2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000f2e:	bf22      	ittt	cs
 8000f30:	1ab6      	subcs	r6, r6, r2
 8000f32:	4675      	movcs	r5, lr
 8000f34:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f38:	085b      	lsrs	r3, r3, #1
 8000f3a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000f3e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000f42:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000f46:	bf22      	ittt	cs
 8000f48:	1ab6      	subcs	r6, r6, r2
 8000f4a:	4675      	movcs	r5, lr
 8000f4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f50:	085b      	lsrs	r3, r3, #1
 8000f52:	ea4f 0232 	mov.w	r2, r2, rrx
 8000f56:	ebb6 0e02 	subs.w	lr, r6, r2
 8000f5a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000f5e:	bf22      	ittt	cs
 8000f60:	1ab6      	subcs	r6, r6, r2
 8000f62:	4675      	movcs	r5, lr
 8000f64:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f68:	ea55 0e06 	orrs.w	lr, r5, r6
 8000f6c:	d018      	beq.n	8000fa0 <__aeabi_ddiv+0x114>
 8000f6e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000f72:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000f76:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000f7a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000f7e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000f82:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000f86:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000f8a:	d1c0      	bne.n	8000f0e <__aeabi_ddiv+0x82>
 8000f8c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000f90:	d10b      	bne.n	8000faa <__aeabi_ddiv+0x11e>
 8000f92:	ea41 0100 	orr.w	r1, r1, r0
 8000f96:	f04f 0000 	mov.w	r0, #0
 8000f9a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000f9e:	e7b6      	b.n	8000f0e <__aeabi_ddiv+0x82>
 8000fa0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000fa4:	bf04      	itt	eq
 8000fa6:	4301      	orreq	r1, r0
 8000fa8:	2000      	moveq	r0, #0
 8000faa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000fae:	bf88      	it	hi
 8000fb0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000fb4:	f63f aeaf 	bhi.w	8000d16 <__aeabi_dmul+0xde>
 8000fb8:	ebb5 0c03 	subs.w	ip, r5, r3
 8000fbc:	bf04      	itt	eq
 8000fbe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000fc2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000fc6:	f150 0000 	adcs.w	r0, r0, #0
 8000fca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000fce:	bd70      	pop	{r4, r5, r6, pc}
 8000fd0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000fd4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000fd8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000fdc:	bfc2      	ittt	gt
 8000fde:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000fe2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000fe6:	bd70      	popgt	{r4, r5, r6, pc}
 8000fe8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000fec:	f04f 0e00 	mov.w	lr, #0
 8000ff0:	3c01      	subs	r4, #1
 8000ff2:	e690      	b.n	8000d16 <__aeabi_dmul+0xde>
 8000ff4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ff8:	e68d      	b.n	8000d16 <__aeabi_dmul+0xde>
 8000ffa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ffe:	ea94 0f0c 	teq	r4, ip
 8001002:	bf08      	it	eq
 8001004:	ea95 0f0c 	teqeq	r5, ip
 8001008:	f43f af3b 	beq.w	8000e82 <__aeabi_dmul+0x24a>
 800100c:	ea94 0f0c 	teq	r4, ip
 8001010:	d10a      	bne.n	8001028 <__aeabi_ddiv+0x19c>
 8001012:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8001016:	f47f af34 	bne.w	8000e82 <__aeabi_dmul+0x24a>
 800101a:	ea95 0f0c 	teq	r5, ip
 800101e:	f47f af25 	bne.w	8000e6c <__aeabi_dmul+0x234>
 8001022:	4610      	mov	r0, r2
 8001024:	4619      	mov	r1, r3
 8001026:	e72c      	b.n	8000e82 <__aeabi_dmul+0x24a>
 8001028:	ea95 0f0c 	teq	r5, ip
 800102c:	d106      	bne.n	800103c <__aeabi_ddiv+0x1b0>
 800102e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8001032:	f43f aefd 	beq.w	8000e30 <__aeabi_dmul+0x1f8>
 8001036:	4610      	mov	r0, r2
 8001038:	4619      	mov	r1, r3
 800103a:	e722      	b.n	8000e82 <__aeabi_dmul+0x24a>
 800103c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001040:	bf18      	it	ne
 8001042:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8001046:	f47f aec5 	bne.w	8000dd4 <__aeabi_dmul+0x19c>
 800104a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800104e:	f47f af0d 	bne.w	8000e6c <__aeabi_dmul+0x234>
 8001052:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8001056:	f47f aeeb 	bne.w	8000e30 <__aeabi_dmul+0x1f8>
 800105a:	e712      	b.n	8000e82 <__aeabi_dmul+0x24a>

0800105c <__gedf2>:
 800105c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001060:	e006      	b.n	8001070 <__cmpdf2+0x4>
 8001062:	bf00      	nop

08001064 <__ledf2>:
 8001064:	f04f 0c01 	mov.w	ip, #1
 8001068:	e002      	b.n	8001070 <__cmpdf2+0x4>
 800106a:	bf00      	nop

0800106c <__cmpdf2>:
 800106c:	f04f 0c01 	mov.w	ip, #1
 8001070:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001074:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8001078:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800107c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001080:	bf18      	it	ne
 8001082:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8001086:	d01b      	beq.n	80010c0 <__cmpdf2+0x54>
 8001088:	b001      	add	sp, #4
 800108a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800108e:	bf0c      	ite	eq
 8001090:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8001094:	ea91 0f03 	teqne	r1, r3
 8001098:	bf02      	ittt	eq
 800109a:	ea90 0f02 	teqeq	r0, r2
 800109e:	2000      	moveq	r0, #0
 80010a0:	4770      	bxeq	lr
 80010a2:	f110 0f00 	cmn.w	r0, #0
 80010a6:	ea91 0f03 	teq	r1, r3
 80010aa:	bf58      	it	pl
 80010ac:	4299      	cmppl	r1, r3
 80010ae:	bf08      	it	eq
 80010b0:	4290      	cmpeq	r0, r2
 80010b2:	bf2c      	ite	cs
 80010b4:	17d8      	asrcs	r0, r3, #31
 80010b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80010ba:	f040 0001 	orr.w	r0, r0, #1
 80010be:	4770      	bx	lr
 80010c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80010c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80010c8:	d102      	bne.n	80010d0 <__cmpdf2+0x64>
 80010ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80010ce:	d107      	bne.n	80010e0 <__cmpdf2+0x74>
 80010d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80010d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80010d8:	d1d6      	bne.n	8001088 <__cmpdf2+0x1c>
 80010da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80010de:	d0d3      	beq.n	8001088 <__cmpdf2+0x1c>
 80010e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop

080010e8 <__aeabi_cdrcmple>:
 80010e8:	4684      	mov	ip, r0
 80010ea:	4610      	mov	r0, r2
 80010ec:	4662      	mov	r2, ip
 80010ee:	468c      	mov	ip, r1
 80010f0:	4619      	mov	r1, r3
 80010f2:	4663      	mov	r3, ip
 80010f4:	e000      	b.n	80010f8 <__aeabi_cdcmpeq>
 80010f6:	bf00      	nop

080010f8 <__aeabi_cdcmpeq>:
 80010f8:	b501      	push	{r0, lr}
 80010fa:	f7ff ffb7 	bl	800106c <__cmpdf2>
 80010fe:	2800      	cmp	r0, #0
 8001100:	bf48      	it	mi
 8001102:	f110 0f00 	cmnmi.w	r0, #0
 8001106:	bd01      	pop	{r0, pc}

08001108 <__aeabi_dcmpeq>:
 8001108:	f84d ed08 	str.w	lr, [sp, #-8]!
 800110c:	f7ff fff4 	bl	80010f8 <__aeabi_cdcmpeq>
 8001110:	bf0c      	ite	eq
 8001112:	2001      	moveq	r0, #1
 8001114:	2000      	movne	r0, #0
 8001116:	f85d fb08 	ldr.w	pc, [sp], #8
 800111a:	bf00      	nop

0800111c <__aeabi_dcmplt>:
 800111c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001120:	f7ff ffea 	bl	80010f8 <__aeabi_cdcmpeq>
 8001124:	bf34      	ite	cc
 8001126:	2001      	movcc	r0, #1
 8001128:	2000      	movcs	r0, #0
 800112a:	f85d fb08 	ldr.w	pc, [sp], #8
 800112e:	bf00      	nop

08001130 <__aeabi_dcmple>:
 8001130:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001134:	f7ff ffe0 	bl	80010f8 <__aeabi_cdcmpeq>
 8001138:	bf94      	ite	ls
 800113a:	2001      	movls	r0, #1
 800113c:	2000      	movhi	r0, #0
 800113e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001142:	bf00      	nop

08001144 <__aeabi_dcmpge>:
 8001144:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001148:	f7ff ffce 	bl	80010e8 <__aeabi_cdrcmple>
 800114c:	bf94      	ite	ls
 800114e:	2001      	movls	r0, #1
 8001150:	2000      	movhi	r0, #0
 8001152:	f85d fb08 	ldr.w	pc, [sp], #8
 8001156:	bf00      	nop

08001158 <__aeabi_dcmpgt>:
 8001158:	f84d ed08 	str.w	lr, [sp, #-8]!
 800115c:	f7ff ffc4 	bl	80010e8 <__aeabi_cdrcmple>
 8001160:	bf34      	ite	cc
 8001162:	2001      	movcc	r0, #1
 8001164:	2000      	movcs	r0, #0
 8001166:	f85d fb08 	ldr.w	pc, [sp], #8
 800116a:	bf00      	nop

0800116c <__aeabi_dcmpun>:
 800116c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8001170:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001174:	d102      	bne.n	800117c <__aeabi_dcmpun+0x10>
 8001176:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800117a:	d10a      	bne.n	8001192 <__aeabi_dcmpun+0x26>
 800117c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001180:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001184:	d102      	bne.n	800118c <__aeabi_dcmpun+0x20>
 8001186:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800118a:	d102      	bne.n	8001192 <__aeabi_dcmpun+0x26>
 800118c:	f04f 0000 	mov.w	r0, #0
 8001190:	4770      	bx	lr
 8001192:	f04f 0001 	mov.w	r0, #1
 8001196:	4770      	bx	lr

08001198 <__aeabi_d2iz>:
 8001198:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800119c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80011a0:	d215      	bcs.n	80011ce <__aeabi_d2iz+0x36>
 80011a2:	d511      	bpl.n	80011c8 <__aeabi_d2iz+0x30>
 80011a4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80011a8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80011ac:	d912      	bls.n	80011d4 <__aeabi_d2iz+0x3c>
 80011ae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80011b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011b6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80011ba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80011be:	fa23 f002 	lsr.w	r0, r3, r2
 80011c2:	bf18      	it	ne
 80011c4:	4240      	negne	r0, r0
 80011c6:	4770      	bx	lr
 80011c8:	f04f 0000 	mov.w	r0, #0
 80011cc:	4770      	bx	lr
 80011ce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80011d2:	d105      	bne.n	80011e0 <__aeabi_d2iz+0x48>
 80011d4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80011d8:	bf08      	it	eq
 80011da:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80011de:	4770      	bx	lr
 80011e0:	f04f 0000 	mov.w	r0, #0
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop

080011e8 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011f8:	78fb      	ldrb	r3, [r7, #3]
 80011fa:	fa22 f303 	lsr.w	r3, r2, r3
 80011fe:	f003 0301 	and.w	r3, r3, #1
}
 8001202:	4618      	mov	r0, r3
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr

0800120c <main>:
 *
 * \brief This is the standard entry point for C code.
 */

int main (void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08c      	sub	sp, #48	; 0x30
 8001210:	af0a      	add	r7, sp, #40	; 0x28
  OS_ERR  err;

  // Disable all interrupts                                               // <3>
  BSP_IntDisAll();
 8001212:	f005 fdba 	bl	8006d8a <BSP_IntDisAll>
  // Enable Interrupt UART
  BSP_IntEn (BSP_INT_ID_USIC1_01); //**
 8001216:	205b      	movs	r0, #91	; 0x5b
 8001218:	f005 fdbd 	bl	8006d96 <BSP_IntEn>
  BSP_IntEn (BSP_INT_ID_USIC1_00); //**
 800121c:	205a      	movs	r0, #90	; 0x5a
 800121e:	f005 fdba 	bl	8006d96 <BSP_IntEn>
  BSP_IntEn (BSP_INT_ID_CCU40_00); //** PORT 1.3
 8001222:	202c      	movs	r0, #44	; 0x2c
 8001224:	f005 fdb7 	bl	8006d96 <BSP_IntEn>
// init SEMI Hosting DEBUG Support                                        // <4>
#if SEMI_HOSTING
  initRetargetSwo();
 8001228:	f005 fd4e 	bl	8006cc8 <initRetargetSwo>
  SEGGER_RTT_ConfigUpBuffer (0, NULL, NULL, 0,
           SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL);
#endif

  // Init uC/OS-III
  OSInit (&err);                                                          // <5>
 800122c:	1dbb      	adds	r3, r7, #6
 800122e:	4618      	mov	r0, r3
 8001230:	f002 fd3c 	bl	8003cac <OSInit>
  if (err != OS_ERR_NONE)
 8001234:	88fb      	ldrh	r3, [r7, #6]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d002      	beq.n	8001240 <main+0x34>
    APP_TRACE_DBG ("Error OSInit: main\n");
 800123a:	4815      	ldr	r0, [pc, #84]	; (8001290 <main+0x84>)
 800123c:	f007 faf8 	bl	8008830 <puts>

  /* Create the start task */                                             // <6>
  OSTaskCreate ( (OS_TCB     *) &AppStartTaskTCB,
 8001240:	1dbb      	adds	r3, r7, #6
 8001242:	9308      	str	r3, [sp, #32]
 8001244:	2303      	movs	r3, #3
 8001246:	9307      	str	r3, [sp, #28]
 8001248:	2300      	movs	r3, #0
 800124a:	9306      	str	r3, [sp, #24]
 800124c:	2300      	movs	r3, #0
 800124e:	9305      	str	r3, [sp, #20]
 8001250:	2300      	movs	r3, #0
 8001252:	9304      	str	r3, [sp, #16]
 8001254:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001258:	9303      	str	r3, [sp, #12]
 800125a:	2319      	movs	r3, #25
 800125c:	9302      	str	r3, [sp, #8]
 800125e:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <main+0x88>)
 8001260:	9301      	str	r3, [sp, #4]
 8001262:	2302      	movs	r3, #2
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	2300      	movs	r3, #0
 8001268:	4a0b      	ldr	r2, [pc, #44]	; (8001298 <main+0x8c>)
 800126a:	490c      	ldr	r1, [pc, #48]	; (800129c <main+0x90>)
 800126c:	480c      	ldr	r0, [pc, #48]	; (80012a0 <main+0x94>)
 800126e:	f003 fda5 	bl	8004dbc <OSTaskCreate>
           (OS_OPT) (OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
           (OS_ERR     *) &err);

  // Start multitasking (i.e., give control to uC/OS-III)

  OSStart (&err);                                                         // <7>
 8001272:	1dbb      	adds	r3, r7, #6
 8001274:	4618      	mov	r0, r3
 8001276:	f002 ff6d 	bl	8004154 <OSStart>
  if (err != OS_ERR_NONE)
 800127a:	88fb      	ldrh	r3, [r7, #6]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d002      	beq.n	8001286 <main+0x7a>
    APP_TRACE_DBG ("Error OSStart: main\n");
 8001280:	4808      	ldr	r0, [pc, #32]	; (80012a4 <main+0x98>)
 8001282:	f007 fad5 	bl	8008830 <puts>

  while (1) {                                                             // <8>
    APP_TRACE_DBG ("Should never be output! Bug?\n");
 8001286:	4808      	ldr	r0, [pc, #32]	; (80012a8 <main+0x9c>)
 8001288:	f007 fad2 	bl	8008830 <puts>
 800128c:	e7fb      	b.n	8001286 <main+0x7a>
 800128e:	bf00      	nop
 8001290:	0800e4a8 	.word	0x0800e4a8
 8001294:	200009e4 	.word	0x200009e4
 8001298:	080012ad 	.word	0x080012ad
 800129c:	0800e4bc 	.word	0x0800e4bc
 80012a0:	20000de4 	.word	0x20000de4
 80012a4:	0800e4cc 	.word	0x0800e4cc
 80012a8:	0800e4e0 	.word	0x0800e4e0

080012ac <AppTaskStart>:
 * \brief Startup (init) task that loads board support functions,
 *        initializes CPU services, the memory, the systick timer,
 *        etc. and finally invokes other application tasks.
 */
static void AppTaskStart (void *p_arg)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  CPU_INT32U  cnts;
  OS_ERR      err;

  (void) p_arg;
  // initialize BSP functions
  BSP_Init();                                                             // <9>
 80012b4:	f005 fcbc 	bl	8006c30 <BSP_Init>
  // initialize the uC/CPU services
  CPU_Init();
 80012b8:	f000 fc12 	bl	8001ae0 <CPU_Init>
  // determine SysTick reference frequency
  cpu_clk_freq = BSP_SysClkFreqGet();
 80012bc:	f005 f998 	bl	80065f0 <BSP_SysClkFreqGet>
 80012c0:	6178      	str	r0, [r7, #20]
  // determine nbr SysTick increments
  cnts = cpu_clk_freq / (CPU_INT32U) OSCfg_TickRate_Hz;
 80012c2:	4b17      	ldr	r3, [pc, #92]	; (8001320 <AppTaskStart+0x74>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	697a      	ldr	r2, [r7, #20]
 80012c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80012cc:	613b      	str	r3, [r7, #16]
  // init uCOS-III periodic time src (SysTick)
  OS_CPU_SysTickInit (cnts);
 80012ce:	6938      	ldr	r0, [r7, #16]
 80012d0:	f004 ff66 	bl	80061a0 <OS_CPU_SysTickInit>
  // initialize memory management module
  Mem_Init();
 80012d4:	f000 fd04 	bl	8001ce0 <Mem_Init>
  // initialize mathematical module
  Math_Init();
 80012d8:	f000 fce4 	bl	8001ca4 <Math_Init>

// compute CPU capacity with no task running
#if (OS_CFG_STAT_TASK_EN > 0u)                                           // <10>
  OSStatTaskCPUUsageInit (&err);
 80012dc:	f107 030e 	add.w	r3, r7, #14
 80012e0:	4618      	mov	r0, r3
 80012e2:	f002 fa5b 	bl	800379c <OSStatTaskCPUUsageInit>
  if (err != OS_ERR_NONE)
 80012e6:	89fb      	ldrh	r3, [r7, #14]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d002      	beq.n	80012f2 <AppTaskStart+0x46>
    APP_TRACE_DBG ("Error OSStatTaskCPUUsageInit: AppTaskStart\n");
 80012ec:	480d      	ldr	r0, [pc, #52]	; (8001324 <AppTaskStart+0x78>)
 80012ee:	f007 fa9f 	bl	8008830 <puts>
#endif

  APP_TRACE_INFO ("Creating Application Objects...\n");                  // <11>
 80012f2:	480d      	ldr	r0, [pc, #52]	; (8001328 <AppTaskStart+0x7c>)
 80012f4:	f007 fa9c 	bl	8008830 <puts>
  // create application objects
  AppObjCreate();
 80012f8:	f000 f81c 	bl	8001334 <AppObjCreate>

  APP_TRACE_INFO ("Creating Application Tasks...\n");                    // <12>
 80012fc:	480b      	ldr	r0, [pc, #44]	; (800132c <AppTaskStart+0x80>)
 80012fe:	f007 fa97 	bl	8008830 <puts>
  // create application tasks
  AppTaskCreate();
 8001302:	f000 f85b 	bl	80013bc <AppTaskCreate>

  while (DEF_TRUE) {                                                     // <13>
    // Suspend current task
    OSTaskSuspend ( (OS_TCB *) 0, &err);
 8001306:	f107 030e 	add.w	r3, r7, #14
 800130a:	4619      	mov	r1, r3
 800130c:	2000      	movs	r0, #0
 800130e:	f004 f811 	bl	8005334 <OSTaskSuspend>
    if (err != OS_ERR_NONE)
 8001312:	89fb      	ldrh	r3, [r7, #14]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0f6      	beq.n	8001306 <AppTaskStart+0x5a>
      APP_TRACE_DBG ("Error OSTaskSuspend: AppTaskStart\n");
 8001318:	4805      	ldr	r0, [pc, #20]	; (8001330 <AppTaskStart+0x84>)
 800131a:	f007 fa89 	bl	8008830 <puts>
    OSTaskSuspend ( (OS_TCB *) 0, &err);
 800131e:	e7f2      	b.n	8001306 <AppTaskStart+0x5a>
 8001320:	0800eae0 	.word	0x0800eae0
 8001324:	0800e500 	.word	0x0800e500
 8001328:	0800e52c 	.word	0x0800e52c
 800132c:	0800e54c 	.word	0x0800e54c
 8001330:	0800e56c 	.word	0x0800e56c

08001334 <AppObjCreate>:
 * \brief Creates application objects.
 * \params none
 * \returns none
 */
static void AppObjCreate (void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af02      	add	r7, sp, #8
  OS_ERR      err;

  // Create Shared Memory
  OSMemCreate ( (OS_MEM    *) &Mem_Partition,
 800133a:	1dbb      	adds	r3, r7, #6
 800133c:	9301      	str	r3, [sp, #4]
 800133e:	2314      	movs	r3, #20
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	2303      	movs	r3, #3
 8001344:	4a13      	ldr	r2, [pc, #76]	; (8001394 <AppObjCreate+0x60>)
 8001346:	4914      	ldr	r1, [pc, #80]	; (8001398 <AppObjCreate+0x64>)
 8001348:	4814      	ldr	r0, [pc, #80]	; (800139c <AppObjCreate+0x68>)
 800134a:	f000 ff05 	bl	8002158 <OSMemCreate>
          (CPU_CHAR  *) "Mem Partition",
          (void      *) &MyPartitionStorage[0][0],
          (OS_MEM_QTY)  NUM_MSG,
          (OS_MEM_SIZE) MAX_MSG_LENGTH * sizeof (CPU_CHAR),
          (OS_ERR    *) &err);
  if (err != OS_ERR_NONE)
 800134e:	88fb      	ldrh	r3, [r7, #6]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d002      	beq.n	800135a <AppObjCreate+0x26>
    APP_TRACE_DBG ("Error OSMemCreate: AppObjCreate\n");
 8001354:	4812      	ldr	r0, [pc, #72]	; (80013a0 <AppObjCreate+0x6c>)
 8001356:	f007 fa6b 	bl	8008830 <puts>

  // Create Message Queue
  // You may re-use code fragments of the bare-bone IO flat exa
  OSQCreate ( (OS_Q *)     &UART_ISR,
 800135a:	1dbb      	adds	r3, r7, #6
 800135c:	2203      	movs	r2, #3
 800135e:	4911      	ldr	r1, [pc, #68]	; (80013a4 <AppObjCreate+0x70>)
 8001360:	4811      	ldr	r0, [pc, #68]	; (80013a8 <AppObjCreate+0x74>)
 8001362:	f004 fb83 	bl	8005a6c <OSQCreate>
        (CPU_CHAR *) "ISR Queue",
        (OS_MSG_QTY) NUM_MSG,
        (OS_ERR   *) &err);
  if (err != OS_ERR_NONE)
 8001366:	88fb      	ldrh	r3, [r7, #6]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d002      	beq.n	8001372 <AppObjCreate+0x3e>
    APP_TRACE_DBG ("ErroBSP_PWM_SetDutyCycler OSQCreate: AppObjCreate\n");
 800136c:	480f      	ldr	r0, [pc, #60]	; (80013ac <AppObjCreate+0x78>)
 800136e:	f007 fa5f 	bl	8008830 <puts>

  OSQCreate ( (OS_Q *)     &DUTY_QUEUE,
 8001372:	1dbb      	adds	r3, r7, #6
 8001374:	2203      	movs	r2, #3
 8001376:	490e      	ldr	r1, [pc, #56]	; (80013b0 <AppObjCreate+0x7c>)
 8001378:	480e      	ldr	r0, [pc, #56]	; (80013b4 <AppObjCreate+0x80>)
 800137a:	f004 fb77 	bl	8005a6c <OSQCreate>
        (CPU_CHAR *) "DUTY Queue",
        (OS_MSG_QTY) NUM_MSG,
        (OS_ERR   *) &err);
  if (err != OS_ERR_NONE)
 800137e:	88fb      	ldrh	r3, [r7, #6]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d002      	beq.n	800138a <AppObjCreate+0x56>
    APP_TRACE_DBG ("Error OSQCreate: AppObjCreate\n");
 8001384:	480c      	ldr	r0, [pc, #48]	; (80013b8 <AppObjCreate+0x84>)
 8001386:	f007 fa53 	bl	8008830 <puts>
  //   APP_TRACE_DBG ("Error OSQCreate: AppObjCreate\n");

  // OSSemCreate(&XYTEST_SEM, "XYTest_sem", 0, &err);
  // if (err != OS_ERR_NONE)
  //     APP_TRACE_DBG ("Error OSQCreate: AppObjCreate\n");
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20001a30 	.word	0x20001a30
 8001398:	0800e590 	.word	0x0800e590
 800139c:	20001ab8 	.word	0x20001ab8
 80013a0:	0800e5a0 	.word	0x0800e5a0
 80013a4:	0800e5c0 	.word	0x0800e5c0
 80013a8:	20001a88 	.word	0x20001a88
 80013ac:	0800e5cc 	.word	0x0800e5cc
 80013b0:	0800e600 	.word	0x0800e600
 80013b4:	20001a58 	.word	0x20001a58
 80013b8:	0800e60c 	.word	0x0800e60c

080013bc <AppTaskCreate>:
 * \brief Creates one application task.
 * \params none
 * \returns none
 */
static void  AppTaskCreate (void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08c      	sub	sp, #48	; 0x30
 80013c0:	af0a      	add	r7, sp, #40	; 0x28
  OS_ERR      err;

  // create AppTask_COM
  OSTaskCreate ( (OS_TCB     *) &AppTaskComTCB,
 80013c2:	1dbb      	adds	r3, r7, #6
 80013c4:	9308      	str	r3, [sp, #32]
 80013c6:	2303      	movs	r3, #3
 80013c8:	9307      	str	r3, [sp, #28]
 80013ca:	2300      	movs	r3, #0
 80013cc:	9306      	str	r3, [sp, #24]
 80013ce:	2300      	movs	r3, #0
 80013d0:	9305      	str	r3, [sp, #20]
 80013d2:	2300      	movs	r3, #0
 80013d4:	9304      	str	r3, [sp, #16]
 80013d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013da:	9303      	str	r3, [sp, #12]
 80013dc:	2319      	movs	r3, #25
 80013de:	9302      	str	r3, [sp, #8]
 80013e0:	4b19      	ldr	r3, [pc, #100]	; (8001448 <AppTaskCreate+0x8c>)
 80013e2:	9301      	str	r3, [sp, #4]
 80013e4:	230a      	movs	r3, #10
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	2300      	movs	r3, #0
 80013ea:	4a18      	ldr	r2, [pc, #96]	; (800144c <AppTaskCreate+0x90>)
 80013ec:	4918      	ldr	r1, [pc, #96]	; (8001450 <AppTaskCreate+0x94>)
 80013ee:	4819      	ldr	r0, [pc, #100]	; (8001454 <AppTaskCreate+0x98>)
 80013f0:	f003 fce4 	bl	8004dbc <OSTaskCreate>
           (OS_MSG_QTY) 0u,
           (OS_TICK) 0u,
           (void       *) 0,
           (OS_OPT) (OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
           (OS_ERR     *) &err);
  if (err != OS_ERR_NONE)
 80013f4:	88fb      	ldrh	r3, [r7, #6]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d002      	beq.n	8001400 <AppTaskCreate+0x44>
  {
    APP_TRACE_DBG ("Error OSTaskCreate: AppTaskCreate\n");
 80013fa:	4817      	ldr	r0, [pc, #92]	; (8001458 <AppTaskCreate+0x9c>)
 80013fc:	f007 fa18 	bl	8008830 <puts>
  }

  OSTaskCreate ( (OS_TCB     *) &AppTaskLEDTCB,
 8001400:	1dbb      	adds	r3, r7, #6
 8001402:	9308      	str	r3, [sp, #32]
 8001404:	2303      	movs	r3, #3
 8001406:	9307      	str	r3, [sp, #28]
 8001408:	2300      	movs	r3, #0
 800140a:	9306      	str	r3, [sp, #24]
 800140c:	2300      	movs	r3, #0
 800140e:	9305      	str	r3, [sp, #20]
 8001410:	2300      	movs	r3, #0
 8001412:	9304      	str	r3, [sp, #16]
 8001414:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001418:	9303      	str	r3, [sp, #12]
 800141a:	2319      	movs	r3, #25
 800141c:	9302      	str	r3, [sp, #8]
 800141e:	4b0f      	ldr	r3, [pc, #60]	; (800145c <AppTaskCreate+0xa0>)
 8001420:	9301      	str	r3, [sp, #4]
 8001422:	230b      	movs	r3, #11
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	2300      	movs	r3, #0
 8001428:	4a0d      	ldr	r2, [pc, #52]	; (8001460 <AppTaskCreate+0xa4>)
 800142a:	490e      	ldr	r1, [pc, #56]	; (8001464 <AppTaskCreate+0xa8>)
 800142c:	480e      	ldr	r0, [pc, #56]	; (8001468 <AppTaskCreate+0xac>)
 800142e:	f003 fcc5 	bl	8004dbc <OSTaskCreate>
           (OS_MSG_QTY) 0u,
           (OS_TICK) 0u,
           (void       *) 0,
           (OS_OPT) (OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
           (OS_ERR     *) &err);
  if (err != OS_ERR_NONE)
 8001432:	88fb      	ldrh	r3, [r7, #6]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d002      	beq.n	800143e <AppTaskCreate+0x82>
    APP_TRACE_DBG ("Error OSTaskCreate: AppTaskCreate(LED)\n");
 8001438:	480c      	ldr	r0, [pc, #48]	; (800146c <AppTaskCreate+0xb0>)
 800143a:	f007 f9f9 	bl	8008830 <puts>
               (OS_OPT) (OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
               (OS_ERR     *) &err);
      if (err != OS_ERR_NONE)
        APP_TRACE_DBG ("Error OSTaskCreate: AppTaskCreate(LED)\n");
*/
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20001364 	.word	0x20001364
 800144c:	080018dd 	.word	0x080018dd
 8001450:	0800e62c 	.word	0x0800e62c
 8001454:	20001764 	.word	0x20001764
 8001458:	0800e634 	.word	0x0800e634
 800145c:	20000ea4 	.word	0x20000ea4
 8001460:	08001471 	.word	0x08001471
 8001464:	0800e658 	.word	0x0800e658
 8001468:	200012a4 	.word	0x200012a4
 800146c:	0800e660 	.word	0x0800e660

08001470 <AppTaskLED>:
    }
  }
*/

void AppTaskLED(void *p_arg)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b09c      	sub	sp, #112	; 0x70
 8001474:	af02      	add	r7, sp, #8
 8001476:	6078      	str	r0, [r7, #4]
  void        *errmem = NULL;
 8001478:	2300      	movs	r3, #0
 800147a:	667b      	str	r3, [r7, #100]	; 0x64
  void        *p_msg;
  OS_MSG_SIZE msg_size;
  uint16_t    dutycycle;
  char        data[MAX_MSG_LENGTH];
  char        *pEnd;
  _Bool       ret = false;
 800147c:	2300      	movs	r3, #0
 800147e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
  uint8_t reg_val = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  char  compG00[] = "G00";
 8001488:	4bb8      	ldr	r3, [pc, #736]	; (800176c <AppTaskLED+0x2fc>)
 800148a:	613b      	str	r3, [r7, #16]
  char  compG01[] = "G01";
 800148c:	4bb8      	ldr	r3, [pc, #736]	; (8001770 <AppTaskLED+0x300>)
 800148e:	60fb      	str	r3, [r7, #12]
  uint8_t   countsteps = 255;
 8001490:	23ff      	movs	r3, #255	; 0xff
 8001492:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
  uint8_t   dir_x = 0x00;
 8001496:	2300      	movs	r3, #0
 8001498:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
  uint8_t   dir_y = 0x00;
 800149c:	2300      	movs	r3, #0
 800149e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
  uint8_t   dir_xy = 0x00;
 80014a2:	2300      	movs	r3, #0
 80014a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  int   x_axis_mov = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	65bb      	str	r3, [r7, #88]	; 0x58
  int   x_axis_curr = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	657b      	str	r3, [r7, #84]	; 0x54
  int   x_axis_end = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	647b      	str	r3, [r7, #68]	; 0x44
  int   y_axis_mov = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	653b      	str	r3, [r7, #80]	; 0x50
  int   y_axis_curr = 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  int   y_axis_end = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	643b      	str	r3, [r7, #64]	; 0x40

  // PEN UP and move to the 0-0-pos
  BSP_PWM_SetPen(1);
 80014c0:	2001      	movs	r0, #1
 80014c2:	f006 f911 	bl	80076e8 <BSP_PWM_SetPen>
  OSTimeDlyHMSM(0,0,0,100,OS_OPT_TIME_HMSM_STRICT, &err);
 80014c6:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80014ca:	9301      	str	r3, [sp, #4]
 80014cc:	2300      	movs	r3, #0
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	2364      	movs	r3, #100	; 0x64
 80014d2:	2200      	movs	r2, #0
 80014d4:	2100      	movs	r1, #0
 80014d6:	2000      	movs	r0, #0
 80014d8:	f001 ff1c 	bl	8003314 <OSTimeDlyHMSM>
  if(err != OS_ERR_NONE)
 80014dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d002      	beq.n	80014e8 <AppTaskLED+0x78>
    APP_TRACE_DBG ("Error TimeDelay: AppTaskMOVE\n");
 80014e2:	48a4      	ldr	r0, [pc, #656]	; (8001774 <AppTaskLED+0x304>)
 80014e4:	f007 f9a4 	bl	8008830 <puts>
  // Set the output of the pen OFF
  BSP_PWM_SetPen(3);
 80014e8:	2003      	movs	r0, #3
 80014ea:	f006 f8fd 	bl	80076e8 <BSP_PWM_SetPen>
  while(XMC_GPIO_GetInput(D5)||XMC_GPIO_GetInput(D7))
 80014ee:	e047      	b.n	8001580 <AppTaskLED+0x110>
  {
    dir_xy = 0x00;
 80014f0:	2300      	movs	r3, #0
 80014f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    _mcp23s08_reset_ss(MCP23S08_SS);
 80014f6:	2102      	movs	r1, #2
 80014f8:	489f      	ldr	r0, [pc, #636]	; (8001778 <AppTaskLED+0x308>)
 80014fa:	f004 fe9c 	bl	8006236 <_mcp23s08_reset_ss>
    _mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,dir_xy,MCP23S08_WR);
 80014fe:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8001502:	2300      	movs	r3, #0
 8001504:	2109      	movs	r1, #9
 8001506:	489d      	ldr	r0, [pc, #628]	; (800177c <AppTaskLED+0x30c>)
 8001508:	f004 fec6 	bl	8006298 <_mcp23s08_reg_xfer>
    _mcp23s08_set_ss(MCP23S08_SS);
 800150c:	2102      	movs	r1, #2
 800150e:	489a      	ldr	r0, [pc, #616]	; (8001778 <AppTaskLED+0x308>)
 8001510:	f004 fea1 	bl	8006256 <_mcp23s08_set_ss>

    while(countsteps!=0)
 8001514:	e004      	b.n	8001520 <AppTaskLED+0xb0>
      countsteps--;
 8001516:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800151a:	3b01      	subs	r3, #1
 800151c:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
    while(countsteps!=0)
 8001520:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1f6      	bne.n	8001516 <AppTaskLED+0xa6>
    countsteps = 255;
 8001528:	23ff      	movs	r3, #255	; 0xff
 800152a:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62

    if(XMC_GPIO_GetInput(D7))
 800152e:	210e      	movs	r1, #14
 8001530:	4891      	ldr	r0, [pc, #580]	; (8001778 <AppTaskLED+0x308>)
 8001532:	f7ff fe59 	bl	80011e8 <XMC_GPIO_GetInput>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d005      	beq.n	8001548 <AppTaskLED+0xd8>
      dir_xy = dir_xy | X_MINUS_PLOT_HIGH;
 800153c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001540:	f043 0308 	orr.w	r3, r3, #8
 8001544:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if(XMC_GPIO_GetInput(D5))
 8001548:	210f      	movs	r1, #15
 800154a:	488b      	ldr	r0, [pc, #556]	; (8001778 <AppTaskLED+0x308>)
 800154c:	f7ff fe4c 	bl	80011e8 <XMC_GPIO_GetInput>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d005      	beq.n	8001562 <AppTaskLED+0xf2>
      dir_xy = dir_xy | Y_MINUS_PLOT_HIGH;
 8001556:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800155a:	f043 0302 	orr.w	r3, r3, #2
 800155e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    _mcp23s08_reset_ss(MCP23S08_SS);
 8001562:	2102      	movs	r1, #2
 8001564:	4884      	ldr	r0, [pc, #528]	; (8001778 <AppTaskLED+0x308>)
 8001566:	f004 fe66 	bl	8006236 <_mcp23s08_reset_ss>
    _mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,dir_xy,MCP23S08_WR);
 800156a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800156e:	2300      	movs	r3, #0
 8001570:	2109      	movs	r1, #9
 8001572:	4882      	ldr	r0, [pc, #520]	; (800177c <AppTaskLED+0x30c>)
 8001574:	f004 fe90 	bl	8006298 <_mcp23s08_reg_xfer>
    _mcp23s08_set_ss(MCP23S08_SS);
 8001578:	2102      	movs	r1, #2
 800157a:	487f      	ldr	r0, [pc, #508]	; (8001778 <AppTaskLED+0x308>)
 800157c:	f004 fe6b 	bl	8006256 <_mcp23s08_set_ss>
  while(XMC_GPIO_GetInput(D5)||XMC_GPIO_GetInput(D7))
 8001580:	210f      	movs	r1, #15
 8001582:	487d      	ldr	r0, [pc, #500]	; (8001778 <AppTaskLED+0x308>)
 8001584:	f7ff fe30 	bl	80011e8 <XMC_GPIO_GetInput>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1b0      	bne.n	80014f0 <AppTaskLED+0x80>
 800158e:	210e      	movs	r1, #14
 8001590:	4879      	ldr	r0, [pc, #484]	; (8001778 <AppTaskLED+0x308>)
 8001592:	f7ff fe29 	bl	80011e8 <XMC_GPIO_GetInput>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1a9      	bne.n	80014f0 <AppTaskLED+0x80>
  }
  while(DEF_TRUE)
  {
    errno = 0;
 800159c:	f007 f872 	bl	8008684 <__errno>
 80015a0:	4602      	mov	r2, r0
 80015a2:	2300      	movs	r3, #0
 80015a4:	6013      	str	r3, [r2, #0]
    errmem = memset(&data[0], 0, MAX_MSG_LENGTH);
 80015a6:	f107 0318 	add.w	r3, r7, #24
 80015aa:	2214      	movs	r2, #20
 80015ac:	2100      	movs	r1, #0
 80015ae:	4618      	mov	r0, r3
 80015b0:	f007 f892 	bl	80086d8 <memset>
 80015b4:	6678      	str	r0, [r7, #100]	; 0x64
    if(errmem != &data)
 80015b6:	f107 0318 	add.w	r3, r7, #24
 80015ba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80015bc:	429a      	cmp	r2, r3
 80015be:	d002      	beq.n	80015c6 <AppTaskLED+0x156>
      APP_TRACE_DBG ("Error memset: AppTaskLED\n");
 80015c0:	486f      	ldr	r0, [pc, #444]	; (8001780 <AppTaskLED+0x310>)
 80015c2:	f007 f935 	bl	8008830 <puts>

    p_msg = OSQPend (&DUTY_QUEUE,                                          // <16>
 80015c6:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 80015ca:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80015ce:	9301      	str	r3, [sp, #4]
 80015d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	4613      	mov	r3, r2
 80015d8:	2200      	movs	r2, #0
 80015da:	2100      	movs	r1, #0
 80015dc:	4869      	ldr	r0, [pc, #420]	; (8001784 <AppTaskLED+0x314>)
 80015de:	f004 fa95 	bl	8005b0c <OSQPend>
 80015e2:	63f8      	str	r0, [r7, #60]	; 0x3c
          0,
          OS_OPT_PEND_BLOCKING,
          &msg_size,
          &ts,
          &err);
    if (err != OS_ERR_NONE)
 80015e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d002      	beq.n	80015f0 <AppTaskLED+0x180>
      APP_TRACE_DBG ("Error OSQPend: AppTaskLED\n");
 80015ea:	4867      	ldr	r0, [pc, #412]	; (8001788 <AppTaskLED+0x318>)
 80015ec:	f007 f920 	bl	8008830 <puts>

    if(msg_size < 20)
 80015f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80015f2:	2b13      	cmp	r3, #19
 80015f4:	d80a      	bhi.n	800160c <AppTaskLED+0x19c>
      errmem = memcpy (data, p_msg, msg_size - 1);
 80015f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80015f8:	3b01      	subs	r3, #1
 80015fa:	461a      	mov	r2, r3
 80015fc:	f107 0318 	add.w	r3, r7, #24
 8001600:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff f802 	bl	800060c <memcpy>
 8001608:	6678      	str	r0, [r7, #100]	; 0x64
 800160a:	e002      	b.n	8001612 <AppTaskLED+0x1a2>
    else
      APP_TRACE_DBG ("Error msg_size/memcpy: AppTaskLED\n");
 800160c:	485f      	ldr	r0, [pc, #380]	; (800178c <AppTaskLED+0x31c>)
 800160e:	f007 f90f 	bl	8008830 <puts>
    if(errmem != &data)
 8001612:	f107 0318 	add.w	r3, r7, #24
 8001616:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001618:	429a      	cmp	r2, r3
 800161a:	d002      	beq.n	8001622 <AppTaskLED+0x1b2>
      APP_TRACE_DBG ("Error memcpy: AppTaskLED\n");
 800161c:	485c      	ldr	r0, [pc, #368]	; (8001790 <AppTaskLED+0x320>)
 800161e:	f007 f907 	bl	8008830 <puts>

    char *token = strtok(data, " ");
 8001622:	f107 0318 	add.w	r3, r7, #24
 8001626:	495b      	ldr	r1, [pc, #364]	; (8001794 <AppTaskLED+0x324>)
 8001628:	4618      	mov	r0, r3
 800162a:	f007 f977 	bl	800891c <strtok>
 800162e:	63b8      	str	r0, [r7, #56]	; 0x38

    if(strncmp(data, compG00, 3) == 0)           // timer on and pen UP
 8001630:	f107 0110 	add.w	r1, r7, #16
 8001634:	f107 0318 	add.w	r3, r7, #24
 8001638:	2203      	movs	r2, #3
 800163a:	4618      	mov	r0, r3
 800163c:	f007 f922 	bl	8008884 <strncmp>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d105      	bne.n	8001652 <AppTaskLED+0x1e2>
      ret = BSP_PWM_SetPen(1);
 8001646:	2001      	movs	r0, #1
 8001648:	f006 f84e 	bl	80076e8 <BSP_PWM_SetPen>
 800164c:	4603      	mov	r3, r0
 800164e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
    if(strncmp(data, compG01, 3) == 0)           // timer on and pen DOWN
 8001652:	f107 010c 	add.w	r1, r7, #12
 8001656:	f107 0318 	add.w	r3, r7, #24
 800165a:	2203      	movs	r2, #3
 800165c:	4618      	mov	r0, r3
 800165e:	f007 f911 	bl	8008884 <strncmp>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d105      	bne.n	8001674 <AppTaskLED+0x204>
      ret = BSP_PWM_SetPen(2);
 8001668:	2002      	movs	r0, #2
 800166a:	f006 f83d 	bl	80076e8 <BSP_PWM_SetPen>
 800166e:	4603      	mov	r3, r0
 8001670:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
    if(!ret)
 8001674:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001678:	f083 0301 	eor.w	r3, r3, #1
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	d002      	beq.n	8001688 <AppTaskLED+0x218>
      APP_TRACE_DBG ("Error returnval: AppTaskLED\n");
 8001682:	4845      	ldr	r0, [pc, #276]	; (8001798 <AppTaskLED+0x328>)
 8001684:	f007 f8d4 	bl	8008830 <puts>

    // Wait 100ms to move the PEN
    OSTimeDlyHMSM(0,0,0,100,OS_OPT_TIME_HMSM_STRICT, &err);
 8001688:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800168c:	9301      	str	r3, [sp, #4]
 800168e:	2300      	movs	r3, #0
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	2364      	movs	r3, #100	; 0x64
 8001694:	2200      	movs	r2, #0
 8001696:	2100      	movs	r1, #0
 8001698:	2000      	movs	r0, #0
 800169a:	f001 fe3b 	bl	8003314 <OSTimeDlyHMSM>
    if(err != OS_ERR_NONE)
 800169e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d002      	beq.n	80016aa <AppTaskLED+0x23a>
      APP_TRACE_DBG ("Error TimeDelay: AppTaskMOVE\n");
 80016a4:	4833      	ldr	r0, [pc, #204]	; (8001774 <AppTaskLED+0x304>)
 80016a6:	f007 f8c3 	bl	8008830 <puts>
    // Set the output of the pen OFF
    ret = BSP_PWM_SetPen(3);
 80016aa:	2003      	movs	r0, #3
 80016ac:	f006 f81c 	bl	80076e8 <BSP_PWM_SetPen>
 80016b0:	4603      	mov	r3, r0
 80016b2:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
    if(!ret)
 80016b6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80016ba:	f083 0301 	eor.w	r3, r3, #1
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d002      	beq.n	80016ca <AppTaskLED+0x25a>
      APP_TRACE_DBG ("Error returnval: AppTaskLED\n");
 80016c4:	4834      	ldr	r0, [pc, #208]	; (8001798 <AppTaskLED+0x328>)
 80016c6:	f007 f8b3 	bl	8008830 <puts>

    token = strtok(NULL, " ");
 80016ca:	4932      	ldr	r1, [pc, #200]	; (8001794 <AppTaskLED+0x324>)
 80016cc:	2000      	movs	r0, #0
 80016ce:	f007 f925 	bl	800891c <strtok>
 80016d2:	63b8      	str	r0, [r7, #56]	; 0x38
    x_axis_end = strtol(token, &pEnd,10);
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	220a      	movs	r2, #10
 80016da:	4619      	mov	r1, r3
 80016dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80016de:	f007 f9e9 	bl	8008ab4 <strtol>
 80016e2:	6478      	str	r0, [r7, #68]	; 0x44
    token = strtok(NULL, " ");
 80016e4:	492b      	ldr	r1, [pc, #172]	; (8001794 <AppTaskLED+0x324>)
 80016e6:	2000      	movs	r0, #0
 80016e8:	f007 f918 	bl	800891c <strtok>
 80016ec:	63b8      	str	r0, [r7, #56]	; 0x38
    y_axis_end = strtol(token, &pEnd,10);
 80016ee:	f107 0314 	add.w	r3, r7, #20
 80016f2:	220a      	movs	r2, #10
 80016f4:	4619      	mov	r1, r3
 80016f6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80016f8:	f007 f9dc 	bl	8008ab4 <strtol>
 80016fc:	6438      	str	r0, [r7, #64]	; 0x40

    if((x_axis_end - x_axis_curr)==0) // next point is equally
 80016fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001700:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001702:	429a      	cmp	r2, r3
 8001704:	d101      	bne.n	800170a <AppTaskLED+0x29a>
      x_axis_mov = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	65bb      	str	r3, [r7, #88]	; 0x58
    if((x_axis_end - x_axis_curr)<0)  // go in direction left --> minus
 800170a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800170c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b00      	cmp	r3, #0
 8001712:	da05      	bge.n	8001720 <AppTaskLED+0x2b0>
    {
      x_axis_mov = -1;
 8001714:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001718:	65bb      	str	r3, [r7, #88]	; 0x58
      dir_x = X_MINUS_PLOT_HIGH;
 800171a:	2308      	movs	r3, #8
 800171c:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
    }
    if((x_axis_end - x_axis_curr)>0)  // go in direction right --> plus
 8001720:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001722:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	dd04      	ble.n	8001734 <AppTaskLED+0x2c4>
    {
      x_axis_mov = 1;
 800172a:	2301      	movs	r3, #1
 800172c:	65bb      	str	r3, [r7, #88]	; 0x58
      dir_x = X_PLUS_PLOT_HIGH;
 800172e:	230c      	movs	r3, #12
 8001730:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
    }

    if((y_axis_end - y_axis_curr)==0) // next point is equally
 8001734:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001738:	429a      	cmp	r2, r3
 800173a:	d101      	bne.n	8001740 <AppTaskLED+0x2d0>
      y_axis_mov = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	653b      	str	r3, [r7, #80]	; 0x50
    if((x_axis_end - y_axis_curr)<0)  // go "up" --> minus
 8001740:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b00      	cmp	r3, #0
 8001748:	da05      	bge.n	8001756 <AppTaskLED+0x2e6>
    {
      y_axis_mov = -1;
 800174a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800174e:	653b      	str	r3, [r7, #80]	; 0x50
      dir_y = Y_MINUS_PLOT_HIGH;
 8001750:	2302      	movs	r3, #2
 8001752:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
    }
    if((y_axis_end - y_axis_curr)>0)  // go "down" --> plus
 8001756:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b00      	cmp	r3, #0
 800175e:	dd65      	ble.n	800182c <AppTaskLED+0x3bc>
    {
      y_axis_mov = 1;
 8001760:	2301      	movs	r3, #1
 8001762:	653b      	str	r3, [r7, #80]	; 0x50
      dir_y = Y_PLUS_PLOT_HIGH;
 8001764:	2303      	movs	r3, #3
 8001766:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
    }
    // multiply number of g-code 200
    // move pen x axis
    while(x_axis_mov!=0)
 800176a:	e05f      	b.n	800182c <AppTaskLED+0x3bc>
 800176c:	00303047 	.word	0x00303047
 8001770:	00313047 	.word	0x00313047
 8001774:	0800e688 	.word	0x0800e688
 8001778:	48028100 	.word	0x48028100
 800177c:	48020000 	.word	0x48020000
 8001780:	0800e6a8 	.word	0x0800e6a8
 8001784:	20001a58 	.word	0x20001a58
 8001788:	0800e6c4 	.word	0x0800e6c4
 800178c:	0800e6e0 	.word	0x0800e6e0
 8001790:	0800e704 	.word	0x0800e704
 8001794:	0800e720 	.word	0x0800e720
 8001798:	0800e724 	.word	0x0800e724
    {
      if(((XMC_GPIO_GetInput(D7) == 0)&&(x_axis_mov==-1))||((XMC_GPIO_GetInput(D8) == 0)&&(x_axis_mov==1))||(x_axis_curr == x_axis_end))//(x_axis_curr == x_axis_end)
 800179c:	210e      	movs	r1, #14
 800179e:	484c      	ldr	r0, [pc, #304]	; (80018d0 <AppTaskLED+0x460>)
 80017a0:	f7ff fd22 	bl	80011e8 <XMC_GPIO_GetInput>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d104      	bne.n	80017b4 <AppTaskLED+0x344>
 80017aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017b0:	f000 8087 	beq.w	80018c2 <AppTaskLED+0x452>
 80017b4:	210c      	movs	r1, #12
 80017b6:	4846      	ldr	r0, [pc, #280]	; (80018d0 <AppTaskLED+0x460>)
 80017b8:	f7ff fd16 	bl	80011e8 <XMC_GPIO_GetInput>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d102      	bne.n	80017c8 <AppTaskLED+0x358>
 80017c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d07c      	beq.n	80018c2 <AppTaskLED+0x452>
 80017c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80017ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d078      	beq.n	80018c2 <AppTaskLED+0x452>
        break;
      x_axis_curr+=x_axis_mov;
 80017d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80017d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017d4:	4413      	add	r3, r2
 80017d6:	657b      	str	r3, [r7, #84]	; 0x54
      _mcp23s08_reset_ss(MCP23S08_SS);
 80017d8:	2102      	movs	r1, #2
 80017da:	483d      	ldr	r0, [pc, #244]	; (80018d0 <AppTaskLED+0x460>)
 80017dc:	f004 fd2b 	bl	8006236 <_mcp23s08_reset_ss>
      _mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,0x00,MCP23S08_WR);
 80017e0:	2300      	movs	r3, #0
 80017e2:	2200      	movs	r2, #0
 80017e4:	2109      	movs	r1, #9
 80017e6:	483b      	ldr	r0, [pc, #236]	; (80018d4 <AppTaskLED+0x464>)
 80017e8:	f004 fd56 	bl	8006298 <_mcp23s08_reg_xfer>
      _mcp23s08_set_ss(MCP23S08_SS);
 80017ec:	2102      	movs	r1, #2
 80017ee:	4838      	ldr	r0, [pc, #224]	; (80018d0 <AppTaskLED+0x460>)
 80017f0:	f004 fd31 	bl	8006256 <_mcp23s08_set_ss>

      while(countsteps!=0)
 80017f4:	e004      	b.n	8001800 <AppTaskLED+0x390>
        countsteps--;
 80017f6:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80017fa:	3b01      	subs	r3, #1
 80017fc:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
      while(countsteps!=0)
 8001800:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1f6      	bne.n	80017f6 <AppTaskLED+0x386>
      countsteps = 255;
 8001808:	23ff      	movs	r3, #255	; 0xff
 800180a:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62

      _mcp23s08_reset_ss(MCP23S08_SS);
 800180e:	2102      	movs	r1, #2
 8001810:	482f      	ldr	r0, [pc, #188]	; (80018d0 <AppTaskLED+0x460>)
 8001812:	f004 fd10 	bl	8006236 <_mcp23s08_reset_ss>
      _mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,dir_x,MCP23S08_WR);
 8001816:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 800181a:	2300      	movs	r3, #0
 800181c:	2109      	movs	r1, #9
 800181e:	482d      	ldr	r0, [pc, #180]	; (80018d4 <AppTaskLED+0x464>)
 8001820:	f004 fd3a 	bl	8006298 <_mcp23s08_reg_xfer>
      _mcp23s08_set_ss(MCP23S08_SS);
 8001824:	2102      	movs	r1, #2
 8001826:	482a      	ldr	r0, [pc, #168]	; (80018d0 <AppTaskLED+0x460>)
 8001828:	f004 fd15 	bl	8006256 <_mcp23s08_set_ss>
    while(x_axis_mov!=0)
 800182c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1b4      	bne.n	800179c <AppTaskLED+0x32c>
    }
    // move pen y axis
    while(y_axis_mov!=0)
 8001832:	e046      	b.n	80018c2 <AppTaskLED+0x452>
    {
      if(((XMC_GPIO_GetInput(D5) == 0)&&(y_axis_mov==-1))||((XMC_GPIO_GetInput(D6) == 0)&&(y_axis_mov==1))||(y_axis_curr == y_axis_end))//(y_axis_curr == y_axis_end)//
 8001834:	210f      	movs	r1, #15
 8001836:	4826      	ldr	r0, [pc, #152]	; (80018d0 <AppTaskLED+0x460>)
 8001838:	f7ff fcd6 	bl	80011e8 <XMC_GPIO_GetInput>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d103      	bne.n	800184a <AppTaskLED+0x3da>
 8001842:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001844:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001848:	d03e      	beq.n	80018c8 <AppTaskLED+0x458>
 800184a:	210d      	movs	r1, #13
 800184c:	4820      	ldr	r0, [pc, #128]	; (80018d0 <AppTaskLED+0x460>)
 800184e:	f7ff fccb 	bl	80011e8 <XMC_GPIO_GetInput>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d102      	bne.n	800185e <AppTaskLED+0x3ee>
 8001858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800185a:	2b01      	cmp	r3, #1
 800185c:	d034      	beq.n	80018c8 <AppTaskLED+0x458>
 800185e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001862:	429a      	cmp	r2, r3
 8001864:	d030      	beq.n	80018c8 <AppTaskLED+0x458>
        break;
      y_axis_curr+=y_axis_mov;
 8001866:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001868:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800186a:	4413      	add	r3, r2
 800186c:	64fb      	str	r3, [r7, #76]	; 0x4c
      _mcp23s08_reset_ss(MCP23S08_SS);
 800186e:	2102      	movs	r1, #2
 8001870:	4817      	ldr	r0, [pc, #92]	; (80018d0 <AppTaskLED+0x460>)
 8001872:	f004 fce0 	bl	8006236 <_mcp23s08_reset_ss>
      _mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,0x00,MCP23S08_WR);
 8001876:	2300      	movs	r3, #0
 8001878:	2200      	movs	r2, #0
 800187a:	2109      	movs	r1, #9
 800187c:	4815      	ldr	r0, [pc, #84]	; (80018d4 <AppTaskLED+0x464>)
 800187e:	f004 fd0b 	bl	8006298 <_mcp23s08_reg_xfer>
      _mcp23s08_set_ss(MCP23S08_SS);
 8001882:	2102      	movs	r1, #2
 8001884:	4812      	ldr	r0, [pc, #72]	; (80018d0 <AppTaskLED+0x460>)
 8001886:	f004 fce6 	bl	8006256 <_mcp23s08_set_ss>

      while(countsteps!=0)
 800188a:	e004      	b.n	8001896 <AppTaskLED+0x426>
        countsteps--;
 800188c:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8001890:	3b01      	subs	r3, #1
 8001892:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
      while(countsteps!=0)
 8001896:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f6      	bne.n	800188c <AppTaskLED+0x41c>
      countsteps = 255;
 800189e:	23ff      	movs	r3, #255	; 0xff
 80018a0:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62

      _mcp23s08_reset_ss(MCP23S08_SS);
 80018a4:	2102      	movs	r1, #2
 80018a6:	480a      	ldr	r0, [pc, #40]	; (80018d0 <AppTaskLED+0x460>)
 80018a8:	f004 fcc5 	bl	8006236 <_mcp23s08_reset_ss>
      _mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,dir_y,MCP23S08_WR);
 80018ac:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80018b0:	2300      	movs	r3, #0
 80018b2:	2109      	movs	r1, #9
 80018b4:	4807      	ldr	r0, [pc, #28]	; (80018d4 <AppTaskLED+0x464>)
 80018b6:	f004 fcef 	bl	8006298 <_mcp23s08_reg_xfer>
      _mcp23s08_set_ss(MCP23S08_SS);
 80018ba:	2102      	movs	r1, #2
 80018bc:	4804      	ldr	r0, [pc, #16]	; (80018d0 <AppTaskLED+0x460>)
 80018be:	f004 fcca 	bl	8006256 <_mcp23s08_set_ss>
    while(y_axis_mov!=0)
 80018c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1b5      	bne.n	8001834 <AppTaskLED+0x3c4>
    }

    APP_TRACE_DBG ("Led Task\n");
 80018c8:	4803      	ldr	r0, [pc, #12]	; (80018d8 <AppTaskLED+0x468>)
 80018ca:	f006 ffb1 	bl	8008830 <puts>
  {
 80018ce:	e665      	b.n	800159c <AppTaskLED+0x12c>
 80018d0:	48028100 	.word	0x48028100
 80018d4:	48020000 	.word	0x48020000
 80018d8:	0800e740 	.word	0x0800e740

080018dc <AppTaskCom>:
 *        (3) Launch a terminal program and connect with 9600-8N1
 *            Enter strings like: #12345$, #abc$, etc.
 *            The XMC will respond with: XMC: 12345, XMC: abc, etc.
 */
static void AppTaskCom (void *p_arg)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b0a0      	sub	sp, #128	; 0x80
 80018e0:	af02      	add	r7, sp, #8
 80018e2:	6078      	str	r0, [r7, #4]
  void        *errmem = NULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	677b      	str	r3, [r7, #116]	; 0x74
  void        *p_msg;
  OS_ERR      err;
  OS_MSG_SIZE msg_size;
  CPU_TS      ts;
  CPU_CHAR    msg[MAX_MSG_LENGTH];
  CPU_INT08U  i = 0;
 80018e8:	2300      	movs	r3, #0
 80018ea:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  CPU_CHAR    debug_msg[MAX_MSG_LENGTH + 30];
  CPU_CHAR    CommRxBuf[MAX_MSG_LENGTH];
  (void) p_arg;                                                          // <14>
  APP_TRACE_INFO ("Entering AppTaskCom ...\n");
 80018ee:	4871      	ldr	r0, [pc, #452]	; (8001ab4 <AppTaskCom+0x1d8>)
 80018f0:	f006 ff9e 	bl	8008830 <puts>
  while (DEF_TRUE) {
    // empty the message buffer
    errmem = memset (&msg[0], 0, MAX_MSG_LENGTH);
 80018f4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018f8:	2214      	movs	r2, #20
 80018fa:	2100      	movs	r1, #0
 80018fc:	4618      	mov	r0, r3
 80018fe:	f006 feeb 	bl	80086d8 <memset>
 8001902:	6778      	str	r0, [r7, #116]	; 0x74
    if(errmem != &msg)
 8001904:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001908:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800190a:	429a      	cmp	r2, r3
 800190c:	d002      	beq.n	8001914 <AppTaskCom+0x38>
      APP_TRACE_DBG ("Error memset: AppTaskCom\n");
 800190e:	486a      	ldr	r0, [pc, #424]	; (8001ab8 <AppTaskCom+0x1dc>)
 8001910:	f006 ff8e 	bl	8008830 <puts>
    // wait until a message is received
    p_msg = OSQPend (&UART_ISR,                                          // <16>
 8001914:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001918:	f107 036a 	add.w	r3, r7, #106	; 0x6a
 800191c:	9301      	str	r3, [sp, #4]
 800191e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	4613      	mov	r3, r2
 8001926:	2200      	movs	r2, #0
 8001928:	2100      	movs	r1, #0
 800192a:	4864      	ldr	r0, [pc, #400]	; (8001abc <AppTaskCom+0x1e0>)
 800192c:	f004 f8ee 	bl	8005b0c <OSQPend>
 8001930:	66f8      	str	r0, [r7, #108]	; 0x6c
         0,
         OS_OPT_PEND_BLOCKING,
         &msg_size,
         &ts,
         &err);
    if (err != OS_ERR_NONE)
 8001932:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001936:	2b00      	cmp	r3, #0
 8001938:	d002      	beq.n	8001940 <AppTaskCom+0x64>
      APP_TRACE_DBG ("Error OSQPend: AppTaskCom\n");
 800193a:	4861      	ldr	r0, [pc, #388]	; (8001ac0 <AppTaskCom+0x1e4>)
 800193c:	f006 ff78 	bl	8008830 <puts>

    // obtain message we received
    if(msg_size < 20)
 8001940:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001944:	2b13      	cmp	r3, #19
 8001946:	d807      	bhi.n	8001958 <AppTaskCom+0x7c>
      errmem = memset (&CommRxBuf[0], 0, MAX_MSG_LENGTH);
 8001948:	f107 0308 	add.w	r3, r7, #8
 800194c:	2214      	movs	r2, #20
 800194e:	2100      	movs	r1, #0
 8001950:	4618      	mov	r0, r3
 8001952:	f006 fec1 	bl	80086d8 <memset>
 8001956:	6778      	str	r0, [r7, #116]	; 0x74
    if((errmem != &CommRxBuf) || (msg_size > 19))
 8001958:	f107 0308 	add.w	r3, r7, #8
 800195c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800195e:	429a      	cmp	r2, r3
 8001960:	d103      	bne.n	800196a <AppTaskCom+0x8e>
 8001962:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001966:	2b13      	cmp	r3, #19
 8001968:	d902      	bls.n	8001970 <AppTaskCom+0x94>
      APP_TRACE_DBG ("Error memset: AppTaskCom\n");
 800196a:	4853      	ldr	r0, [pc, #332]	; (8001ab8 <AppTaskCom+0x1dc>)
 800196c:	f006 ff60 	bl	8008830 <puts>

    if(msg_size < 20)
 8001970:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001974:	2b13      	cmp	r3, #19
 8001976:	d80a      	bhi.n	800198e <AppTaskCom+0xb2>
      errmem = memcpy (msg, (CPU_CHAR*) p_msg, msg_size - 1);
 8001978:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800197c:	3b01      	subs	r3, #1
 800197e:	461a      	mov	r2, r3
 8001980:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001984:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001986:	4618      	mov	r0, r3
 8001988:	f7fe fe40 	bl	800060c <memcpy>
 800198c:	6778      	str	r0, [r7, #116]	; 0x74
    if((errmem != &msg) || (msg_size > 19))
 800198e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001992:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001994:	429a      	cmp	r2, r3
 8001996:	d103      	bne.n	80019a0 <AppTaskCom+0xc4>
 8001998:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800199c:	2b13      	cmp	r3, #19
 800199e:	d902      	bls.n	80019a6 <AppTaskCom+0xca>
      APP_TRACE_DBG ("Error memcpy: AppTaskCom\n");
 80019a0:	4848      	ldr	r0, [pc, #288]	; (8001ac4 <AppTaskCom+0x1e8>)
 80019a2:	f006 ff45 	bl	8008830 <puts>

    if(msg_size < 20)
 80019a6:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80019aa:	2b13      	cmp	r3, #19
 80019ac:	d80a      	bhi.n	80019c4 <AppTaskCom+0xe8>
      errmem = memcpy (CommRxBuf, (CPU_CHAR*) p_msg, msg_size - 1);
 80019ae:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80019b2:	3b01      	subs	r3, #1
 80019b4:	461a      	mov	r2, r3
 80019b6:	f107 0308 	add.w	r3, r7, #8
 80019ba:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80019bc:	4618      	mov	r0, r3
 80019be:	f7fe fe25 	bl	800060c <memcpy>
 80019c2:	6778      	str	r0, [r7, #116]	; 0x74
    if((errmem != &CommRxBuf) || (msg_size > 19))
 80019c4:	f107 0308 	add.w	r3, r7, #8
 80019c8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d103      	bne.n	80019d6 <AppTaskCom+0xfa>
 80019ce:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80019d2:	2b13      	cmp	r3, #19
 80019d4:	d902      	bls.n	80019dc <AppTaskCom+0x100>
      APP_TRACE_DBG ("Error memcpy: AppTaskCom\n");                     // <17>
 80019d6:	483b      	ldr	r0, [pc, #236]	; (8001ac4 <AppTaskCom+0x1e8>)
 80019d8:	f006 ff2a 	bl	8008830 <puts>
    // release the memory partition allocated in the UART service routine
    OSMemPut (&Mem_Partition, p_msg, &err);                              // <18>
 80019dc:	f107 036a 	add.w	r3, r7, #106	; 0x6a
 80019e0:	461a      	mov	r2, r3
 80019e2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80019e4:	4838      	ldr	r0, [pc, #224]	; (8001ac8 <AppTaskCom+0x1ec>)
 80019e6:	f000 fc7f 	bl	80022e8 <OSMemPut>
    if (err != OS_ERR_NONE)
 80019ea:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d002      	beq.n	80019f8 <AppTaskCom+0x11c>
      APP_TRACE_DBG ("Error OSMemPut: AppTaskCom\n");
 80019f2:	4836      	ldr	r0, [pc, #216]	; (8001acc <AppTaskCom+0x1f0>)
 80019f4:	f006 ff1c 	bl	8008830 <puts>

    // send ACK in return
    XMC_UART_CH_Transmit (XMC_UART1_CH1, ACK);                           // <19>
 80019f8:	2106      	movs	r1, #6
 80019fa:	4835      	ldr	r0, [pc, #212]	; (8001ad0 <AppTaskCom+0x1f4>)
 80019fc:	f006 fb73 	bl	80080e6 <XMC_UART_CH_Transmit>

    // print the received message to the debug interface
    sprintf (debug_msg, "Msg: %s\tLength: %d\n", msg, msg_size - 1);     // <20>
 8001a00:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001a04:	3b01      	subs	r3, #1
 8001a06:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001a0a:	f107 001c 	add.w	r0, r7, #28
 8001a0e:	4931      	ldr	r1, [pc, #196]	; (8001ad4 <AppTaskCom+0x1f8>)
 8001a10:	f006 ff16 	bl	8008840 <sprintf>
    APP_TRACE_INFO (debug_msg);
 8001a14:	f107 031c 	add.w	r3, r7, #28
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f006 fea7 	bl	800876c <printf>

    // send the message to AppTaskLED to change the dutycycle
    OSQPost ( (OS_Q      *) &DUTY_QUEUE,
 8001a1e:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 8001a22:	f107 0108 	add.w	r1, r7, #8
 8001a26:	f107 036a 	add.w	r3, r7, #106	; 0x6a
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	482a      	ldr	r0, [pc, #168]	; (8001ad8 <AppTaskCom+0x1fc>)
 8001a30:	f004 f964 	bl	8005cfc <OSQPost>
      (void      *) &CommRxBuf[0],
      (OS_MSG_SIZE) msg_size,
      (OS_OPT)      OS_OPT_POST_FIFO,
      (OS_ERR    *) &err);
    if (err != OS_ERR_NONE)
 8001a34:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d002      	beq.n	8001a42 <AppTaskCom+0x166>
      APP_TRACE_DBG ("Error OSQPost: AppTaskCom\n");
 8001a3c:	4827      	ldr	r0, [pc, #156]	; (8001adc <AppTaskCom+0x200>)
 8001a3e:	f006 fef7 	bl	8008830 <puts>

    // send the received message back via the UART pre-text with "DUC: " --> Dutycycle
    XMC_UART_CH_Transmit (XMC_UART1_CH1, 'D');                           // <21>
 8001a42:	2144      	movs	r1, #68	; 0x44
 8001a44:	4822      	ldr	r0, [pc, #136]	; (8001ad0 <AppTaskCom+0x1f4>)
 8001a46:	f006 fb4e 	bl	80080e6 <XMC_UART_CH_Transmit>
    XMC_UART_CH_Transmit (XMC_UART1_CH1, 'U');
 8001a4a:	2155      	movs	r1, #85	; 0x55
 8001a4c:	4820      	ldr	r0, [pc, #128]	; (8001ad0 <AppTaskCom+0x1f4>)
 8001a4e:	f006 fb4a 	bl	80080e6 <XMC_UART_CH_Transmit>
    XMC_UART_CH_Transmit (XMC_UART1_CH1, 'C');
 8001a52:	2143      	movs	r1, #67	; 0x43
 8001a54:	481e      	ldr	r0, [pc, #120]	; (8001ad0 <AppTaskCom+0x1f4>)
 8001a56:	f006 fb46 	bl	80080e6 <XMC_UART_CH_Transmit>
    XMC_UART_CH_Transmit (XMC_UART1_CH1, ':');
 8001a5a:	213a      	movs	r1, #58	; 0x3a
 8001a5c:	481c      	ldr	r0, [pc, #112]	; (8001ad0 <AppTaskCom+0x1f4>)
 8001a5e:	f006 fb42 	bl	80080e6 <XMC_UART_CH_Transmit>
    XMC_UART_CH_Transmit (XMC_UART1_CH1, ' ');
 8001a62:	2120      	movs	r1, #32
 8001a64:	481a      	ldr	r0, [pc, #104]	; (8001ad0 <AppTaskCom+0x1f4>)
 8001a66:	f006 fb3e 	bl	80080e6 <XMC_UART_CH_Transmit>
    for (i = 0; i <= msg_size; i++) {
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8001a70:	e010      	b.n	8001a94 <AppTaskCom+0x1b8>
      XMC_UART_CH_Transmit (XMC_UART1_CH1, msg[i]);
 8001a72:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001a76:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001a7a:	4413      	add	r3, r2
 8001a7c:	f913 3c28 	ldrsb.w	r3, [r3, #-40]
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	4619      	mov	r1, r3
 8001a84:	4812      	ldr	r0, [pc, #72]	; (8001ad0 <AppTaskCom+0x1f4>)
 8001a86:	f006 fb2e 	bl	80080e6 <XMC_UART_CH_Transmit>
    for (i = 0; i <= msg_size; i++) {
 8001a8a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001a8e:	3301      	adds	r3, #1
 8001a90:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8001a94:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d9e7      	bls.n	8001a72 <AppTaskCom+0x196>
    }
    XMC_UART_CH_Transmit (XMC_UART1_CH1, '%');
 8001aa2:	2125      	movs	r1, #37	; 0x25
 8001aa4:	480a      	ldr	r0, [pc, #40]	; (8001ad0 <AppTaskCom+0x1f4>)
 8001aa6:	f006 fb1e 	bl	80080e6 <XMC_UART_CH_Transmit>
    XMC_UART_CH_Transmit (XMC_UART1_CH1, '\n');
 8001aaa:	210a      	movs	r1, #10
 8001aac:	4808      	ldr	r0, [pc, #32]	; (8001ad0 <AppTaskCom+0x1f4>)
 8001aae:	f006 fb1a 	bl	80080e6 <XMC_UART_CH_Transmit>
    errmem = memset (&msg[0], 0, MAX_MSG_LENGTH);
 8001ab2:	e71f      	b.n	80018f4 <AppTaskCom+0x18>
 8001ab4:	0800e74c 	.word	0x0800e74c
 8001ab8:	0800e764 	.word	0x0800e764
 8001abc:	20001a88 	.word	0x20001a88
 8001ac0:	0800e780 	.word	0x0800e780
 8001ac4:	0800e79c 	.word	0x0800e79c
 8001ac8:	20001ab8 	.word	0x20001ab8
 8001acc:	0800e7b8 	.word	0x0800e7b8
 8001ad0:	48020200 	.word	0x48020200
 8001ad4:	0800e7d4 	.word	0x0800e7d4
 8001ad8:	20001a58 	.word	0x20001a58
 8001adc:	0800e7e8 	.word	0x0800e7e8

08001ae0 <CPU_Init>:
*                                                   & other CPU interrupts disabled time measurement functions
*********************************************************************************************************
*/

void  CPU_Init (void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
                                                                /* --------------------- INIT TS ---------------------- */
#if ((CPU_CFG_TS_EN     == DEF_ENABLED) || \
     (CPU_CFG_TS_TMR_EN == DEF_ENABLED))
    CPU_TS_Init();                                              /* See Note #3a.                                        */
 8001ae4:	f000 f832 	bl	8001b4c <CPU_TS_Init>
    CPU_IntDisMeasInit();                                       /* See Note #3b.                                        */
#endif

                                                                /* ------------------ INIT CPU NAME ------------------- */
#if (CPU_CFG_NAME_EN == DEF_ENABLED)
     CPU_NameInit();
 8001ae8:	f000 f82a 	bl	8001b40 <CPU_NameInit>
#endif

#if (CPU_CFG_CACHE_MGMT_EN == DEF_ENABLED)
     CPU_Cache_Init();
#endif
}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <CPU_SW_Exception>:
*                   See also 'cpu_core.h  CPU_SW_EXCEPTION()  Note #1'.
*********************************************************************************************************
*/

void  CPU_SW_Exception (void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
    while (DEF_ON) {
 8001af4:	e7fe      	b.n	8001af4 <CPU_SW_Exception+0x4>
	...

08001af8 <CPU_NameClr>:
*********************************************************************************************************
*/

#if (CPU_CFG_NAME_EN == DEF_ENABLED)
void  CPU_NameClr (void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
 8001afe:	2300      	movs	r3, #0
 8001b00:	607b      	str	r3, [r7, #4]


    CPU_CRITICAL_ENTER();
 8001b02:	f7fe fbed 	bl	80002e0 <CPU_SR_Save>
 8001b06:	6078      	str	r0, [r7, #4]
    Mem_Clr((void     *)&CPU_Name[0],
 8001b08:	2110      	movs	r1, #16
 8001b0a:	4805      	ldr	r0, [pc, #20]	; (8001b20 <CPU_NameClr+0x28>)
 8001b0c:	f000 f90e 	bl	8001d2c <Mem_Clr>
            (CPU_SIZE_T) CPU_CFG_NAME_SIZE);
    CPU_CRITICAL_EXIT();
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7fe fbe9 	bl	80002e8 <CPU_SR_Restore>
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20001adc 	.word	0x20001adc

08001b24 <CPU_TS_TmrFreqSet>:
*********************************************************************************************************
*/

#if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
void  CPU_TS_TmrFreqSet (CPU_TS_TMR_FREQ  freq_hz)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
    CPU_TS_TmrFreq_Hz = freq_hz;
 8001b2c:	4a03      	ldr	r2, [pc, #12]	; (8001b3c <CPU_TS_TmrFreqSet+0x18>)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6013      	str	r3, [r2, #0]
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr
 8001b3c:	20001ad8 	.word	0x20001ad8

08001b40 <CPU_NameInit>:
*********************************************************************************************************
*/

#if (CPU_CFG_NAME_EN == DEF_ENABLED)
static  void  CPU_NameInit (void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
    CPU_NameClr();
 8001b44:	f7ff ffd8 	bl	8001af8 <CPU_NameClr>
}
 8001b48:	bf00      	nop
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <CPU_TS_Init>:
*/

#if ((CPU_CFG_TS_EN     == DEF_ENABLED) || \
     (CPU_CFG_TS_TMR_EN == DEF_ENABLED))
static  void  CPU_TS_Init (void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
#endif


                                                                /* ----------------- INIT CPU TS TMR ------------------ */
#if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
    CPU_TS_TmrFreq_Hz   = 0u;                                   /* Init/clr     ts tmr freq (see Note #1a).             */
 8001b50:	4b03      	ldr	r3, [pc, #12]	; (8001b60 <CPU_TS_Init+0x14>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
    CPU_TS_TmrInit();                                           /* Init & start ts tmr      (see Note #1b).             */
 8001b56:	f004 fbf7 	bl	8006348 <CPU_TS_TmrInit>
#if  ((CPU_CFG_TS_64_EN    == DEF_ENABLED)  && \
      (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_64))
    CPU_TS_64_Accum   = 0u;                                     /* Init 64-bit accum'd ts.                              */
    CPU_TS_64_TmrPrev = ts_tmr_cnts;                            /* Init 64-bit ts prev tmr val.                         */
#endif
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20001ad8 	.word	0x20001ad8

08001b64 <CPU_IntSrcEn>:
*               (3) See 'CPU_IntSrcDis()  Note #3'.
*********************************************************************************************************
*/

void  CPU_IntSrcEn (CPU_INT08U  pos)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	71fb      	strb	r3, [r7, #7]
    CPU_INT08U  group;
    CPU_INT08U  nbr;
    CPU_INT08U  pos_max;
    CPU_SR_ALLOC();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]


    switch (pos) {
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	2b0f      	cmp	r3, #15
 8001b76:	d857      	bhi.n	8001c28 <CPU_IntSrcEn+0xc4>
 8001b78:	a201      	add	r2, pc, #4	; (adr r2, 8001b80 <CPU_IntSrcEn+0x1c>)
 8001b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b7e:	bf00      	nop
 8001b80:	08001c8b 	.word	0x08001c8b
 8001b84:	08001c8b 	.word	0x08001c8b
 8001b88:	08001c8b 	.word	0x08001c8b
 8001b8c:	08001c8b 	.word	0x08001c8b
 8001b90:	08001bc1 	.word	0x08001bc1
 8001b94:	08001bdb 	.word	0x08001bdb
 8001b98:	08001bf5 	.word	0x08001bf5
 8001b9c:	08001c8b 	.word	0x08001c8b
 8001ba0:	08001c8b 	.word	0x08001c8b
 8001ba4:	08001c8b 	.word	0x08001c8b
 8001ba8:	08001c8b 	.word	0x08001c8b
 8001bac:	08001c8b 	.word	0x08001c8b
 8001bb0:	08001c8b 	.word	0x08001c8b
 8001bb4:	08001c8b 	.word	0x08001c8b
 8001bb8:	08001c8b 	.word	0x08001c8b
 8001bbc:	08001c0f 	.word	0x08001c0f
        case CPU_INT_DBGMON:                                    /* Debug monitor (see Note #2).                         */
        case CPU_INT_PENDSV:                                    /* PendSV (see Note #2).                                */
             break;

        case CPU_INT_MEM:                                       /* Memory management.                                   */
             CPU_CRITICAL_ENTER();
 8001bc0:	f7fe fb8e 	bl	80002e0 <CPU_SR_Save>
 8001bc4:	60f8      	str	r0, [r7, #12]
             CPU_REG_NVIC_SHCSR |= CPU_REG_NVIC_SHCSR_MEMFAULTENA;
 8001bc6:	4b34      	ldr	r3, [pc, #208]	; (8001c98 <CPU_IntSrcEn+0x134>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a33      	ldr	r2, [pc, #204]	; (8001c98 <CPU_IntSrcEn+0x134>)
 8001bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd0:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f7fe fb88 	bl	80002e8 <CPU_SR_Restore>
             break;
 8001bd8:	e05a      	b.n	8001c90 <CPU_IntSrcEn+0x12c>

        case CPU_INT_BUSFAULT:                                  /* Bus fault.                                           */
             CPU_CRITICAL_ENTER();
 8001bda:	f7fe fb81 	bl	80002e0 <CPU_SR_Save>
 8001bde:	60f8      	str	r0, [r7, #12]
             CPU_REG_NVIC_SHCSR |= CPU_REG_NVIC_SHCSR_BUSFAULTENA;
 8001be0:	4b2d      	ldr	r3, [pc, #180]	; (8001c98 <CPU_IntSrcEn+0x134>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a2c      	ldr	r2, [pc, #176]	; (8001c98 <CPU_IntSrcEn+0x134>)
 8001be6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bea:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 8001bec:	68f8      	ldr	r0, [r7, #12]
 8001bee:	f7fe fb7b 	bl	80002e8 <CPU_SR_Restore>
             break;
 8001bf2:	e04d      	b.n	8001c90 <CPU_IntSrcEn+0x12c>

        case CPU_INT_USAGEFAULT:                                /* Usage fault.                                         */
             CPU_CRITICAL_ENTER();
 8001bf4:	f7fe fb74 	bl	80002e0 <CPU_SR_Save>
 8001bf8:	60f8      	str	r0, [r7, #12]
             CPU_REG_NVIC_SHCSR |= CPU_REG_NVIC_SHCSR_USGFAULTENA;
 8001bfa:	4b27      	ldr	r3, [pc, #156]	; (8001c98 <CPU_IntSrcEn+0x134>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a26      	ldr	r2, [pc, #152]	; (8001c98 <CPU_IntSrcEn+0x134>)
 8001c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c04:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f7fe fb6e 	bl	80002e8 <CPU_SR_Restore>
             break;
 8001c0c:	e040      	b.n	8001c90 <CPU_IntSrcEn+0x12c>

        case CPU_INT_SYSTICK:                                   /* SysTick.                                             */
             CPU_CRITICAL_ENTER();
 8001c0e:	f7fe fb67 	bl	80002e0 <CPU_SR_Save>
 8001c12:	60f8      	str	r0, [r7, #12]
             CPU_REG_NVIC_ST_CTRL |= CPU_REG_NVIC_ST_CTRL_ENABLE;
 8001c14:	4b21      	ldr	r3, [pc, #132]	; (8001c9c <CPU_IntSrcEn+0x138>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a20      	ldr	r2, [pc, #128]	; (8001c9c <CPU_IntSrcEn+0x138>)
 8001c1a:	f043 0301 	orr.w	r3, r3, #1
 8001c1e:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 8001c20:	68f8      	ldr	r0, [r7, #12]
 8001c22:	f7fe fb61 	bl	80002e8 <CPU_SR_Restore>
             break;
 8001c26:	e033      	b.n	8001c90 <CPU_IntSrcEn+0x12c>


                                                                /* ---------------- EXTERNAL INTERRUPT ---------------- */
        default:
            pos_max = CPU_INT_SRC_POS_MAX;
 8001c28:	4b1d      	ldr	r3, [pc, #116]	; (8001ca0 <CPU_IntSrcEn+0x13c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	f003 031f 	and.w	r3, r3, #31
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	015b      	lsls	r3, r3, #5
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	3310      	adds	r3, #16
 8001c3c:	72fb      	strb	r3, [r7, #11]
            if (pos < pos_max) {                                /* See Note #3.                                         */
 8001c3e:	79fa      	ldrb	r2, [r7, #7]
 8001c40:	7afb      	ldrb	r3, [r7, #11]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d223      	bcs.n	8001c8e <CPU_IntSrcEn+0x12a>
                 group = (pos - 16) / 32;
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	3b10      	subs	r3, #16
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	da00      	bge.n	8001c50 <CPU_IntSrcEn+0xec>
 8001c4e:	331f      	adds	r3, #31
 8001c50:	115b      	asrs	r3, r3, #5
 8001c52:	72bb      	strb	r3, [r7, #10]
                 nbr   = (pos - 16) % 32;
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	3b10      	subs	r3, #16
 8001c58:	425a      	negs	r2, r3
 8001c5a:	f003 031f 	and.w	r3, r3, #31
 8001c5e:	f002 021f 	and.w	r2, r2, #31
 8001c62:	bf58      	it	pl
 8001c64:	4253      	negpl	r3, r2
 8001c66:	727b      	strb	r3, [r7, #9]

                 CPU_CRITICAL_ENTER();
 8001c68:	f7fe fb3a 	bl	80002e0 <CPU_SR_Save>
 8001c6c:	60f8      	str	r0, [r7, #12]
                 CPU_REG_NVIC_SETEN(group) = DEF_BIT(nbr);
 8001c6e:	7a7a      	ldrb	r2, [r7, #9]
 8001c70:	7abb      	ldrb	r3, [r7, #10]
 8001c72:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
 8001c76:	3340      	adds	r3, #64	; 0x40
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	4093      	lsls	r3, r2
 8001c80:	600b      	str	r3, [r1, #0]
                 CPU_CRITICAL_EXIT();
 8001c82:	68f8      	ldr	r0, [r7, #12]
 8001c84:	f7fe fb30 	bl	80002e8 <CPU_SR_Restore>
             }
             break;
 8001c88:	e001      	b.n	8001c8e <CPU_IntSrcEn+0x12a>
             break;
 8001c8a:	bf00      	nop
 8001c8c:	e000      	b.n	8001c90 <CPU_IntSrcEn+0x12c>
             break;
 8001c8e:	bf00      	nop
    }
}
 8001c90:	bf00      	nop
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	e000ed24 	.word	0xe000ed24
 8001c9c:	e000e010 	.word	0xe000e010
 8001ca0:	e000e004 	.word	0xe000e004

08001ca4 <Math_Init>:
*                   as when srand() is first called with a seed value of 1".
*********************************************************************************************************
*/

void  Math_Init (void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
    Math_RandSetSeed((RAND_NBR)RAND_SEED_INIT_VAL);             /* See Note #2.                                         */
 8001ca8:	2001      	movs	r0, #1
 8001caa:	f000 f803 	bl	8001cb4 <Math_RandSetSeed>
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
	...

08001cb4 <Math_RandSetSeed>:
*                   See also 'Math_Rand()  Note #1b'.
*********************************************************************************************************
*/

void  Math_RandSetSeed (RAND_NBR  seed)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
    CPU_SR_ALLOC();
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60fb      	str	r3, [r7, #12]


    CPU_CRITICAL_ENTER();
 8001cc0:	f7fe fb0e 	bl	80002e0 <CPU_SR_Save>
 8001cc4:	60f8      	str	r0, [r7, #12]
    Math_RandSeedCur = seed;
 8001cc6:	4a05      	ldr	r2, [pc, #20]	; (8001cdc <Math_RandSetSeed+0x28>)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6013      	str	r3, [r2, #0]
    CPU_CRITICAL_EXIT();
 8001ccc:	68f8      	ldr	r0, [r7, #12]
 8001cce:	f7fe fb0b 	bl	80002e8 <CPU_SR_Restore>
}
 8001cd2:	bf00      	nop
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20001aec 	.word	0x20001aec

08001ce0 <Mem_Init>:
*                   (b) BEFORE product's application calls any memory library module function(s)
*********************************************************************************************************
*/

void  Mem_Init (void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af02      	add	r7, sp, #8

                                                                /* ------------------ INIT SEG LIST ------------------- */
    Mem_SegHeadPtr = DEF_NULL;
 8001ce6:	4b0d      	ldr	r3, [pc, #52]	; (8001d1c <Mem_Init+0x3c>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]

                                                                /* ------------------ INIT HEAP SEG ------------------- */
#ifdef  LIB_MEM_CFG_HEAP_BASE_ADDR
        heap_base_addr = LIB_MEM_CFG_HEAP_BASE_ADDR;
#else
        heap_base_addr = (CPU_ADDR)&Mem_Heap[0u];
 8001cec:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <Mem_Init+0x40>)
 8001cee:	607b      	str	r3, [r7, #4]
#endif

        Mem_SegCreate("Heap",
 8001cf0:	1cbb      	adds	r3, r7, #2
 8001cf2:	9301      	str	r3, [sp, #4]
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	9300      	str	r3, [sp, #0]
 8001cf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	4909      	ldr	r1, [pc, #36]	; (8001d24 <Mem_Init+0x44>)
 8001d00:	4809      	ldr	r0, [pc, #36]	; (8001d28 <Mem_Init+0x48>)
 8001d02:	f000 f87b 	bl	8001dfc <Mem_SegCreate>
                      &Mem_SegHeap,                             /* Create heap seg.                                     */
                       heap_base_addr,
                       LIB_MEM_CFG_HEAP_SIZE,
                       LIB_MEM_PADDING_ALIGN_NONE,
                      &err);
        if (err != LIB_MEM_ERR_NONE) {
 8001d06:	887b      	ldrh	r3, [r7, #2]
 8001d08:	f242 7210 	movw	r2, #10000	; 0x2710
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d001      	beq.n	8001d14 <Mem_Init+0x34>
            CPU_SW_EXCEPTION(;);
 8001d10:	f7ff feee 	bl	8001af0 <CPU_SW_Exception>
        }
    }
#endif
}
 8001d14:	bf00      	nop
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20001b04 	.word	0x20001b04
 8001d20:	20001b08 	.word	0x20001b08
 8001d24:	20001af0 	.word	0x20001af0
 8001d28:	0800e804 	.word	0x0800e804

08001d2c <Mem_Clr>:
*********************************************************************************************************
*/

void  Mem_Clr (void        *pmem,
               CPU_SIZE_T   size)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
    Mem_Set(pmem,
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	2100      	movs	r1, #0
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f804 	bl	8001d48 <Mem_Set>
            0u,                                                 /* See Note #2.                                         */
            size);
}
 8001d40:	bf00      	nop
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <Mem_Set>:
*/

void  Mem_Set (void        *pmem,
               CPU_INT08U   data_val,
               CPU_SIZE_T   size)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b08b      	sub	sp, #44	; 0x2c
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	460b      	mov	r3, r1
 8001d52:	607a      	str	r2, [r7, #4]
 8001d54:	72fb      	strb	r3, [r7, #11]
        return;
    }
#endif


    data_align = 0u;
 8001d56:	2300      	movs	r3, #0
 8001d58:	623b      	str	r3, [r7, #32]
    for (i = 0u; i < sizeof(CPU_ALIGN); i++) {                  /* Fill each data_align octet with data val.            */
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	617b      	str	r3, [r7, #20]
 8001d5e:	e009      	b.n	8001d74 <Mem_Set+0x2c>
        data_align <<=  DEF_OCTET_NBR_BITS;
 8001d60:	6a3b      	ldr	r3, [r7, #32]
 8001d62:	021b      	lsls	r3, r3, #8
 8001d64:	623b      	str	r3, [r7, #32]
        data_align  |= (CPU_ALIGN)data_val;
 8001d66:	7afb      	ldrb	r3, [r7, #11]
 8001d68:	6a3a      	ldr	r2, [r7, #32]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	623b      	str	r3, [r7, #32]
    for (i = 0u; i < sizeof(CPU_ALIGN); i++) {                  /* Fill each data_align octet with data val.            */
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	3301      	adds	r3, #1
 8001d72:	617b      	str	r3, [r7, #20]
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	2b03      	cmp	r3, #3
 8001d78:	d9f2      	bls.n	8001d60 <Mem_Set+0x18>
    }

    size_rem      =  size;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24
    mem_align_mod = (CPU_INT08U)((CPU_ADDR)pmem % sizeof(CPU_ALIGN));   /* See Note #3.                                 */
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	613b      	str	r3, [r7, #16]

    pmem_08 = (CPU_INT08U *)pmem;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	61bb      	str	r3, [r7, #24]
    if (mem_align_mod != 0u) {                                  /* If leading octets avail,                   ...       */
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d013      	beq.n	8001dba <Mem_Set+0x72>
        i = mem_align_mod;
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	617b      	str	r3, [r7, #20]
        while ((size_rem > 0) &&                                /* ... start mem buf fill with leading octets ...       */
 8001d96:	e00a      	b.n	8001dae <Mem_Set+0x66>
               (i        < sizeof(CPU_ALIGN ))) {               /* ... until next CPU_ALIGN word boundary.              */
           *pmem_08++ = data_val;
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	1c5a      	adds	r2, r3, #1
 8001d9c:	61ba      	str	r2, [r7, #24]
 8001d9e:	7afa      	ldrb	r2, [r7, #11]
 8001da0:	701a      	strb	r2, [r3, #0]
            size_rem -= sizeof(CPU_INT08U);
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	3b01      	subs	r3, #1
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24
            i++;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	3301      	adds	r3, #1
 8001dac:	617b      	str	r3, [r7, #20]
        while ((size_rem > 0) &&                                /* ... start mem buf fill with leading octets ...       */
 8001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d002      	beq.n	8001dba <Mem_Set+0x72>
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	2b03      	cmp	r3, #3
 8001db8:	d9ee      	bls.n	8001d98 <Mem_Set+0x50>
        }
    }

    pmem_align = (CPU_ALIGN *)pmem_08;                          /* See Note #2.                                         */
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	61fb      	str	r3, [r7, #28]
    while (size_rem >= sizeof(CPU_ALIGN)) {                     /* While mem buf aligned on CPU_ALIGN word boundaries,  */
 8001dbe:	e007      	b.n	8001dd0 <Mem_Set+0x88>
       *pmem_align++ = data_align;                              /* ... fill mem buf with    CPU_ALIGN-sized data.       */
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	1d1a      	adds	r2, r3, #4
 8001dc4:	61fa      	str	r2, [r7, #28]
 8001dc6:	6a3a      	ldr	r2, [r7, #32]
 8001dc8:	601a      	str	r2, [r3, #0]
        size_rem    -= sizeof(CPU_ALIGN);
 8001dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dcc:	3b04      	subs	r3, #4
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
    while (size_rem >= sizeof(CPU_ALIGN)) {                     /* While mem buf aligned on CPU_ALIGN word boundaries,  */
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	2b03      	cmp	r3, #3
 8001dd4:	d8f4      	bhi.n	8001dc0 <Mem_Set+0x78>
    }

    pmem_08 = (CPU_INT08U *)pmem_align;
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	61bb      	str	r3, [r7, #24]
    while (size_rem > 0) {                                      /* Finish mem buf fill with trailing octets.            */
 8001dda:	e007      	b.n	8001dec <Mem_Set+0xa4>
       *pmem_08++   = data_val;
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	1c5a      	adds	r2, r3, #1
 8001de0:	61ba      	str	r2, [r7, #24]
 8001de2:	7afa      	ldrb	r2, [r7, #11]
 8001de4:	701a      	strb	r2, [r3, #0]
        size_rem   -= sizeof(CPU_INT08U);
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	3b01      	subs	r3, #1
 8001dea:	627b      	str	r3, [r7, #36]	; 0x24
    while (size_rem > 0) {                                      /* Finish mem buf fill with trailing octets.            */
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1f4      	bne.n	8001ddc <Mem_Set+0x94>
    }
}
 8001df2:	bf00      	nop
 8001df4:	372c      	adds	r7, #44	; 0x2c
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr

08001dfc <Mem_SegCreate>:
                            MEM_SEG     *p_seg,
                            CPU_ADDR     seg_base_addr,
                            CPU_SIZE_T   size,
                            CPU_SIZE_T   padding_align,
                            LIB_ERR     *p_err)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b088      	sub	sp, #32
 8001e00:	af02      	add	r7, sp, #8
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
 8001e08:	603b      	str	r3, [r7, #0]
    CPU_SR_ALLOC();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]
       *p_err = LIB_MEM_ERR_INVALID_MEM_ALIGN;
        return;
    }
#endif

    CPU_CRITICAL_ENTER();
 8001e0e:	f7fe fa67 	bl	80002e0 <CPU_SR_Save>
 8001e12:	6178      	str	r0, [r7, #20]
        CPU_CRITICAL_EXIT();
        return;
    }
#endif

    Mem_SegCreateCritical(p_name,                               /* Create seg.                                          */
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	6a3b      	ldr	r3, [r7, #32]
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	68b9      	ldr	r1, [r7, #8]
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f000 f80c 	bl	8001e3c <Mem_SegCreateCritical>
                          p_seg,
                          seg_base_addr,
                          padding_align,
                          size);
    CPU_CRITICAL_EXIT();
 8001e24:	6978      	ldr	r0, [r7, #20]
 8001e26:	f7fe fa5f 	bl	80002e8 <CPU_SR_Restore>

   *p_err = LIB_MEM_ERR_NONE;
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001e30:	801a      	strh	r2, [r3, #0]
}
 8001e32:	bf00      	nop
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
	...

08001e3c <Mem_SegCreateCritical>:
static  void  Mem_SegCreateCritical(const  CPU_CHAR    *p_name,
                                           MEM_SEG     *p_seg,
                                           CPU_ADDR     seg_base_addr,
                                           CPU_SIZE_T   padding_align,
                                           CPU_SIZE_T   size)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
 8001e48:	603b      	str	r3, [r7, #0]
    p_seg->AddrBase         =  seg_base_addr;
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	601a      	str	r2, [r3, #0]
    p_seg->AddrEnd          = (seg_base_addr + (size - 1u));
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4413      	add	r3, r2
 8001e56:	1e5a      	subs	r2, r3, #1
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	605a      	str	r2, [r3, #4]
    p_seg->AddrNext         =  seg_base_addr;
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	609a      	str	r2, [r3, #8]
    p_seg->NextPtr          =  Mem_SegHeadPtr;
 8001e62:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <Mem_SegCreateCritical+0x44>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	60da      	str	r2, [r3, #12]
    p_seg->PaddingAlign     =  padding_align;
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	611a      	str	r2, [r3, #16]
    p_seg->AllocInfoHeadPtr = DEF_NULL;
#else
    (void)&p_name;
#endif

    Mem_SegHeadPtr = p_seg;
 8001e70:	4a03      	ldr	r2, [pc, #12]	; (8001e80 <Mem_SegCreateCritical+0x44>)
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	6013      	str	r3, [r2, #0]
}
 8001e76:	bf00      	nop
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr
 8001e80:	20001b04 	.word	0x20001b04

08001e84 <OS_TmrInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_TmrInit (OS_ERR  *p_err)
{
 8001e84:	b590      	push	{r4, r7, lr}
 8001e86:	b08d      	sub	sp, #52	; 0x34
 8001e88:	af0a      	add	r7, sp, #40	; 0x28
 8001e8a:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSTmrDbgListPtr = (OS_TMR *)0;
 8001e8c:	4b37      	ldr	r3, [pc, #220]	; (8001f6c <OS_TmrInit+0xe8>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
#endif

    OSTmrListPtr        = (OS_TMR *)0;                      /* Create an empty timer list                             */
 8001e92:	4b37      	ldr	r3, [pc, #220]	; (8001f70 <OS_TmrInit+0xec>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
    OSTmrListEntries    = 0u;
 8001e98:	4b36      	ldr	r3, [pc, #216]	; (8001f74 <OS_TmrInit+0xf0>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	801a      	strh	r2, [r3, #0]

    if (OSCfg_TmrTaskRate_Hz > (OS_RATE_HZ)0) {
 8001e9e:	4b36      	ldr	r3, [pc, #216]	; (8001f78 <OS_TmrInit+0xf4>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d008      	beq.n	8001eb8 <OS_TmrInit+0x34>
        OSTmrUpdateCnt  = OSCfg_TickRate_Hz / OSCfg_TmrTaskRate_Hz;
 8001ea6:	4b35      	ldr	r3, [pc, #212]	; (8001f7c <OS_TmrInit+0xf8>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	4b33      	ldr	r3, [pc, #204]	; (8001f78 <OS_TmrInit+0xf4>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb2:	4a33      	ldr	r2, [pc, #204]	; (8001f80 <OS_TmrInit+0xfc>)
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	e007      	b.n	8001ec8 <OS_TmrInit+0x44>
    } else {
        OSTmrUpdateCnt  = OSCfg_TickRate_Hz / (OS_RATE_HZ)10;
 8001eb8:	4b30      	ldr	r3, [pc, #192]	; (8001f7c <OS_TmrInit+0xf8>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a31      	ldr	r2, [pc, #196]	; (8001f84 <OS_TmrInit+0x100>)
 8001ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec2:	08db      	lsrs	r3, r3, #3
 8001ec4:	4a2e      	ldr	r2, [pc, #184]	; (8001f80 <OS_TmrInit+0xfc>)
 8001ec6:	6013      	str	r3, [r2, #0]
    }
    OSTmrUpdateCtr      = OSTmrUpdateCnt;
 8001ec8:	4b2d      	ldr	r3, [pc, #180]	; (8001f80 <OS_TmrInit+0xfc>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a2e      	ldr	r2, [pc, #184]	; (8001f88 <OS_TmrInit+0x104>)
 8001ece:	6013      	str	r3, [r2, #0]

    OSTmrTickCtr        = (OS_TICK)0;
 8001ed0:	4b2e      	ldr	r3, [pc, #184]	; (8001f8c <OS_TmrInit+0x108>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]

    OSTmrTaskTimeMax    = (CPU_TS)0;
 8001ed6:	4b2e      	ldr	r3, [pc, #184]	; (8001f90 <OS_TmrInit+0x10c>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]

#if   OS_CFG_MUTEX_EN > 0u
    OSMutexCreate(&OSTmrMutex,                              /* Use a mutex to protect the timers                      */
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	492d      	ldr	r1, [pc, #180]	; (8001f94 <OS_TmrInit+0x110>)
 8001ee0:	482d      	ldr	r0, [pc, #180]	; (8001f98 <OS_TmrInit+0x114>)
 8001ee2:	f000 fb95 	bl	8002610 <OSMutexCreate>
                  "OS Tmr Mutex", 
                  p_err);
    if (*p_err != OS_ERR_NONE) {
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	881b      	ldrh	r3, [r3, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d139      	bne.n	8001f62 <OS_TmrInit+0xde>
        return;
    }
#endif

                                                            /* ---------------- CREATE THE TIMER TASK --------------- */
    if (OSCfg_TmrTaskStkBasePtr == (CPU_STK*)0) {
 8001eee:	4b2b      	ldr	r3, [pc, #172]	; (8001f9c <OS_TmrInit+0x118>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d104      	bne.n	8001f00 <OS_TmrInit+0x7c>
       *p_err = OS_ERR_TMR_STK_INVALID;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f247 3247 	movw	r2, #29511	; 0x7347
 8001efc:	801a      	strh	r2, [r3, #0]
        return;
 8001efe:	e031      	b.n	8001f64 <OS_TmrInit+0xe0>
    }

    if (OSCfg_TmrTaskStkSize < OSCfg_StkSizeMin) {
 8001f00:	4b27      	ldr	r3, [pc, #156]	; (8001fa0 <OS_TmrInit+0x11c>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	4b27      	ldr	r3, [pc, #156]	; (8001fa4 <OS_TmrInit+0x120>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d204      	bcs.n	8001f16 <OS_TmrInit+0x92>
       *p_err = OS_ERR_TMR_STK_SIZE_INVALID;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f247 3248 	movw	r2, #29512	; 0x7348
 8001f12:	801a      	strh	r2, [r3, #0]
        return;
 8001f14:	e026      	b.n	8001f64 <OS_TmrInit+0xe0>
    }

    if (OSCfg_TmrTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {
 8001f16:	4b24      	ldr	r3, [pc, #144]	; (8001fa8 <OS_TmrInit+0x124>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	2b1e      	cmp	r3, #30
 8001f1c:	d904      	bls.n	8001f28 <OS_TmrInit+0xa4>
       *p_err = OS_ERR_TMR_PRIO_INVALID;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f247 3246 	movw	r2, #29510	; 0x7346
 8001f24:	801a      	strh	r2, [r3, #0]
        return;
 8001f26:	e01d      	b.n	8001f64 <OS_TmrInit+0xe0>
    }

    OSTaskCreate((OS_TCB     *)&OSTmrTaskTCB,
 8001f28:	4b1f      	ldr	r3, [pc, #124]	; (8001fa8 <OS_TmrInit+0x124>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	4a1b      	ldr	r2, [pc, #108]	; (8001f9c <OS_TmrInit+0x118>)
 8001f2e:	6812      	ldr	r2, [r2, #0]
 8001f30:	491e      	ldr	r1, [pc, #120]	; (8001fac <OS_TmrInit+0x128>)
 8001f32:	6809      	ldr	r1, [r1, #0]
 8001f34:	481a      	ldr	r0, [pc, #104]	; (8001fa0 <OS_TmrInit+0x11c>)
 8001f36:	6800      	ldr	r0, [r0, #0]
 8001f38:	687c      	ldr	r4, [r7, #4]
 8001f3a:	9408      	str	r4, [sp, #32]
 8001f3c:	240b      	movs	r4, #11
 8001f3e:	9407      	str	r4, [sp, #28]
 8001f40:	2400      	movs	r4, #0
 8001f42:	9406      	str	r4, [sp, #24]
 8001f44:	2400      	movs	r4, #0
 8001f46:	9405      	str	r4, [sp, #20]
 8001f48:	2400      	movs	r4, #0
 8001f4a:	9404      	str	r4, [sp, #16]
 8001f4c:	9003      	str	r0, [sp, #12]
 8001f4e:	9102      	str	r1, [sp, #8]
 8001f50:	9201      	str	r2, [sp, #4]
 8001f52:	9300      	str	r3, [sp, #0]
 8001f54:	2300      	movs	r3, #0
 8001f56:	4a16      	ldr	r2, [pc, #88]	; (8001fb0 <OS_TmrInit+0x12c>)
 8001f58:	4916      	ldr	r1, [pc, #88]	; (8001fb4 <OS_TmrInit+0x130>)
 8001f5a:	4817      	ldr	r0, [pc, #92]	; (8001fb8 <OS_TmrInit+0x134>)
 8001f5c:	f002 ff2e 	bl	8004dbc <OSTaskCreate>
 8001f60:	e000      	b.n	8001f64 <OS_TmrInit+0xe0>
        return;
 8001f62:	bf00      	nop
                 (OS_MSG_QTY  )0,
                 (OS_TICK     )0,
                 (void       *)0,
                 (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR | OS_OPT_TASK_NO_TLS),
                 (OS_ERR     *)p_err);
}
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd90      	pop	{r4, r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20002464 	.word	0x20002464
 8001f70:	20002460 	.word	0x20002460
 8001f74:	2000246c 	.word	0x2000246c
 8001f78:	0800eaf8 	.word	0x0800eaf8
 8001f7c:	0800eae0 	.word	0x0800eae0
 8001f80:	20002470 	.word	0x20002470
 8001f84:	cccccccd 	.word	0xcccccccd
 8001f88:	20002480 	.word	0x20002480
 8001f8c:	2000216c 	.word	0x2000216c
 8001f90:	2000218c 	.word	0x2000218c
 8001f94:	0800e84c 	.word	0x0800e84c
 8001f98:	2000233c 	.word	0x2000233c
 8001f9c:	0800eafc 	.word	0x0800eafc
 8001fa0:	0800eb04 	.word	0x0800eb04
 8001fa4:	0800eadc 	.word	0x0800eadc
 8001fa8:	0800eaf4 	.word	0x0800eaf4
 8001fac:	0800eb00 	.word	0x0800eb00
 8001fb0:	08002045 	.word	0x08002045
 8001fb4:	0800e85c 	.word	0x0800e85c
 8001fb8:	200021a4 	.word	0x200021a4

08001fbc <OS_TmrResetPeak>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TmrResetPeak (void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr

08001fc8 <OS_TmrUnlink>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_TmrUnlink (OS_TMR  *p_tmr)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
    OS_TMR  *p_tmr1;
    OS_TMR  *p_tmr2;



    if (OSTmrListPtr == p_tmr) {                            /* See if timer to remove is at the beginning of list     */
 8001fd0:	4b1a      	ldr	r3, [pc, #104]	; (800203c <OS_TmrUnlink+0x74>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d10c      	bne.n	8001ff4 <OS_TmrUnlink+0x2c>
        p_tmr1       = (OS_TMR *)p_tmr->NextPtr;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	60fb      	str	r3, [r7, #12]
        OSTmrListPtr = (OS_TMR *)p_tmr1;
 8001fe0:	4a16      	ldr	r2, [pc, #88]	; (800203c <OS_TmrUnlink+0x74>)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6013      	str	r3, [r2, #0]
        if (p_tmr1 != (OS_TMR *)0) {
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d012      	beq.n	8002012 <OS_TmrUnlink+0x4a>
            p_tmr1->PrevPtr = (OS_TMR *)0;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	615a      	str	r2, [r3, #20]
 8001ff2:	e00e      	b.n	8002012 <OS_TmrUnlink+0x4a>
        }
    } else {
        p_tmr1          = (OS_TMR *)p_tmr->PrevPtr;         /* Remove timer from somewhere in the list                */
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	695b      	ldr	r3, [r3, #20]
 8001ff8:	60fb      	str	r3, [r7, #12]
        p_tmr2          = (OS_TMR *)p_tmr->NextPtr;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	60bb      	str	r3, [r7, #8]
        p_tmr1->NextPtr = p_tmr2;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	68ba      	ldr	r2, [r7, #8]
 8002004:	611a      	str	r2, [r3, #16]
        if (p_tmr2 != (OS_TMR *)0) {
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d002      	beq.n	8002012 <OS_TmrUnlink+0x4a>
            p_tmr2->PrevPtr = (OS_TMR *)p_tmr1;
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	615a      	str	r2, [r3, #20]
        }
    }
    p_tmr->State   = OS_TMR_STATE_STOPPED;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    p_tmr->NextPtr = (OS_TMR *)0;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	611a      	str	r2, [r3, #16]
    p_tmr->PrevPtr = (OS_TMR *)0;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	615a      	str	r2, [r3, #20]
    OSTmrListEntries--;
 8002026:	4b06      	ldr	r3, [pc, #24]	; (8002040 <OS_TmrUnlink+0x78>)
 8002028:	881b      	ldrh	r3, [r3, #0]
 800202a:	3b01      	subs	r3, #1
 800202c:	b29a      	uxth	r2, r3
 800202e:	4b04      	ldr	r3, [pc, #16]	; (8002040 <OS_TmrUnlink+0x78>)
 8002030:	801a      	strh	r2, [r3, #0]
}
 8002032:	bf00      	nop
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr
 800203c:	20002460 	.word	0x20002460
 8002040:	2000246c 	.word	0x2000246c

08002044 <OS_TmrTask>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_TmrTask (void  *p_arg)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08a      	sub	sp, #40	; 0x28
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]



    (void)&p_arg;                                                /* Not using 'p_arg', prevent compiler warning       */
    while (DEF_ON) {
        (void)OSTaskSemPend((OS_TICK )0,                         /* Wait for signal indicating time to update tmrs    */
 800204c:	f107 0312 	add.w	r3, r7, #18
 8002050:	f107 020c 	add.w	r2, r7, #12
 8002054:	2100      	movs	r1, #0
 8002056:	2000      	movs	r0, #0
 8002058:	f002 ffe0 	bl	800501c <OSTaskSemPend>
                            (OS_OPT  )OS_OPT_PEND_BLOCKING,
                            (CPU_TS *)&ts,
                            (OS_ERR *)&err);


        OS_TmrLock();
 800205c:	f000 f85a 	bl	8002114 <OS_TmrLock>
        ts_start = OS_TS_GET();
 8002060:	f004 f990 	bl	8006384 <CPU_TS_TmrRd>
 8002064:	6238      	str	r0, [r7, #32]
        OSTmrTickCtr++;                                          /* Increment the current time                        */
 8002066:	4b28      	ldr	r3, [pc, #160]	; (8002108 <OS_TmrTask+0xc4>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	3301      	adds	r3, #1
 800206c:	4a26      	ldr	r2, [pc, #152]	; (8002108 <OS_TmrTask+0xc4>)
 800206e:	6013      	str	r3, [r2, #0]
        p_tmr    = OSTmrListPtr;
 8002070:	4b26      	ldr	r3, [pc, #152]	; (800210c <OS_TmrTask+0xc8>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
        while (p_tmr != (OS_TMR *)0) {                           /* Update all the timers in the list                 */
 8002076:	e033      	b.n	80020e0 <OS_TmrTask+0x9c>
            OSSchedLock(&err);
 8002078:	f107 0312 	add.w	r3, r7, #18
 800207c:	4618      	mov	r0, r3
 800207e:	f001 ffe3 	bl	8004048 <OSSchedLock>
            (void)&err;
            p_tmr_next = p_tmr->NextPtr;
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	61bb      	str	r3, [r7, #24]
            p_tmr->Remain--;
 8002088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	1e5a      	subs	r2, r3, #1
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	619a      	str	r2, [r3, #24]
            if (p_tmr->Remain == 0) {
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d11b      	bne.n	80020d2 <OS_TmrTask+0x8e>
                if (p_tmr->Opt == OS_OPT_TMR_PERIODIC) {
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d104      	bne.n	80020ac <OS_TmrTask+0x68>
                    p_tmr->Remain = p_tmr->Period;               /* Reload the time remaining                         */
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	6a1a      	ldr	r2, [r3, #32]
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	619a      	str	r2, [r3, #24]
 80020aa:	e006      	b.n	80020ba <OS_TmrTask+0x76>
                } else {
                    OS_TmrUnlink(p_tmr);                         /* Remove from list                                  */
 80020ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80020ae:	f7ff ff8b 	bl	8001fc8 <OS_TmrUnlink>
                    p_tmr->State = OS_TMR_STATE_COMPLETED;       /* Indicate that the timer has completed             */
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	2203      	movs	r2, #3
 80020b6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
                }
                p_fnct = p_tmr->CallbackPtr;                     /* Execute callback function if available            */
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	617b      	str	r3, [r7, #20]
                if (p_fnct != (OS_TMR_CALLBACK_PTR)0) {
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d005      	beq.n	80020d2 <OS_TmrTask+0x8e>
                    (*p_fnct)((void *)p_tmr,
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	68da      	ldr	r2, [r3, #12]
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	4611      	mov	r1, r2
 80020ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80020d0:	4798      	blx	r3
                              p_tmr->CallbackPtrArg);
                }
            }
            p_tmr = p_tmr_next;
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	627b      	str	r3, [r7, #36]	; 0x24
            OSSchedUnlock(&err);
 80020d6:	f107 0312 	add.w	r3, r7, #18
 80020da:	4618      	mov	r0, r3
 80020dc:	f001 fff0 	bl	80040c0 <OSSchedUnlock>
        while (p_tmr != (OS_TMR *)0) {                           /* Update all the timers in the list                 */
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1c8      	bne.n	8002078 <OS_TmrTask+0x34>
            (void)&err;
        }

        ts_delta = OS_TS_GET() - ts_start;                      /* Measure execution time of timer task              */
 80020e6:	f004 f94d 	bl	8006384 <CPU_TS_TmrRd>
 80020ea:	4602      	mov	r2, r0
 80020ec:	6a3b      	ldr	r3, [r7, #32]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	61fb      	str	r3, [r7, #28]
        OS_TmrUnlock();
 80020f2:	f000 f821 	bl	8002138 <OS_TmrUnlock>

        if (OSTmrTaskTimeMax < ts_delta) {
 80020f6:	4b06      	ldr	r3, [pc, #24]	; (8002110 <OS_TmrTask+0xcc>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	69fa      	ldr	r2, [r7, #28]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d9a5      	bls.n	800204c <OS_TmrTask+0x8>
            OSTmrTaskTimeMax = ts_delta;
 8002100:	4a03      	ldr	r2, [pc, #12]	; (8002110 <OS_TmrTask+0xcc>)
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	6013      	str	r3, [r2, #0]
        (void)OSTaskSemPend((OS_TICK )0,                         /* Wait for signal indicating time to update tmrs    */
 8002106:	e7a1      	b.n	800204c <OS_TmrTask+0x8>
 8002108:	2000216c 	.word	0x2000216c
 800210c:	20002460 	.word	0x20002460
 8002110:	2000218c 	.word	0x2000218c

08002114 <OS_TmrLock>:
* Note(s)    : 1) These function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

static  void  OS_TmrLock (void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af02      	add	r7, sp, #8
    OS_ERR  err;
#if OS_CFG_MUTEX_EN > 0u
    CPU_TS  ts;


    OSMutexPend(&OSTmrMutex,                                /* Use a mutex to protect the timers                      */
 800211a:	463a      	mov	r2, r7
 800211c:	1dbb      	adds	r3, r7, #6
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	4613      	mov	r3, r2
 8002122:	2200      	movs	r2, #0
 8002124:	2100      	movs	r1, #0
 8002126:	4803      	ldr	r0, [pc, #12]	; (8002134 <OS_TmrLock+0x20>)
 8002128:	f000 fabe 	bl	80026a8 <OSMutexPend>
                &err);
#else
    OSSchedLock(&err);                                      /* Lock the scheduler to protect the timers               */
#endif
    (void)&err;
}
 800212c:	bf00      	nop
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	2000233c 	.word	0x2000233c

08002138 <OS_TmrUnlock>:




static  void  OS_TmrUnlock (void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
    OS_ERR  err;


#if OS_CFG_MUTEX_EN > 0u
    OSMutexPost(&OSTmrMutex,                                /* Use a mutex to protect the timers                      */
 800213e:	1dbb      	adds	r3, r7, #6
 8002140:	461a      	mov	r2, r3
 8002142:	2100      	movs	r1, #0
 8002144:	4803      	ldr	r0, [pc, #12]	; (8002154 <OS_TmrUnlock+0x1c>)
 8002146:	f000 fbb7 	bl	80028b8 <OSMutexPost>
                &err);
#else
    OSSchedUnlock(&err);                                    /* Lock the scheduler to protect the timers               */
#endif
    (void)&err;
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	2000233c 	.word	0x2000233c

08002158 <OSMemCreate>:
                   CPU_CHAR     *p_name,
                   void         *p_addr,
                   OS_MEM_QTY    n_blks,
                   OS_MEM_SIZE   blk_size,
                   OS_ERR       *p_err)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b08a      	sub	sp, #40	; 0x28
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
 8002164:	807b      	strh	r3, [r7, #2]
#endif
    OS_MEM_QTY     i;
    OS_MEM_QTY     loops;
    CPU_INT08U    *p_blk;
    void         **p_link;
    CPU_SR_ALLOC();
 8002166:	2300      	movs	r3, #0
 8002168:	61bb      	str	r3, [r7, #24]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 800216a:	4b40      	ldr	r3, [pc, #256]	; (800226c <OSMemCreate+0x114>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d004      	beq.n	800217c <OSMemCreate+0x24>
       *p_err = OS_ERR_MEM_CREATE_ISR;
 8002172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002174:	f245 62b9 	movw	r2, #22201	; 0x56b9
 8002178:	801a      	strh	r2, [r3, #0]
        return;
 800217a:	e074      	b.n	8002266 <OSMemCreate+0x10e>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_addr == (void *)0) {                              /* Must pass a valid address for the memory part.         */
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d104      	bne.n	800218c <OSMemCreate+0x34>
       *p_err   = OS_ERR_MEM_INVALID_P_ADDR;
 8002182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002184:	f245 62bb 	movw	r2, #22203	; 0x56bb
 8002188:	801a      	strh	r2, [r3, #0]
        return;
 800218a:	e06c      	b.n	8002266 <OSMemCreate+0x10e>
    }
    if (n_blks < (OS_MEM_QTY)2) {                           /* Must have at least 2 blocks per partition              */
 800218c:	887b      	ldrh	r3, [r7, #2]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d804      	bhi.n	800219c <OSMemCreate+0x44>
       *p_err = OS_ERR_MEM_INVALID_BLKS;
 8002192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002194:	f245 62bc 	movw	r2, #22204	; 0x56bc
 8002198:	801a      	strh	r2, [r3, #0]
        return;
 800219a:	e064      	b.n	8002266 <OSMemCreate+0x10e>
    }
    if (blk_size < sizeof(void *)) {                        /* Must contain space for at least a pointer              */
 800219c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800219e:	2b03      	cmp	r3, #3
 80021a0:	d804      	bhi.n	80021ac <OSMemCreate+0x54>
       *p_err = OS_ERR_MEM_INVALID_SIZE;
 80021a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021a4:	f245 62c1 	movw	r2, #22209	; 0x56c1
 80021a8:	801a      	strh	r2, [r3, #0]
        return;
 80021aa:	e05c      	b.n	8002266 <OSMemCreate+0x10e>
    }
    align_msk = sizeof(void *) - 1u;
 80021ac:	2303      	movs	r3, #3
 80021ae:	617b      	str	r3, [r7, #20]
    if (align_msk > 0u) {
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d013      	beq.n	80021de <OSMemCreate+0x86>
        if (((CPU_ADDR)p_addr & align_msk) != 0u){          /* Must be pointer size aligned                           */
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	4013      	ands	r3, r2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d004      	beq.n	80021ca <OSMemCreate+0x72>
           *p_err = OS_ERR_MEM_INVALID_P_ADDR;
 80021c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021c2:	f245 62bb 	movw	r2, #22203	; 0x56bb
 80021c6:	801a      	strh	r2, [r3, #0]
            return;
 80021c8:	e04d      	b.n	8002266 <OSMemCreate+0x10e>
        }
        if ((blk_size & align_msk) != 0u) {                 /* Block size must be a multiple address size             */
 80021ca:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	4013      	ands	r3, r2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d004      	beq.n	80021de <OSMemCreate+0x86>
           *p_err = OS_ERR_MEM_INVALID_SIZE;
 80021d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021d6:	f245 62c1 	movw	r2, #22209	; 0x56c1
 80021da:	801a      	strh	r2, [r3, #0]
            return;
 80021dc:	e043      	b.n	8002266 <OSMemCreate+0x10e>
        }
    }
#endif

    p_link = (void **)p_addr;                               /* Create linked list of free memory blocks               */
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	61fb      	str	r3, [r7, #28]
    p_blk  = (CPU_INT08U *)p_addr;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	623b      	str	r3, [r7, #32]
    loops  = n_blks - 1u;
 80021e6:	887b      	ldrh	r3, [r7, #2]
 80021e8:	3b01      	subs	r3, #1
 80021ea:	827b      	strh	r3, [r7, #18]
    for (i = 0u; i < loops; i++) {
 80021ec:	2300      	movs	r3, #0
 80021ee:	84fb      	strh	r3, [r7, #38]	; 0x26
 80021f0:	e00b      	b.n	800220a <OSMemCreate+0xb2>
        p_blk +=  blk_size;
 80021f2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80021f4:	6a3a      	ldr	r2, [r7, #32]
 80021f6:	4413      	add	r3, r2
 80021f8:	623b      	str	r3, [r7, #32]
       *p_link = (void  *)p_blk;                            /* Save pointer to NEXT block in CURRENT block            */
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	6a3a      	ldr	r2, [r7, #32]
 80021fe:	601a      	str	r2, [r3, #0]
        p_link = (void **)(void *)p_blk;                    /* Position     to NEXT block                             */
 8002200:	6a3b      	ldr	r3, [r7, #32]
 8002202:	61fb      	str	r3, [r7, #28]
    for (i = 0u; i < loops; i++) {
 8002204:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002206:	3301      	adds	r3, #1
 8002208:	84fb      	strh	r3, [r7, #38]	; 0x26
 800220a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800220c:	8a7b      	ldrh	r3, [r7, #18]
 800220e:	429a      	cmp	r2, r3
 8002210:	d3ef      	bcc.n	80021f2 <OSMemCreate+0x9a>
    }
   *p_link             = (void *)0;                         /* Last memory block points to NULL                       */
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]

    OS_CRITICAL_ENTER();
 8002218:	f7fe f862 	bl	80002e0 <CPU_SR_Save>
 800221c:	61b8      	str	r0, [r7, #24]
#if OS_OBJ_TYPE_REQ > 0u
    p_mem->Type        = OS_OBJ_TYPE_MEM;                   /* Set the type of object                                 */
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	4a13      	ldr	r2, [pc, #76]	; (8002270 <OSMemCreate+0x118>)
 8002222:	601a      	str	r2, [r3, #0]
#endif
#if OS_CFG_DBG_EN > 0u
    p_mem->NamePtr     = p_name;                            /* Save name of memory partition                          */
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	609a      	str	r2, [r3, #8]
#else
    (void)&p_name;
#endif
    p_mem->AddrPtr     = p_addr;                            /* Store start address of memory partition                */
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	605a      	str	r2, [r3, #4]
    p_mem->FreeListPtr = p_addr;                            /* Initialize pointer to pool of free blocks              */
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	60da      	str	r2, [r3, #12]
    p_mem->NbrFree     = n_blks;                            /* Store number of free blocks in MCB                     */
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	887a      	ldrh	r2, [r7, #2]
 800223a:	829a      	strh	r2, [r3, #20]
    p_mem->NbrMax      = n_blks;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	887a      	ldrh	r2, [r7, #2]
 8002240:	825a      	strh	r2, [r3, #18]
    p_mem->BlkSize     = blk_size;                          /* Store block size of each memory blocks                 */
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8002246:	821a      	strh	r2, [r3, #16]

#if OS_CFG_DBG_EN > 0u
    OS_MemDbgListAdd(p_mem);
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f000 f88d 	bl	8002368 <OS_MemDbgListAdd>
#endif

    OSMemQty++;
 800224e:	4b09      	ldr	r3, [pc, #36]	; (8002274 <OSMemCreate+0x11c>)
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	3301      	adds	r3, #1
 8002254:	b29a      	uxth	r2, r3
 8002256:	4b07      	ldr	r3, [pc, #28]	; (8002274 <OSMemCreate+0x11c>)
 8002258:	801a      	strh	r2, [r3, #0]

#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_MEM_CREATE(p_mem, p_name);                     /* Record the event.                                      */
#endif

    OS_CRITICAL_EXIT_NO_SCHED();
 800225a:	69b8      	ldr	r0, [r7, #24]
 800225c:	f7fe f844 	bl	80002e8 <CPU_SR_Restore>
   *p_err = OS_ERR_NONE;
 8002260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002262:	2200      	movs	r2, #0
 8002264:	801a      	strh	r2, [r3, #0]
}
 8002266:	3728      	adds	r7, #40	; 0x28
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	2000219e 	.word	0x2000219e
 8002270:	204d454d 	.word	0x204d454d
 8002274:	2000239a 	.word	0x2000239a

08002278 <OSMemGet>:
************************************************************************************************************************
*/

void  *OSMemGet (OS_MEM  *p_mem,
                 OS_ERR  *p_err)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
    void    *p_blk;
    CPU_SR_ALLOC();
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
        return ((void *)0);
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_mem == (OS_MEM *)0) {                             /* Must point to a valid memory partition                 */
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d105      	bne.n	8002298 <OSMemGet+0x20>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MEM_GET_FAILED(p_mem);                     /* Record the event.                                      */
#endif
       *p_err  = OS_ERR_MEM_INVALID_P_MEM;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	f245 62bf 	movw	r2, #22207	; 0x56bf
 8002292:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 8002294:	2300      	movs	r3, #0
 8002296:	e023      	b.n	80022e0 <OSMemGet+0x68>
    }
#endif

    CPU_CRITICAL_ENTER();
 8002298:	f7fe f822 	bl	80002e0 <CPU_SR_Save>
 800229c:	60f8      	str	r0, [r7, #12]
    if (p_mem->NbrFree == (OS_MEM_QTY)0) {                  /* See if there are any free memory blocks                */
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	8a9b      	ldrh	r3, [r3, #20]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d108      	bne.n	80022b8 <OSMemGet+0x40>
        CPU_CRITICAL_EXIT();
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f7fe f81e 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MEM_GET_FAILED(p_mem);                     /* Record the event.                                      */
#endif
       *p_err = OS_ERR_MEM_NO_FREE_BLKS;                    /* No,  Notify caller of empty memory partition           */
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	f245 62c2 	movw	r2, #22210	; 0x56c2
 80022b2:	801a      	strh	r2, [r3, #0]
        return ((void *)0);                                 /*      Return NULL pointer to caller                     */
 80022b4:	2300      	movs	r3, #0
 80022b6:	e013      	b.n	80022e0 <OSMemGet+0x68>
    }
    p_blk              = p_mem->FreeListPtr;                /* Yes, point to next free memory block                   */
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	60bb      	str	r3, [r7, #8]
    p_mem->FreeListPtr = *(void **)p_blk;                   /*      Adjust pointer to new free list                   */
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	60da      	str	r2, [r3, #12]
    p_mem->NbrFree--;                                       /*      One less memory block in this partition           */
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	8a9b      	ldrh	r3, [r3, #20]
 80022ca:	3b01      	subs	r3, #1
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	829a      	strh	r2, [r3, #20]
    CPU_CRITICAL_EXIT();
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f7fe f808 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_MEM_GET(p_mem);                                /* Record the event.                                      */
#endif
   *p_err = OS_ERR_NONE;                                    /*      No error                                          */
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	2200      	movs	r2, #0
 80022dc:	801a      	strh	r2, [r3, #0]
    return (p_blk);                                         /*      Return memory block to caller                     */
 80022de:	68bb      	ldr	r3, [r7, #8]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <OSMemPut>:
*/

void  OSMemPut (OS_MEM  *p_mem,
                void    *p_blk,
                OS_ERR  *p_err)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
    CPU_SR_ALLOC();
 80022f4:	2300      	movs	r3, #0
 80022f6:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_mem == (OS_MEM *)0) {                             /* Must point to a valid memory partition                 */
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d104      	bne.n	8002308 <OSMemPut+0x20>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MEM_PUT_FAILED(p_mem);                     /* Record the event.                                      */
#endif
       *p_err  = OS_ERR_MEM_INVALID_P_MEM;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f245 62bf 	movw	r2, #22207	; 0x56bf
 8002304:	801a      	strh	r2, [r3, #0]
        return;
 8002306:	e02b      	b.n	8002360 <OSMemPut+0x78>
    }
    if (p_blk == (void *)0) {                               /* Must release a valid block                             */
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d104      	bne.n	8002318 <OSMemPut+0x30>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MEM_PUT_FAILED(p_mem);                     /* Record the event.                                      */
#endif
       *p_err  = OS_ERR_MEM_INVALID_P_BLK;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f245 62be 	movw	r2, #22206	; 0x56be
 8002314:	801a      	strh	r2, [r3, #0]
        return;
 8002316:	e023      	b.n	8002360 <OSMemPut+0x78>
    }
#endif

    CPU_CRITICAL_ENTER();
 8002318:	f7fd ffe2 	bl	80002e0 <CPU_SR_Save>
 800231c:	6178      	str	r0, [r7, #20]
    if (p_mem->NbrFree >= p_mem->NbrMax) {                  /* Make sure all blocks not already returned              */
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8a9a      	ldrh	r2, [r3, #20]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	8a5b      	ldrh	r3, [r3, #18]
 8002326:	429a      	cmp	r2, r3
 8002328:	d307      	bcc.n	800233a <OSMemPut+0x52>
        CPU_CRITICAL_EXIT();
 800232a:	6978      	ldr	r0, [r7, #20]
 800232c:	f7fd ffdc 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MEM_PUT_FAILED(p_mem);                     /* Record the event.                                      */
#endif
       *p_err = OS_ERR_MEM_FULL;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f245 62ba 	movw	r2, #22202	; 0x56ba
 8002336:	801a      	strh	r2, [r3, #0]
        return;
 8002338:	e012      	b.n	8002360 <OSMemPut+0x78>
    }
    *(void **)p_blk    = p_mem->FreeListPtr;                /* Insert released block into free block list             */
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	601a      	str	r2, [r3, #0]
    p_mem->FreeListPtr = p_blk;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	68ba      	ldr	r2, [r7, #8]
 8002346:	60da      	str	r2, [r3, #12]
    p_mem->NbrFree++;                                       /* One more memory block in this partition                */
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8a9b      	ldrh	r3, [r3, #20]
 800234c:	3301      	adds	r3, #1
 800234e:	b29a      	uxth	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	829a      	strh	r2, [r3, #20]
    CPU_CRITICAL_EXIT();
 8002354:	6978      	ldr	r0, [r7, #20]
 8002356:	f7fd ffc7 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_MEM_PUT(p_mem);                                /* Record the event.                                      */
#endif
   *p_err              = OS_ERR_NONE;                       /* Notify caller that memory block was released           */
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	801a      	strh	r2, [r3, #0]
}
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
	...

08002368 <OS_MemDbgListAdd>:
************************************************************************************************************************
*/

#if OS_CFG_DBG_EN > 0u
void  OS_MemDbgListAdd (OS_MEM  *p_mem)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
    p_mem->DbgPrevPtr               = (OS_MEM *)0;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	619a      	str	r2, [r3, #24]
    if (OSMemDbgListPtr == (OS_MEM *)0) {
 8002376:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <OS_MemDbgListAdd+0x40>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d103      	bne.n	8002386 <OS_MemDbgListAdd+0x1e>
        p_mem->DbgNextPtr           = (OS_MEM *)0;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	61da      	str	r2, [r3, #28]
 8002384:	e007      	b.n	8002396 <OS_MemDbgListAdd+0x2e>
    } else {
        p_mem->DbgNextPtr           =  OSMemDbgListPtr;
 8002386:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <OS_MemDbgListAdd+0x40>)
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	61da      	str	r2, [r3, #28]
        OSMemDbgListPtr->DbgPrevPtr =  p_mem;
 800238e:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <OS_MemDbgListAdd+0x40>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	619a      	str	r2, [r3, #24]
    }
    OSMemDbgListPtr                 =  p_mem;
 8002396:	4a04      	ldr	r2, [pc, #16]	; (80023a8 <OS_MemDbgListAdd+0x40>)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6013      	str	r3, [r2, #0]
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bc80      	pop	{r7}
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	20002338 	.word	0x20002338

080023ac <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_MemInit (OS_ERR  *p_err)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSMemDbgListPtr = (OS_MEM   *)0;
 80023b4:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <OS_MemInit+0x24>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]
#endif

    OSMemQty        = (OS_OBJ_QTY)0;
 80023ba:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <OS_MemInit+0x28>)
 80023bc:	2200      	movs	r2, #0
 80023be:	801a      	strh	r2, [r3, #0]
   *p_err           = OS_ERR_NONE;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	801a      	strh	r2, [r3, #0]
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr
 80023d0:	20002338 	.word	0x20002338
 80023d4:	2000239a 	.word	0x2000239a

080023d8 <OS_Dbg_Init>:
*                  DOES NOT optimize out the 'const' variables above.
************************************************************************************************************************
*/

void  OS_Dbg_Init (void)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
    CPU_INT08U const  *p_temp08;
    CPU_INT16U const  *p_temp16;
    CPU_INT32U const  *p_temp32;


    p_temp08 = (CPU_INT08U const *)&OSDbg_DbgEn;
 80023de:	4b47      	ldr	r3, [pc, #284]	; (80024fc <OS_Dbg_Init+0x124>)
 80023e0:	60fb      	str	r3, [r7, #12]

    p_temp32 = (CPU_INT32U const *)&OSDbg_DataSize;
 80023e2:	4b47      	ldr	r3, [pc, #284]	; (8002500 <OS_Dbg_Init+0x128>)
 80023e4:	60bb      	str	r3, [r7, #8]

    p_temp08 = (CPU_INT08U const *)&OSDbg_ArgChkEn;
 80023e6:	4b47      	ldr	r3, [pc, #284]	; (8002504 <OS_Dbg_Init+0x12c>)
 80023e8:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_AppHooksEn;
 80023ea:	4b47      	ldr	r3, [pc, #284]	; (8002508 <OS_Dbg_Init+0x130>)
 80023ec:	60fb      	str	r3, [r7, #12]

    p_temp32 = (CPU_INT32U const *)&OSDbg_EndiannessTest;
 80023ee:	4b47      	ldr	r3, [pc, #284]	; (800250c <OS_Dbg_Init+0x134>)
 80023f0:	60bb      	str	r3, [r7, #8]

    p_temp08 = (CPU_INT08U const *)&OSDbg_CalledFromISRChkEn;
 80023f2:	4b47      	ldr	r3, [pc, #284]	; (8002510 <OS_Dbg_Init+0x138>)
 80023f4:	60fb      	str	r3, [r7, #12]

    p_temp16 = (CPU_INT16U const *)&OSDbg_FlagGrp;
 80023f6:	4b47      	ldr	r3, [pc, #284]	; (8002514 <OS_Dbg_Init+0x13c>)
 80023f8:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_FlagEn;
 80023fa:	4b47      	ldr	r3, [pc, #284]	; (8002518 <OS_Dbg_Init+0x140>)
 80023fc:	60fb      	str	r3, [r7, #12]
#if OS_CFG_FLAG_EN > 0u
    p_temp08 = (CPU_INT08U const *)&OSDbg_FlagDelEn;
 80023fe:	4b47      	ldr	r3, [pc, #284]	; (800251c <OS_Dbg_Init+0x144>)
 8002400:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_FlagModeClrEn;
 8002402:	4b47      	ldr	r3, [pc, #284]	; (8002520 <OS_Dbg_Init+0x148>)
 8002404:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_FlagPendAbortEn;
 8002406:	4b47      	ldr	r3, [pc, #284]	; (8002524 <OS_Dbg_Init+0x14c>)
 8002408:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_FlagGrpSize;
 800240a:	4b47      	ldr	r3, [pc, #284]	; (8002528 <OS_Dbg_Init+0x150>)
 800240c:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_FlagWidth;
 800240e:	4b47      	ldr	r3, [pc, #284]	; (800252c <OS_Dbg_Init+0x154>)
 8002410:	607b      	str	r3, [r7, #4]

#if OS_CFG_ISR_POST_DEFERRED_EN > 0u
    p_temp16 = (CPU_INT16U const *)&OSDbg_IntQ;
#endif

    p_temp08 = (CPU_INT08U const *)&OSDbg_ISRPostDeferredEn;
 8002412:	4b47      	ldr	r3, [pc, #284]	; (8002530 <OS_Dbg_Init+0x158>)
 8002414:	60fb      	str	r3, [r7, #12]

    p_temp16 = (CPU_INT16U const *)&OSDbg_Mem;
 8002416:	4b47      	ldr	r3, [pc, #284]	; (8002534 <OS_Dbg_Init+0x15c>)
 8002418:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_MemEn;
 800241a:	4b47      	ldr	r3, [pc, #284]	; (8002538 <OS_Dbg_Init+0x160>)
 800241c:	60fb      	str	r3, [r7, #12]
#if OS_CFG_MEM_EN > 0u
    p_temp16 = (CPU_INT16U const *)&OSDbg_MemSize;
 800241e:	4b47      	ldr	r3, [pc, #284]	; (800253c <OS_Dbg_Init+0x164>)
 8002420:	607b      	str	r3, [r7, #4]
#endif

    p_temp08 = (CPU_INT08U const *)&OSDbg_MsgEn;
 8002422:	4b47      	ldr	r3, [pc, #284]	; (8002540 <OS_Dbg_Init+0x168>)
 8002424:	60fb      	str	r3, [r7, #12]
#if (OS_MSG_EN) > 0u
    p_temp16 = (CPU_INT16U const *)&OSDbg_MsgSize;
 8002426:	4b47      	ldr	r3, [pc, #284]	; (8002544 <OS_Dbg_Init+0x16c>)
 8002428:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_MsgPoolSize;
 800242a:	4b47      	ldr	r3, [pc, #284]	; (8002548 <OS_Dbg_Init+0x170>)
 800242c:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_MsgQSize;
 800242e:	4b47      	ldr	r3, [pc, #284]	; (800254c <OS_Dbg_Init+0x174>)
 8002430:	607b      	str	r3, [r7, #4]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_Mutex;
 8002432:	4b47      	ldr	r3, [pc, #284]	; (8002550 <OS_Dbg_Init+0x178>)
 8002434:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_MutexEn;
 8002436:	4b47      	ldr	r3, [pc, #284]	; (8002554 <OS_Dbg_Init+0x17c>)
 8002438:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_MUTEX_EN) > 0u
    p_temp08 = (CPU_INT08U const *)&OSDbg_MutexDelEn;
 800243a:	4b47      	ldr	r3, [pc, #284]	; (8002558 <OS_Dbg_Init+0x180>)
 800243c:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_MutexPendAbortEn;
 800243e:	4b47      	ldr	r3, [pc, #284]	; (800255c <OS_Dbg_Init+0x184>)
 8002440:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_MutexSize;
 8002442:	4b47      	ldr	r3, [pc, #284]	; (8002560 <OS_Dbg_Init+0x188>)
 8002444:	607b      	str	r3, [r7, #4]
#endif

    p_temp08 = (CPU_INT08U const *)&OSDbg_ObjTypeChkEn;
 8002446:	4b47      	ldr	r3, [pc, #284]	; (8002564 <OS_Dbg_Init+0x18c>)
 8002448:	60fb      	str	r3, [r7, #12]

    p_temp08 = (CPU_INT08U const *)&OSDbg_PendMultiEn;
 800244a:	4b47      	ldr	r3, [pc, #284]	; (8002568 <OS_Dbg_Init+0x190>)
 800244c:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_PendDataSize;
 800244e:	4b47      	ldr	r3, [pc, #284]	; (800256c <OS_Dbg_Init+0x194>)
 8002450:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_PendListSize;
 8002452:	4b47      	ldr	r3, [pc, #284]	; (8002570 <OS_Dbg_Init+0x198>)
 8002454:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_PendObjSize;
 8002456:	4b47      	ldr	r3, [pc, #284]	; (8002574 <OS_Dbg_Init+0x19c>)
 8002458:	607b      	str	r3, [r7, #4]

    p_temp16 = (CPU_INT16U const *)&OSDbg_PrioMax;
 800245a:	4b47      	ldr	r3, [pc, #284]	; (8002578 <OS_Dbg_Init+0x1a0>)
 800245c:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_PrioTblSize;
 800245e:	4b47      	ldr	r3, [pc, #284]	; (800257c <OS_Dbg_Init+0x1a4>)
 8002460:	607b      	str	r3, [r7, #4]

    p_temp16 = (CPU_INT16U const *)&OSDbg_PtrSize;
 8002462:	4b47      	ldr	r3, [pc, #284]	; (8002580 <OS_Dbg_Init+0x1a8>)
 8002464:	607b      	str	r3, [r7, #4]

    p_temp16 = (CPU_INT16U const *)&OSDbg_Q;
 8002466:	4b47      	ldr	r3, [pc, #284]	; (8002584 <OS_Dbg_Init+0x1ac>)
 8002468:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_QEn;
 800246a:	4b47      	ldr	r3, [pc, #284]	; (8002588 <OS_Dbg_Init+0x1b0>)
 800246c:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_Q_EN) > 0u
    p_temp08 = (CPU_INT08U const *)&OSDbg_QDelEn;
 800246e:	4b47      	ldr	r3, [pc, #284]	; (800258c <OS_Dbg_Init+0x1b4>)
 8002470:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_QFlushEn;
 8002472:	4b47      	ldr	r3, [pc, #284]	; (8002590 <OS_Dbg_Init+0x1b8>)
 8002474:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_QPendAbortEn;
 8002476:	4b47      	ldr	r3, [pc, #284]	; (8002594 <OS_Dbg_Init+0x1bc>)
 8002478:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_QSize;
 800247a:	4b47      	ldr	r3, [pc, #284]	; (8002598 <OS_Dbg_Init+0x1c0>)
 800247c:	607b      	str	r3, [r7, #4]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_SchedRoundRobinEn;
 800247e:	4b47      	ldr	r3, [pc, #284]	; (800259c <OS_Dbg_Init+0x1c4>)
 8002480:	607b      	str	r3, [r7, #4]

    p_temp16 = (CPU_INT16U const *)&OSDbg_Sem;
 8002482:	4b47      	ldr	r3, [pc, #284]	; (80025a0 <OS_Dbg_Init+0x1c8>)
 8002484:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_SemEn;
 8002486:	4b47      	ldr	r3, [pc, #284]	; (80025a4 <OS_Dbg_Init+0x1cc>)
 8002488:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_SEM_EN) > 0u
    p_temp08 = (CPU_INT08U const *)&OSDbg_SemDelEn;
 800248a:	4b47      	ldr	r3, [pc, #284]	; (80025a8 <OS_Dbg_Init+0x1d0>)
 800248c:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_SemPendAbortEn;
 800248e:	4b47      	ldr	r3, [pc, #284]	; (80025ac <OS_Dbg_Init+0x1d4>)
 8002490:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_SemSetEn;
 8002492:	4b47      	ldr	r3, [pc, #284]	; (80025b0 <OS_Dbg_Init+0x1d8>)
 8002494:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_SemSize;
 8002496:	4b47      	ldr	r3, [pc, #284]	; (80025b4 <OS_Dbg_Init+0x1dc>)
 8002498:	607b      	str	r3, [r7, #4]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_RdyList;
 800249a:	4b47      	ldr	r3, [pc, #284]	; (80025b8 <OS_Dbg_Init+0x1e0>)
 800249c:	607b      	str	r3, [r7, #4]
    p_temp32 = (CPU_INT32U const *)&OSDbg_RdyListSize;
 800249e:	4b47      	ldr	r3, [pc, #284]	; (80025bc <OS_Dbg_Init+0x1e4>)
 80024a0:	60bb      	str	r3, [r7, #8]

    p_temp16 = (CPU_INT16U const *)&OSDbg_StkWidth;
 80024a2:	4b47      	ldr	r3, [pc, #284]	; (80025c0 <OS_Dbg_Init+0x1e8>)
 80024a4:	607b      	str	r3, [r7, #4]

    p_temp08 = (CPU_INT08U const *)&OSDbg_StatTaskEn;
 80024a6:	4b47      	ldr	r3, [pc, #284]	; (80025c4 <OS_Dbg_Init+0x1ec>)
 80024a8:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_StatTaskStkChkEn;
 80024aa:	4b47      	ldr	r3, [pc, #284]	; (80025c8 <OS_Dbg_Init+0x1f0>)
 80024ac:	60fb      	str	r3, [r7, #12]

    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskChangePrioEn;
 80024ae:	4b47      	ldr	r3, [pc, #284]	; (80025cc <OS_Dbg_Init+0x1f4>)
 80024b0:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskDelEn;
 80024b2:	4b47      	ldr	r3, [pc, #284]	; (80025d0 <OS_Dbg_Init+0x1f8>)
 80024b4:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskQEn;
 80024b6:	4b47      	ldr	r3, [pc, #284]	; (80025d4 <OS_Dbg_Init+0x1fc>)
 80024b8:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskQPendAbortEn;
 80024ba:	4b47      	ldr	r3, [pc, #284]	; (80025d8 <OS_Dbg_Init+0x200>)
 80024bc:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskProfileEn;
 80024be:	4b47      	ldr	r3, [pc, #284]	; (80025dc <OS_Dbg_Init+0x204>)
 80024c0:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_TaskRegTblSize;
 80024c2:	4b47      	ldr	r3, [pc, #284]	; (80025e0 <OS_Dbg_Init+0x208>)
 80024c4:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskSemPendAbortEn;
 80024c6:	4b47      	ldr	r3, [pc, #284]	; (80025e4 <OS_Dbg_Init+0x20c>)
 80024c8:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskSuspendEn;
 80024ca:	4b47      	ldr	r3, [pc, #284]	; (80025e8 <OS_Dbg_Init+0x210>)
 80024cc:	60fb      	str	r3, [r7, #12]

    p_temp16 = (CPU_INT16U const *)&OSDbg_TCBSize;
 80024ce:	4b47      	ldr	r3, [pc, #284]	; (80025ec <OS_Dbg_Init+0x214>)
 80024d0:	607b      	str	r3, [r7, #4]

    p_temp16 = (CPU_INT16U const *)&OSDbg_TickListSize;
 80024d2:	4b47      	ldr	r3, [pc, #284]	; (80025f0 <OS_Dbg_Init+0x218>)
 80024d4:	607b      	str	r3, [r7, #4]

    p_temp08 = (CPU_INT08U const *)&OSDbg_TimeDlyHMSMEn;
 80024d6:	4b47      	ldr	r3, [pc, #284]	; (80025f4 <OS_Dbg_Init+0x21c>)
 80024d8:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TimeDlyResumeEn;
 80024da:	4b47      	ldr	r3, [pc, #284]	; (80025f8 <OS_Dbg_Init+0x220>)
 80024dc:	60fb      	str	r3, [r7, #12]


    p_temp16 = (CPU_INT16U const *)&OSDbg_Tmr;
 80024de:	4b47      	ldr	r3, [pc, #284]	; (80025fc <OS_Dbg_Init+0x224>)
 80024e0:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TmrEn;
 80024e2:	4b47      	ldr	r3, [pc, #284]	; (8002600 <OS_Dbg_Init+0x228>)
 80024e4:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_TMR_EN) > 0u
    p_temp08 = (CPU_INT08U const *)&OSDbg_TmrDelEn;
 80024e6:	4b47      	ldr	r3, [pc, #284]	; (8002604 <OS_Dbg_Init+0x22c>)
 80024e8:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_TmrSize;
 80024ea:	4b47      	ldr	r3, [pc, #284]	; (8002608 <OS_Dbg_Init+0x230>)
 80024ec:	607b      	str	r3, [r7, #4]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_VersionNbr;
 80024ee:	4b47      	ldr	r3, [pc, #284]	; (800260c <OS_Dbg_Init+0x234>)
 80024f0:	607b      	str	r3, [r7, #4]

    p_temp08 = p_temp08;                                     /* Prevent compiler warning for not using 'p_temp'        */
    p_temp16 = p_temp16;
    p_temp32 = p_temp32;
}
 80024f2:	bf00      	nop
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr
 80024fc:	0800e93e 	.word	0x0800e93e
 8002500:	0800eaa8 	.word	0x0800eaa8
 8002504:	0800e93f 	.word	0x0800e93f
 8002508:	0800e940 	.word	0x0800e940
 800250c:	0800e944 	.word	0x0800e944
 8002510:	0800e948 	.word	0x0800e948
 8002514:	0800e94c 	.word	0x0800e94c
 8002518:	0800e949 	.word	0x0800e949
 800251c:	0800e974 	.word	0x0800e974
 8002520:	0800e975 	.word	0x0800e975
 8002524:	0800e976 	.word	0x0800e976
 8002528:	0800e978 	.word	0x0800e978
 800252c:	0800e97a 	.word	0x0800e97a
 8002530:	0800e97c 	.word	0x0800e97c
 8002534:	0800e980 	.word	0x0800e980
 8002538:	0800e9a0 	.word	0x0800e9a0
 800253c:	0800e9a2 	.word	0x0800e9a2
 8002540:	0800e9a4 	.word	0x0800e9a4
 8002544:	0800e9a6 	.word	0x0800e9a6
 8002548:	0800e9a8 	.word	0x0800e9a8
 800254c:	0800e9aa 	.word	0x0800e9aa
 8002550:	0800e9ac 	.word	0x0800e9ac
 8002554:	0800e9dc 	.word	0x0800e9dc
 8002558:	0800e9dd 	.word	0x0800e9dd
 800255c:	0800e9de 	.word	0x0800e9de
 8002560:	0800e9e0 	.word	0x0800e9e0
 8002564:	0800e9e2 	.word	0x0800e9e2
 8002568:	0800e9e3 	.word	0x0800e9e3
 800256c:	0800e9e4 	.word	0x0800e9e4
 8002570:	0800e9e6 	.word	0x0800e9e6
 8002574:	0800e9e8 	.word	0x0800e9e8
 8002578:	0800e9ea 	.word	0x0800e9ea
 800257c:	0800e9ec 	.word	0x0800e9ec
 8002580:	0800e9ee 	.word	0x0800e9ee
 8002584:	0800e9f0 	.word	0x0800e9f0
 8002588:	0800ea20 	.word	0x0800ea20
 800258c:	0800ea21 	.word	0x0800ea21
 8002590:	0800ea22 	.word	0x0800ea22
 8002594:	0800ea23 	.word	0x0800ea23
 8002598:	0800ea24 	.word	0x0800ea24
 800259c:	0800ea26 	.word	0x0800ea26
 80025a0:	0800ea28 	.word	0x0800ea28
 80025a4:	0800ea50 	.word	0x0800ea50
 80025a8:	0800ea51 	.word	0x0800ea51
 80025ac:	0800ea52 	.word	0x0800ea52
 80025b0:	0800ea53 	.word	0x0800ea53
 80025b4:	0800ea54 	.word	0x0800ea54
 80025b8:	0800ea56 	.word	0x0800ea56
 80025bc:	0800ea58 	.word	0x0800ea58
 80025c0:	0800ea5c 	.word	0x0800ea5c
 80025c4:	0800ea5d 	.word	0x0800ea5d
 80025c8:	0800ea5e 	.word	0x0800ea5e
 80025cc:	0800ea5f 	.word	0x0800ea5f
 80025d0:	0800ea60 	.word	0x0800ea60
 80025d4:	0800ea61 	.word	0x0800ea61
 80025d8:	0800ea62 	.word	0x0800ea62
 80025dc:	0800ea63 	.word	0x0800ea63
 80025e0:	0800ea64 	.word	0x0800ea64
 80025e4:	0800ea66 	.word	0x0800ea66
 80025e8:	0800ea67 	.word	0x0800ea67
 80025ec:	0800ea68 	.word	0x0800ea68
 80025f0:	0800ea6a 	.word	0x0800ea6a
 80025f4:	0800ea6c 	.word	0x0800ea6c
 80025f8:	0800ea6d 	.word	0x0800ea6d
 80025fc:	0800ea70 	.word	0x0800ea70
 8002600:	0800eaa0 	.word	0x0800eaa0
 8002604:	0800eaa1 	.word	0x0800eaa1
 8002608:	0800eaa2 	.word	0x0800eaa2
 800260c:	0800eaa4 	.word	0x0800eaa4

08002610 <OSMutexCreate>:
*/

void  OSMutexCreate (OS_MUTEX  *p_mutex,
                     CPU_CHAR  *p_name,
                     OS_ERR    *p_err)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
    CPU_SR_ALLOC();
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to be called from an ISR                   */
 8002620:	4b1e      	ldr	r3, [pc, #120]	; (800269c <OSMutexCreate+0x8c>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d004      	beq.n	8002632 <OSMutexCreate+0x22>
       *p_err = OS_ERR_CREATE_ISR;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f642 62e1 	movw	r2, #12001	; 0x2ee1
 800262e:	801a      	strh	r2, [r3, #0]
        return;
 8002630:	e031      	b.n	8002696 <OSMutexCreate+0x86>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_mutex == (OS_MUTEX *)0) {                         /* Validate 'p_mutex'                                     */
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d104      	bne.n	8002642 <OSMutexCreate+0x32>
       *p_err = OS_ERR_OBJ_PTR_NULL;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f645 52c3 	movw	r2, #24003	; 0x5dc3
 800263e:	801a      	strh	r2, [r3, #0]
        return;
 8002640:	e029      	b.n	8002696 <OSMutexCreate+0x86>
    }
#endif

    OS_CRITICAL_ENTER();
 8002642:	f7fd fe4d 	bl	80002e0 <CPU_SR_Save>
 8002646:	6178      	str	r0, [r7, #20]
#if OS_OBJ_TYPE_REQ > 0u
    p_mutex->Type              =  OS_OBJ_TYPE_MUTEX;        /* Mark the data structure as a mutex                     */
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	4a15      	ldr	r2, [pc, #84]	; (80026a0 <OSMutexCreate+0x90>)
 800264c:	601a      	str	r2, [r3, #0]
#endif
#if OS_CFG_DBG_EN > 0u
    p_mutex->NamePtr           =  p_name;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	605a      	str	r2, [r3, #4]
#else
    (void)&p_name;
#endif
    p_mutex->MutexGrpNextPtr   = (OS_MUTEX     *)0;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	621a      	str	r2, [r3, #32]
    p_mutex->OwnerTCBPtr       = (OS_TCB       *)0;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	625a      	str	r2, [r3, #36]	; 0x24
    p_mutex->OwnerNestingCtr   = (OS_NESTING_CTR)0;         /* Mutex is available                                     */
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    p_mutex->TS                = (CPU_TS        )0;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	62da      	str	r2, [r3, #44]	; 0x2c
    OS_PendListInit(&p_mutex->PendList);                    /* Initialize the waiting list                            */
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	3308      	adds	r3, #8
 8002672:	4618      	mov	r0, r3
 8002674:	f001 ff05 	bl	8004482 <OS_PendListInit>

#if OS_CFG_DBG_EN > 0u
    OS_MutexDbgListAdd(p_mutex);
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f000 f9f9 	bl	8002a70 <OS_MutexDbgListAdd>
#endif

    OSMutexQty++;
 800267e:	4b09      	ldr	r3, [pc, #36]	; (80026a4 <OSMutexCreate+0x94>)
 8002680:	881b      	ldrh	r3, [r3, #0]
 8002682:	3301      	adds	r3, #1
 8002684:	b29a      	uxth	r2, r3
 8002686:	4b07      	ldr	r3, [pc, #28]	; (80026a4 <OSMutexCreate+0x94>)
 8002688:	801a      	strh	r2, [r3, #0]

#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_MUTEX_CREATE(p_mutex, p_name);                 /* Record the event.                                      */
#endif

    OS_CRITICAL_EXIT_NO_SCHED();
 800268a:	6978      	ldr	r0, [r7, #20]
 800268c:	f7fd fe2c 	bl	80002e8 <CPU_SR_Restore>
   *p_err = OS_ERR_NONE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	801a      	strh	r2, [r3, #0]
}
 8002696:	3718      	adds	r7, #24
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	2000219e 	.word	0x2000219e
 80026a0:	5854554d 	.word	0x5854554d
 80026a4:	2000239c 	.word	0x2000239c

080026a8 <OSMutexPend>:
void  OSMutexPend (OS_MUTEX  *p_mutex,
                   OS_TICK    timeout,
                   OS_OPT     opt,
                   CPU_TS    *p_ts,
                   OS_ERR    *p_err)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08e      	sub	sp, #56	; 0x38
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	603b      	str	r3, [r7, #0]
 80026b4:	4613      	mov	r3, r2
 80026b6:	80fb      	strh	r3, [r7, #6]
    OS_PEND_DATA  pend_data;
    OS_TCB       *p_tcb;
    CPU_SR_ALLOC();
 80026b8:	2300      	movs	r3, #0
 80026ba:	637b      	str	r3, [r7, #52]	; 0x34
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 80026bc:	4b7a      	ldr	r3, [pc, #488]	; (80028a8 <OSMutexPend+0x200>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d004      	beq.n	80026ce <OSMutexPend+0x26>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_PEND_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_PEND_ISR;
 80026c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026c6:	f246 12ae 	movw	r2, #25006	; 0x61ae
 80026ca:	801a      	strh	r2, [r3, #0]
        return;
 80026cc:	e0e9      	b.n	80028a2 <OSMutexPend+0x1fa>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_mutex == (OS_MUTEX *)0) {                         /* Validate arguments                                     */
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d104      	bne.n	80026de <OSMutexPend+0x36>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_PEND_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_PTR_NULL;
 80026d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026d6:	f645 52c3 	movw	r2, #24003	; 0x5dc3
 80026da:	801a      	strh	r2, [r3, #0]
        return;
 80026dc:	e0e1      	b.n	80028a2 <OSMutexPend+0x1fa>
    }
    switch (opt) {                                          /* Validate 'opt'                                         */
 80026de:	88fb      	ldrh	r3, [r7, #6]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d007      	beq.n	80026f4 <OSMutexPend+0x4c>
 80026e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026e8:	d004      	beq.n	80026f4 <OSMutexPend+0x4c>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_MUTEX_PEND_FAILED(p_mutex);           /* Record the event.                                      */
#endif
            *p_err = OS_ERR_OPT_INVALID;
 80026ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026ec:	f645 6225 	movw	r2, #24101	; 0x5e25
 80026f0:	801a      	strh	r2, [r3, #0]
             return;
 80026f2:	e0d6      	b.n	80028a2 <OSMutexPend+0x1fa>
             break;
 80026f4:	bf00      	nop
    }
#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_mutex->Type != OS_OBJ_TYPE_MUTEX) {               /* Make sure mutex was created                            */
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a6c      	ldr	r2, [pc, #432]	; (80028ac <OSMutexPend+0x204>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d004      	beq.n	800270a <OSMutexPend+0x62>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_PEND_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_TYPE;
 8002700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002702:	f645 52c4 	movw	r2, #24004	; 0x5dc4
 8002706:	801a      	strh	r2, [r3, #0]
        return;
 8002708:	e0cb      	b.n	80028a2 <OSMutexPend+0x1fa>
    }
#endif

    if (p_ts != (CPU_TS *)0) {
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d002      	beq.n	8002716 <OSMutexPend+0x6e>
       *p_ts  = (CPU_TS  )0;                                /* Initialize the returned timestamp                      */
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]
    }

    CPU_CRITICAL_ENTER();
 8002716:	f7fd fde3 	bl	80002e0 <CPU_SR_Save>
 800271a:	6378      	str	r0, [r7, #52]	; 0x34
    if (p_mutex->OwnerNestingCtr == (OS_NESTING_CTR)0) {    /* Resource available?                                    */
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002722:	2b00      	cmp	r3, #0
 8002724:	d11b      	bne.n	800275e <OSMutexPend+0xb6>
        p_mutex->OwnerTCBPtr       =  OSTCBCurPtr;          /* Yes, caller may proceed                                */
 8002726:	4b62      	ldr	r3, [pc, #392]	; (80028b0 <OSMutexPend+0x208>)
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	625a      	str	r2, [r3, #36]	; 0x24
        p_mutex->OwnerNestingCtr   = (OS_NESTING_CTR)1;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        if (p_ts != (CPU_TS *)0) {
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d003      	beq.n	8002744 <OSMutexPend+0x9c>
           *p_ts  = p_mutex->TS;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	601a      	str	r2, [r3, #0]
        }
        OS_MutexGrpAdd(OSTCBCurPtr, p_mutex);               /* Add mutex to owner's group                             */
 8002744:	4b5a      	ldr	r3, [pc, #360]	; (80028b0 <OSMutexPend+0x208>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68f9      	ldr	r1, [r7, #12]
 800274a:	4618      	mov	r0, r3
 800274c:	f000 f9cc 	bl	8002ae8 <OS_MutexGrpAdd>
        CPU_CRITICAL_EXIT();
 8002750:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002752:	f7fd fdc9 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_PEND(p_mutex);                       /* Record the event.                                      */
#endif
       *p_err = OS_ERR_NONE;
 8002756:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002758:	2200      	movs	r2, #0
 800275a:	801a      	strh	r2, [r3, #0]
        return;
 800275c:	e0a1      	b.n	80028a2 <OSMutexPend+0x1fa>
    }

    if (OSTCBCurPtr == p_mutex->OwnerTCBPtr) {              /* See if current task is already the owner of the mutex  */
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002762:	4b53      	ldr	r3, [pc, #332]	; (80028b0 <OSMutexPend+0x208>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	429a      	cmp	r2, r3
 8002768:	d116      	bne.n	8002798 <OSMutexPend+0xf0>
        p_mutex->OwnerNestingCtr++;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002770:	3301      	adds	r3, #1
 8002772:	b2da      	uxtb	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        if (p_ts != (CPU_TS *)0) {
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d003      	beq.n	8002788 <OSMutexPend+0xe0>
           *p_ts  = p_mutex->TS;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	601a      	str	r2, [r3, #0]
        }
        CPU_CRITICAL_EXIT();
 8002788:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800278a:	f7fd fdad 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_PEND_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_MUTEX_OWNER;                         /* Indicate that current task already owns the mutex      */
 800278e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002790:	f245 7282 	movw	r2, #22402	; 0x5782
 8002794:	801a      	strh	r2, [r3, #0]
        return;
 8002796:	e084      	b.n	80028a2 <OSMutexPend+0x1fa>
    }

    if ((opt & OS_OPT_PEND_NON_BLOCKING) != (OS_OPT)0) {    /* Caller wants to block if not available?                */
 8002798:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800279c:	2b00      	cmp	r3, #0
 800279e:	da07      	bge.n	80027b0 <OSMutexPend+0x108>
        CPU_CRITICAL_EXIT();
 80027a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80027a2:	f7fd fda1 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_PEND_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_PEND_WOULD_BLOCK;                    /* No                                                     */
 80027a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027a8:	f246 12b0 	movw	r2, #25008	; 0x61b0
 80027ac:	801a      	strh	r2, [r3, #0]
        return;
 80027ae:	e078      	b.n	80028a2 <OSMutexPend+0x1fa>
    } else {
        if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {    /* Can't pend when the scheduler is locked                */
 80027b0:	4b40      	ldr	r3, [pc, #256]	; (80028b4 <OSMutexPend+0x20c>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d007      	beq.n	80027c8 <OSMutexPend+0x120>
            CPU_CRITICAL_EXIT();
 80027b8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80027ba:	f7fd fd95 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
            TRACE_OS_MUTEX_PEND_FAILED(p_mutex);            /* Record the event.                                      */
#endif
           *p_err = OS_ERR_SCHED_LOCKED;
 80027be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027c0:	f646 5263 	movw	r2, #28003	; 0x6d63
 80027c4:	801a      	strh	r2, [r3, #0]
            return;
 80027c6:	e06c      	b.n	80028a2 <OSMutexPend+0x1fa>
        }
    }
                                                            /* Lock the scheduler/re-enable interrupts                */
    OS_CRITICAL_ENTER_CPU_EXIT();
    p_tcb = p_mutex->OwnerTCBPtr;                           /* Point to the TCB of the Mutex owner                    */
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	633b      	str	r3, [r7, #48]	; 0x30
    if (p_tcb->Prio > OSTCBCurPtr->Prio) {                  /* See if mutex owner has a lower priority than current   */
 80027ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d0:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 80027d4:	4b36      	ldr	r3, [pc, #216]	; (80028b0 <OSMutexPend+0x208>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80027dc:	429a      	cmp	r2, r3
 80027de:	d907      	bls.n	80027f0 <OSMutexPend+0x148>
        OS_TaskChangePrio(p_tcb, OSTCBCurPtr->Prio);
 80027e0:	4b33      	ldr	r3, [pc, #204]	; (80028b0 <OSMutexPend+0x208>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80027e8:	4619      	mov	r1, r3
 80027ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027ec:	f003 f89a 	bl	8005924 <OS_TaskChangePrio>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
                 TRACE_OS_MUTEX_TASK_PRIO_INHERIT(p_tcb, p_tcb->Prio);
#endif
    }

    OS_Pend(&pend_data,                                     /* Block task pending on Mutex                            */
 80027f0:	f107 0010 	add.w	r0, r7, #16
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2204      	movs	r2, #4
 80027f8:	68f9      	ldr	r1, [r7, #12]
 80027fa:	f001 fd3d 	bl	8004278 <OS_Pend>
            (OS_PEND_OBJ *)((void *)p_mutex),
             OS_TASK_PEND_ON_MUTEX,
             timeout);

    OS_CRITICAL_EXIT_NO_SCHED();
 80027fe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002800:	f7fd fd72 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_MUTEX_PEND_BLOCK(p_mutex);                     /* Record the event.                                      */
#endif
    OSSched();                                              /* Find the next highest priority task ready to run       */
 8002804:	f001 fbcc 	bl	8003fa0 <OSSched>

    CPU_CRITICAL_ENTER();
 8002808:	f7fd fd6a 	bl	80002e0 <CPU_SR_Save>
 800280c:	6378      	str	r0, [r7, #52]	; 0x34
    switch (OSTCBCurPtr->PendStatus) {
 800280e:	4b28      	ldr	r3, [pc, #160]	; (80028b0 <OSMutexPend+0x208>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002816:	2b03      	cmp	r3, #3
 8002818:	d83b      	bhi.n	8002892 <OSMutexPend+0x1ea>
 800281a:	a201      	add	r2, pc, #4	; (adr r2, 8002820 <OSMutexPend+0x178>)
 800281c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002820:	08002831 	.word	0x08002831
 8002824:	08002849 	.word	0x08002849
 8002828:	08002879 	.word	0x08002879
 800282c:	08002863 	.word	0x08002863
        case OS_STATUS_PEND_OK:                             /* We got the mutex                                       */
             if (p_ts != (CPU_TS *)0) {
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d004      	beq.n	8002840 <OSMutexPend+0x198>
                *p_ts  = OSTCBCurPtr->TS;
 8002836:	4b1e      	ldr	r3, [pc, #120]	; (80028b0 <OSMutexPend+0x208>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_MUTEX_PEND(p_mutex);                  /* Record the event.                                      */
#endif
            *p_err = OS_ERR_NONE;
 8002840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002842:	2200      	movs	r2, #0
 8002844:	801a      	strh	r2, [r3, #0]
             break;
 8002846:	e029      	b.n	800289c <OSMutexPend+0x1f4>

        case OS_STATUS_PEND_ABORT:                          /* Indicate that we aborted                               */
             if (p_ts != (CPU_TS *)0) {
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d004      	beq.n	8002858 <OSMutexPend+0x1b0>
                *p_ts  = OSTCBCurPtr->TS;
 800284e:	4b18      	ldr	r3, [pc, #96]	; (80028b0 <OSMutexPend+0x208>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_MUTEX_PEND_FAILED(p_mutex);           /* Record the event.                                      */
#endif
            *p_err = OS_ERR_PEND_ABORT;
 8002858:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800285a:	f246 12a9 	movw	r2, #25001	; 0x61a9
 800285e:	801a      	strh	r2, [r3, #0]
             break;
 8002860:	e01c      	b.n	800289c <OSMutexPend+0x1f4>

        case OS_STATUS_PEND_TIMEOUT:                        /* Indicate that we didn't get mutex within timeout       */
             if (p_ts != (CPU_TS *)0) {
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d002      	beq.n	800286e <OSMutexPend+0x1c6>
                *p_ts  = (CPU_TS  )0;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_MUTEX_PEND_FAILED(p_mutex);           /* Record the event.                                      */
#endif
            *p_err = OS_ERR_TIMEOUT;
 800286e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002870:	f247 22d9 	movw	r2, #29401	; 0x72d9
 8002874:	801a      	strh	r2, [r3, #0]
             break;
 8002876:	e011      	b.n	800289c <OSMutexPend+0x1f4>

        case OS_STATUS_PEND_DEL:                            /* Indicate that object pended on has been deleted        */
             if (p_ts != (CPU_TS *)0) {
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d004      	beq.n	8002888 <OSMutexPend+0x1e0>
                *p_ts  = OSTCBCurPtr->TS;
 800287e:	4b0c      	ldr	r3, [pc, #48]	; (80028b0 <OSMutexPend+0x208>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_MUTEX_PEND_FAILED(p_mutex);           /* Record the event.                                      */
#endif
            *p_err = OS_ERR_OBJ_DEL;
 8002888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800288a:	f645 52c2 	movw	r2, #24002	; 0x5dc2
 800288e:	801a      	strh	r2, [r3, #0]
             break;
 8002890:	e004      	b.n	800289c <OSMutexPend+0x1f4>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_MUTEX_PEND_FAILED(p_mutex);           /* Record the event.                                      */
#endif
            *p_err = OS_ERR_STATUS_INVALID;
 8002892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002894:	f646 622e 	movw	r2, #28206	; 0x6e2e
 8002898:	801a      	strh	r2, [r3, #0]
             break;
 800289a:	bf00      	nop
    }
    CPU_CRITICAL_EXIT();
 800289c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800289e:	f7fd fd23 	bl	80002e8 <CPU_SR_Restore>
}
 80028a2:	3738      	adds	r7, #56	; 0x38
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	2000219e 	.word	0x2000219e
 80028ac:	5854554d 	.word	0x5854554d
 80028b0:	20002174 	.word	0x20002174
 80028b4:	20001f08 	.word	0x20001f08

080028b8 <OSMutexPost>:
*/

void  OSMutexPost (OS_MUTEX  *p_mutex,
                   OS_OPT     opt,
                   OS_ERR    *p_err)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08c      	sub	sp, #48	; 0x30
 80028bc:	af02      	add	r7, sp, #8
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	460b      	mov	r3, r1
 80028c2:	607a      	str	r2, [r7, #4]
 80028c4:	817b      	strh	r3, [r7, #10]
    OS_PEND_LIST  *p_pend_list;
    OS_TCB        *p_tcb;
    CPU_TS         ts;
    OS_PRIO        prio_new;
    CPU_SR_ALLOC();
 80028c6:	2300      	movs	r3, #0
 80028c8:	627b      	str	r3, [r7, #36]	; 0x24
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 80028ca:	4b65      	ldr	r3, [pc, #404]	; (8002a60 <OSMutexPost+0x1a8>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d004      	beq.n	80028dc <OSMutexPost+0x24>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_POST_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_POST_ISR;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f246 220e 	movw	r2, #25102	; 0x620e
 80028d8:	801a      	strh	r2, [r3, #0]
        return;
 80028da:	e0be      	b.n	8002a5a <OSMutexPost+0x1a2>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_mutex == (OS_MUTEX *)0) {                         /* Validate 'p_mutex'                                     */
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d104      	bne.n	80028ec <OSMutexPost+0x34>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_POST_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_PTR_NULL;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f645 52c3 	movw	r2, #24003	; 0x5dc3
 80028e8:	801a      	strh	r2, [r3, #0]
        return;
 80028ea:	e0b6      	b.n	8002a5a <OSMutexPost+0x1a2>
    }
    switch (opt) {                                          /* Validate 'opt'                                         */
 80028ec:	897b      	ldrh	r3, [r7, #10]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d007      	beq.n	8002902 <OSMutexPost+0x4a>
 80028f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028f6:	d004      	beq.n	8002902 <OSMutexPost+0x4a>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_MUTEX_POST_FAILED(p_mutex);           /* Record the event.                                      */
#endif
            *p_err =  OS_ERR_OPT_INVALID;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f645 6225 	movw	r2, #24101	; 0x5e25
 80028fe:	801a      	strh	r2, [r3, #0]
             return;
 8002900:	e0ab      	b.n	8002a5a <OSMutexPost+0x1a2>
             break;
 8002902:	bf00      	nop
    }
#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_mutex->Type != OS_OBJ_TYPE_MUTEX) {               /* Make sure mutex was created                            */
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a56      	ldr	r2, [pc, #344]	; (8002a64 <OSMutexPost+0x1ac>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d004      	beq.n	8002918 <OSMutexPost+0x60>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_POST_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_TYPE;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f645 52c4 	movw	r2, #24004	; 0x5dc4
 8002914:	801a      	strh	r2, [r3, #0]
        return;
 8002916:	e0a0      	b.n	8002a5a <OSMutexPost+0x1a2>
    }
#endif

    CPU_CRITICAL_ENTER();
 8002918:	f7fd fce2 	bl	80002e0 <CPU_SR_Save>
 800291c:	6278      	str	r0, [r7, #36]	; 0x24
    if (OSTCBCurPtr != p_mutex->OwnerTCBPtr) {              /* Make sure the mutex owner is releasing the mutex       */
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002922:	4b51      	ldr	r3, [pc, #324]	; (8002a68 <OSMutexPost+0x1b0>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	429a      	cmp	r2, r3
 8002928:	d007      	beq.n	800293a <OSMutexPost+0x82>
        CPU_CRITICAL_EXIT();
 800292a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800292c:	f7fd fcdc 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_POST_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_MUTEX_NOT_OWNER;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f245 7281 	movw	r2, #22401	; 0x5781
 8002936:	801a      	strh	r2, [r3, #0]
        return;
 8002938:	e08f      	b.n	8002a5a <OSMutexPost+0x1a2>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_MUTEX_POST(p_mutex);                           /* Record the event.                                      */
#endif

    OS_CRITICAL_ENTER_CPU_EXIT();
    ts          = OS_TS_GET();                              /* Get timestamp                                          */
 800293a:	f003 fd23 	bl	8006384 <CPU_TS_TmrRd>
 800293e:	6238      	str	r0, [r7, #32]
    p_mutex->TS = ts;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6a3a      	ldr	r2, [r7, #32]
 8002944:	62da      	str	r2, [r3, #44]	; 0x2c
    p_mutex->OwnerNestingCtr--;                             /* Decrement owner's nesting counter                      */
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800294c:	3b01      	subs	r3, #1
 800294e:	b2da      	uxtb	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (p_mutex->OwnerNestingCtr > (OS_NESTING_CTR)0) {     /* Are we done with all nestings?                         */
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800295c:	2b00      	cmp	r3, #0
 800295e:	d007      	beq.n	8002970 <OSMutexPost+0xb8>
        OS_CRITICAL_EXIT();                                 /* No                                                     */
 8002960:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002962:	f7fd fcc1 	bl	80002e8 <CPU_SR_Restore>
       *p_err = OS_ERR_MUTEX_NESTING;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f245 7283 	movw	r2, #22403	; 0x5783
 800296c:	801a      	strh	r2, [r3, #0]
        return;
 800296e:	e074      	b.n	8002a5a <OSMutexPost+0x1a2>
    }

    OS_MutexGrpRemove(OSTCBCurPtr, p_mutex);                /* Remove mutex from owner's group                        */
 8002970:	4b3d      	ldr	r3, [pc, #244]	; (8002a68 <OSMutexPost+0x1b0>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68f9      	ldr	r1, [r7, #12]
 8002976:	4618      	mov	r0, r3
 8002978:	f000 f8c7 	bl	8002b0a <OS_MutexGrpRemove>

    p_pend_list = &p_mutex->PendList;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	3308      	adds	r3, #8
 8002980:	61fb      	str	r3, [r7, #28]
    if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0) {         /* Any task waiting on mutex?                             */
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	891b      	ldrh	r3, [r3, #8]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10d      	bne.n	80029a6 <OSMutexPost+0xee>
        p_mutex->OwnerTCBPtr     = (OS_TCB       *)0;       /* No                                                     */
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	625a      	str	r2, [r3, #36]	; 0x24
        p_mutex->OwnerNestingCtr = (OS_NESTING_CTR)0;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        OS_CRITICAL_EXIT();
 8002998:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800299a:	f7fd fca5 	bl	80002e8 <CPU_SR_Restore>
       *p_err = OS_ERR_NONE;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	801a      	strh	r2, [r3, #0]
        return;
 80029a4:	e059      	b.n	8002a5a <OSMutexPost+0x1a2>
    }
                                                            /* Yes                                                    */
    if (OSTCBCurPtr->Prio != OSTCBCurPtr->BasePrio) {       /* Has owner inherited a priority?                        */
 80029a6:	4b30      	ldr	r3, [pc, #192]	; (8002a68 <OSMutexPost+0x1b0>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 80029ae:	4b2e      	ldr	r3, [pc, #184]	; (8002a68 <OSMutexPost+0x1b0>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d02c      	beq.n	8002a14 <OSMutexPost+0x15c>
        prio_new = OS_MutexGrpPrioFindHighest(OSTCBCurPtr); /* Yes, find highest priority pending                     */
 80029ba:	4b2b      	ldr	r3, [pc, #172]	; (8002a68 <OSMutexPost+0x1b0>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 f8bf 	bl	8002b42 <OS_MutexGrpPrioFindHighest>
 80029c4:	4603      	mov	r3, r0
 80029c6:	76fb      	strb	r3, [r7, #27]
        prio_new = prio_new > OSTCBCurPtr->BasePrio ? OSTCBCurPtr->BasePrio : prio_new;
 80029c8:	4b27      	ldr	r3, [pc, #156]	; (8002a68 <OSMutexPost+0x1b0>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029d0:	7efa      	ldrb	r2, [r7, #27]
 80029d2:	4293      	cmp	r3, r2
 80029d4:	bf28      	it	cs
 80029d6:	4613      	movcs	r3, r2
 80029d8:	76fb      	strb	r3, [r7, #27]
        if (prio_new > OSTCBCurPtr->Prio) {
 80029da:	4b23      	ldr	r3, [pc, #140]	; (8002a68 <OSMutexPost+0x1b0>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80029e2:	7efa      	ldrb	r2, [r7, #27]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d915      	bls.n	8002a14 <OSMutexPost+0x15c>
            OS_RdyListRemove(OSTCBCurPtr);
 80029e8:	4b1f      	ldr	r3, [pc, #124]	; (8002a68 <OSMutexPost+0x1b0>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f001 ffcb 	bl	8004988 <OS_RdyListRemove>
            OSTCBCurPtr->Prio = prio_new;                   /* Lower owner's priority back to its original one        */
 80029f2:	4b1d      	ldr	r3, [pc, #116]	; (8002a68 <OSMutexPost+0x1b0>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	7efa      	ldrb	r2, [r7, #27]
 80029f8:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
            TRACE_OS_MUTEX_TASK_PRIO_DISINHERIT(OSTCBCurPtr, prio_new);
#endif
            OS_PrioInsert(prio_new);
 80029fc:	7efb      	ldrb	r3, [r7, #27]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 fde6 	bl	80035d0 <OS_PrioInsert>
            OS_RdyListInsertTail(OSTCBCurPtr);              /* Insert owner in ready list at new priority             */
 8002a04:	4b18      	ldr	r3, [pc, #96]	; (8002a68 <OSMutexPost+0x1b0>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f001 ff7d 	bl	8004908 <OS_RdyListInsertTail>
            OSPrioCur         = prio_new;
 8002a0e:	4a17      	ldr	r2, [pc, #92]	; (8002a6c <OSMutexPost+0x1b4>)
 8002a10:	7efb      	ldrb	r3, [r7, #27]
 8002a12:	7013      	strb	r3, [r2, #0]
        }
    }
                                                            /* Get TCB from head of pend list                         */
    p_tcb                      = p_pend_list->HeadPtr->TCBPtr;
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	617b      	str	r3, [r7, #20]
    p_mutex->OwnerTCBPtr       = p_tcb;                     /* Give mutex to new owner                                */
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	625a      	str	r2, [r3, #36]	; 0x24
    p_mutex->OwnerNestingCtr   = (OS_NESTING_CTR)1;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    OS_MutexGrpAdd(p_tcb, p_mutex);
 8002a2a:	68f9      	ldr	r1, [r7, #12]
 8002a2c:	6978      	ldr	r0, [r7, #20]
 8002a2e:	f000 f85b 	bl	8002ae8 <OS_MutexGrpAdd>
                                                            /* Post to mutex                                          */
    OS_Post((OS_PEND_OBJ *)((void *)p_mutex),
 8002a32:	6a3b      	ldr	r3, [r7, #32]
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	2300      	movs	r3, #0
 8002a38:	2200      	movs	r2, #0
 8002a3a:	6979      	ldr	r1, [r7, #20]
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f001 fe19 	bl	8004674 <OS_Post>
            (OS_TCB      *)p_tcb,
            (void        *)0,
            (OS_MSG_SIZE  )0,
            (CPU_TS       )ts);

    OS_CRITICAL_EXIT_NO_SCHED();
 8002a42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a44:	f7fd fc50 	bl	80002e8 <CPU_SR_Restore>

    if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0) {
 8002a48:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	db01      	blt.n	8002a54 <OSMutexPost+0x19c>
        OSSched();                                          /* Run the scheduler                                      */
 8002a50:	f001 faa6 	bl	8003fa0 <OSSched>
    }

   *p_err = OS_ERR_NONE;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	801a      	strh	r2, [r3, #0]
}
 8002a5a:	3728      	adds	r7, #40	; 0x28
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	2000219e 	.word	0x2000219e
 8002a64:	5854554d 	.word	0x5854554d
 8002a68:	20002174 	.word	0x20002174
 8002a6c:	200020a8 	.word	0x200020a8

08002a70 <OS_MutexDbgListAdd>:
*/


#if OS_CFG_DBG_EN > 0u
void  OS_MutexDbgListAdd (OS_MUTEX  *p_mutex)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
    p_mutex->DbgNamePtr               = (CPU_CHAR *)((void *)" ");
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a0e      	ldr	r2, [pc, #56]	; (8002ab4 <OS_MutexDbgListAdd+0x44>)
 8002a7c:	61da      	str	r2, [r3, #28]
    p_mutex->DbgPrevPtr               = (OS_MUTEX *)0;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	615a      	str	r2, [r3, #20]
    if (OSMutexDbgListPtr == (OS_MUTEX *)0) {
 8002a84:	4b0c      	ldr	r3, [pc, #48]	; (8002ab8 <OS_MutexDbgListAdd+0x48>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d103      	bne.n	8002a94 <OS_MutexDbgListAdd+0x24>
        p_mutex->DbgNextPtr           = (OS_MUTEX *)0;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	619a      	str	r2, [r3, #24]
 8002a92:	e007      	b.n	8002aa4 <OS_MutexDbgListAdd+0x34>
    } else {
        p_mutex->DbgNextPtr           =  OSMutexDbgListPtr;
 8002a94:	4b08      	ldr	r3, [pc, #32]	; (8002ab8 <OS_MutexDbgListAdd+0x48>)
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	619a      	str	r2, [r3, #24]
        OSMutexDbgListPtr->DbgPrevPtr =  p_mutex;
 8002a9c:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <OS_MutexDbgListAdd+0x48>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	615a      	str	r2, [r3, #20]
    }
    OSMutexDbgListPtr                 =  p_mutex;
 8002aa4:	4a04      	ldr	r2, [pc, #16]	; (8002ab8 <OS_MutexDbgListAdd+0x48>)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6013      	str	r3, [r2, #0]
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr
 8002ab4:	0800e87c 	.word	0x0800e87c
 8002ab8:	20002474 	.word	0x20002474

08002abc <OS_MutexInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MutexInit (OS_ERR  *p_err)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSMutexDbgListPtr = (OS_MUTEX *)0;
 8002ac4:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <OS_MutexInit+0x24>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	601a      	str	r2, [r3, #0]
#endif

    OSMutexQty        = (OS_OBJ_QTY)0;
 8002aca:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <OS_MutexInit+0x28>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	801a      	strh	r2, [r3, #0]
   *p_err             =  OS_ERR_NONE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	801a      	strh	r2, [r3, #0]
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr
 8002ae0:	20002474 	.word	0x20002474
 8002ae4:	2000239c 	.word	0x2000239c

08002ae8 <OS_MutexGrpAdd>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MutexGrpAdd (OS_TCB  *p_tcb, OS_MUTEX  *p_mutex)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
    p_mutex->MutexGrpNextPtr = p_tcb->MutexGrpHeadPtr;      /* The mutex grp is not sorted add to head of list.       */
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	621a      	str	r2, [r3, #32]
    p_tcb->MutexGrpHeadPtr   = p_mutex;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bc80      	pop	{r7}
 8002b08:	4770      	bx	lr

08002b0a <OS_MutexGrpRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MutexGrpRemove (OS_TCB  *p_tcb, OS_MUTEX  *p_mutex)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b085      	sub	sp, #20
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
 8002b12:	6039      	str	r1, [r7, #0]
    OS_MUTEX  **pp_mutex;

    pp_mutex = &p_tcb->MutexGrpHeadPtr;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	333c      	adds	r3, #60	; 0x3c
 8002b18:	60fb      	str	r3, [r7, #12]

    while(*pp_mutex != p_mutex) {
 8002b1a:	e003      	b.n	8002b24 <OS_MutexGrpRemove+0x1a>
        pp_mutex = &(*pp_mutex)->MutexGrpNextPtr;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	3320      	adds	r3, #32
 8002b22:	60fb      	str	r3, [r7, #12]
    while(*pp_mutex != p_mutex) {
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d1f6      	bne.n	8002b1c <OS_MutexGrpRemove+0x12>
    }

    *pp_mutex = (*pp_mutex)->MutexGrpNextPtr;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6a1a      	ldr	r2, [r3, #32]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	601a      	str	r2, [r3, #0]
}
 8002b38:	bf00      	nop
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc80      	pop	{r7}
 8002b40:	4770      	bx	lr

08002b42 <OS_MutexGrpPrioFindHighest>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

OS_PRIO  OS_MutexGrpPrioFindHighest (OS_TCB  *p_tcb)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b087      	sub	sp, #28
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
    OS_PRIO        highest_prio;
    OS_PRIO        prio;
    OS_PEND_DATA  *p_head;


    highest_prio = OS_CFG_PRIO_MAX - 1u;
 8002b4a:	231f      	movs	r3, #31
 8002b4c:	74fb      	strb	r3, [r7, #19]
    pp_mutex = &p_tcb->MutexGrpHeadPtr;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	333c      	adds	r3, #60	; 0x3c
 8002b52:	617b      	str	r3, [r7, #20]

    while(*pp_mutex != (OS_MUTEX *)0) {
 8002b54:	e015      	b.n	8002b82 <OS_MutexGrpPrioFindHighest+0x40>
        p_head = (*pp_mutex)->PendList.HeadPtr;
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	60fb      	str	r3, [r7, #12]
        if (p_head!= (OS_PEND_DATA *)0) {
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00a      	beq.n	8002b7a <OS_MutexGrpPrioFindHighest+0x38>
            prio = p_head->TCBPtr->Prio;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002b6c:	72fb      	strb	r3, [r7, #11]
            if(prio < highest_prio) {
 8002b6e:	7afa      	ldrb	r2, [r7, #11]
 8002b70:	7cfb      	ldrb	r3, [r7, #19]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d201      	bcs.n	8002b7a <OS_MutexGrpPrioFindHighest+0x38>
                highest_prio = prio;
 8002b76:	7afb      	ldrb	r3, [r7, #11]
 8002b78:	74fb      	strb	r3, [r7, #19]
            }
        }
        pp_mutex = &(*pp_mutex)->MutexGrpNextPtr;
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	3320      	adds	r3, #32
 8002b80:	617b      	str	r3, [r7, #20]
    while(*pp_mutex != (OS_MUTEX *)0) {
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1e5      	bne.n	8002b56 <OS_MutexGrpPrioFindHighest+0x14>
    }

    return (highest_prio);
 8002b8a:	7cfb      	ldrb	r3, [r7, #19]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	371c      	adds	r7, #28
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bc80      	pop	{r7}
 8002b94:	4770      	bx	lr
	...

08002b98 <OS_SemInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_SemInit (OS_ERR  *p_err)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSSemDbgListPtr = (OS_SEM *)0;
 8002ba0:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <OS_SemInit+0x24>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	601a      	str	r2, [r3, #0]
#endif

    OSSemQty        = (OS_OBJ_QTY)0;
 8002ba6:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <OS_SemInit+0x28>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	801a      	strh	r2, [r3, #0]
   *p_err           = OS_ERR_NONE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	801a      	strh	r2, [r3, #0]
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bc80      	pop	{r7}
 8002bba:	4770      	bx	lr
 8002bbc:	200020a0 	.word	0x200020a0
 8002bc0:	20002334 	.word	0x20002334

08002bc4 <OSCfg_Init>:
*                  DOES NOT optimize out the 'const' variables above.
************************************************************************************************************************
*/

void  OSCfg_Init (void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
    (void)&OSCfg_TmrTaskStkBasePtr;
    (void)&OSCfg_TmrTaskStkLimit;
    (void)&OSCfg_TmrTaskStkSize;
    (void)&OSCfg_TmrTaskStkSizeRAM;
#endif
}
 8002bc8:	bf00      	nop
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr

08002bd0 <OS_TickTask>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TickTask (void  *p_arg)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b088      	sub	sp, #32
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
    OS_ERR  err;
    CPU_TS  ts_delta;
    CPU_TS  ts_delta_dly;
    CPU_TS  ts_delta_timeout;
    CPU_SR_ALLOC();
 8002bd8:	2300      	movs	r3, #0
 8002bda:	61fb      	str	r3, [r7, #28]


    (void)&p_arg;                                               /* Prevent compiler warning                             */

    while (DEF_ON) {
        (void)OSTaskSemPend((OS_TICK  )0,
 8002bdc:	f107 030e 	add.w	r3, r7, #14
 8002be0:	2200      	movs	r2, #0
 8002be2:	2100      	movs	r1, #0
 8002be4:	2000      	movs	r0, #0
 8002be6:	f002 fa19 	bl	800501c <OSTaskSemPend>
                            (OS_OPT   )OS_OPT_PEND_BLOCKING,
                            (CPU_TS  *)0,
                            (OS_ERR  *)&err);                   /* Wait for signal from tick interrupt                  */
        if (err == OS_ERR_NONE) {
 8002bea:	89fb      	ldrh	r3, [r7, #14]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1f5      	bne.n	8002bdc <OS_TickTask+0xc>
            OS_CRITICAL_ENTER();
 8002bf0:	f7fd fb76 	bl	80002e0 <CPU_SR_Save>
 8002bf4:	61f8      	str	r0, [r7, #28]
            OSTickCtr++;                                        /* Keep track of the number of ticks                    */
 8002bf6:	4b0d      	ldr	r3, [pc, #52]	; (8002c2c <OS_TickTask+0x5c>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	4a0b      	ldr	r2, [pc, #44]	; (8002c2c <OS_TickTask+0x5c>)
 8002bfe:	6013      	str	r3, [r2, #0]
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
            TRACE_OS_TICK_INCREMENT(OSTickCtr);                 /* Record the event.                                    */
#endif
            OS_CRITICAL_EXIT();
 8002c00:	69f8      	ldr	r0, [r7, #28]
 8002c02:	f7fd fb71 	bl	80002e8 <CPU_SR_Restore>
            ts_delta_dly     = OS_TickListUpdateDly();
 8002c06:	f000 fa05 	bl	8003014 <OS_TickListUpdateDly>
 8002c0a:	61b8      	str	r0, [r7, #24]
            ts_delta_timeout = OS_TickListUpdateTimeout();
 8002c0c:	f000 fa64 	bl	80030d8 <OS_TickListUpdateTimeout>
 8002c10:	6178      	str	r0, [r7, #20]
            ts_delta         = ts_delta_dly + ts_delta_timeout; /* Compute total execution time of list updates         */
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	4413      	add	r3, r2
 8002c18:	613b      	str	r3, [r7, #16]
            if (OSTickTaskTimeMax < ts_delta) {
 8002c1a:	4b05      	ldr	r3, [pc, #20]	; (8002c30 <OS_TickTask+0x60>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d9db      	bls.n	8002bdc <OS_TickTask+0xc>
                OSTickTaskTimeMax = ts_delta;
 8002c24:	4a02      	ldr	r2, [pc, #8]	; (8002c30 <OS_TickTask+0x60>)
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	6013      	str	r3, [r2, #0]
        (void)OSTaskSemPend((OS_TICK  )0,
 8002c2a:	e7d7      	b.n	8002bdc <OS_TickTask+0xc>
 8002c2c:	20002374 	.word	0x20002374
 8002c30:	20002468 	.word	0x20002468

08002c34 <OS_TickTaskInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TickTaskInit (OS_ERR  *p_err)
{
 8002c34:	b590      	push	{r4, r7, lr}
 8002c36:	b08d      	sub	sp, #52	; 0x34
 8002c38:	af0a      	add	r7, sp, #40	; 0x28
 8002c3a:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    OSTickCtr                    = (OS_TICK)0u;                         /* Clear the tick counter                            */
 8002c3c:	4b28      	ldr	r3, [pc, #160]	; (8002ce0 <OS_TickTaskInit+0xac>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	601a      	str	r2, [r3, #0]

    OSTickListDly.TCB_Ptr        = (OS_TCB   *)0;
 8002c42:	4b28      	ldr	r3, [pc, #160]	; (8002ce4 <OS_TickTaskInit+0xb0>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
    OSTickListTimeout.TCB_Ptr    = (OS_TCB   *)0;
 8002c48:	4b27      	ldr	r3, [pc, #156]	; (8002ce8 <OS_TickTaskInit+0xb4>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]

#if OS_CFG_DBG_EN > 0u
    OSTickListDly.NbrEntries     = (OS_OBJ_QTY)0;
 8002c4e:	4b25      	ldr	r3, [pc, #148]	; (8002ce4 <OS_TickTaskInit+0xb0>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	809a      	strh	r2, [r3, #4]
    OSTickListDly.NbrUpdated     = (OS_OBJ_QTY)0;
 8002c54:	4b23      	ldr	r3, [pc, #140]	; (8002ce4 <OS_TickTaskInit+0xb0>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	80da      	strh	r2, [r3, #6]

    OSTickListTimeout.NbrEntries = (OS_OBJ_QTY)0;
 8002c5a:	4b23      	ldr	r3, [pc, #140]	; (8002ce8 <OS_TickTaskInit+0xb4>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	809a      	strh	r2, [r3, #4]
    OSTickListTimeout.NbrUpdated = (OS_OBJ_QTY)0;
 8002c60:	4b21      	ldr	r3, [pc, #132]	; (8002ce8 <OS_TickTaskInit+0xb4>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	80da      	strh	r2, [r3, #6]
#endif

                                                                        /* ---------------- CREATE THE TICK TASK ----------- */
    if (OSCfg_TickTaskStkBasePtr == (CPU_STK *)0) {
 8002c66:	4b21      	ldr	r3, [pc, #132]	; (8002cec <OS_TickTaskInit+0xb8>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d104      	bne.n	8002c78 <OS_TickTaskInit+0x44>
       *p_err = OS_ERR_TICK_STK_INVALID;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f247 2212 	movw	r2, #29202	; 0x7212
 8002c74:	801a      	strh	r2, [r3, #0]
        return;
 8002c76:	e02f      	b.n	8002cd8 <OS_TickTaskInit+0xa4>
    }

    if (OSCfg_TickTaskStkSize < OSCfg_StkSizeMin) {
 8002c78:	4b1d      	ldr	r3, [pc, #116]	; (8002cf0 <OS_TickTaskInit+0xbc>)
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	4b1d      	ldr	r3, [pc, #116]	; (8002cf4 <OS_TickTaskInit+0xc0>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d204      	bcs.n	8002c8e <OS_TickTaskInit+0x5a>
       *p_err = OS_ERR_TICK_STK_SIZE_INVALID;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f247 2213 	movw	r2, #29203	; 0x7213
 8002c8a:	801a      	strh	r2, [r3, #0]
        return;
 8002c8c:	e024      	b.n	8002cd8 <OS_TickTaskInit+0xa4>
    }

    if (OSCfg_TickTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {                 /* Only one task at the 'Idle Task' priority         */
 8002c8e:	4b1a      	ldr	r3, [pc, #104]	; (8002cf8 <OS_TickTaskInit+0xc4>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b1e      	cmp	r3, #30
 8002c94:	d904      	bls.n	8002ca0 <OS_TickTaskInit+0x6c>
       *p_err = OS_ERR_TICK_PRIO_INVALID;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f247 2211 	movw	r2, #29201	; 0x7211
 8002c9c:	801a      	strh	r2, [r3, #0]
        return;
 8002c9e:	e01b      	b.n	8002cd8 <OS_TickTaskInit+0xa4>
    }

    OSTaskCreate((OS_TCB     *)&OSTickTaskTCB,
 8002ca0:	4b15      	ldr	r3, [pc, #84]	; (8002cf8 <OS_TickTaskInit+0xc4>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	4a11      	ldr	r2, [pc, #68]	; (8002cec <OS_TickTaskInit+0xb8>)
 8002ca6:	6812      	ldr	r2, [r2, #0]
 8002ca8:	4914      	ldr	r1, [pc, #80]	; (8002cfc <OS_TickTaskInit+0xc8>)
 8002caa:	6809      	ldr	r1, [r1, #0]
 8002cac:	4810      	ldr	r0, [pc, #64]	; (8002cf0 <OS_TickTaskInit+0xbc>)
 8002cae:	6800      	ldr	r0, [r0, #0]
 8002cb0:	687c      	ldr	r4, [r7, #4]
 8002cb2:	9408      	str	r4, [sp, #32]
 8002cb4:	240b      	movs	r4, #11
 8002cb6:	9407      	str	r4, [sp, #28]
 8002cb8:	2400      	movs	r4, #0
 8002cba:	9406      	str	r4, [sp, #24]
 8002cbc:	2400      	movs	r4, #0
 8002cbe:	9405      	str	r4, [sp, #20]
 8002cc0:	2400      	movs	r4, #0
 8002cc2:	9404      	str	r4, [sp, #16]
 8002cc4:	9003      	str	r0, [sp, #12]
 8002cc6:	9102      	str	r1, [sp, #8]
 8002cc8:	9201      	str	r2, [sp, #4]
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	2300      	movs	r3, #0
 8002cce:	4a0c      	ldr	r2, [pc, #48]	; (8002d00 <OS_TickTaskInit+0xcc>)
 8002cd0:	490c      	ldr	r1, [pc, #48]	; (8002d04 <OS_TickTaskInit+0xd0>)
 8002cd2:	480d      	ldr	r0, [pc, #52]	; (8002d08 <OS_TickTaskInit+0xd4>)
 8002cd4:	f002 f872 	bl	8004dbc <OSTaskCreate>
                 (OS_MSG_QTY  )0u,
                 (OS_TICK     )0u,
                 (void       *)0,
                 (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR | OS_OPT_TASK_NO_TLS),
                 (OS_ERR     *)p_err);
}
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd90      	pop	{r4, r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	20002374 	.word	0x20002374
 8002ce4:	20002478 	.word	0x20002478
 8002ce8:	20002484 	.word	0x20002484
 8002cec:	0800eae8 	.word	0x0800eae8
 8002cf0:	0800eaf0 	.word	0x0800eaf0
 8002cf4:	0800eadc 	.word	0x0800eadc
 8002cf8:	0800eae4 	.word	0x0800eae4
 8002cfc:	0800eaec 	.word	0x0800eaec
 8002d00:	08002bd1 	.word	0x08002bd1
 8002d04:	0800e880 	.word	0x0800e880
 8002d08:	200020ac 	.word	0x200020ac

08002d0c <OS_TickListInsert>:
*/

void  OS_TickListInsert (OS_TICK_LIST  *p_list,
                         OS_TCB        *p_tcb,
                         OS_TICK        time)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b089      	sub	sp, #36	; 0x24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
    OS_TCB  *p_tcb1;
    OS_TCB  *p_tcb2;
    OS_TICK  remain;


    if (p_list->TCB_Ptr == (OS_TCB *)0) {                               /* Is the list empty?                                */
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d112      	bne.n	8002d46 <OS_TickListInsert+0x3a>
        p_tcb->TickRemain  = time;                                      /* Yes, Store time in TCB                            */
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	651a      	str	r2, [r3, #80]	; 0x50
        p_tcb->TickNextPtr = (OS_TCB *)0;
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	615a      	str	r2, [r3, #20]
        p_tcb->TickPrevPtr = (OS_TCB *)0;
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	619a      	str	r2, [r3, #24]
        p_tcb->TickListPtr = (OS_TICK_LIST *)p_list;                    /*      Link to this list                            */
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	61da      	str	r2, [r3, #28]
        p_list->TCB_Ptr    = p_tcb;                                     /*      Point to TCB of task to place in the list    */
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	68ba      	ldr	r2, [r7, #8]
 8002d3c:	601a      	str	r2, [r3, #0]
#if OS_CFG_DBG_EN > 0u
        p_list->NbrEntries = 1u;                                        /*      List contains 1 entry                        */
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2201      	movs	r2, #1
 8002d42:	809a      	strh	r2, [r3, #4]
 8002d44:	e074      	b.n	8002e30 <OS_TickListInsert+0x124>
#endif
    } else {
        p_tcb1 = p_list->TCB_Ptr;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	61fb      	str	r3, [r7, #28]
        p_tcb2 = p_list->TCB_Ptr;                                       /* No,  Insert somewhere in the list in delta order  */
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	61bb      	str	r3, [r7, #24]
        remain = time;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	617b      	str	r3, [r7, #20]
        while (p_tcb2 != (OS_TCB *)0) {
 8002d56:	e053      	b.n	8002e00 <OS_TickListInsert+0xf4>
            if (remain <= p_tcb2->TickRemain) {
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d5c:	697a      	ldr	r2, [r7, #20]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d844      	bhi.n	8002dec <OS_TickListInsert+0xe0>
                if (p_tcb2->TickPrevPtr == (OS_TCB *)0) {               /*      Insert before the first entry in the list?   */
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d11e      	bne.n	8002da8 <OS_TickListInsert+0x9c>
                    p_tcb->TickRemain   = remain;                       /*      Yes, Store remaining time                    */                                          
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	651a      	str	r2, [r3, #80]	; 0x50
                    p_tcb->TickPrevPtr  = (OS_TCB *)0;
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2200      	movs	r2, #0
 8002d74:	619a      	str	r2, [r3, #24]
                    p_tcb->TickNextPtr  = p_tcb2;    
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	615a      	str	r2, [r3, #20]
                    p_tcb->TickListPtr  = (OS_TICK_LIST *)p_list;       /*           Link TCB to this list                   */
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	61da      	str	r2, [r3, #28]
                    p_tcb2->TickRemain -= remain;                       /*           Reduce time of next entry in the list   */
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	1ad2      	subs	r2, r2, r3
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	651a      	str	r2, [r3, #80]	; 0x50
                    p_tcb2->TickPrevPtr = p_tcb;
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	68ba      	ldr	r2, [r7, #8]
 8002d92:	619a      	str	r2, [r3, #24]
                    p_list->TCB_Ptr     = p_tcb;                        /*           Add TCB to the list                     */
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	601a      	str	r2, [r3, #0]
#if OS_CFG_DBG_EN > 0u
                    p_list->NbrEntries++;                               /*           List contains an extra entry            */
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	889b      	ldrh	r3, [r3, #4]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	809a      	strh	r2, [r3, #4]
                    p_tcb1->TickNextPtr = p_tcb;
#if OS_CFG_DBG_EN > 0u
                    p_list->NbrEntries++;                               /*           List contains an extra entry            */
#endif
                }
                return;
 8002da6:	e043      	b.n	8002e30 <OS_TickListInsert+0x124>
                    p_tcb1              = p_tcb2->TickPrevPtr;
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	61fb      	str	r3, [r7, #28]
                    p_tcb->TickRemain   = remain;                       /*           Store remaining time                    */
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	697a      	ldr	r2, [r7, #20]
 8002db2:	651a      	str	r2, [r3, #80]	; 0x50
                    p_tcb->TickPrevPtr  = p_tcb1;
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	69fa      	ldr	r2, [r7, #28]
 8002db8:	619a      	str	r2, [r3, #24]
                    p_tcb->TickNextPtr  = p_tcb2;    
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	615a      	str	r2, [r3, #20]
                    p_tcb->TickListPtr  = (OS_TICK_LIST *)p_list;       /*           TCB points to this list                 */
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	61da      	str	r2, [r3, #28]
                    p_tcb2->TickRemain -= remain;                       /*           Reduce time of next entry in the list   */
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	1ad2      	subs	r2, r2, r3
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	651a      	str	r2, [r3, #80]	; 0x50
                    p_tcb2->TickPrevPtr = p_tcb;
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	619a      	str	r2, [r3, #24]
                    p_tcb1->TickNextPtr = p_tcb;
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	68ba      	ldr	r2, [r7, #8]
 8002ddc:	615a      	str	r2, [r3, #20]
                    p_list->NbrEntries++;                               /*           List contains an extra entry            */
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	889b      	ldrh	r3, [r3, #4]
 8002de2:	3301      	adds	r3, #1
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	809a      	strh	r2, [r3, #4]
                return;
 8002dea:	e021      	b.n	8002e30 <OS_TickListInsert+0x124>
            } else {
                remain -= p_tcb2->TickRemain;                           /*           Point to the next TCB in the list       */
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	617b      	str	r3, [r7, #20]
                p_tcb1  = p_tcb2;
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	61fb      	str	r3, [r7, #28]
                p_tcb2  = p_tcb2->TickNextPtr;
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	61bb      	str	r3, [r7, #24]
        while (p_tcb2 != (OS_TCB *)0) {
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1a8      	bne.n	8002d58 <OS_TickListInsert+0x4c>
            }                 
        }
        p_tcb->TickRemain   = remain;                       
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	651a      	str	r2, [r3, #80]	; 0x50
        p_tcb->TickPrevPtr  = p_tcb1;
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	69fa      	ldr	r2, [r7, #28]
 8002e10:	619a      	str	r2, [r3, #24]
        p_tcb->TickNextPtr  = (OS_TCB *)0;    
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	2200      	movs	r2, #0
 8002e16:	615a      	str	r2, [r3, #20]
        p_tcb->TickListPtr  = (OS_TICK_LIST *)p_list;                   /*           Link the list to the TCB                */
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	61da      	str	r2, [r3, #28]
        p_tcb1->TickNextPtr = p_tcb;
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	615a      	str	r2, [r3, #20]
#if OS_CFG_DBG_EN > 0u
        p_list->NbrEntries++;                                           /*           List contains an extra entry            */
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	889b      	ldrh	r3, [r3, #4]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	809a      	strh	r2, [r3, #4]
#endif
    }
}
 8002e30:	3724      	adds	r7, #36	; 0x24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bc80      	pop	{r7}
 8002e36:	4770      	bx	lr

08002e38 <OS_TickListInsertDly>:

void  OS_TickListInsertDly (OS_TCB   *p_tcb,
                            OS_TICK   time,
                            OS_OPT    opt,
                            OS_ERR   *p_err)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	603b      	str	r3, [r7, #0]
 8002e44:	4613      	mov	r3, r2
 8002e46:	80fb      	strh	r3, [r7, #6]
    OS_TICK   remain;



    if (opt == OS_OPT_TIME_MATCH) {                                     /* MATCH to absolute OSTickCtr value mode            */
 8002e48:	88fb      	ldrh	r3, [r7, #6]
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	d113      	bne.n	8002e76 <OS_TickListInsertDly+0x3e>
        remain = time - OSTickCtr;
 8002e4e:	4b3a      	ldr	r3, [pc, #232]	; (8002f38 <OS_TickListInsertDly+0x100>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68ba      	ldr	r2, [r7, #8]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	617b      	str	r3, [r7, #20]
        if ((remain > OS_TICK_TH_RDY) ||                                /* If delay already occurred, ...                    */
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e5e:	d802      	bhi.n	8002e66 <OS_TickListInsertDly+0x2e>
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d158      	bne.n	8002f18 <OS_TickListInsertDly+0xe0>
            (remain == (OS_TICK)0u)) {
            p_tcb->TickRemain = (OS_TICK)0u;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	651a      	str	r2, [r3, #80]	; 0x50
           *p_err             =  OS_ERR_TIME_ZERO_DLY;                  /* ... do NOT delay.                                 */
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	f247 227e 	movw	r2, #29310	; 0x727e
 8002e72:	801a      	strh	r2, [r3, #0]
            return;
 8002e74:	e05c      	b.n	8002f30 <OS_TickListInsertDly+0xf8>
        }

    } else if (opt == OS_OPT_TIME_PERIODIC) {                           /* PERIODIC mode.                                    */
 8002e76:	88fb      	ldrh	r3, [r7, #6]
 8002e78:	2b08      	cmp	r3, #8
 8002e7a:	d13f      	bne.n	8002efc <OS_TickListInsertDly+0xc4>
        if ((OSTickCtr - p_tcb->TickCtrPrev) > time) {
 8002e7c:	4b2e      	ldr	r3, [pc, #184]	; (8002f38 <OS_TickListInsertDly+0x100>)
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d208      	bcs.n	8002e9e <OS_TickListInsertDly+0x66>
            remain             = time;                                  /* ... first time we load .TickCtrPrev               */
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	617b      	str	r3, [r7, #20]
            p_tcb->TickCtrPrev = OSTickCtr + time;
 8002e90:	4b29      	ldr	r3, [pc, #164]	; (8002f38 <OS_TickListInsertDly+0x100>)
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	441a      	add	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	655a      	str	r2, [r3, #84]	; 0x54
 8002e9c:	e03c      	b.n	8002f18 <OS_TickListInsertDly+0xe0>
        } else {
            remain = time - (OSTickCtr - p_tcb->TickCtrPrev);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ea2:	4b25      	ldr	r3, [pc, #148]	; (8002f38 <OS_TickListInsertDly+0x100>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	68ba      	ldr	r2, [r7, #8]
 8002eaa:	4413      	add	r3, r2
 8002eac:	617b      	str	r3, [r7, #20]
            if ((remain > OS_TICK_TH_RDY) ||                            /* If delay time has already passed, ...             */
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002eb4:	d802      	bhi.n	8002ebc <OS_TickListInsertDly+0x84>
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d118      	bne.n	8002eee <OS_TickListInsertDly+0xb6>
                (remain == (OS_TICK)0u)) {
                p_tcb->TickCtrPrev += time + time * ((OSTickCtr - p_tcb->TickCtrPrev) / time); /* Try to recover the period  */
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ec0:	4b1d      	ldr	r3, [pc, #116]	; (8002f38 <OS_TickListInsertDly+0x100>)
 8002ec2:	6819      	ldr	r1, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec8:	1ac9      	subs	r1, r1, r3
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	68b9      	ldr	r1, [r7, #8]
 8002ed4:	fb01 f303 	mul.w	r3, r1, r3
 8002ed8:	441a      	add	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	655a      	str	r2, [r3, #84]	; 0x54
                p_tcb->TickRemain   = (OS_TICK)0u;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	651a      	str	r2, [r3, #80]	; 0x50
               *p_err               =  OS_ERR_TIME_ZERO_DLY;            /* ... do NOT delay.                                 */
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	f247 227e 	movw	r2, #29310	; 0x727e
 8002eea:	801a      	strh	r2, [r3, #0]
                return;
 8002eec:	e020      	b.n	8002f30 <OS_TickListInsertDly+0xf8>
            }
            p_tcb->TickCtrPrev += time;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	441a      	add	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	655a      	str	r2, [r3, #84]	; 0x54
 8002efa:	e00d      	b.n	8002f18 <OS_TickListInsertDly+0xe0>
        }

    } else if (time > (OS_TICK)0u) {                                    /* RELATIVE time delay mode                          */
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d002      	beq.n	8002f08 <OS_TickListInsertDly+0xd0>
        remain = time;
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	617b      	str	r3, [r7, #20]
 8002f06:	e007      	b.n	8002f18 <OS_TickListInsertDly+0xe0>

    } else {                                                            /* Zero time delay; ...                              */
        p_tcb->TickRemain = (OS_TICK)0u;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	651a      	str	r2, [r3, #80]	; 0x50
       *p_err             =  OS_ERR_TIME_ZERO_DLY;                      /* ... do NOT delay.                                 */
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	f247 227e 	movw	r2, #29310	; 0x727e
 8002f14:	801a      	strh	r2, [r3, #0]
        return;
 8002f16:	e00b      	b.n	8002f30 <OS_TickListInsertDly+0xf8>
    }

    p_tcb->TaskState = OS_TASK_STATE_DLY;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    OS_TickListInsert(&OSTickListDly, p_tcb, remain);
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	68f9      	ldr	r1, [r7, #12]
 8002f24:	4805      	ldr	r0, [pc, #20]	; (8002f3c <OS_TickListInsertDly+0x104>)
 8002f26:	f7ff fef1 	bl	8002d0c <OS_TickListInsert>

   *p_err = OS_ERR_NONE;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	801a      	strh	r2, [r3, #0]
}
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	20002374 	.word	0x20002374
 8002f3c:	20002478 	.word	0x20002478

08002f40 <OS_TickListRemove>:
*              2) This function is assumed to be called with interrupts disabled.
************************************************************************************************************************
*/

void  OS_TickListRemove (OS_TCB  *p_tcb)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b087      	sub	sp, #28
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
    OS_TICK_LIST  *p_list;
    OS_TCB        *p_tcb1;
    OS_TCB        *p_tcb2;


    p_list = (OS_TICK_LIST *)p_tcb->TickListPtr;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	69db      	ldr	r3, [r3, #28]
 8002f4c:	617b      	str	r3, [r7, #20]
    p_tcb1  = p_tcb->TickPrevPtr;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	613b      	str	r3, [r7, #16]
    p_tcb2  = p_tcb->TickNextPtr;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	60fb      	str	r3, [r7, #12]
    if (p_tcb1 == (OS_TCB *)0) {
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d12c      	bne.n	8002fba <OS_TickListRemove+0x7a>
        if (p_tcb2 == (OS_TCB *)0) {                                    /* Remove ONLY entry in the list?                    */
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10c      	bne.n	8002f80 <OS_TickListRemove+0x40>
            p_list->TCB_Ptr    = (OS_TCB        *)0;
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]
#if OS_CFG_DBG_EN > 0u
            p_list->NbrEntries = (OS_OBJ_QTY    )0u;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	809a      	strh	r2, [r3, #4]
#endif
            p_tcb->TickRemain   = (OS_TICK       )0u;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	651a      	str	r2, [r3, #80]	; 0x50
            p_tcb->TickListPtr  = (OS_TICK_LIST *)0;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	61da      	str	r2, [r3, #28]
#endif
        p_tcb->TickNextPtr  = (OS_TCB       *)0;
        p_tcb->TickRemain   = (OS_TICK       )0u;
        p_tcb->TickListPtr  = (OS_TICK_LIST *)0;
    }
}
 8002f7e:	e03e      	b.n	8002ffe <OS_TickListRemove+0xbe>
            p_tcb2->TickPrevPtr = (OS_TCB       *)0;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	619a      	str	r2, [r3, #24]
            p_tcb2->TickRemain += p_tcb->TickRemain;                    /* Add back the ticks to the delta                   */
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f8e:	441a      	add	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	651a      	str	r2, [r3, #80]	; 0x50
            p_list->TCB_Ptr    = p_tcb2;
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	601a      	str	r2, [r3, #0]
            p_list->NbrEntries--;
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	889b      	ldrh	r3, [r3, #4]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	809a      	strh	r2, [r3, #4]
            p_tcb->TickNextPtr  = (OS_TCB       *)0;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	615a      	str	r2, [r3, #20]
            p_tcb->TickRemain   = (OS_TICK       )0u;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	651a      	str	r2, [r3, #80]	; 0x50
            p_tcb->TickListPtr  = (OS_TICK_LIST *)0;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	61da      	str	r2, [r3, #28]
}
 8002fb8:	e021      	b.n	8002ffe <OS_TickListRemove+0xbe>
        p_tcb1->TickNextPtr = p_tcb2;    
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	615a      	str	r2, [r3, #20]
        if (p_tcb2 != (OS_TCB *)0) {
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d009      	beq.n	8002fda <OS_TickListRemove+0x9a>
            p_tcb2->TickPrevPtr = p_tcb1;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	619a      	str	r2, [r3, #24]
            p_tcb2->TickRemain += p_tcb->TickRemain;                    /* Add back the ticks to the delta list              */
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fd4:	441a      	add	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	651a      	str	r2, [r3, #80]	; 0x50
        p_tcb->TickPrevPtr  = (OS_TCB       *)0;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	619a      	str	r2, [r3, #24]
        p_list->NbrEntries--;
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	889b      	ldrh	r3, [r3, #4]
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	809a      	strh	r2, [r3, #4]
        p_tcb->TickNextPtr  = (OS_TCB       *)0;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	615a      	str	r2, [r3, #20]
        p_tcb->TickRemain   = (OS_TICK       )0u;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	651a      	str	r2, [r3, #80]	; 0x50
        p_tcb->TickListPtr  = (OS_TICK_LIST *)0;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	61da      	str	r2, [r3, #28]
}
 8002ffe:	bf00      	nop
 8003000:	371c      	adds	r7, #28
 8003002:	46bd      	mov	sp, r7
 8003004:	bc80      	pop	{r7}
 8003006:	4770      	bx	lr

08003008 <OS_TickListResetPeak>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TickListResetPeak (void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
#if OS_CFG_DBG_EN > 0u
#endif
}
 800300c:	bf00      	nop
 800300e:	46bd      	mov	sp, r7
 8003010:	bc80      	pop	{r7}
 8003012:	4770      	bx	lr

08003014 <OS_TickListUpdateDly>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

static  CPU_TS  OS_TickListUpdateDly (void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
    CPU_TS        ts_start;
    CPU_TS        ts_delta_dly;
#if OS_CFG_DBG_EN > 0u
    OS_OBJ_QTY    nbr_updated;
#endif
    CPU_SR_ALLOC();
 800301a:	2300      	movs	r3, #0
 800301c:	60fb      	str	r3, [r7, #12]

                                                              
                                                                        
    OS_CRITICAL_ENTER();
 800301e:	f7fd f95f 	bl	80002e0 <CPU_SR_Save>
 8003022:	60f8      	str	r0, [r7, #12]
    ts_start    = OS_TS_GET();
 8003024:	f003 f9ae 	bl	8006384 <CPU_TS_TmrRd>
 8003028:	60b8      	str	r0, [r7, #8]
#if OS_CFG_DBG_EN > 0u
    nbr_updated = (OS_OBJ_QTY)0u;
 800302a:	2300      	movs	r3, #0
 800302c:	827b      	strh	r3, [r7, #18]
#endif
    p_list      = &OSTickListDly;
 800302e:	4b29      	ldr	r3, [pc, #164]	; (80030d4 <OS_TickListUpdateDly+0xc0>)
 8003030:	607b      	str	r3, [r7, #4]
    p_tcb       = p_list->TCB_Ptr;                                      
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	617b      	str	r3, [r7, #20]
    if (p_tcb != (OS_TCB *)0) {
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d039      	beq.n	80030b2 <OS_TickListUpdateDly+0x9e>
        p_tcb->TickRemain--;
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003042:	1e5a      	subs	r2, r3, #1
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	651a      	str	r2, [r3, #80]	; 0x50
        while (p_tcb->TickRemain == 0u) {
 8003048:	e02f      	b.n	80030aa <OS_TickListUpdateDly+0x96>
#if OS_CFG_DBG_EN > 0u
            nbr_updated++;											    /* Keep track of the number of TCBs updated          */
 800304a:	8a7b      	ldrh	r3, [r7, #18]
 800304c:	3301      	adds	r3, #1
 800304e:	827b      	strh	r3, [r7, #18]
#endif
            if (p_tcb->TaskState == OS_TASK_STATE_DLY) {
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003056:	2b01      	cmp	r3, #1
 8003058:	d107      	bne.n	800306a <OS_TickListUpdateDly+0x56>
                p_tcb->TaskState = OS_TASK_STATE_RDY;
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                OS_RdyListInsert(p_tcb);                                /* Insert the task in the ready list                 */
 8003062:	6978      	ldr	r0, [r7, #20]
 8003064:	f001 fbf2 	bl	800484c <OS_RdyListInsert>
 8003068:	e008      	b.n	800307c <OS_TickListUpdateDly+0x68>
            } else if (p_tcb->TaskState == OS_TASK_STATE_DLY_SUSPENDED) {
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003070:	2b05      	cmp	r3, #5
 8003072:	d103      	bne.n	800307c <OS_TickListUpdateDly+0x68>
                p_tcb->TaskState = OS_TASK_STATE_SUSPENDED;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	2204      	movs	r2, #4
 8003078:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
            }

            p_list->TCB_Ptr = p_tcb->TickNextPtr;
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	695a      	ldr	r2, [r3, #20]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	601a      	str	r2, [r3, #0]
            p_tcb           = p_list->TCB_Ptr;                          /* Get 'p_tcb' again for loop                        */
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	617b      	str	r3, [r7, #20]
            if (p_tcb == (OS_TCB *)0) {
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d103      	bne.n	8003098 <OS_TickListUpdateDly+0x84>
#if OS_CFG_DBG_EN > 0u
                p_list->NbrEntries = (OS_OBJ_QTY)0u;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	809a      	strh	r2, [r3, #4]
#endif
                break;
 8003096:	e00c      	b.n	80030b2 <OS_TickListUpdateDly+0x9e>
            } else {
#if OS_CFG_DBG_EN > 0u
                p_list->NbrEntries--;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	889b      	ldrh	r3, [r3, #4]
 800309c:	3b01      	subs	r3, #1
 800309e:	b29a      	uxth	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	809a      	strh	r2, [r3, #4]
#endif
                p_tcb->TickPrevPtr = (OS_TCB *)0;
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	2200      	movs	r2, #0
 80030a8:	619a      	str	r2, [r3, #24]
        while (p_tcb->TickRemain == 0u) {
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d0cb      	beq.n	800304a <OS_TickListUpdateDly+0x36>
            }
        }
    }
#if OS_CFG_DBG_EN > 0u
    p_list->NbrUpdated = nbr_updated;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	8a7a      	ldrh	r2, [r7, #18]
 80030b6:	80da      	strh	r2, [r3, #6]
#endif
    ts_delta_dly       = OS_TS_GET() - ts_start;                        /* Measure execution time of the update              */
 80030b8:	f003 f964 	bl	8006384 <CPU_TS_TmrRd>
 80030bc:	4602      	mov	r2, r0
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	603b      	str	r3, [r7, #0]
    OS_CRITICAL_EXIT();
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f7fd f90f 	bl	80002e8 <CPU_SR_Restore>

    return (ts_delta_dly);
 80030ca:	683b      	ldr	r3, [r7, #0]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3718      	adds	r7, #24
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	20002478 	.word	0x20002478

080030d8 <OS_TickListUpdateTimeout>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

static  CPU_TS  OS_TickListUpdateTimeout (void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b088      	sub	sp, #32
 80030dc:	af00      	add	r7, sp, #0
#endif
#if OS_CFG_MUTEX_EN > 0u
    OS_TCB       *p_tcb_owner;
    OS_PRIO       prio_new;
#endif
    CPU_SR_ALLOC();
 80030de:	2300      	movs	r3, #0
 80030e0:	613b      	str	r3, [r7, #16]

                                                              
                                                                        
    OS_CRITICAL_ENTER();                                                /* ======= UPDATE TASKS WAITING WITH TIMEOUT ======= */
 80030e2:	f7fd f8fd 	bl	80002e0 <CPU_SR_Save>
 80030e6:	6138      	str	r0, [r7, #16]
    ts_start    = OS_TS_GET();
 80030e8:	f003 f94c 	bl	8006384 <CPU_TS_TmrRd>
 80030ec:	60f8      	str	r0, [r7, #12]
#if OS_CFG_DBG_EN > 0u
    nbr_updated = (OS_OBJ_QTY)0u;
 80030ee:	2300      	movs	r3, #0
 80030f0:	837b      	strh	r3, [r7, #26]
#endif
    p_list      = &OSTickListTimeout;
 80030f2:	4b51      	ldr	r3, [pc, #324]	; (8003238 <OS_TickListUpdateTimeout+0x160>)
 80030f4:	60bb      	str	r3, [r7, #8]
    p_tcb       = p_list->TCB_Ptr;                                  
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	61fb      	str	r3, [r7, #28]
    if (p_tcb != (OS_TCB *)0) {
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 8089 	beq.w	8003216 <OS_TickListUpdateTimeout+0x13e>
        p_tcb->TickRemain--;
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003108:	1e5a      	subs	r2, r3, #1
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	651a      	str	r2, [r3, #80]	; 0x50
        while (p_tcb->TickRemain == 0u) {
 800310e:	e07d      	b.n	800320c <OS_TickListUpdateTimeout+0x134>
#if OS_CFG_DBG_EN > 0u
            nbr_updated++;
 8003110:	8b7b      	ldrh	r3, [r7, #26]
 8003112:	3301      	adds	r3, #1
 8003114:	837b      	strh	r3, [r7, #26]
#endif

#if OS_CFG_MUTEX_EN > 0u
            p_tcb_owner = (OS_TCB *)0;
 8003116:	2300      	movs	r3, #0
 8003118:	617b      	str	r3, [r7, #20]
            if (p_tcb->PendOn == OS_TASK_PEND_ON_MUTEX) {
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003120:	2b04      	cmp	r3, #4
 8003122:	d104      	bne.n	800312e <OS_TickListUpdateTimeout+0x56>
                p_tcb_owner = ((OS_MUTEX *)p_tcb->PendDataTblPtr->PendObjPtr)->OwnerTCBPtr;
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	617b      	str	r3, [r7, #20]
            }
#endif

#if (OS_MSG_EN > 0u)
            p_tcb->MsgPtr  = (void      *)0;
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	2200      	movs	r2, #0
 8003132:	659a      	str	r2, [r3, #88]	; 0x58
            p_tcb->MsgSize = (OS_MSG_SIZE)0u;
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	2200      	movs	r2, #0
 8003138:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
#endif
            p_tcb->TS      = OS_TS_GET();
 800313c:	f003 f922 	bl	8006384 <CPU_TS_TmrRd>
 8003140:	4602      	mov	r2, r0
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	649a      	str	r2, [r3, #72]	; 0x48
            OS_PendListRemove(p_tcb);                                   /* Remove from wait list                             */
 8003146:	69f8      	ldr	r0, [r7, #28]
 8003148:	f001 fa20 	bl	800458c <OS_PendListRemove>
            if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT) {
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003152:	2b03      	cmp	r3, #3
 8003154:	d107      	bne.n	8003166 <OS_TickListUpdateTimeout+0x8e>
                OS_RdyListInsert(p_tcb);                                /* Insert the task in the ready list                 */
 8003156:	69f8      	ldr	r0, [r7, #28]
 8003158:	f001 fb78 	bl	800484c <OS_RdyListInsert>
                p_tcb->TaskState  = OS_TASK_STATE_RDY;
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8003164:	e008      	b.n	8003178 <OS_TickListUpdateTimeout+0xa0>
            } else if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED) {
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800316c:	2b07      	cmp	r3, #7
 800316e:	d103      	bne.n	8003178 <OS_TickListUpdateTimeout+0xa0>

                p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	2204      	movs	r2, #4
 8003174:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
            }
            p_tcb->PendStatus = OS_STATUS_PEND_TIMEOUT;                 /* Indicate pend timed out                           */
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	2203      	movs	r2, #3
 800317c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;                /* Indicate no longer pending                        */
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if OS_CFG_MUTEX_EN > 0u
            if(p_tcb_owner != (OS_TCB *)0) {
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d027      	beq.n	80031de <OS_TickListUpdateTimeout+0x106>
                if ((p_tcb_owner->Prio != p_tcb_owner->BasePrio) &&
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800319a:	429a      	cmp	r2, r3
 800319c:	d01f      	beq.n	80031de <OS_TickListUpdateTimeout+0x106>
                    (p_tcb_owner->Prio == p_tcb->Prio)) {               /* Has the owner inherited a priority?               */
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
                if ((p_tcb_owner->Prio != p_tcb_owner->BasePrio) &&
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d117      	bne.n	80031de <OS_TickListUpdateTimeout+0x106>
                    prio_new = OS_MutexGrpPrioFindHighest(p_tcb_owner);
 80031ae:	6978      	ldr	r0, [r7, #20]
 80031b0:	f7ff fcc7 	bl	8002b42 <OS_MutexGrpPrioFindHighest>
 80031b4:	4603      	mov	r3, r0
 80031b6:	71fb      	strb	r3, [r7, #7]
                    prio_new = prio_new > p_tcb_owner->BasePrio ? p_tcb_owner->BasePrio : prio_new;
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80031be:	79fa      	ldrb	r2, [r7, #7]
 80031c0:	4293      	cmp	r3, r2
 80031c2:	bf28      	it	cs
 80031c4:	4613      	movcs	r3, r2
 80031c6:	71fb      	strb	r3, [r7, #7]
                    if(prio_new != p_tcb_owner->Prio) {
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80031ce:	79fa      	ldrb	r2, [r7, #7]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d004      	beq.n	80031de <OS_TickListUpdateTimeout+0x106>
                        OS_TaskChangePrio(p_tcb_owner, prio_new);
 80031d4:	79fb      	ldrb	r3, [r7, #7]
 80031d6:	4619      	mov	r1, r3
 80031d8:	6978      	ldr	r0, [r7, #20]
 80031da:	f002 fba3 	bl	8005924 <OS_TaskChangePrio>
                    }
                }
            }
#endif

            p_list->TCB_Ptr = p_tcb->TickNextPtr;
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	695a      	ldr	r2, [r3, #20]
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	601a      	str	r2, [r3, #0]
            p_tcb           = p_list->TCB_Ptr;                          /* Get 'p_tcb' again for loop                        */
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	61fb      	str	r3, [r7, #28]
            if (p_tcb == (OS_TCB *)0) {
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d103      	bne.n	80031fa <OS_TickListUpdateTimeout+0x122>
#if OS_CFG_DBG_EN > 0u
                p_list->NbrEntries = (OS_OBJ_QTY)0u;
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	2200      	movs	r2, #0
 80031f6:	809a      	strh	r2, [r3, #4]
#endif
                break;
 80031f8:	e00d      	b.n	8003216 <OS_TickListUpdateTimeout+0x13e>
            } else {
#if OS_CFG_DBG_EN > 0u
                p_list->NbrEntries--;
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	889b      	ldrh	r3, [r3, #4]
 80031fe:	3b01      	subs	r3, #1
 8003200:	b29a      	uxth	r2, r3
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	809a      	strh	r2, [r3, #4]
#endif
                p_tcb->TickPrevPtr = (OS_TCB *)0;
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	2200      	movs	r2, #0
 800320a:	619a      	str	r2, [r3, #24]
        while (p_tcb->TickRemain == 0u) {
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003210:	2b00      	cmp	r3, #0
 8003212:	f43f af7d 	beq.w	8003110 <OS_TickListUpdateTimeout+0x38>
            }
        }
    }
#if OS_CFG_DBG_EN > 0u
    p_list->NbrUpdated = nbr_updated;
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	8b7a      	ldrh	r2, [r7, #26]
 800321a:	80da      	strh	r2, [r3, #6]
#endif
    ts_delta_timeout   = OS_TS_GET() - ts_start;                        /* Measure execution time of the update              */
 800321c:	f003 f8b2 	bl	8006384 <CPU_TS_TmrRd>
 8003220:	4602      	mov	r2, r0
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	603b      	str	r3, [r7, #0]
    OS_CRITICAL_EXIT();                                                 /* ------------------------------------------------- */
 8003228:	6938      	ldr	r0, [r7, #16]
 800322a:	f7fd f85d 	bl	80002e8 <CPU_SR_Restore>

    return (ts_delta_timeout);
 800322e:	683b      	ldr	r3, [r7, #0]
}
 8003230:	4618      	mov	r0, r3
 8003232:	3720      	adds	r7, #32
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	20002484 	.word	0x20002484

0800323c <OSTimeDly>:
*/

void  OSTimeDly (OS_TICK   dly,
                 OS_OPT    opt,
                 OS_ERR   *p_err)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	460b      	mov	r3, r1
 8003246:	607a      	str	r2, [r7, #4]
 8003248:	817b      	strh	r3, [r7, #10]
    CPU_SR_ALLOC();
 800324a:	2300      	movs	r3, #0
 800324c:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0u) {             /* Not allowed to call from an ISR                        */
 800324e:	4b2e      	ldr	r3, [pc, #184]	; (8003308 <OSTimeDly+0xcc>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d004      	beq.n	8003260 <OSTimeDly+0x24>
       *p_err = OS_ERR_TIME_DLY_ISR;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f247 2275 	movw	r2, #29301	; 0x7275
 800325c:	801a      	strh	r2, [r3, #0]
        return;
 800325e:	e050      	b.n	8003302 <OSTimeDly+0xc6>
    }
#endif

    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0u) {       /* Can't delay when the scheduler is locked               */
 8003260:	4b2a      	ldr	r3, [pc, #168]	; (800330c <OSTimeDly+0xd0>)
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d004      	beq.n	8003272 <OSTimeDly+0x36>
       *p_err = OS_ERR_SCHED_LOCKED;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f646 5263 	movw	r2, #28003	; 0x6d63
 800326e:	801a      	strh	r2, [r3, #0]
        return;
 8003270:	e047      	b.n	8003302 <OSTimeDly+0xc6>
    }

    switch (opt) {
 8003272:	897b      	ldrh	r3, [r7, #10]
 8003274:	2b08      	cmp	r3, #8
 8003276:	d81d      	bhi.n	80032b4 <OSTimeDly+0x78>
 8003278:	a201      	add	r2, pc, #4	; (adr r2, 8003280 <OSTimeDly+0x44>)
 800327a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800327e:	bf00      	nop
 8003280:	080032a5 	.word	0x080032a5
 8003284:	080032b5 	.word	0x080032b5
 8003288:	080032a5 	.word	0x080032a5
 800328c:	080032b5 	.word	0x080032b5
 8003290:	080032bf 	.word	0x080032bf
 8003294:	080032b5 	.word	0x080032b5
 8003298:	080032b5 	.word	0x080032b5
 800329c:	080032b5 	.word	0x080032b5
 80032a0:	080032a5 	.word	0x080032a5
        case OS_OPT_TIME_DLY:
        case OS_OPT_TIME_TIMEOUT:
        case OS_OPT_TIME_PERIODIC:
             if (dly == (OS_TICK)0u) {                      /* 0 means no delay!                                      */
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10b      	bne.n	80032c2 <OSTimeDly+0x86>
                *p_err = OS_ERR_TIME_ZERO_DLY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f247 227e 	movw	r2, #29310	; 0x727e
 80032b0:	801a      	strh	r2, [r3, #0]
                 return;
 80032b2:	e026      	b.n	8003302 <OSTimeDly+0xc6>

        case OS_OPT_TIME_MATCH:
             break;

        default:
            *p_err = OS_ERR_OPT_INVALID;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f645 6225 	movw	r2, #24101	; 0x5e25
 80032ba:	801a      	strh	r2, [r3, #0]
             return;
 80032bc:	e021      	b.n	8003302 <OSTimeDly+0xc6>
             break;
 80032be:	bf00      	nop
 80032c0:	e000      	b.n	80032c4 <OSTimeDly+0x88>
             break;
 80032c2:	bf00      	nop
    }

    OS_CRITICAL_ENTER();
 80032c4:	f7fd f80c 	bl	80002e0 <CPU_SR_Save>
 80032c8:	6178      	str	r0, [r7, #20]
    OS_TickListInsertDly(OSTCBCurPtr,
 80032ca:	4b11      	ldr	r3, [pc, #68]	; (8003310 <OSTimeDly+0xd4>)
 80032cc:	6818      	ldr	r0, [r3, #0]
 80032ce:	897a      	ldrh	r2, [r7, #10]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	68f9      	ldr	r1, [r7, #12]
 80032d4:	f7ff fdb0 	bl	8002e38 <OS_TickListInsertDly>
                         dly,
                         opt,
                         p_err);
    if (*p_err != OS_ERR_NONE) {
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	881b      	ldrh	r3, [r3, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <OSTimeDly+0xac>
         OS_CRITICAL_EXIT_NO_SCHED();
 80032e0:	6978      	ldr	r0, [r7, #20]
 80032e2:	f7fd f801 	bl	80002e8 <CPU_SR_Restore>
         return;
 80032e6:	e00c      	b.n	8003302 <OSTimeDly+0xc6>
    }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_TASK_DLY(dly);                                 /* Record the event.                                      */
#endif
    OS_RdyListRemove(OSTCBCurPtr);                          /* Remove current task from ready list                    */
 80032e8:	4b09      	ldr	r3, [pc, #36]	; (8003310 <OSTimeDly+0xd4>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f001 fb4b 	bl	8004988 <OS_RdyListRemove>
    OS_CRITICAL_EXIT_NO_SCHED();
 80032f2:	6978      	ldr	r0, [r7, #20]
 80032f4:	f7fc fff8 	bl	80002e8 <CPU_SR_Restore>
    OSSched();                                              /* Find next task to run!                                 */
 80032f8:	f000 fe52 	bl	8003fa0 <OSSched>
   *p_err = OS_ERR_NONE;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	801a      	strh	r2, [r3, #0]
}
 8003302:	3718      	adds	r7, #24
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	2000219e 	.word	0x2000219e
 800330c:	20001f08 	.word	0x20001f08
 8003310:	20002174 	.word	0x20002174

08003314 <OSTimeDlyHMSM>:
                     CPU_INT16U   minutes,
                     CPU_INT16U   seconds,
                     CPU_INT32U   milli,
                     OS_OPT       opt,
                     OS_ERR      *p_err)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b088      	sub	sp, #32
 8003318:	af00      	add	r7, sp, #0
 800331a:	607b      	str	r3, [r7, #4]
 800331c:	4603      	mov	r3, r0
 800331e:	81fb      	strh	r3, [r7, #14]
 8003320:	460b      	mov	r3, r1
 8003322:	81bb      	strh	r3, [r7, #12]
 8003324:	4613      	mov	r3, r2
 8003326:	817b      	strh	r3, [r7, #10]
    CPU_BOOLEAN  opt_non_strict;
#endif
    OS_OPT       opt_time;
    OS_RATE_HZ   tick_rate;
    OS_TICK      ticks;
    CPU_SR_ALLOC();
 8003328:	2300      	movs	r3, #0
 800332a:	61fb      	str	r3, [r7, #28]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0u) {             /* Not allowed to call from an ISR                        */
 800332c:	4b70      	ldr	r3, [pc, #448]	; (80034f0 <OSTimeDlyHMSM+0x1dc>)
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d004      	beq.n	800333e <OSTimeDlyHMSM+0x2a>
       *p_err = OS_ERR_TIME_DLY_ISR;
 8003334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003336:	f247 2275 	movw	r2, #29301	; 0x7275
 800333a:	801a      	strh	r2, [r3, #0]
        return;
 800333c:	e0d5      	b.n	80034ea <OSTimeDlyHMSM+0x1d6>
    }
#endif

    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0u) {       /* Can't delay when the scheduler is locked               */
 800333e:	4b6d      	ldr	r3, [pc, #436]	; (80034f4 <OSTimeDlyHMSM+0x1e0>)
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d004      	beq.n	8003350 <OSTimeDlyHMSM+0x3c>
       *p_err = OS_ERR_SCHED_LOCKED;
 8003346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003348:	f646 5263 	movw	r2, #28003	; 0x6d63
 800334c:	801a      	strh	r2, [r3, #0]
        return;
 800334e:	e0cc      	b.n	80034ea <OSTimeDlyHMSM+0x1d6>
    }

    opt_time = opt & OS_OPT_TIME_MASK;                      /* Retrieve time options only.                            */
 8003350:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003352:	f003 030e 	and.w	r3, r3, #14
 8003356:	837b      	strh	r3, [r7, #26]
    switch (opt_time) {
 8003358:	8b7b      	ldrh	r3, [r7, #26]
 800335a:	2b08      	cmp	r3, #8
 800335c:	d825      	bhi.n	80033aa <OSTimeDlyHMSM+0x96>
 800335e:	a201      	add	r2, pc, #4	; (adr r2, 8003364 <OSTimeDlyHMSM+0x50>)
 8003360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003364:	08003389 	.word	0x08003389
 8003368:	080033ab 	.word	0x080033ab
 800336c:	08003389 	.word	0x08003389
 8003370:	080033ab 	.word	0x080033ab
 8003374:	080033b5 	.word	0x080033b5
 8003378:	080033ab 	.word	0x080033ab
 800337c:	080033ab 	.word	0x080033ab
 8003380:	080033ab 	.word	0x080033ab
 8003384:	08003389 	.word	0x08003389
        case OS_OPT_TIME_DLY:
        case OS_OPT_TIME_TIMEOUT:
        case OS_OPT_TIME_PERIODIC:
             if (milli == (CPU_INT32U)0u) {                 /* Make sure we didn't specify a 0 delay                  */
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d114      	bne.n	80033b8 <OSTimeDlyHMSM+0xa4>
                 if (seconds == (CPU_INT16U)0u) {
 800338e:	897b      	ldrh	r3, [r7, #10]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d111      	bne.n	80033b8 <OSTimeDlyHMSM+0xa4>
                     if (minutes == (CPU_INT16U)0u) {
 8003394:	89bb      	ldrh	r3, [r7, #12]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10e      	bne.n	80033b8 <OSTimeDlyHMSM+0xa4>
                         if (hours == (CPU_INT16U)0u) {
 800339a:	89fb      	ldrh	r3, [r7, #14]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10b      	bne.n	80033b8 <OSTimeDlyHMSM+0xa4>
                            *p_err = OS_ERR_TIME_ZERO_DLY;
 80033a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a2:	f247 227e 	movw	r2, #29310	; 0x727e
 80033a6:	801a      	strh	r2, [r3, #0]
                             return;
 80033a8:	e09f      	b.n	80034ea <OSTimeDlyHMSM+0x1d6>

        case OS_OPT_TIME_MATCH:
             break;

        default:
            *p_err = OS_ERR_OPT_INVALID;
 80033aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ac:	f645 6225 	movw	r2, #24101	; 0x5e25
 80033b0:	801a      	strh	r2, [r3, #0]
             return;
 80033b2:	e09a      	b.n	80034ea <OSTimeDlyHMSM+0x1d6>
             break;
 80033b4:	bf00      	nop
 80033b6:	e000      	b.n	80033ba <OSTimeDlyHMSM+0xa6>
             break;
 80033b8:	bf00      	nop
    }

#if OS_CFG_ARG_CHK_EN > 0u                                  /* Validate arguments to be within range                  */
    opt_invalid = DEF_BIT_IS_SET_ANY(opt, ~OS_OPT_TIME_OPTS_MASK);
 80033ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80033bc:	f023 031e 	bic.w	r3, r3, #30
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	bf14      	ite	ne
 80033c4:	2301      	movne	r3, #1
 80033c6:	2300      	moveq	r3, #0
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	767b      	strb	r3, [r7, #25]
    if (opt_invalid == DEF_YES) {
 80033cc:	7e7b      	ldrb	r3, [r7, #25]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d104      	bne.n	80033dc <OSTimeDlyHMSM+0xc8>
       *p_err = OS_ERR_OPT_INVALID;
 80033d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d4:	f645 6225 	movw	r2, #24101	; 0x5e25
 80033d8:	801a      	strh	r2, [r3, #0]
        return;
 80033da:	e086      	b.n	80034ea <OSTimeDlyHMSM+0x1d6>
    }

    opt_non_strict = DEF_BIT_IS_SET(opt, OS_OPT_TIME_HMSM_NON_STRICT);
 80033dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80033de:	111b      	asrs	r3, r3, #4
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	763b      	strb	r3, [r7, #24]
    if (opt_non_strict != DEF_YES) {
 80033e8:	7e3b      	ldrb	r3, [r7, #24]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d020      	beq.n	8003430 <OSTimeDlyHMSM+0x11c>
         if (milli   > (CPU_INT32U)999u) {
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033f4:	d304      	bcc.n	8003400 <OSTimeDlyHMSM+0xec>
            *p_err = OS_ERR_TIME_INVALID_MILLISECONDS;
 80033f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f8:	f247 227b 	movw	r2, #29307	; 0x727b
 80033fc:	801a      	strh	r2, [r3, #0]
             return;
 80033fe:	e074      	b.n	80034ea <OSTimeDlyHMSM+0x1d6>
         }
         if (seconds > (CPU_INT16U)59u) {
 8003400:	897b      	ldrh	r3, [r7, #10]
 8003402:	2b3b      	cmp	r3, #59	; 0x3b
 8003404:	d904      	bls.n	8003410 <OSTimeDlyHMSM+0xfc>
            *p_err = OS_ERR_TIME_INVALID_SECONDS;
 8003406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003408:	f247 227a 	movw	r2, #29306	; 0x727a
 800340c:	801a      	strh	r2, [r3, #0]
             return;
 800340e:	e06c      	b.n	80034ea <OSTimeDlyHMSM+0x1d6>
         }
         if (minutes > (CPU_INT16U)59u) {
 8003410:	89bb      	ldrh	r3, [r7, #12]
 8003412:	2b3b      	cmp	r3, #59	; 0x3b
 8003414:	d904      	bls.n	8003420 <OSTimeDlyHMSM+0x10c>
            *p_err = OS_ERR_TIME_INVALID_MINUTES;
 8003416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003418:	f247 2279 	movw	r2, #29305	; 0x7279
 800341c:	801a      	strh	r2, [r3, #0]
             return;
 800341e:	e064      	b.n	80034ea <OSTimeDlyHMSM+0x1d6>
         }
         if (hours   > (CPU_INT16U)99u) {
 8003420:	89fb      	ldrh	r3, [r7, #14]
 8003422:	2b63      	cmp	r3, #99	; 0x63
 8003424:	d917      	bls.n	8003456 <OSTimeDlyHMSM+0x142>
            *p_err = OS_ERR_TIME_INVALID_HOURS;
 8003426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003428:	f247 2278 	movw	r2, #29304	; 0x7278
 800342c:	801a      	strh	r2, [r3, #0]
             return;
 800342e:	e05c      	b.n	80034ea <OSTimeDlyHMSM+0x1d6>
         }
    } else {
         if (minutes > (CPU_INT16U)9999u) {
 8003430:	89bb      	ldrh	r3, [r7, #12]
 8003432:	f242 720f 	movw	r2, #9999	; 0x270f
 8003436:	4293      	cmp	r3, r2
 8003438:	d904      	bls.n	8003444 <OSTimeDlyHMSM+0x130>
            *p_err = OS_ERR_TIME_INVALID_MINUTES;
 800343a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343c:	f247 2279 	movw	r2, #29305	; 0x7279
 8003440:	801a      	strh	r2, [r3, #0]
             return;
 8003442:	e052      	b.n	80034ea <OSTimeDlyHMSM+0x1d6>
         }
         if (hours   > (CPU_INT16U)999u) {
 8003444:	89fb      	ldrh	r3, [r7, #14]
 8003446:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800344a:	d304      	bcc.n	8003456 <OSTimeDlyHMSM+0x142>
            *p_err = OS_ERR_TIME_INVALID_HOURS;
 800344c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800344e:	f247 2278 	movw	r2, #29304	; 0x7278
 8003452:	801a      	strh	r2, [r3, #0]
             return;
 8003454:	e049      	b.n	80034ea <OSTimeDlyHMSM+0x1d6>
    }
#endif

                                                            /* Compute the total number of clock ticks required..     */
                                                            /* .. (rounded to the nearest tick)                       */
    tick_rate = OSCfg_TickRate_Hz;
 8003456:	4b28      	ldr	r3, [pc, #160]	; (80034f8 <OSTimeDlyHMSM+0x1e4>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	617b      	str	r3, [r7, #20]
    ticks     = ((OS_TICK)hours * (OS_TICK)3600u + (OS_TICK)minutes * (OS_TICK)60u + (OS_TICK)seconds) * tick_rate
 800345c:	89fb      	ldrh	r3, [r7, #14]
 800345e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8003462:	fb02 f103 	mul.w	r1, r2, r3
 8003466:	89ba      	ldrh	r2, [r7, #12]
 8003468:	4613      	mov	r3, r2
 800346a:	011b      	lsls	r3, r3, #4
 800346c:	1a9b      	subs	r3, r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	18ca      	adds	r2, r1, r3
 8003472:	897b      	ldrh	r3, [r7, #10]
 8003474:	4413      	add	r3, r2
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	fb02 f203 	mul.w	r2, r2, r3
              + (tick_rate * ((OS_TICK)milli + (OS_TICK)500u / tick_rate)) / (OS_TICK)1000u;
 800347c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	fbb1 f1f3 	udiv	r1, r1, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	440b      	add	r3, r1
 800348a:	6979      	ldr	r1, [r7, #20]
 800348c:	fb01 f303 	mul.w	r3, r1, r3
 8003490:	491a      	ldr	r1, [pc, #104]	; (80034fc <OSTimeDlyHMSM+0x1e8>)
 8003492:	fba1 1303 	umull	r1, r3, r1, r3
 8003496:	099b      	lsrs	r3, r3, #6
    ticks     = ((OS_TICK)hours * (OS_TICK)3600u + (OS_TICK)minutes * (OS_TICK)60u + (OS_TICK)seconds) * tick_rate
 8003498:	4413      	add	r3, r2
 800349a:	613b      	str	r3, [r7, #16]

    if (ticks > (OS_TICK)0u) {
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d01f      	beq.n	80034e2 <OSTimeDlyHMSM+0x1ce>
        OS_CRITICAL_ENTER();
 80034a2:	f7fc ff1d 	bl	80002e0 <CPU_SR_Save>
 80034a6:	61f8      	str	r0, [r7, #28]
        OS_TickListInsertDly(OSTCBCurPtr,
 80034a8:	4b15      	ldr	r3, [pc, #84]	; (8003500 <OSTimeDlyHMSM+0x1ec>)
 80034aa:	6818      	ldr	r0, [r3, #0]
 80034ac:	8b7a      	ldrh	r2, [r7, #26]
 80034ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b0:	6939      	ldr	r1, [r7, #16]
 80034b2:	f7ff fcc1 	bl	8002e38 <OS_TickListInsertDly>
                             ticks,
                             opt_time,
                             p_err);
        if (*p_err != OS_ERR_NONE) {
 80034b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b8:	881b      	ldrh	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <OSTimeDlyHMSM+0x1b2>
             OS_CRITICAL_EXIT_NO_SCHED();
 80034be:	69f8      	ldr	r0, [r7, #28]
 80034c0:	f7fc ff12 	bl	80002e8 <CPU_SR_Restore>
             return;
 80034c4:	e011      	b.n	80034ea <OSTimeDlyHMSM+0x1d6>
        }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_DLY(ticks);                           /* Record the event.                                      */
#endif
        OS_RdyListRemove(OSTCBCurPtr);                      /* Remove current task from ready list                    */
 80034c6:	4b0e      	ldr	r3, [pc, #56]	; (8003500 <OSTimeDlyHMSM+0x1ec>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f001 fa5c 	bl	8004988 <OS_RdyListRemove>
        OS_CRITICAL_EXIT_NO_SCHED();
 80034d0:	69f8      	ldr	r0, [r7, #28]
 80034d2:	f7fc ff09 	bl	80002e8 <CPU_SR_Restore>
        OSSched();                                          /* Find next task to run!                                 */
 80034d6:	f000 fd63 	bl	8003fa0 <OSSched>
       *p_err = OS_ERR_NONE;
 80034da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034dc:	2200      	movs	r2, #0
 80034de:	801a      	strh	r2, [r3, #0]
 80034e0:	e003      	b.n	80034ea <OSTimeDlyHMSM+0x1d6>
    } else {
       *p_err = OS_ERR_TIME_ZERO_DLY;
 80034e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e4:	f247 227e 	movw	r2, #29310	; 0x727e
 80034e8:	801a      	strh	r2, [r3, #0]
    }
}
 80034ea:	3720      	adds	r7, #32
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	2000219e 	.word	0x2000219e
 80034f4:	20001f08 	.word	0x20001f08
 80034f8:	0800eae0 	.word	0x0800eae0
 80034fc:	10624dd3 	.word	0x10624dd3
 8003500:	20002174 	.word	0x20002174

08003504 <OSTimeTick>:
* Returns    : none
************************************************************************************************************************
*/

void  OSTimeTick (void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
#if OS_CFG_ISR_POST_DEFERRED_EN > 0u
    CPU_TS  ts;
#endif


    OSTimeTickHook();                                       /* Call user definable hook                               */
 800350a:	f002 fe1f 	bl	800614c <OSTimeTickHook>
                (CPU_TS     ) ts,
                (OS_ERR    *)&err);

#else

   (void)OSTaskSemPost((OS_TCB *)&OSTickTaskTCB,            /* Signal tick task                                       */
 800350e:	1dbb      	adds	r3, r7, #6
 8003510:	461a      	mov	r2, r3
 8003512:	2100      	movs	r1, #0
 8003514:	480c      	ldr	r0, [pc, #48]	; (8003548 <OSTimeTick+0x44>)
 8003516:	f001 fe71 	bl	80051fc <OSTaskSemPost>
#if OS_CFG_SCHED_ROUND_ROBIN_EN > 0u
    OS_SchedRoundRobin(&OSRdyList[OSPrioCur]);
#endif

#if OS_CFG_TMR_EN > 0u
    OSTmrUpdateCtr--;
 800351a:	4b0c      	ldr	r3, [pc, #48]	; (800354c <OSTimeTick+0x48>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	3b01      	subs	r3, #1
 8003520:	4a0a      	ldr	r2, [pc, #40]	; (800354c <OSTimeTick+0x48>)
 8003522:	6013      	str	r3, [r2, #0]
    if (OSTmrUpdateCtr == (OS_CTR)0u) {
 8003524:	4b09      	ldr	r3, [pc, #36]	; (800354c <OSTimeTick+0x48>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d109      	bne.n	8003540 <OSTimeTick+0x3c>
        OSTmrUpdateCtr = OSTmrUpdateCnt;
 800352c:	4b08      	ldr	r3, [pc, #32]	; (8003550 <OSTimeTick+0x4c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a06      	ldr	r2, [pc, #24]	; (800354c <OSTimeTick+0x48>)
 8003532:	6013      	str	r3, [r2, #0]
        OSTaskSemPost((OS_TCB *)&OSTmrTaskTCB,              /* Signal timer task                                      */
 8003534:	1dbb      	adds	r3, r7, #6
 8003536:	461a      	mov	r2, r3
 8003538:	2100      	movs	r1, #0
 800353a:	4806      	ldr	r0, [pc, #24]	; (8003554 <OSTimeTick+0x50>)
 800353c:	f001 fe5e 	bl	80051fc <OSTaskSemPost>
                      (OS_ERR *)&err);
    }
#endif

#endif
}
 8003540:	bf00      	nop
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	200020ac 	.word	0x200020ac
 800354c:	20002480 	.word	0x20002480
 8003550:	20002470 	.word	0x20002470
 8003554:	200021a4 	.word	0x200021a4

08003558 <OS_PrioInit>:
* Note       : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_PrioInit (void)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
    CPU_DATA  i;


                                                            /* Clear the bitmap table ... no task is ready            */
    for (i = 0u; i < OS_PRIO_TBL_SIZE; i++) {
 800355e:	2300      	movs	r3, #0
 8003560:	607b      	str	r3, [r7, #4]
 8003562:	e007      	b.n	8003574 <OS_PrioInit+0x1c>
         OSPrioTbl[i] = (CPU_DATA)0;
 8003564:	4a07      	ldr	r2, [pc, #28]	; (8003584 <OS_PrioInit+0x2c>)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2100      	movs	r1, #0
 800356a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (i = 0u; i < OS_PRIO_TBL_SIZE; i++) {
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	3301      	adds	r3, #1
 8003572:	607b      	str	r3, [r7, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d0f4      	beq.n	8003564 <OS_PrioInit+0xc>
    }
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	bc80      	pop	{r7}
 8003582:	4770      	bx	lr
 8003584:	2000330c 	.word	0x2000330c

08003588 <OS_PrioGetHighest>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

OS_PRIO  OS_PrioGetHighest (void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
    CPU_DATA  *p_tbl;
    OS_PRIO    prio;


    prio  = (OS_PRIO)0;
 800358e:	2300      	movs	r3, #0
 8003590:	70fb      	strb	r3, [r7, #3]
    p_tbl = &OSPrioTbl[0];
 8003592:	4b0e      	ldr	r3, [pc, #56]	; (80035cc <OS_PrioGetHighest+0x44>)
 8003594:	607b      	str	r3, [r7, #4]
    while (*p_tbl == (CPU_DATA)0) {                         /* Search the bitmap table for the highest priority       */
 8003596:	e005      	b.n	80035a4 <OS_PrioGetHighest+0x1c>
        prio += DEF_INT_CPU_NBR_BITS;                       /* Compute the step of each CPU_DATA entry                */
 8003598:	78fb      	ldrb	r3, [r7, #3]
 800359a:	3320      	adds	r3, #32
 800359c:	70fb      	strb	r3, [r7, #3]
        p_tbl++;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	3304      	adds	r3, #4
 80035a2:	607b      	str	r3, [r7, #4]
    while (*p_tbl == (CPU_DATA)0) {                         /* Search the bitmap table for the highest priority       */
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d0f5      	beq.n	8003598 <OS_PrioGetHighest+0x10>
    }
    prio += (OS_PRIO)CPU_CntLeadZeros(*p_tbl);              /* Find the position of the first bit set at the entry    */
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7fc fea0 	bl	80002f6 <CPU_CntLeadZeros>
 80035b6:	4603      	mov	r3, r0
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	78fb      	ldrb	r3, [r7, #3]
 80035bc:	4413      	add	r3, r2
 80035be:	70fb      	strb	r3, [r7, #3]
    return (prio);
 80035c0:	78fb      	ldrb	r3, [r7, #3]
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	2000330c 	.word	0x2000330c

080035d0 <OS_PrioInsert>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_PrioInsert (OS_PRIO  prio)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b087      	sub	sp, #28
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	4603      	mov	r3, r0
 80035d8:	71fb      	strb	r3, [r7, #7]
    CPU_DATA  bit;
    CPU_DATA  bit_nbr;
    OS_PRIO   ix;


    ix             = prio / DEF_INT_CPU_NBR_BITS;
 80035da:	79fb      	ldrb	r3, [r7, #7]
 80035dc:	095b      	lsrs	r3, r3, #5
 80035de:	75fb      	strb	r3, [r7, #23]
    bit_nbr        = (CPU_DATA)prio & (DEF_INT_CPU_NBR_BITS - 1u);
 80035e0:	79fb      	ldrb	r3, [r7, #7]
 80035e2:	f003 031f 	and.w	r3, r3, #31
 80035e6:	613b      	str	r3, [r7, #16]
    bit            = 1u;
 80035e8:	2301      	movs	r3, #1
 80035ea:	60fb      	str	r3, [r7, #12]
    bit          <<= (DEF_INT_CPU_NBR_BITS - 1u) - bit_nbr;
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	f1c3 031f 	rsb	r3, r3, #31
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	60fb      	str	r3, [r7, #12]
    OSPrioTbl[ix] |= bit;
 80035fa:	7dfb      	ldrb	r3, [r7, #23]
 80035fc:	4a06      	ldr	r2, [pc, #24]	; (8003618 <OS_PrioInsert+0x48>)
 80035fe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003602:	7dfb      	ldrb	r3, [r7, #23]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	430a      	orrs	r2, r1
 8003608:	4903      	ldr	r1, [pc, #12]	; (8003618 <OS_PrioInsert+0x48>)
 800360a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800360e:	bf00      	nop
 8003610:	371c      	adds	r7, #28
 8003612:	46bd      	mov	sp, r7
 8003614:	bc80      	pop	{r7}
 8003616:	4770      	bx	lr
 8003618:	2000330c 	.word	0x2000330c

0800361c <OS_PrioRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_PrioRemove (OS_PRIO  prio)
{
 800361c:	b480      	push	{r7}
 800361e:	b087      	sub	sp, #28
 8003620:	af00      	add	r7, sp, #0
 8003622:	4603      	mov	r3, r0
 8003624:	71fb      	strb	r3, [r7, #7]
    CPU_DATA  bit;
    CPU_DATA  bit_nbr;
    OS_PRIO   ix;


    ix             = prio / DEF_INT_CPU_NBR_BITS;
 8003626:	79fb      	ldrb	r3, [r7, #7]
 8003628:	095b      	lsrs	r3, r3, #5
 800362a:	75fb      	strb	r3, [r7, #23]
    bit_nbr        = (CPU_DATA)prio & (DEF_INT_CPU_NBR_BITS - 1u);
 800362c:	79fb      	ldrb	r3, [r7, #7]
 800362e:	f003 031f 	and.w	r3, r3, #31
 8003632:	613b      	str	r3, [r7, #16]
    bit            = 1u;
 8003634:	2301      	movs	r3, #1
 8003636:	60fb      	str	r3, [r7, #12]
    bit          <<= (DEF_INT_CPU_NBR_BITS - 1u) - bit_nbr;
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	f1c3 031f 	rsb	r3, r3, #31
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	60fb      	str	r3, [r7, #12]
    OSPrioTbl[ix] &= ~bit;
 8003646:	7dfb      	ldrb	r3, [r7, #23]
 8003648:	4a07      	ldr	r2, [pc, #28]	; (8003668 <OS_PrioRemove+0x4c>)
 800364a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	43da      	mvns	r2, r3
 8003652:	7dfb      	ldrb	r3, [r7, #23]
 8003654:	400a      	ands	r2, r1
 8003656:	4904      	ldr	r1, [pc, #16]	; (8003668 <OS_PrioRemove+0x4c>)
 8003658:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800365c:	bf00      	nop
 800365e:	371c      	adds	r7, #28
 8003660:	46bd      	mov	sp, r7
 8003662:	bc80      	pop	{r7}
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	2000330c 	.word	0x2000330c

0800366c <OSStatReset>:
* Returns    : none
************************************************************************************************************************
*/

void  OSStatReset (OS_ERR  *p_err)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
#endif
#if (OS_CFG_Q_EN > 0u)
    OS_Q        *p_q;
#endif
#endif
    CPU_SR_ALLOC();
 8003674:	2300      	movs	r3, #0
 8003676:	60fb      	str	r3, [r7, #12]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    CPU_CRITICAL_ENTER();
 8003678:	f7fc fe32 	bl	80002e0 <CPU_SR_Save>
 800367c:	60f8      	str	r0, [r7, #12]
    OSIntQTaskTimeMax     = (CPU_TS    )0;                  /* Reset the task execution times                         */
    OSIntQNbrEntriesMax   = (OS_OBJ_QTY)0;                  /* Reset the queue maximum number of entries              */
#endif

#if OS_CFG_STAT_TASK_EN > 0u
    OSStatTaskCPUUsageMax = 0u;
 800367e:	4b3f      	ldr	r3, [pc, #252]	; (800377c <OSStatReset+0x110>)
 8003680:	2200      	movs	r2, #0
 8003682:	801a      	strh	r2, [r3, #0]
    OSStatTaskTimeMax     = (CPU_TS)0;
 8003684:	4b3e      	ldr	r3, [pc, #248]	; (8003780 <OSStatReset+0x114>)
 8003686:	2200      	movs	r2, #0
 8003688:	601a      	str	r2, [r3, #0]
#endif

    OSTickTaskTimeMax     = (CPU_TS)0;
 800368a:	4b3e      	ldr	r3, [pc, #248]	; (8003784 <OSStatReset+0x118>)
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]

#if OS_CFG_TMR_EN > 0u
    OSTmrTaskTimeMax      = (CPU_TS)0;
 8003690:	4b3d      	ldr	r3, [pc, #244]	; (8003788 <OSStatReset+0x11c>)
 8003692:	2200      	movs	r2, #0
 8003694:	601a      	str	r2, [r3, #0]
#ifdef CPU_CFG_INT_DIS_MEAS_EN
    OSIntDisTimeMax       = (CPU_TS)0;                      /* Reset the maximum interrupt disable time               */
#endif

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
    OSSchedLockTimeMax    = (CPU_TS)0;                      /* Reset the maximum scheduler lock time                  */
 8003696:	4b3d      	ldr	r3, [pc, #244]	; (800378c <OSStatReset+0x120>)
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]
#endif

#if ((OS_MSG_EN > 0u) && (OS_CFG_DBG_EN > 0u))
    OSMsgPool.NbrUsedMax  = 0u;
 800369c:	4b3c      	ldr	r3, [pc, #240]	; (8003790 <OSStatReset+0x124>)
 800369e:	2200      	movs	r2, #0
 80036a0:	811a      	strh	r2, [r3, #8]
#endif
    CPU_CRITICAL_EXIT();
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f7fc fe20 	bl	80002e8 <CPU_SR_Restore>

#if OS_CFG_DBG_EN > 0u
    CPU_CRITICAL_ENTER();
 80036a8:	f7fc fe1a 	bl	80002e0 <CPU_SR_Save>
 80036ac:	60f8      	str	r0, [r7, #12]
    p_tcb = OSTaskDbgListPtr;
 80036ae:	4b39      	ldr	r3, [pc, #228]	; (8003794 <OSStatReset+0x128>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	617b      	str	r3, [r7, #20]
    CPU_CRITICAL_EXIT();
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f7fc fe17 	bl	80002e8 <CPU_SR_Restore>
    while (p_tcb != (OS_TCB *)0) {                          /* Reset per-Task statistics                              */
 80036ba:	e034      	b.n	8003726 <OSStatReset+0xba>
        CPU_CRITICAL_ENTER();
 80036bc:	f7fc fe10 	bl	80002e0 <CPU_SR_Save>
 80036c0:	60f8      	str	r0, [r7, #12]
#ifdef CPU_CFG_INT_DIS_MEAS_EN
        p_tcb->IntDisTimeMax    = (CPU_TS      )0;
#endif

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
        p_tcb->SchedLockTimeMax = (CPU_TS      )0;
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
#endif

#if OS_CFG_TASK_PROFILE_EN > 0u
#if OS_CFG_TASK_Q_EN > 0u
        p_tcb->MsgQPendTimeMax  = (CPU_TS      )0;
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	2200      	movs	r2, #0
 80036ce:	675a      	str	r2, [r3, #116]	; 0x74
#endif
        p_tcb->SemPendTimeMax   = (CPU_TS      )0;
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        p_tcb->CtxSwCtr         = (OS_CTR      )0;
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	2200      	movs	r2, #0
 80036dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        p_tcb->CPUUsage         = (OS_CPU_USAGE)0;
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
        p_tcb->CPUUsageMax      = (OS_CPU_USAGE)0;
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
        p_tcb->CyclesTotal      = (OS_CYCLES   )0;
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        p_tcb->CyclesTotalPrev  = (OS_CYCLES   )0;
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        p_tcb->CyclesStart      =  OS_TS_GET();
 8003700:	f002 fe40 	bl	8006384 <CPU_TS_TmrRd>
 8003704:	4602      	mov	r2, r0
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif

#if OS_CFG_TASK_Q_EN > 0u
        p_msg_q                 = &p_tcb->MsgQ;
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	3360      	adds	r3, #96	; 0x60
 8003710:	60bb      	str	r3, [r7, #8]
        p_msg_q->NbrEntriesMax  = (OS_MSG_QTY  )0;
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2200      	movs	r2, #0
 8003716:	819a      	strh	r2, [r3, #12]
#endif
        p_tcb                   = p_tcb->DbgNextPtr;
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800371e:	617b      	str	r3, [r7, #20]
        CPU_CRITICAL_EXIT();
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f7fc fde1 	bl	80002e8 <CPU_SR_Restore>
    while (p_tcb != (OS_TCB *)0) {                          /* Reset per-Task statistics                              */
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1c7      	bne.n	80036bc <OSStatReset+0x50>
    }
#endif

#if (OS_CFG_Q_EN > 0u) && (OS_CFG_DBG_EN > 0u)
    CPU_CRITICAL_ENTER();
 800372c:	f7fc fdd8 	bl	80002e0 <CPU_SR_Save>
 8003730:	60f8      	str	r0, [r7, #12]
    p_q = OSQDbgListPtr;
 8003732:	4b19      	ldr	r3, [pc, #100]	; (8003798 <OSStatReset+0x12c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	613b      	str	r3, [r7, #16]
    CPU_CRITICAL_EXIT();
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f7fc fdd5 	bl	80002e8 <CPU_SR_Restore>
    while (p_q != (OS_Q *)0) {                              /* Reset message queues statistics                        */
 800373e:	e00e      	b.n	800375e <OSStatReset+0xf2>
        CPU_CRITICAL_ENTER();
 8003740:	f7fc fdce 	bl	80002e0 <CPU_SR_Save>
 8003744:	60f8      	str	r0, [r7, #12]
        p_msg_q                = &p_q->MsgQ;
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	3320      	adds	r3, #32
 800374a:	60bb      	str	r3, [r7, #8]
        p_msg_q->NbrEntriesMax = (OS_MSG_QTY)0;
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2200      	movs	r2, #0
 8003750:	819a      	strh	r2, [r3, #12]
        p_q                    = p_q->DbgNextPtr;
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	613b      	str	r3, [r7, #16]
        CPU_CRITICAL_EXIT();
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f7fc fdc5 	bl	80002e8 <CPU_SR_Restore>
    while (p_q != (OS_Q *)0) {                              /* Reset message queues statistics                        */
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1ed      	bne.n	8003740 <OSStatReset+0xd4>
    }
#endif

    OS_TickListResetPeak();                                 /* Reset tick wheel statistics                            */
 8003764:	f7ff fc50 	bl	8003008 <OS_TickListResetPeak>

#if OS_CFG_TMR_EN > 0u
    OS_TmrResetPeak();
 8003768:	f7fe fc28 	bl	8001fbc <OS_TmrResetPeak>
#endif


   *p_err = OS_ERR_NONE;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	801a      	strh	r2, [r3, #0]
}
 8003772:	bf00      	nop
 8003774:	3718      	adds	r7, #24
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	2000217a 	.word	0x2000217a
 8003780:	20001f10 	.word	0x20001f10
 8003784:	20002468 	.word	0x20002468
 8003788:	2000218c 	.word	0x2000218c
 800378c:	20002394 	.word	0x20002394
 8003790:	20002264 	.word	0x20002264
 8003794:	20002188 	.word	0x20002188
 8003798:	20002330 	.word	0x20002330

0800379c <OSStatTaskCPUUsageInit>:
* Returns    : none
************************************************************************************************************************
*/

void  OSStatTaskCPUUsageInit (OS_ERR  *p_err)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
    OS_ERR   err;
    OS_TICK  dly;
    CPU_SR_ALLOC();
 80037a4:	2300      	movs	r3, #0
 80037a6:	613b      	str	r3, [r7, #16]
        return;
    }
#endif

#if ((OS_CFG_TMR_EN > 0u) && (OS_CFG_TASK_SUSPEND_EN > 0u))
    OSTaskSuspend(&OSTmrTaskTCB, &err);
 80037a8:	f107 030e 	add.w	r3, r7, #14
 80037ac:	4619      	mov	r1, r3
 80037ae:	4832      	ldr	r0, [pc, #200]	; (8003878 <OSStatTaskCPUUsageInit+0xdc>)
 80037b0:	f001 fdc0 	bl	8005334 <OSTaskSuspend>
    if (err != OS_ERR_NONE) {
 80037b4:	89fb      	ldrh	r3, [r7, #14]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <OSStatTaskCPUUsageInit+0x26>
       *p_err = err;
 80037ba:	89fa      	ldrh	r2, [r7, #14]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	801a      	strh	r2, [r3, #0]
        return;
 80037c0:	e056      	b.n	8003870 <OSStatTaskCPUUsageInit+0xd4>
    }
#endif

    OSTimeDly((OS_TICK )2,                                  /* Synchronize with clock tick                            */
 80037c2:	f107 030e 	add.w	r3, r7, #14
 80037c6:	461a      	mov	r2, r3
 80037c8:	2100      	movs	r1, #0
 80037ca:	2002      	movs	r0, #2
 80037cc:	f7ff fd36 	bl	800323c <OSTimeDly>
              (OS_OPT  )OS_OPT_TIME_DLY,
              (OS_ERR *)&err);
    if (err != OS_ERR_NONE) {
 80037d0:	89fb      	ldrh	r3, [r7, #14]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <OSStatTaskCPUUsageInit+0x42>
       *p_err = err;
 80037d6:	89fa      	ldrh	r2, [r7, #14]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	801a      	strh	r2, [r3, #0]
        return;
 80037dc:	e048      	b.n	8003870 <OSStatTaskCPUUsageInit+0xd4>
    }
    CPU_CRITICAL_ENTER();
 80037de:	f7fc fd7f 	bl	80002e0 <CPU_SR_Save>
 80037e2:	6138      	str	r0, [r7, #16]
    OSStatTaskCtr = (OS_TICK)0;                             /* Clear idle counter                                     */
 80037e4:	4b25      	ldr	r3, [pc, #148]	; (800387c <OSStatTaskCPUUsageInit+0xe0>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	601a      	str	r2, [r3, #0]
    CPU_CRITICAL_EXIT();
 80037ea:	6938      	ldr	r0, [r7, #16]
 80037ec:	f7fc fd7c 	bl	80002e8 <CPU_SR_Restore>

    dly = (OS_TICK)0;
 80037f0:	2300      	movs	r3, #0
 80037f2:	617b      	str	r3, [r7, #20]
    if (OSCfg_TickRate_Hz > OSCfg_StatTaskRate_Hz) {
 80037f4:	4b22      	ldr	r3, [pc, #136]	; (8003880 <OSStatTaskCPUUsageInit+0xe4>)
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	4b22      	ldr	r3, [pc, #136]	; (8003884 <OSStatTaskCPUUsageInit+0xe8>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d906      	bls.n	800380e <OSStatTaskCPUUsageInit+0x72>
        dly = (OS_TICK)(OSCfg_TickRate_Hz / OSCfg_StatTaskRate_Hz);
 8003800:	4b1f      	ldr	r3, [pc, #124]	; (8003880 <OSStatTaskCPUUsageInit+0xe4>)
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	4b1f      	ldr	r3, [pc, #124]	; (8003884 <OSStatTaskCPUUsageInit+0xe8>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	fbb2 f3f3 	udiv	r3, r2, r3
 800380c:	617b      	str	r3, [r7, #20]
    }
    if (dly == (OS_TICK)0) {
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d106      	bne.n	8003822 <OSStatTaskCPUUsageInit+0x86>
        dly =  (OS_TICK)(OSCfg_TickRate_Hz / (OS_RATE_HZ)10);
 8003814:	4b1a      	ldr	r3, [pc, #104]	; (8003880 <OSStatTaskCPUUsageInit+0xe4>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a1b      	ldr	r2, [pc, #108]	; (8003888 <OSStatTaskCPUUsageInit+0xec>)
 800381a:	fba2 2303 	umull	r2, r3, r2, r3
 800381e:	08db      	lsrs	r3, r3, #3
 8003820:	617b      	str	r3, [r7, #20]
    }

    OSTimeDly(dly,                                          /* Determine MAX. idle counter value                      */
 8003822:	f107 030e 	add.w	r3, r7, #14
 8003826:	461a      	mov	r2, r3
 8003828:	2100      	movs	r1, #0
 800382a:	6978      	ldr	r0, [r7, #20]
 800382c:	f7ff fd06 	bl	800323c <OSTimeDly>
              OS_OPT_TIME_DLY,
              &err);

#if ((OS_CFG_TMR_EN > 0u) && (OS_CFG_TASK_SUSPEND_EN > 0u))
    OSTaskResume(&OSTmrTaskTCB, &err);
 8003830:	f107 030e 	add.w	r3, r7, #14
 8003834:	4619      	mov	r1, r3
 8003836:	4810      	ldr	r0, [pc, #64]	; (8003878 <OSStatTaskCPUUsageInit+0xdc>)
 8003838:	f001 fbbe 	bl	8004fb8 <OSTaskResume>
    if (err != OS_ERR_NONE) {
 800383c:	89fb      	ldrh	r3, [r7, #14]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <OSStatTaskCPUUsageInit+0xae>
       *p_err = err;
 8003842:	89fa      	ldrh	r2, [r7, #14]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	801a      	strh	r2, [r3, #0]
        return;
 8003848:	e012      	b.n	8003870 <OSStatTaskCPUUsageInit+0xd4>
    }
#endif

    CPU_CRITICAL_ENTER();
 800384a:	f7fc fd49 	bl	80002e0 <CPU_SR_Save>
 800384e:	6138      	str	r0, [r7, #16]
    OSStatTaskTimeMax = (CPU_TS)0;
 8003850:	4b0e      	ldr	r3, [pc, #56]	; (800388c <OSStatTaskCPUUsageInit+0xf0>)
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]

    OSStatTaskCtrMax  = OSStatTaskCtr;                      /* Store maximum idle counter count                       */
 8003856:	4b09      	ldr	r3, [pc, #36]	; (800387c <OSStatTaskCPUUsageInit+0xe0>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a0d      	ldr	r2, [pc, #52]	; (8003890 <OSStatTaskCPUUsageInit+0xf4>)
 800385c:	6013      	str	r3, [r2, #0]
    OSStatTaskRdy     = OS_STATE_RDY;
 800385e:	4b0d      	ldr	r3, [pc, #52]	; (8003894 <OSStatTaskCPUUsageInit+0xf8>)
 8003860:	2201      	movs	r2, #1
 8003862:	701a      	strb	r2, [r3, #0]
    CPU_CRITICAL_EXIT();
 8003864:	6938      	ldr	r0, [r7, #16]
 8003866:	f7fc fd3f 	bl	80002e8 <CPU_SR_Restore>
   *p_err             = OS_ERR_NONE;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	801a      	strh	r2, [r3, #0]
}
 8003870:	3718      	adds	r7, #24
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	200021a4 	.word	0x200021a4
 800387c:	20001f14 	.word	0x20001f14
 8003880:	0800eae0 	.word	0x0800eae0
 8003884:	0800eacc 	.word	0x0800eacc
 8003888:	cccccccd 	.word	0xcccccccd
 800388c:	20001f10 	.word	0x20001f10
 8003890:	20002370 	.word	0x20002370
 8003894:	2000209d 	.word	0x2000209d

08003898 <OS_StatTask>:
*              4) This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_StatTask (void  *p_arg)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b090      	sub	sp, #64	; 0x40
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
    OS_TICK      ctr_div;
    OS_ERR       err;
    OS_TICK      dly;
    CPU_TS       ts_start;
    CPU_TS       ts_end;
    CPU_SR_ALLOC();
 80038a0:	2300      	movs	r3, #0
 80038a2:	61bb      	str	r3, [r7, #24]



    (void)&p_arg;                                           /* Prevent compiler warning for not using 'p_arg'         */
    while (OSStatTaskRdy != DEF_TRUE) {
 80038a4:	e008      	b.n	80038b8 <OS_StatTask+0x20>
        OSTimeDly(2u * OSCfg_StatTaskRate_Hz,               /* Wait until statistic task is ready                     */
 80038a6:	4b84      	ldr	r3, [pc, #528]	; (8003ab8 <OS_StatTask+0x220>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	f107 020a 	add.w	r2, r7, #10
 80038b0:	2100      	movs	r1, #0
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7ff fcc2 	bl	800323c <OSTimeDly>
    while (OSStatTaskRdy != DEF_TRUE) {
 80038b8:	4b80      	ldr	r3, [pc, #512]	; (8003abc <OS_StatTask+0x224>)
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d1f2      	bne.n	80038a6 <OS_StatTask+0xe>
                  OS_OPT_TIME_DLY,
                  &err);
    }
    OSStatReset(&err);                                      /* Reset statistics                                       */
 80038c0:	f107 030a 	add.w	r3, r7, #10
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7ff fed1 	bl	800366c <OSStatReset>

    dly = (OS_TICK)0;                                       /* Compute statistic task sleep delay                     */
 80038ca:	2300      	movs	r3, #0
 80038cc:	61fb      	str	r3, [r7, #28]
    if (OSCfg_TickRate_Hz > OSCfg_StatTaskRate_Hz) {
 80038ce:	4b7c      	ldr	r3, [pc, #496]	; (8003ac0 <OS_StatTask+0x228>)
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	4b79      	ldr	r3, [pc, #484]	; (8003ab8 <OS_StatTask+0x220>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d906      	bls.n	80038e8 <OS_StatTask+0x50>
        dly = (OS_TICK)(OSCfg_TickRate_Hz / OSCfg_StatTaskRate_Hz);
 80038da:	4b79      	ldr	r3, [pc, #484]	; (8003ac0 <OS_StatTask+0x228>)
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	4b76      	ldr	r3, [pc, #472]	; (8003ab8 <OS_StatTask+0x220>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e6:	61fb      	str	r3, [r7, #28]
    }
    if (dly == (OS_TICK)0) {
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d106      	bne.n	80038fc <OS_StatTask+0x64>
        dly =  (OS_TICK)(OSCfg_TickRate_Hz / (OS_RATE_HZ)10);
 80038ee:	4b74      	ldr	r3, [pc, #464]	; (8003ac0 <OS_StatTask+0x228>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a74      	ldr	r2, [pc, #464]	; (8003ac4 <OS_StatTask+0x22c>)
 80038f4:	fba2 2303 	umull	r2, r3, r2, r3
 80038f8:	08db      	lsrs	r3, r3, #3
 80038fa:	61fb      	str	r3, [r7, #28]
    }

    while (DEF_ON) {
        ts_start        = OS_TS_GET();
 80038fc:	f002 fd42 	bl	8006384 <CPU_TS_TmrRd>
 8003900:	6178      	str	r0, [r7, #20]
#ifdef  CPU_CFG_INT_DIS_MEAS_EN
        OSIntDisTimeMax = CPU_IntDisMeasMaxGet();
#endif

        CPU_CRITICAL_ENTER();                               /* ----------------- OVERALL CPU USAGE ------------------ */
 8003902:	f7fc fced 	bl	80002e0 <CPU_SR_Save>
 8003906:	61b8      	str	r0, [r7, #24]
        OSStatTaskCtrRun   = OSStatTaskCtr;                 /* Obtain the of the stat counter for the past .1 second  */
 8003908:	4b6f      	ldr	r3, [pc, #444]	; (8003ac8 <OS_StatTask+0x230>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a6f      	ldr	r2, [pc, #444]	; (8003acc <OS_StatTask+0x234>)
 800390e:	6013      	str	r3, [r2, #0]
        OSStatTaskCtr      = (OS_TICK)0;                    /* Reset the stat counter for the next .1 second          */
 8003910:	4b6d      	ldr	r3, [pc, #436]	; (8003ac8 <OS_StatTask+0x230>)
 8003912:	2200      	movs	r2, #0
 8003914:	601a      	str	r2, [r3, #0]
        CPU_CRITICAL_EXIT();
 8003916:	69b8      	ldr	r0, [r7, #24]
 8003918:	f7fc fce6 	bl	80002e8 <CPU_SR_Restore>

        if (OSStatTaskCtrMax > OSStatTaskCtrRun) {          /* Compute CPU Usage with best resolution                 */
 800391c:	4b6c      	ldr	r3, [pc, #432]	; (8003ad0 <OS_StatTask+0x238>)
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	4b6a      	ldr	r3, [pc, #424]	; (8003acc <OS_StatTask+0x234>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	429a      	cmp	r2, r3
 8003926:	d94f      	bls.n	80039c8 <OS_StatTask+0x130>
            if (OSStatTaskCtrMax < 400000u) {                                        /*            1 to       400,000 */
 8003928:	4b69      	ldr	r3, [pc, #420]	; (8003ad0 <OS_StatTask+0x238>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a69      	ldr	r2, [pc, #420]	; (8003ad4 <OS_StatTask+0x23c>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d805      	bhi.n	800393e <OS_StatTask+0xa6>
                ctr_mult = 10000u;
 8003932:	f242 7310 	movw	r3, #10000	; 0x2710
 8003936:	627b      	str	r3, [r7, #36]	; 0x24
                ctr_div  =     1u;
 8003938:	2301      	movs	r3, #1
 800393a:	623b      	str	r3, [r7, #32]
 800393c:	e024      	b.n	8003988 <OS_StatTask+0xf0>
            } else if (OSStatTaskCtrMax <   4000000u) {                              /*      400,000 to     4,000,000 */
 800393e:	4b64      	ldr	r3, [pc, #400]	; (8003ad0 <OS_StatTask+0x238>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a65      	ldr	r2, [pc, #404]	; (8003ad8 <OS_StatTask+0x240>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d805      	bhi.n	8003954 <OS_StatTask+0xbc>
                ctr_mult =  1000u;
 8003948:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800394c:	627b      	str	r3, [r7, #36]	; 0x24
                ctr_div  =    10u;
 800394e:	230a      	movs	r3, #10
 8003950:	623b      	str	r3, [r7, #32]
 8003952:	e019      	b.n	8003988 <OS_StatTask+0xf0>
            } else if (OSStatTaskCtrMax <  40000000u) {                              /*    4,000,000 to    40,000,000 */
 8003954:	4b5e      	ldr	r3, [pc, #376]	; (8003ad0 <OS_StatTask+0x238>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a60      	ldr	r2, [pc, #384]	; (8003adc <OS_StatTask+0x244>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d804      	bhi.n	8003968 <OS_StatTask+0xd0>
                ctr_mult =   100u;
 800395e:	2364      	movs	r3, #100	; 0x64
 8003960:	627b      	str	r3, [r7, #36]	; 0x24
                ctr_div  =   100u;
 8003962:	2364      	movs	r3, #100	; 0x64
 8003964:	623b      	str	r3, [r7, #32]
 8003966:	e00f      	b.n	8003988 <OS_StatTask+0xf0>
            } else if (OSStatTaskCtrMax < 400000000u) {                              /*   40,000,000 to   400,000,000 */
 8003968:	4b59      	ldr	r3, [pc, #356]	; (8003ad0 <OS_StatTask+0x238>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a5c      	ldr	r2, [pc, #368]	; (8003ae0 <OS_StatTask+0x248>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d805      	bhi.n	800397e <OS_StatTask+0xe6>
                ctr_mult =    10u;
 8003972:	230a      	movs	r3, #10
 8003974:	627b      	str	r3, [r7, #36]	; 0x24
                ctr_div  =  1000u;
 8003976:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800397a:	623b      	str	r3, [r7, #32]
 800397c:	e004      	b.n	8003988 <OS_StatTask+0xf0>
            } else {                                                                 /*  400,000,000 and up           */
                ctr_mult =     1u;
 800397e:	2301      	movs	r3, #1
 8003980:	627b      	str	r3, [r7, #36]	; 0x24
                ctr_div  = 10000u;
 8003982:	f242 7310 	movw	r3, #10000	; 0x2710
 8003986:	623b      	str	r3, [r7, #32]
            }
            ctr_max            = OSStatTaskCtrMax / ctr_div;
 8003988:	4b51      	ldr	r3, [pc, #324]	; (8003ad0 <OS_StatTask+0x238>)
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	6a3b      	ldr	r3, [r7, #32]
 800398e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003992:	613b      	str	r3, [r7, #16]
            OSStatTaskCPUUsage = (OS_CPU_USAGE)((OS_TICK)10000u - ctr_mult * OSStatTaskCtrRun / ctr_max);
 8003994:	4b4d      	ldr	r3, [pc, #308]	; (8003acc <OS_StatTask+0x234>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800399a:	fb02 f203 	mul.w	r2, r2, r3
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 80039aa:	3310      	adds	r3, #16
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	4b4d      	ldr	r3, [pc, #308]	; (8003ae4 <OS_StatTask+0x24c>)
 80039b0:	801a      	strh	r2, [r3, #0]
            if (OSStatTaskCPUUsageMax < OSStatTaskCPUUsage) {
 80039b2:	4b4d      	ldr	r3, [pc, #308]	; (8003ae8 <OS_StatTask+0x250>)
 80039b4:	881a      	ldrh	r2, [r3, #0]
 80039b6:	4b4b      	ldr	r3, [pc, #300]	; (8003ae4 <OS_StatTask+0x24c>)
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d208      	bcs.n	80039d0 <OS_StatTask+0x138>
                OSStatTaskCPUUsageMax = OSStatTaskCPUUsage;
 80039be:	4b49      	ldr	r3, [pc, #292]	; (8003ae4 <OS_StatTask+0x24c>)
 80039c0:	881a      	ldrh	r2, [r3, #0]
 80039c2:	4b49      	ldr	r3, [pc, #292]	; (8003ae8 <OS_StatTask+0x250>)
 80039c4:	801a      	strh	r2, [r3, #0]
 80039c6:	e003      	b.n	80039d0 <OS_StatTask+0x138>
            }
        } else {
            OSStatTaskCPUUsage = (OS_CPU_USAGE)10000u;
 80039c8:	4b46      	ldr	r3, [pc, #280]	; (8003ae4 <OS_StatTask+0x24c>)
 80039ca:	f242 7210 	movw	r2, #10000	; 0x2710
 80039ce:	801a      	strh	r2, [r3, #0]
        }

        OSStatTaskHook();                                   /* Invoke user definable hook                             */
 80039d0:	f002 faba 	bl	8005f48 <OSStatTaskHook>


#if OS_CFG_DBG_EN > 0u
#if OS_CFG_TASK_PROFILE_EN > 0u
        cycles_total = (OS_CYCLES)0;
 80039d4:	2300      	movs	r3, #0
 80039d6:	63bb      	str	r3, [r7, #56]	; 0x38

        CPU_CRITICAL_ENTER();
 80039d8:	f7fc fc82 	bl	80002e0 <CPU_SR_Save>
 80039dc:	61b8      	str	r0, [r7, #24]
        p_tcb = OSTaskDbgListPtr;
 80039de:	4b43      	ldr	r3, [pc, #268]	; (8003aec <OS_StatTask+0x254>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	62bb      	str	r3, [r7, #40]	; 0x28
        CPU_CRITICAL_EXIT();
 80039e4:	69b8      	ldr	r0, [r7, #24]
 80039e6:	f7fc fc7f 	bl	80002e8 <CPU_SR_Restore>
        while (p_tcb != (OS_TCB *)0) {                      /* ----------------- TOTAL CYCLES COUNT ----------------- */
 80039ea:	e01f      	b.n	8003a2c <OS_StatTask+0x194>
            OS_CRITICAL_ENTER();
 80039ec:	f7fc fc78 	bl	80002e0 <CPU_SR_Save>
 80039f0:	61b8      	str	r0, [r7, #24]
            p_tcb->CyclesTotalPrev =  p_tcb->CyclesTotal;   /* Save accumulated # cycles into a temp variable         */
 80039f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80039f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
            p_tcb->CyclesTotal     = (OS_CYCLES)0;          /* Reset total cycles for task for next run               */
 80039fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a00:	2200      	movs	r2, #0
 8003a02:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            OS_CRITICAL_EXIT();
 8003a06:	69b8      	ldr	r0, [r7, #24]
 8003a08:	f7fc fc6e 	bl	80002e8 <CPU_SR_Restore>

            cycles_total          += p_tcb->CyclesTotalPrev;/* Perform sum of all task # cycles                       */
 8003a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a14:	4413      	add	r3, r2
 8003a16:	63bb      	str	r3, [r7, #56]	; 0x38

            CPU_CRITICAL_ENTER();
 8003a18:	f7fc fc62 	bl	80002e0 <CPU_SR_Save>
 8003a1c:	61b8      	str	r0, [r7, #24]
            p_tcb                  = p_tcb->DbgNextPtr;
 8003a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a20:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003a24:	62bb      	str	r3, [r7, #40]	; 0x28
            CPU_CRITICAL_EXIT();
 8003a26:	69b8      	ldr	r0, [r7, #24]
 8003a28:	f7fc fc5e 	bl	80002e8 <CPU_SR_Restore>
        while (p_tcb != (OS_TCB *)0) {                      /* ----------------- TOTAL CYCLES COUNT ----------------- */
 8003a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1dc      	bne.n	80039ec <OS_StatTask+0x154>
#endif


#if OS_CFG_TASK_PROFILE_EN > 0u
                                                            /* ------------- INDIVIDUAL TASK CPU USAGE -------------- */
        if (cycles_total > (OS_CYCLES)0u) {                                          /* 'cycles_total' scaling ...    */
 8003a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d031      	beq.n	8003a9c <OS_StatTask+0x204>
            if (cycles_total < 400000u) {                                            /*            1 to       400,000 */
 8003a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a3a:	4a26      	ldr	r2, [pc, #152]	; (8003ad4 <OS_StatTask+0x23c>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d805      	bhi.n	8003a4c <OS_StatTask+0x1b4>
                cycles_mult = 10000u;
 8003a40:	f242 7310 	movw	r3, #10000	; 0x2710
 8003a44:	633b      	str	r3, [r7, #48]	; 0x30
                cycles_div  =     1u;
 8003a46:	2301      	movs	r3, #1
 8003a48:	637b      	str	r3, [r7, #52]	; 0x34
 8003a4a:	e021      	b.n	8003a90 <OS_StatTask+0x1f8>
            } else if (cycles_total <   4000000u) {                                  /*      400,000 to     4,000,000 */
 8003a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a4e:	4a22      	ldr	r2, [pc, #136]	; (8003ad8 <OS_StatTask+0x240>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d805      	bhi.n	8003a60 <OS_StatTask+0x1c8>
                cycles_mult =  1000u;
 8003a54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a58:	633b      	str	r3, [r7, #48]	; 0x30
                cycles_div  =    10u;
 8003a5a:	230a      	movs	r3, #10
 8003a5c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a5e:	e017      	b.n	8003a90 <OS_StatTask+0x1f8>
            } else if (cycles_total <  40000000u) {                                  /*    4,000,000 to    40,000,000 */
 8003a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a62:	4a1e      	ldr	r2, [pc, #120]	; (8003adc <OS_StatTask+0x244>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d804      	bhi.n	8003a72 <OS_StatTask+0x1da>
                cycles_mult =   100u;
 8003a68:	2364      	movs	r3, #100	; 0x64
 8003a6a:	633b      	str	r3, [r7, #48]	; 0x30
                cycles_div  =   100u;
 8003a6c:	2364      	movs	r3, #100	; 0x64
 8003a6e:	637b      	str	r3, [r7, #52]	; 0x34
 8003a70:	e00e      	b.n	8003a90 <OS_StatTask+0x1f8>
            } else if (cycles_total < 400000000u) {                                  /*   40,000,000 to   400,000,000 */
 8003a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a74:	4a1a      	ldr	r2, [pc, #104]	; (8003ae0 <OS_StatTask+0x248>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d805      	bhi.n	8003a86 <OS_StatTask+0x1ee>
                cycles_mult =    10u;
 8003a7a:	230a      	movs	r3, #10
 8003a7c:	633b      	str	r3, [r7, #48]	; 0x30
                cycles_div  =  1000u;
 8003a7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a82:	637b      	str	r3, [r7, #52]	; 0x34
 8003a84:	e004      	b.n	8003a90 <OS_StatTask+0x1f8>
            } else {                                                                 /*  400,000,000 and up           */
                cycles_mult =     1u;
 8003a86:	2301      	movs	r3, #1
 8003a88:	633b      	str	r3, [r7, #48]	; 0x30
                cycles_div  = 10000u;
 8003a8a:	f242 7310 	movw	r3, #10000	; 0x2710
 8003a8e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            cycles_max  = cycles_total / cycles_div;
 8003a90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a9a:	e003      	b.n	8003aa4 <OS_StatTask+0x20c>
        } else {
            cycles_mult = 0u;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	633b      	str	r3, [r7, #48]	; 0x30
            cycles_max  = 1u;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif
        CPU_CRITICAL_ENTER();
 8003aa4:	f7fc fc1c 	bl	80002e0 <CPU_SR_Save>
 8003aa8:	61b8      	str	r0, [r7, #24]
        p_tcb = OSTaskDbgListPtr;
 8003aaa:	4b10      	ldr	r3, [pc, #64]	; (8003aec <OS_StatTask+0x254>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	62bb      	str	r3, [r7, #40]	; 0x28
        CPU_CRITICAL_EXIT();
 8003ab0:	69b8      	ldr	r0, [r7, #24]
 8003ab2:	f7fc fc19 	bl	80002e8 <CPU_SR_Restore>
        while (p_tcb != (OS_TCB *)0) {
 8003ab6:	e050      	b.n	8003b5a <OS_StatTask+0x2c2>
 8003ab8:	0800eacc 	.word	0x0800eacc
 8003abc:	2000209d 	.word	0x2000209d
 8003ac0:	0800eae0 	.word	0x0800eae0
 8003ac4:	cccccccd 	.word	0xcccccccd
 8003ac8:	20001f14 	.word	0x20001f14
 8003acc:	20002384 	.word	0x20002384
 8003ad0:	20002370 	.word	0x20002370
 8003ad4:	00061a7f 	.word	0x00061a7f
 8003ad8:	003d08ff 	.word	0x003d08ff
 8003adc:	026259ff 	.word	0x026259ff
 8003ae0:	17d783ff 	.word	0x17d783ff
 8003ae4:	2000219c 	.word	0x2000219c
 8003ae8:	2000217a 	.word	0x2000217a
 8003aec:	20002188 	.word	0x20002188
#if OS_CFG_TASK_PROFILE_EN > 0u                             /* Compute execution time of each task                    */
            usage = (OS_CPU_USAGE)(cycles_mult * p_tcb->CyclesTotalPrev / cycles_max);
 8003af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003af6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003af8:	fb02 f203 	mul.w	r2, r2, r3
 8003afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b02:	87fb      	strh	r3, [r7, #62]	; 0x3e
            if (usage > 10000u) {
 8003b04:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003b06:	f242 7210 	movw	r2, #10000	; 0x2710
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d902      	bls.n	8003b14 <OS_StatTask+0x27c>
                usage = 10000u;
 8003b0e:	f242 7310 	movw	r3, #10000	; 0x2710
 8003b12:	87fb      	strh	r3, [r7, #62]	; 0x3e
            }
            p_tcb->CPUUsage = usage;
 8003b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b16:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8003b18:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
            if (p_tcb->CPUUsageMax < usage) {               /* Detect peak CPU usage                                  */
 8003b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1e:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8003b22:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d903      	bls.n	8003b30 <OS_StatTask+0x298>
                p_tcb->CPUUsageMax = usage;
 8003b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8003b2c:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
            }
#endif

#if OS_CFG_STAT_TASK_STK_CHK_EN > 0u
            OSTaskStkChk( p_tcb,                            /* Compute stack usage of active tasks only               */
 8003b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b32:	f103 01ac 	add.w	r1, r3, #172	; 0xac
 8003b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b38:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 8003b3c:	f107 030a 	add.w	r3, r7, #10
 8003b40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b42:	f001 fb7f 	bl	8005244 <OSTaskStkChk>
                         &p_tcb->StkFree,
                         &p_tcb->StkUsed,
                         &err);
#endif

            CPU_CRITICAL_ENTER();
 8003b46:	f7fc fbcb 	bl	80002e0 <CPU_SR_Save>
 8003b4a:	61b8      	str	r0, [r7, #24]
            p_tcb = p_tcb->DbgNextPtr;
 8003b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003b52:	62bb      	str	r3, [r7, #40]	; 0x28
            CPU_CRITICAL_EXIT();
 8003b54:	69b8      	ldr	r0, [r7, #24]
 8003b56:	f7fc fbc7 	bl	80002e8 <CPU_SR_Restore>
        while (p_tcb != (OS_TCB *)0) {
 8003b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1c7      	bne.n	8003af0 <OS_StatTask+0x258>
        }
#endif

        if (OSStatResetFlag == DEF_TRUE) {                  /* Check if need to reset statistics                      */
 8003b60:	4b10      	ldr	r3, [pc, #64]	; (8003ba4 <OS_StatTask+0x30c>)
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d107      	bne.n	8003b78 <OS_StatTask+0x2e0>
            OSStatResetFlag  = DEF_FALSE;
 8003b68:	4b0e      	ldr	r3, [pc, #56]	; (8003ba4 <OS_StatTask+0x30c>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	701a      	strb	r2, [r3, #0]
            OSStatReset(&err);
 8003b6e:	f107 030a 	add.w	r3, r7, #10
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7ff fd7a 	bl	800366c <OSStatReset>
        }

        ts_end = OS_TS_GET() - ts_start;                    /* Measure execution time of statistic task               */
 8003b78:	f002 fc04 	bl	8006384 <CPU_TS_TmrRd>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	60fb      	str	r3, [r7, #12]
        if (OSStatTaskTimeMax < ts_end) {
 8003b84:	4b08      	ldr	r3, [pc, #32]	; (8003ba8 <OS_StatTask+0x310>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d902      	bls.n	8003b94 <OS_StatTask+0x2fc>
            OSStatTaskTimeMax = ts_end;
 8003b8e:	4a06      	ldr	r2, [pc, #24]	; (8003ba8 <OS_StatTask+0x310>)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6013      	str	r3, [r2, #0]
        }

        OSTimeDly(dly,
 8003b94:	f107 030a 	add.w	r3, r7, #10
 8003b98:	461a      	mov	r2, r3
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	69f8      	ldr	r0, [r7, #28]
 8003b9e:	f7ff fb4d 	bl	800323c <OSTimeDly>
        ts_start        = OS_TS_GET();
 8003ba2:	e6ab      	b.n	80038fc <OS_StatTask+0x64>
 8003ba4:	20002398 	.word	0x20002398
 8003ba8:	20001f10 	.word	0x20001f10

08003bac <OS_StatTaskInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_StatTaskInit (OS_ERR  *p_err)
{
 8003bac:	b590      	push	{r4, r7, lr}
 8003bae:	b08d      	sub	sp, #52	; 0x34
 8003bb0:	af0a      	add	r7, sp, #40	; 0x28
 8003bb2:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    OSStatTaskCtr    = (OS_TICK)0;
 8003bb4:	4b25      	ldr	r3, [pc, #148]	; (8003c4c <OS_StatTaskInit+0xa0>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	601a      	str	r2, [r3, #0]
    OSStatTaskCtrRun = (OS_TICK)0;
 8003bba:	4b25      	ldr	r3, [pc, #148]	; (8003c50 <OS_StatTaskInit+0xa4>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	601a      	str	r2, [r3, #0]
    OSStatTaskCtrMax = (OS_TICK)0;
 8003bc0:	4b24      	ldr	r3, [pc, #144]	; (8003c54 <OS_StatTaskInit+0xa8>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]
    OSStatTaskRdy    = OS_STATE_NOT_RDY;                    /* Statistic task is not ready                            */
 8003bc6:	4b24      	ldr	r3, [pc, #144]	; (8003c58 <OS_StatTaskInit+0xac>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	701a      	strb	r2, [r3, #0]
    OSStatResetFlag  = DEF_FALSE;
 8003bcc:	4b23      	ldr	r3, [pc, #140]	; (8003c5c <OS_StatTaskInit+0xb0>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	701a      	strb	r2, [r3, #0]

                                                            /* ---------------- CREATE THE STAT TASK ---------------- */
    if (OSCfg_StatTaskStkBasePtr == (CPU_STK *)0) {
 8003bd2:	4b23      	ldr	r3, [pc, #140]	; (8003c60 <OS_StatTaskInit+0xb4>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d104      	bne.n	8003be4 <OS_StatTaskInit+0x38>
       *p_err = OS_ERR_STAT_STK_INVALID;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f646 622b 	movw	r2, #28203	; 0x6e2b
 8003be0:	801a      	strh	r2, [r3, #0]
        return;
 8003be2:	e02f      	b.n	8003c44 <OS_StatTaskInit+0x98>
    }

    if (OSCfg_StatTaskStkSize < OSCfg_StkSizeMin) {
 8003be4:	4b1f      	ldr	r3, [pc, #124]	; (8003c64 <OS_StatTaskInit+0xb8>)
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	4b1f      	ldr	r3, [pc, #124]	; (8003c68 <OS_StatTaskInit+0xbc>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d204      	bcs.n	8003bfa <OS_StatTaskInit+0x4e>
       *p_err = OS_ERR_STAT_STK_SIZE_INVALID;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f646 622c 	movw	r2, #28204	; 0x6e2c
 8003bf6:	801a      	strh	r2, [r3, #0]
        return;
 8003bf8:	e024      	b.n	8003c44 <OS_StatTaskInit+0x98>
    }

    if (OSCfg_StatTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {
 8003bfa:	4b1c      	ldr	r3, [pc, #112]	; (8003c6c <OS_StatTaskInit+0xc0>)
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	2b1e      	cmp	r3, #30
 8003c00:	d904      	bls.n	8003c0c <OS_StatTaskInit+0x60>
       *p_err = OS_ERR_STAT_PRIO_INVALID;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f646 622a 	movw	r2, #28202	; 0x6e2a
 8003c08:	801a      	strh	r2, [r3, #0]
        return;
 8003c0a:	e01b      	b.n	8003c44 <OS_StatTaskInit+0x98>
    }

    OSTaskCreate((OS_TCB     *)&OSStatTaskTCB,
 8003c0c:	4b17      	ldr	r3, [pc, #92]	; (8003c6c <OS_StatTaskInit+0xc0>)
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	4a13      	ldr	r2, [pc, #76]	; (8003c60 <OS_StatTaskInit+0xb4>)
 8003c12:	6812      	ldr	r2, [r2, #0]
 8003c14:	4916      	ldr	r1, [pc, #88]	; (8003c70 <OS_StatTaskInit+0xc4>)
 8003c16:	6809      	ldr	r1, [r1, #0]
 8003c18:	4812      	ldr	r0, [pc, #72]	; (8003c64 <OS_StatTaskInit+0xb8>)
 8003c1a:	6800      	ldr	r0, [r0, #0]
 8003c1c:	687c      	ldr	r4, [r7, #4]
 8003c1e:	9408      	str	r4, [sp, #32]
 8003c20:	2403      	movs	r4, #3
 8003c22:	9407      	str	r4, [sp, #28]
 8003c24:	2400      	movs	r4, #0
 8003c26:	9406      	str	r4, [sp, #24]
 8003c28:	2400      	movs	r4, #0
 8003c2a:	9405      	str	r4, [sp, #20]
 8003c2c:	2400      	movs	r4, #0
 8003c2e:	9404      	str	r4, [sp, #16]
 8003c30:	9003      	str	r0, [sp, #12]
 8003c32:	9102      	str	r1, [sp, #8]
 8003c34:	9201      	str	r2, [sp, #4]
 8003c36:	9300      	str	r3, [sp, #0]
 8003c38:	2300      	movs	r3, #0
 8003c3a:	4a0e      	ldr	r2, [pc, #56]	; (8003c74 <OS_StatTaskInit+0xc8>)
 8003c3c:	490e      	ldr	r1, [pc, #56]	; (8003c78 <OS_StatTaskInit+0xcc>)
 8003c3e:	480f      	ldr	r0, [pc, #60]	; (8003c7c <OS_StatTaskInit+0xd0>)
 8003c40:	f001 f8bc 	bl	8004dbc <OSTaskCreate>
                 (OS_MSG_QTY  )0,
                 (OS_TICK     )0,
                 (void       *)0,
                 (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
                 (OS_ERR     *)p_err);
}
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd90      	pop	{r4, r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	20001f14 	.word	0x20001f14
 8003c50:	20002384 	.word	0x20002384
 8003c54:	20002370 	.word	0x20002370
 8003c58:	2000209d 	.word	0x2000209d
 8003c5c:	20002398 	.word	0x20002398
 8003c60:	0800ead0 	.word	0x0800ead0
 8003c64:	0800ead8 	.word	0x0800ead8
 8003c68:	0800eadc 	.word	0x0800eadc
 8003c6c:	0800eac8 	.word	0x0800eac8
 8003c70:	0800ead4 	.word	0x0800ead4
 8003c74:	08003899 	.word	0x08003899
 8003c78:	0800e894 	.word	0x0800e894
 8003c7c:	200023a0 	.word	0x200023a0

08003c80 <OS_FlagInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_FlagInit (OS_ERR  *p_err)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSFlagDbgListPtr = (OS_FLAG_GRP *)0;
 8003c88:	4b06      	ldr	r3, [pc, #24]	; (8003ca4 <OS_FlagInit+0x24>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]
#endif

    OSFlagQty        = (OS_OBJ_QTY   )0;
 8003c8e:	4b06      	ldr	r3, [pc, #24]	; (8003ca8 <OS_FlagInit+0x28>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	801a      	strh	r2, [r3, #0]
   *p_err            = OS_ERR_NONE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	801a      	strh	r2, [r3, #0]
}
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bc80      	pop	{r7}
 8003ca2:	4770      	bx	lr
 8003ca4:	20002390 	.word	0x20002390
 8003ca8:	2000238c 	.word	0x2000238c

08003cac <OSInit>:
* Returns    : none
************************************************************************************************************************
*/

void  OSInit (OS_ERR  *p_err)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    OSInitHook();                                           /* Call port specific initialization code                 */
 8003cb4:	f002 f92c 	bl	8005f10 <OSInitHook>

    OSIntNestingCtr                 = (OS_NESTING_CTR)0;    /* Clear the interrupt nesting counter                    */
 8003cb8:	4b60      	ldr	r3, [pc, #384]	; (8003e3c <OSInit+0x190>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	701a      	strb	r2, [r3, #0]

    OSRunning                       =  OS_STATE_OS_STOPPED; /* Indicate that multitasking not started                 */
 8003cbe:	4b60      	ldr	r3, [pc, #384]	; (8003e40 <OSInit+0x194>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	701a      	strb	r2, [r3, #0]

    OSSchedLockNestingCtr           = (OS_NESTING_CTR)0;    /* Clear the scheduling lock counter                      */
 8003cc4:	4b5f      	ldr	r3, [pc, #380]	; (8003e44 <OSInit+0x198>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	701a      	strb	r2, [r3, #0]

    OSTCBCurPtr                     = (OS_TCB *)0;          /* Initialize OS_TCB pointers to a known state            */
 8003cca:	4b5f      	ldr	r3, [pc, #380]	; (8003e48 <OSInit+0x19c>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]
    OSTCBHighRdyPtr                 = (OS_TCB *)0;
 8003cd0:	4b5e      	ldr	r3, [pc, #376]	; (8003e4c <OSInit+0x1a0>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	601a      	str	r2, [r3, #0]

    OSPrioCur                       = (OS_PRIO)0;           /* Initialize priority variables to a known state         */
 8003cd6:	4b5e      	ldr	r3, [pc, #376]	; (8003e50 <OSInit+0x1a4>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	701a      	strb	r2, [r3, #0]
    OSPrioHighRdy                   = (OS_PRIO)0;
 8003cdc:	4b5d      	ldr	r3, [pc, #372]	; (8003e54 <OSInit+0x1a8>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	701a      	strb	r2, [r3, #0]
    OSPrioSaved                     = (OS_PRIO)0;
 8003ce2:	4b5d      	ldr	r3, [pc, #372]	; (8003e58 <OSInit+0x1ac>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	701a      	strb	r2, [r3, #0]

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
    OSSchedLockTimeBegin            = (CPU_TS)0;
 8003ce8:	4b5c      	ldr	r3, [pc, #368]	; (8003e5c <OSInit+0x1b0>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	601a      	str	r2, [r3, #0]
    OSSchedLockTimeMax              = (CPU_TS)0;
 8003cee:	4b5c      	ldr	r3, [pc, #368]	; (8003e60 <OSInit+0x1b4>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]
    OSSchedLockTimeMaxCur           = (CPU_TS)0;
 8003cf4:	4b5b      	ldr	r3, [pc, #364]	; (8003e64 <OSInit+0x1b8>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	601a      	str	r2, [r3, #0]
#if OS_CFG_SCHED_ROUND_ROBIN_EN > 0u
    OSSchedRoundRobinEn             = DEF_FALSE;
    OSSchedRoundRobinDfltTimeQuanta = OSCfg_TickRate_Hz / 10u;
#endif

    if (OSCfg_ISRStkSize > (CPU_STK_SIZE)0) {
 8003cfa:	4b5b      	ldr	r3, [pc, #364]	; (8003e68 <OSInit+0x1bc>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d015      	beq.n	8003d2e <OSInit+0x82>
        p_stk = OSCfg_ISRStkBasePtr;                        /* Clear exception stack for stack checking.              */
 8003d02:	4b5a      	ldr	r3, [pc, #360]	; (8003e6c <OSInit+0x1c0>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	60fb      	str	r3, [r7, #12]
        if (p_stk != (CPU_STK *)0) {
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00f      	beq.n	8003d2e <OSInit+0x82>
            size  = OSCfg_ISRStkSize;
 8003d0e:	4b56      	ldr	r3, [pc, #344]	; (8003e68 <OSInit+0x1bc>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	60bb      	str	r3, [r7, #8]
            while (size > (CPU_STK_SIZE)0) {
 8003d14:	e008      	b.n	8003d28 <OSInit+0x7c>
                size--;
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	60bb      	str	r3, [r7, #8]
               *p_stk = (CPU_STK)0;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	601a      	str	r2, [r3, #0]
                p_stk++;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	3304      	adds	r3, #4
 8003d26:	60fb      	str	r3, [r7, #12]
            while (size > (CPU_STK_SIZE)0) {
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1f3      	bne.n	8003d16 <OSInit+0x6a>
            }
        }
    }

#if OS_CFG_APP_HOOKS_EN > 0u
    OS_AppTaskCreateHookPtr = (OS_APP_HOOK_TCB )0;          /* Clear application hook pointers                        */
 8003d2e:	4b50      	ldr	r3, [pc, #320]	; (8003e70 <OSInit+0x1c4>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	601a      	str	r2, [r3, #0]
    OS_AppTaskDelHookPtr    = (OS_APP_HOOK_TCB )0;
 8003d34:	4b4f      	ldr	r3, [pc, #316]	; (8003e74 <OSInit+0x1c8>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	601a      	str	r2, [r3, #0]
    OS_AppTaskReturnHookPtr = (OS_APP_HOOK_TCB )0;
 8003d3a:	4b4f      	ldr	r3, [pc, #316]	; (8003e78 <OSInit+0x1cc>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]

    OS_AppIdleTaskHookPtr   = (OS_APP_HOOK_VOID)0;
 8003d40:	4b4e      	ldr	r3, [pc, #312]	; (8003e7c <OSInit+0x1d0>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	601a      	str	r2, [r3, #0]
    OS_AppStatTaskHookPtr   = (OS_APP_HOOK_VOID)0;
 8003d46:	4b4e      	ldr	r3, [pc, #312]	; (8003e80 <OSInit+0x1d4>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]
    OS_AppTaskSwHookPtr     = (OS_APP_HOOK_VOID)0;
 8003d4c:	4b4d      	ldr	r3, [pc, #308]	; (8003e84 <OSInit+0x1d8>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	601a      	str	r2, [r3, #0]
    OS_AppTimeTickHookPtr   = (OS_APP_HOOK_VOID)0;
 8003d52:	4b4d      	ldr	r3, [pc, #308]	; (8003e88 <OSInit+0x1dc>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]
#endif

#if OS_CFG_TASK_REG_TBL_SIZE > 0u
    OSTaskRegNextAvailID    = (OS_REG_ID)0;
 8003d58:	4b4c      	ldr	r3, [pc, #304]	; (8003e8c <OSInit+0x1e0>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	701a      	strb	r2, [r3, #0]
#endif

    OS_PrioInit();                                          /* Initialize the priority bitmap table                   */
 8003d5e:	f7ff fbfb 	bl	8003558 <OS_PrioInit>

    OS_RdyListInit();                                       /* Initialize the Ready List                              */
 8003d62:	f000 fd4f 	bl	8004804 <OS_RdyListInit>

    
#if OS_CFG_FLAG_EN > 0u                                     /* Initialize the Event Flag module                       */
    OS_FlagInit(p_err);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7ff ff8a 	bl	8003c80 <OS_FlagInit>
    if (*p_err != OS_ERR_NONE) {
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	881b      	ldrh	r3, [r3, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d14a      	bne.n	8003e0a <OSInit+0x15e>
    }
#endif


#if OS_CFG_MEM_EN > 0u                                      /* Initialize the Memory Manager module                   */
    OS_MemInit(p_err);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f7fe fb19 	bl	80023ac <OS_MemInit>
    if (*p_err != OS_ERR_NONE) {
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	881b      	ldrh	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d145      	bne.n	8003e0e <OSInit+0x162>
    }
#endif


#if (OS_MSG_EN) > 0u                                        /* Initialize the free list of OS_MSGs                    */
    OS_MsgPoolInit(p_err);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 feb4 	bl	8004af0 <OS_MsgPoolInit>
    if (*p_err != OS_ERR_NONE) {
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	881b      	ldrh	r3, [r3, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d140      	bne.n	8003e12 <OSInit+0x166>
    }
#endif


#if OS_CFG_MUTEX_EN > 0u                                    /* Initialize the Mutex Manager module                    */
    OS_MutexInit(p_err);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f7fe fe93 	bl	8002abc <OS_MutexInit>
    if (*p_err != OS_ERR_NONE) {
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	881b      	ldrh	r3, [r3, #0]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d13b      	bne.n	8003e16 <OSInit+0x16a>
    }
#endif


#if OS_CFG_Q_EN > 0u
    OS_QInit(p_err);                                        /* Initialize the Message Queue Manager module            */
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f002 f82a 	bl	8005df8 <OS_QInit>
    if (*p_err != OS_ERR_NONE) {
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	881b      	ldrh	r3, [r3, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d136      	bne.n	8003e1a <OSInit+0x16e>
    }
#endif


#if OS_CFG_SEM_EN > 0u                                      /* Initialize the Semaphore Manager module                */
    OS_SemInit(p_err);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7fe fef3 	bl	8002b98 <OS_SemInit>
    if (*p_err != OS_ERR_NONE) {
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	881b      	ldrh	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d131      	bne.n	8003e1e <OSInit+0x172>
        return;
    }
#endif


    OS_TaskInit(p_err);                                     /* Initialize the task manager                            */
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f001 fb02 	bl	80053c4 <OS_TaskInit>
    if (*p_err != OS_ERR_NONE) {
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	881b      	ldrh	r3, [r3, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d12c      	bne.n	8003e22 <OSInit+0x176>
        return;
    }
#endif

    
    OS_IdleTaskInit(p_err);                                 /* Initialize the Idle Task                               */
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 fa21 	bl	8004210 <OS_IdleTaskInit>
    if (*p_err != OS_ERR_NONE) {
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	881b      	ldrh	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d127      	bne.n	8003e26 <OSInit+0x17a>
        return;
    }


    OS_TickTaskInit(p_err);                                 /* Initialize the Tick Task                               */
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7fe ff2c 	bl	8002c34 <OS_TickTaskInit>
    if (*p_err != OS_ERR_NONE) {
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	881b      	ldrh	r3, [r3, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d122      	bne.n	8003e2a <OSInit+0x17e>
        return;
    }


#if OS_CFG_STAT_TASK_EN > 0u                                /* Initialize the Statistic Task                          */
    OS_StatTaskInit(p_err);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f7ff fee1 	bl	8003bac <OS_StatTaskInit>
    if (*p_err != OS_ERR_NONE) {
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	881b      	ldrh	r3, [r3, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d11d      	bne.n	8003e2e <OSInit+0x182>
    }
#endif


#if OS_CFG_TMR_EN > 0u                                      /* Initialize the Timer Manager module                    */
    OS_TmrInit(p_err);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7fe f846 	bl	8001e84 <OS_TmrInit>
    if (*p_err != OS_ERR_NONE) {
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	881b      	ldrh	r3, [r3, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d118      	bne.n	8003e32 <OSInit+0x186>
    }
#endif


#if OS_CFG_DBG_EN > 0u
    OS_Dbg_Init();
 8003e00:	f7fe faea 	bl	80023d8 <OS_Dbg_Init>
#endif


    OSCfg_Init();
 8003e04:	f7fe fede 	bl	8002bc4 <OSCfg_Init>
 8003e08:	e014      	b.n	8003e34 <OSInit+0x188>
        return;
 8003e0a:	bf00      	nop
 8003e0c:	e012      	b.n	8003e34 <OSInit+0x188>
        return;
 8003e0e:	bf00      	nop
 8003e10:	e010      	b.n	8003e34 <OSInit+0x188>
        return;
 8003e12:	bf00      	nop
 8003e14:	e00e      	b.n	8003e34 <OSInit+0x188>
        return;
 8003e16:	bf00      	nop
 8003e18:	e00c      	b.n	8003e34 <OSInit+0x188>
        return;
 8003e1a:	bf00      	nop
 8003e1c:	e00a      	b.n	8003e34 <OSInit+0x188>
        return;
 8003e1e:	bf00      	nop
 8003e20:	e008      	b.n	8003e34 <OSInit+0x188>
        return;
 8003e22:	bf00      	nop
 8003e24:	e006      	b.n	8003e34 <OSInit+0x188>
        return;
 8003e26:	bf00      	nop
 8003e28:	e004      	b.n	8003e34 <OSInit+0x188>
        return;
 8003e2a:	bf00      	nop
 8003e2c:	e002      	b.n	8003e34 <OSInit+0x188>
        return;
 8003e2e:	bf00      	nop
 8003e30:	e000      	b.n	8003e34 <OSInit+0x188>
        return;
 8003e32:	bf00      	nop
}
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	2000219e 	.word	0x2000219e
 8003e40:	20001f19 	.word	0x20001f19
 8003e44:	20001f08 	.word	0x20001f08
 8003e48:	20002174 	.word	0x20002174
 8003e4c:	20002180 	.word	0x20002180
 8003e50:	200020a8 	.word	0x200020a8
 8003e54:	2000209c 	.word	0x2000209c
 8003e58:	2000217c 	.word	0x2000217c
 8003e5c:	20002170 	.word	0x20002170
 8003e60:	20002394 	.word	0x20002394
 8003e64:	20002184 	.word	0x20002184
 8003e68:	0800eabc 	.word	0x0800eabc
 8003e6c:	0800eab8 	.word	0x0800eab8
 8003e70:	200020a4 	.word	0x200020a4
 8003e74:	20002190 	.word	0x20002190
 8003e78:	20001f0c 	.word	0x20001f0c
 8003e7c:	2000236c 	.word	0x2000236c
 8003e80:	20002388 	.word	0x20002388
 8003e84:	20002378 	.word	0x20002378
 8003e88:	20002194 	.word	0x20002194
 8003e8c:	20001f18 	.word	0x20001f18

08003e90 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 250 levels deep.
************************************************************************************************************************
*/

void  OSIntEnter (void)
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Is OS running?                                         */
 8003e94:	4b0a      	ldr	r3, [pc, #40]	; (8003ec0 <OSIntEnter+0x30>)
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d10a      	bne.n	8003eb2 <OSIntEnter+0x22>
        return;                                             /* No                                                     */
    }

    if (OSIntNestingCtr >= (OS_NESTING_CTR)250u) {          /* Have we nested past 250 levels?                        */
 8003e9c:	4b09      	ldr	r3, [pc, #36]	; (8003ec4 <OSIntEnter+0x34>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	2bf9      	cmp	r3, #249	; 0xf9
 8003ea2:	d808      	bhi.n	8003eb6 <OSIntEnter+0x26>
        return;                                             /* Yes                                                    */
    }

    OSIntNestingCtr++;                                      /* Increment ISR nesting level                            */
 8003ea4:	4b07      	ldr	r3, [pc, #28]	; (8003ec4 <OSIntEnter+0x34>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	b2da      	uxtb	r2, r3
 8003eac:	4b05      	ldr	r3, [pc, #20]	; (8003ec4 <OSIntEnter+0x34>)
 8003eae:	701a      	strb	r2, [r3, #0]
 8003eb0:	e002      	b.n	8003eb8 <OSIntEnter+0x28>
        return;                                             /* No                                                     */
 8003eb2:	bf00      	nop
 8003eb4:	e000      	b.n	8003eb8 <OSIntEnter+0x28>
        return;                                             /* Yes                                                    */
 8003eb6:	bf00      	nop
}
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bc80      	pop	{r7}
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	20001f19 	.word	0x20001f19
 8003ec4:	2000219e 	.word	0x2000219e

08003ec8 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OSSchedLock())
************************************************************************************************************************
*/

void  OSIntExit (void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
 8003ece:	2300      	movs	r3, #0
 8003ed0:	607b      	str	r3, [r7, #4]



    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Has the OS started?                                    */
 8003ed2:	4b2b      	ldr	r3, [pc, #172]	; (8003f80 <OSIntExit+0xb8>)
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d14e      	bne.n	8003f78 <OSIntExit+0xb0>
        return;                                             /* No                                                     */
    }

    CPU_INT_DIS();
 8003eda:	f7fc fa01 	bl	80002e0 <CPU_SR_Save>
 8003ede:	6078      	str	r0, [r7, #4]
    if (OSIntNestingCtr == (OS_NESTING_CTR)0) {             /* Prevent OSIntNestingCtr from wrapping                  */
 8003ee0:	4b28      	ldr	r3, [pc, #160]	; (8003f84 <OSIntExit+0xbc>)
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d103      	bne.n	8003ef0 <OSIntExit+0x28>
        CPU_INT_EN();
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f7fc f9fd 	bl	80002e8 <CPU_SR_Restore>
        return;
 8003eee:	e044      	b.n	8003f7a <OSIntExit+0xb2>
    }
    OSIntNestingCtr--;
 8003ef0:	4b24      	ldr	r3, [pc, #144]	; (8003f84 <OSIntExit+0xbc>)
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	b2da      	uxtb	r2, r3
 8003ef8:	4b22      	ldr	r3, [pc, #136]	; (8003f84 <OSIntExit+0xbc>)
 8003efa:	701a      	strb	r2, [r3, #0]
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* ISRs still nested?                                     */
 8003efc:	4b21      	ldr	r3, [pc, #132]	; (8003f84 <OSIntExit+0xbc>)
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d003      	beq.n	8003f0c <OSIntExit+0x44>
        CPU_INT_EN();                                       /* Yes                                                    */
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f7fc f9ef 	bl	80002e8 <CPU_SR_Restore>
        return;
 8003f0a:	e036      	b.n	8003f7a <OSIntExit+0xb2>
    }

    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {        /* Scheduler still locked?                                */
 8003f0c:	4b1e      	ldr	r3, [pc, #120]	; (8003f88 <OSIntExit+0xc0>)
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d003      	beq.n	8003f1c <OSIntExit+0x54>
        CPU_INT_EN();                                       /* Yes                                                    */
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f7fc f9e7 	bl	80002e8 <CPU_SR_Restore>
        return;
 8003f1a:	e02e      	b.n	8003f7a <OSIntExit+0xb2>
    }

    OSPrioHighRdy   = OS_PrioGetHighest();                  /* Find highest priority                                  */
 8003f1c:	f7ff fb34 	bl	8003588 <OS_PrioGetHighest>
 8003f20:	4603      	mov	r3, r0
 8003f22:	461a      	mov	r2, r3
 8003f24:	4b19      	ldr	r3, [pc, #100]	; (8003f8c <OSIntExit+0xc4>)
 8003f26:	701a      	strb	r2, [r3, #0]
    OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;     /* Get highest priority task ready-to-run                 */
 8003f28:	4b18      	ldr	r3, [pc, #96]	; (8003f8c <OSIntExit+0xc4>)
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	4a18      	ldr	r2, [pc, #96]	; (8003f90 <OSIntExit+0xc8>)
 8003f30:	460b      	mov	r3, r1
 8003f32:	005b      	lsls	r3, r3, #1
 8003f34:	440b      	add	r3, r1
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	4413      	add	r3, r2
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a15      	ldr	r2, [pc, #84]	; (8003f94 <OSIntExit+0xcc>)
 8003f3e:	6013      	str	r3, [r2, #0]
    if (OSTCBHighRdyPtr == OSTCBCurPtr) {                   /* Current task still the highest priority?               */
 8003f40:	4b14      	ldr	r3, [pc, #80]	; (8003f94 <OSIntExit+0xcc>)
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	4b14      	ldr	r3, [pc, #80]	; (8003f98 <OSIntExit+0xd0>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d103      	bne.n	8003f54 <OSIntExit+0x8c>
        CPU_INT_EN();                                       /* Yes                                                    */
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f7fc f9cb 	bl	80002e8 <CPU_SR_Restore>
        return;
 8003f52:	e012      	b.n	8003f7a <OSIntExit+0xb2>
    }

#if OS_CFG_TASK_PROFILE_EN > 0u
    OSTCBHighRdyPtr->CtxSwCtr++;                            /* Inc. # of context switches for this new task           */
 8003f54:	4b0f      	ldr	r3, [pc, #60]	; (8003f94 <OSIntExit+0xcc>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003f5c:	3201      	adds	r2, #1
 8003f5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#endif
    OSTaskCtxSwCtr++;                                       /* Keep track of the total number of ctx switches         */
 8003f62:	4b0e      	ldr	r3, [pc, #56]	; (8003f9c <OSIntExit+0xd4>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	3301      	adds	r3, #1
 8003f68:	4a0c      	ldr	r2, [pc, #48]	; (8003f9c <OSIntExit+0xd4>)
 8003f6a:	6013      	str	r3, [r2, #0]

#if defined(OS_CFG_TLS_TBL_SIZE) && (OS_CFG_TLS_TBL_SIZE > 0u)
    OS_TLS_TaskSw();
#endif

    OSIntCtxSw();                                           /* Perform interrupt level ctx switch                     */
 8003f6c:	f7fc f985 	bl	800027a <OSIntCtxSw>

    CPU_INT_EN();
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f7fc f9b9 	bl	80002e8 <CPU_SR_Restore>
 8003f76:	e000      	b.n	8003f7a <OSIntExit+0xb2>
        return;                                             /* No                                                     */
 8003f78:	bf00      	nop
}
 8003f7a:	3708      	adds	r7, #8
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	20001f19 	.word	0x20001f19
 8003f84:	2000219e 	.word	0x2000219e
 8003f88:	20001f08 	.word	0x20001f08
 8003f8c:	2000209c 	.word	0x2000209c
 8003f90:	20001f1c 	.word	0x20001f1c
 8003f94:	20002180 	.word	0x20002180
 8003f98:	20002174 	.word	0x20002174
 8003f9c:	20002198 	.word	0x20002198

08003fa0 <OSSched>:
* Note(s)    : 1) Rescheduling is prevented when the scheduler is locked (see OSSchedLock())
************************************************************************************************************************
*/

void  OSSched (void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	607b      	str	r3, [r7, #4]



    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* ISRs still nested?                                     */
 8003faa:	4b20      	ldr	r3, [pc, #128]	; (800402c <OSSched+0x8c>)
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d136      	bne.n	8004020 <OSSched+0x80>
        return;                                             /* Yes ... only schedule when no nested ISRs              */
    }

    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {        /* Scheduler locked?                                      */
 8003fb2:	4b1f      	ldr	r3, [pc, #124]	; (8004030 <OSSched+0x90>)
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d134      	bne.n	8004024 <OSSched+0x84>
        return;                                             /* Yes                                                    */
    }

    CPU_INT_DIS();
 8003fba:	f7fc f991 	bl	80002e0 <CPU_SR_Save>
 8003fbe:	6078      	str	r0, [r7, #4]
    OSPrioHighRdy   = OS_PrioGetHighest();                  /* Find the highest priority ready                        */
 8003fc0:	f7ff fae2 	bl	8003588 <OS_PrioGetHighest>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	4b1a      	ldr	r3, [pc, #104]	; (8004034 <OSSched+0x94>)
 8003fca:	701a      	strb	r2, [r3, #0]
    OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;
 8003fcc:	4b19      	ldr	r3, [pc, #100]	; (8004034 <OSSched+0x94>)
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	4a19      	ldr	r2, [pc, #100]	; (8004038 <OSSched+0x98>)
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	005b      	lsls	r3, r3, #1
 8003fd8:	440b      	add	r3, r1
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4413      	add	r3, r2
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a16      	ldr	r2, [pc, #88]	; (800403c <OSSched+0x9c>)
 8003fe2:	6013      	str	r3, [r2, #0]
    if (OSTCBHighRdyPtr == OSTCBCurPtr) {                   /* Current task is still highest priority task?           */
 8003fe4:	4b15      	ldr	r3, [pc, #84]	; (800403c <OSSched+0x9c>)
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	4b15      	ldr	r3, [pc, #84]	; (8004040 <OSSched+0xa0>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d103      	bne.n	8003ff8 <OSSched+0x58>
        CPU_INT_EN();                                       /* Yes ... no need to context switch                      */
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f7fc f979 	bl	80002e8 <CPU_SR_Restore>
        return;
 8003ff6:	e016      	b.n	8004026 <OSSched+0x86>
    }

#if OS_CFG_TASK_PROFILE_EN > 0u
    OSTCBHighRdyPtr->CtxSwCtr++;                            /* Inc. # of context switches to this task                */
 8003ff8:	4b10      	ldr	r3, [pc, #64]	; (800403c <OSSched+0x9c>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004000:	3201      	adds	r2, #1
 8004002:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#endif
    OSTaskCtxSwCtr++;                                       /* Increment context switch counter                       */
 8004006:	4b0f      	ldr	r3, [pc, #60]	; (8004044 <OSSched+0xa4>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	3301      	adds	r3, #1
 800400c:	4a0d      	ldr	r2, [pc, #52]	; (8004044 <OSSched+0xa4>)
 800400e:	6013      	str	r3, [r2, #0]

#if defined(OS_CFG_TLS_TBL_SIZE) && (OS_CFG_TLS_TBL_SIZE > 0u)
    OS_TLS_TaskSw();
#endif

    OS_TASK_SW();                                           /* Perform a task level context switch                    */
 8004010:	f7fc f92e 	bl	8000270 <OSCtxSw>
    CPU_INT_EN();
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f7fc f967 	bl	80002e8 <CPU_SR_Restore>

#ifdef OS_TASK_SW_SYNC
    OS_TASK_SW_SYNC();
 800401a:	f3bf 8f6f 	isb	sy
 800401e:	e002      	b.n	8004026 <OSSched+0x86>
        return;                                             /* Yes ... only schedule when no nested ISRs              */
 8004020:	bf00      	nop
 8004022:	e000      	b.n	8004026 <OSSched+0x86>
        return;                                             /* Yes                                                    */
 8004024:	bf00      	nop
#endif
}
 8004026:	3708      	adds	r7, #8
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	2000219e 	.word	0x2000219e
 8004030:	20001f08 	.word	0x20001f08
 8004034:	2000209c 	.word	0x2000209c
 8004038:	20001f1c 	.word	0x20001f1c
 800403c:	20002180 	.word	0x20002180
 8004040:	20002174 	.word	0x20002174
 8004044:	20002198 	.word	0x20002198

08004048 <OSSchedLock>:
*                 call to OSSchedLock() you MUST have a call to OSSchedUnlock().
************************************************************************************************************************
*/

void  OSSchedLock (OS_ERR  *p_err)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
    CPU_SR_ALLOC();
 8004050:	2300      	movs	r3, #0
 8004052:	60fb      	str	r3, [r7, #12]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 8004054:	4b17      	ldr	r3, [pc, #92]	; (80040b4 <OSSchedLock+0x6c>)
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d004      	beq.n	8004066 <OSSchedLock+0x1e>
       *p_err = OS_ERR_SCHED_LOCK_ISR;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f646 5262 	movw	r2, #28002	; 0x6d62
 8004062:	801a      	strh	r2, [r3, #0]
        return;
 8004064:	e022      	b.n	80040ac <OSSchedLock+0x64>
    }
#endif

    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Make sure multitasking is running                      */
 8004066:	4b14      	ldr	r3, [pc, #80]	; (80040b8 <OSSchedLock+0x70>)
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d004      	beq.n	8004078 <OSSchedLock+0x30>
       *p_err = OS_ERR_OS_NOT_RUNNING;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f645 6289 	movw	r2, #24201	; 0x5e89
 8004074:	801a      	strh	r2, [r3, #0]
        return;
 8004076:	e019      	b.n	80040ac <OSSchedLock+0x64>
    }

    if (OSSchedLockNestingCtr >= (OS_NESTING_CTR)250u) {    /* Prevent OSSchedLockNestingCtr overflowing              */
 8004078:	4b10      	ldr	r3, [pc, #64]	; (80040bc <OSSchedLock+0x74>)
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	2bf9      	cmp	r3, #249	; 0xf9
 800407e:	d904      	bls.n	800408a <OSSchedLock+0x42>
       *p_err = OS_ERR_LOCK_NESTING_OVF;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f245 2209 	movw	r2, #21001	; 0x5209
 8004086:	801a      	strh	r2, [r3, #0]
        return;
 8004088:	e010      	b.n	80040ac <OSSchedLock+0x64>
    }

    CPU_CRITICAL_ENTER();
 800408a:	f7fc f929 	bl	80002e0 <CPU_SR_Save>
 800408e:	60f8      	str	r0, [r7, #12]
    OSSchedLockNestingCtr++;                                /* Increment lock nesting level                           */
 8004090:	4b0a      	ldr	r3, [pc, #40]	; (80040bc <OSSchedLock+0x74>)
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	3301      	adds	r3, #1
 8004096:	b2da      	uxtb	r2, r3
 8004098:	4b08      	ldr	r3, [pc, #32]	; (80040bc <OSSchedLock+0x74>)
 800409a:	701a      	strb	r2, [r3, #0]
#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
    OS_SchedLockTimeMeasStart();
 800409c:	f000 fccc 	bl	8004a38 <OS_SchedLockTimeMeasStart>
#endif
    CPU_CRITICAL_EXIT();
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f7fc f921 	bl	80002e8 <CPU_SR_Restore>
   *p_err = OS_ERR_NONE;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	801a      	strh	r2, [r3, #0]
}
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	2000219e 	.word	0x2000219e
 80040b8:	20001f19 	.word	0x20001f19
 80040bc:	20001f08 	.word	0x20001f08

080040c0 <OSSchedUnlock>:
*                 OSSchedLock() you MUST have a call to OSSchedUnlock().
************************************************************************************************************************
*/

void  OSSchedUnlock (OS_ERR  *p_err)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
    CPU_SR_ALLOC();
 80040c8:	2300      	movs	r3, #0
 80040ca:	60fb      	str	r3, [r7, #12]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 80040cc:	4b1e      	ldr	r3, [pc, #120]	; (8004148 <OSSchedUnlock+0x88>)
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d004      	beq.n	80040de <OSSchedUnlock+0x1e>
       *p_err = OS_ERR_SCHED_UNLOCK_ISR;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f646 5265 	movw	r2, #28005	; 0x6d65
 80040da:	801a      	strh	r2, [r3, #0]
        return;
 80040dc:	e030      	b.n	8004140 <OSSchedUnlock+0x80>
    }
#endif

    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Make sure multitasking is running                      */
 80040de:	4b1b      	ldr	r3, [pc, #108]	; (800414c <OSSchedUnlock+0x8c>)
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d004      	beq.n	80040f0 <OSSchedUnlock+0x30>
       *p_err = OS_ERR_OS_NOT_RUNNING;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f645 6289 	movw	r2, #24201	; 0x5e89
 80040ec:	801a      	strh	r2, [r3, #0]
        return;
 80040ee:	e027      	b.n	8004140 <OSSchedUnlock+0x80>
    }

    if (OSSchedLockNestingCtr == (OS_NESTING_CTR)0) {       /* See if the scheduler is locked                         */
 80040f0:	4b17      	ldr	r3, [pc, #92]	; (8004150 <OSSchedUnlock+0x90>)
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d104      	bne.n	8004102 <OSSchedUnlock+0x42>
       *p_err = OS_ERR_SCHED_NOT_LOCKED;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f646 5264 	movw	r2, #28004	; 0x6d64
 80040fe:	801a      	strh	r2, [r3, #0]
        return;
 8004100:	e01e      	b.n	8004140 <OSSchedUnlock+0x80>
    }

    CPU_CRITICAL_ENTER();
 8004102:	f7fc f8ed 	bl	80002e0 <CPU_SR_Save>
 8004106:	60f8      	str	r0, [r7, #12]
    OSSchedLockNestingCtr--;                                /* Decrement lock nesting level                           */
 8004108:	4b11      	ldr	r3, [pc, #68]	; (8004150 <OSSchedUnlock+0x90>)
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	3b01      	subs	r3, #1
 800410e:	b2da      	uxtb	r2, r3
 8004110:	4b0f      	ldr	r3, [pc, #60]	; (8004150 <OSSchedUnlock+0x90>)
 8004112:	701a      	strb	r2, [r3, #0]
    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {
 8004114:	4b0e      	ldr	r3, [pc, #56]	; (8004150 <OSSchedUnlock+0x90>)
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d007      	beq.n	800412c <OSSchedUnlock+0x6c>
        CPU_CRITICAL_EXIT();                                /* Scheduler is still locked                              */
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f7fc f8e3 	bl	80002e8 <CPU_SR_Restore>
       *p_err = OS_ERR_SCHED_LOCKED;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f646 5263 	movw	r2, #28003	; 0x6d63
 8004128:	801a      	strh	r2, [r3, #0]
        return;
 800412a:	e009      	b.n	8004140 <OSSchedUnlock+0x80>
    }

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
    OS_SchedLockTimeMeasStop();
 800412c:	f000 fc96 	bl	8004a5c <OS_SchedLockTimeMeasStop>
#endif

    CPU_CRITICAL_EXIT();                                    /* Scheduler should be re-enabled                         */
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f7fc f8d9 	bl	80002e8 <CPU_SR_Restore>
    OSSched();                                              /* Run the scheduler                                      */
 8004136:	f7ff ff33 	bl	8003fa0 <OSSched>
   *p_err = OS_ERR_NONE;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	801a      	strh	r2, [r3, #0]
}
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	2000219e 	.word	0x2000219e
 800414c:	20001f19 	.word	0x20001f19
 8004150:	20001f08 	.word	0x20001f08

08004154 <OSStart>:
*              2) OSStart() is not supposed to return.  If it does, that would be considered a fatal error.
************************************************************************************************************************
*/

void  OSStart (OS_ERR  *p_err)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    if (OSRunning == OS_STATE_OS_STOPPED) {
 800415c:	4b17      	ldr	r3, [pc, #92]	; (80041bc <OSStart+0x68>)
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d123      	bne.n	80041ac <OSStart+0x58>
        OSPrioHighRdy   = OS_PrioGetHighest();              /* Find the highest priority                              */
 8004164:	f7ff fa10 	bl	8003588 <OS_PrioGetHighest>
 8004168:	4603      	mov	r3, r0
 800416a:	461a      	mov	r2, r3
 800416c:	4b14      	ldr	r3, [pc, #80]	; (80041c0 <OSStart+0x6c>)
 800416e:	701a      	strb	r2, [r3, #0]
        OSPrioCur       = OSPrioHighRdy;
 8004170:	4b13      	ldr	r3, [pc, #76]	; (80041c0 <OSStart+0x6c>)
 8004172:	781a      	ldrb	r2, [r3, #0]
 8004174:	4b13      	ldr	r3, [pc, #76]	; (80041c4 <OSStart+0x70>)
 8004176:	701a      	strb	r2, [r3, #0]
        OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;
 8004178:	4b11      	ldr	r3, [pc, #68]	; (80041c0 <OSStart+0x6c>)
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	4619      	mov	r1, r3
 800417e:	4a12      	ldr	r2, [pc, #72]	; (80041c8 <OSStart+0x74>)
 8004180:	460b      	mov	r3, r1
 8004182:	005b      	lsls	r3, r3, #1
 8004184:	440b      	add	r3, r1
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4413      	add	r3, r2
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a0f      	ldr	r2, [pc, #60]	; (80041cc <OSStart+0x78>)
 800418e:	6013      	str	r3, [r2, #0]
        OSTCBCurPtr     = OSTCBHighRdyPtr;
 8004190:	4b0e      	ldr	r3, [pc, #56]	; (80041cc <OSStart+0x78>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a0e      	ldr	r2, [pc, #56]	; (80041d0 <OSStart+0x7c>)
 8004196:	6013      	str	r3, [r2, #0]
        OSRunning       = OS_STATE_OS_RUNNING;
 8004198:	4b08      	ldr	r3, [pc, #32]	; (80041bc <OSStart+0x68>)
 800419a:	2201      	movs	r2, #1
 800419c:	701a      	strb	r2, [r3, #0]
        OSStartHighRdy();                                   /* Execute target specific code to start task             */
 800419e:	f7fc f82f 	bl	8000200 <OSStartHighRdy>
       *p_err           = OS_ERR_FATAL_RETURN;              /* OSStart() is not supposed to return                    */
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f643 2299 	movw	r2, #15001	; 0x3a99
 80041a8:	801a      	strh	r2, [r3, #0]
    } else {
       *p_err           = OS_ERR_OS_RUNNING;                /* OS is already running                                  */
    }
}
 80041aa:	e003      	b.n	80041b4 <OSStart+0x60>
       *p_err           = OS_ERR_OS_RUNNING;                /* OS is already running                                  */
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f645 628a 	movw	r2, #24202	; 0x5e8a
 80041b2:	801a      	strh	r2, [r3, #0]
}
 80041b4:	bf00      	nop
 80041b6:	3708      	adds	r7, #8
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	20001f19 	.word	0x20001f19
 80041c0:	2000209c 	.word	0x2000209c
 80041c4:	200020a8 	.word	0x200020a8
 80041c8:	20001f1c 	.word	0x20001f1c
 80041cc:	20002180 	.word	0x20002180
 80041d0:	20002174 	.word	0x20002174

080041d4 <OS_IdleTask>:
*              3) This hook has been added to allow you to do such things as STOP the CPU to conserve power.
************************************************************************************************************************
*/

void  OS_IdleTask (void  *p_arg)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
    CPU_SR_ALLOC();
 80041dc:	2300      	movs	r3, #0
 80041de:	60fb      	str	r3, [r7, #12]


    (void)&p_arg;                                           /* Prevent compiler warning for not using 'p_arg'         */

    while (DEF_ON) {
        CPU_CRITICAL_ENTER();
 80041e0:	f7fc f87e 	bl	80002e0 <CPU_SR_Save>
 80041e4:	60f8      	str	r0, [r7, #12]
        OSIdleTaskCtr++;
 80041e6:	4b08      	ldr	r3, [pc, #32]	; (8004208 <OS_IdleTask+0x34>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	3301      	adds	r3, #1
 80041ec:	4a06      	ldr	r2, [pc, #24]	; (8004208 <OS_IdleTask+0x34>)
 80041ee:	6013      	str	r3, [r2, #0]
#if OS_CFG_STAT_TASK_EN > 0u
        OSStatTaskCtr++;
 80041f0:	4b06      	ldr	r3, [pc, #24]	; (800420c <OS_IdleTask+0x38>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	3301      	adds	r3, #1
 80041f6:	4a05      	ldr	r2, [pc, #20]	; (800420c <OS_IdleTask+0x38>)
 80041f8:	6013      	str	r3, [r2, #0]
#endif
        CPU_CRITICAL_EXIT();
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	f7fc f874 	bl	80002e8 <CPU_SR_Restore>

        OSIdleTaskHook();                                   /* Call user definable HOOK                               */
 8004200:	f001 fe78 	bl	8005ef4 <OSIdleTaskHook>
        CPU_CRITICAL_ENTER();
 8004204:	e7ec      	b.n	80041e0 <OS_IdleTask+0xc>
 8004206:	bf00      	nop
 8004208:	20002380 	.word	0x20002380
 800420c:	20001f14 	.word	0x20001f14

08004210 <OS_IdleTaskInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_IdleTaskInit (OS_ERR  *p_err)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b08c      	sub	sp, #48	; 0x30
 8004214:	af0a      	add	r7, sp, #40	; 0x28
 8004216:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    OSIdleTaskCtr = (OS_IDLE_CTR)0;
 8004218:	4b10      	ldr	r3, [pc, #64]	; (800425c <OS_IdleTaskInit+0x4c>)
 800421a:	2200      	movs	r2, #0
 800421c:	601a      	str	r2, [r3, #0]
                                                            /* ---------------- CREATE THE IDLE TASK ---------------- */
    OSTaskCreate((OS_TCB     *)&OSIdleTaskTCB,
 800421e:	4b10      	ldr	r3, [pc, #64]	; (8004260 <OS_IdleTaskInit+0x50>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a10      	ldr	r2, [pc, #64]	; (8004264 <OS_IdleTaskInit+0x54>)
 8004224:	6812      	ldr	r2, [r2, #0]
 8004226:	4910      	ldr	r1, [pc, #64]	; (8004268 <OS_IdleTaskInit+0x58>)
 8004228:	6809      	ldr	r1, [r1, #0]
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	9008      	str	r0, [sp, #32]
 800422e:	200b      	movs	r0, #11
 8004230:	9007      	str	r0, [sp, #28]
 8004232:	2000      	movs	r0, #0
 8004234:	9006      	str	r0, [sp, #24]
 8004236:	2000      	movs	r0, #0
 8004238:	9005      	str	r0, [sp, #20]
 800423a:	2000      	movs	r0, #0
 800423c:	9004      	str	r0, [sp, #16]
 800423e:	9103      	str	r1, [sp, #12]
 8004240:	9202      	str	r2, [sp, #8]
 8004242:	9301      	str	r3, [sp, #4]
 8004244:	231f      	movs	r3, #31
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	2300      	movs	r3, #0
 800424a:	4a08      	ldr	r2, [pc, #32]	; (800426c <OS_IdleTaskInit+0x5c>)
 800424c:	4908      	ldr	r1, [pc, #32]	; (8004270 <OS_IdleTaskInit+0x60>)
 800424e:	4809      	ldr	r0, [pc, #36]	; (8004274 <OS_IdleTaskInit+0x64>)
 8004250:	f000 fdb4 	bl	8004dbc <OSTaskCreate>
                 (OS_MSG_QTY  )0u,
                 (OS_TICK     )0u,
                 (void       *)0,
                 (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR | OS_OPT_TASK_NO_TLS),
                 (OS_ERR     *)p_err);
}
 8004254:	bf00      	nop
 8004256:	3708      	adds	r7, #8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	20002380 	.word	0x20002380
 8004260:	0800eaac 	.word	0x0800eaac
 8004264:	0800eab0 	.word	0x0800eab0
 8004268:	0800eab4 	.word	0x0800eab4
 800426c:	080041d5 	.word	0x080041d5
 8004270:	0800e8a8 	.word	0x0800e8a8
 8004274:	20002270 	.word	0x20002270

08004278 <OS_Pend>:

void  OS_Pend (OS_PEND_DATA  *p_pend_data,
               OS_PEND_OBJ   *p_obj,
               OS_STATE       pending_on,
               OS_TICK        timeout)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	603b      	str	r3, [r7, #0]
 8004284:	4613      	mov	r3, r2
 8004286:	71fb      	strb	r3, [r7, #7]
    OS_PEND_LIST  *p_pend_list;



    OSTCBCurPtr->PendOn     = pending_on;                    /* Resource not available, wait until it is              */
 8004288:	4b1b      	ldr	r3, [pc, #108]	; (80042f8 <OS_Pend+0x80>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	79fa      	ldrb	r2, [r7, #7]
 800428e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    OSTCBCurPtr->PendStatus = OS_STATUS_PEND_OK;
 8004292:	4b19      	ldr	r3, [pc, #100]	; (80042f8 <OS_Pend+0x80>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    OS_TaskBlock(OSTCBCurPtr,                                /* Block the task and add it to the tick list if needed  */
 800429c:	4b16      	ldr	r3, [pc, #88]	; (80042f8 <OS_Pend+0x80>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6839      	ldr	r1, [r7, #0]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 fc04 	bl	8004ab0 <OS_TaskBlock>
                 timeout);

    if (p_obj != (OS_PEND_OBJ *)0) {                         /* Add the current task to the pend list ...             */
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d011      	beq.n	80042d2 <OS_Pend+0x5a>
        p_pend_list             = &p_obj->PendList;          /* ... if there is an object to pend on                  */
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	3308      	adds	r3, #8
 80042b2:	617b      	str	r3, [r7, #20]
        p_pend_data->PendObjPtr = p_obj;                     /* Save the pointer to the object pending on             */
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	60da      	str	r2, [r3, #12]
        OS_PendDataInit((OS_TCB       *)OSTCBCurPtr,         /* Initialize the remaining field                        */
 80042ba:	4b0f      	ldr	r3, [pc, #60]	; (80042f8 <OS_Pend+0x80>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2201      	movs	r2, #1
 80042c0:	68f9      	ldr	r1, [r7, #12]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 f81a 	bl	80042fc <OS_PendDataInit>
                        (OS_PEND_DATA *)p_pend_data,
                        (OS_OBJ_QTY    )1);
        OS_PendListInsertPrio(p_pend_list,                   /* Insert in the pend list in priority order             */
 80042c8:	68f9      	ldr	r1, [r7, #12]
 80042ca:	6978      	ldr	r0, [r7, #20]
 80042cc:	f000 f8eb 	bl	80044a6 <OS_PendListInsertPrio>
 80042d0:	e008      	b.n	80042e4 <OS_Pend+0x6c>
                              p_pend_data);
    } else {
        OSTCBCurPtr->PendDataTblEntries = (OS_OBJ_QTY    )0; /* If no object being pended on the clear these fields   */
 80042d2:	4b09      	ldr	r3, [pc, #36]	; (80042f8 <OS_Pend+0x80>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        OSTCBCurPtr->PendDataTblPtr     = (OS_PEND_DATA *)0; /* ... in the TCB                                        */
 80042dc:	4b06      	ldr	r3, [pc, #24]	; (80042f8 <OS_Pend+0x80>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2200      	movs	r2, #0
 80042e2:	631a      	str	r2, [r3, #48]	; 0x30
    }
#if OS_CFG_DBG_EN > 0u
    OS_PendDbgNameAdd(p_obj,
 80042e4:	4b04      	ldr	r3, [pc, #16]	; (80042f8 <OS_Pend+0x80>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4619      	mov	r1, r3
 80042ea:	68b8      	ldr	r0, [r7, #8]
 80042ec:	f000 f83c 	bl	8004368 <OS_PendDbgNameAdd>
                      OSTCBCurPtr);
#endif
}
 80042f0:	bf00      	nop
 80042f2:	3718      	adds	r7, #24
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	20002174 	.word	0x20002174

080042fc <OS_PendDataInit>:
*/

void  OS_PendDataInit (OS_TCB        *p_tcb,
                       OS_PEND_DATA  *p_pend_data_tbl,
                       OS_OBJ_QTY     tbl_size)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b087      	sub	sp, #28
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	4613      	mov	r3, r2
 8004308:	80fb      	strh	r3, [r7, #6]
    OS_OBJ_QTY  i;



    p_tcb->PendDataTblEntries = tbl_size;                   /* Link the TCB to the beginning of the table             */
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	88fa      	ldrh	r2, [r7, #6]
 800430e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    p_tcb->PendDataTblPtr     = p_pend_data_tbl;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	631a      	str	r2, [r3, #48]	; 0x30

    for (i = 0u; i < tbl_size; i++) {
 8004318:	2300      	movs	r3, #0
 800431a:	82fb      	strh	r3, [r7, #22]
 800431c:	e01a      	b.n	8004354 <OS_PendDataInit+0x58>
        p_pend_data_tbl->NextPtr    = (OS_PEND_DATA *)0;    /* Initialize all the fields                              */
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	2200      	movs	r2, #0
 8004322:	605a      	str	r2, [r3, #4]
        p_pend_data_tbl->PrevPtr    = (OS_PEND_DATA *)0;
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	2200      	movs	r2, #0
 8004328:	601a      	str	r2, [r3, #0]
        p_pend_data_tbl->RdyObjPtr  = (OS_PEND_OBJ  *)0;
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	2200      	movs	r2, #0
 800432e:	611a      	str	r2, [r3, #16]
        p_pend_data_tbl->RdyMsgPtr  = (void         *)0;
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	2200      	movs	r2, #0
 8004334:	615a      	str	r2, [r3, #20]
        p_pend_data_tbl->RdyMsgSize = (OS_MSG_SIZE   )0;
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	2200      	movs	r2, #0
 800433a:	831a      	strh	r2, [r3, #24]
        p_pend_data_tbl->RdyTS      = (CPU_TS        )0;
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	2200      	movs	r2, #0
 8004340:	61da      	str	r2, [r3, #28]
        p_pend_data_tbl->TCBPtr     = p_tcb;                /* Every entry points back to the TCB of the task         */
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	609a      	str	r2, [r3, #8]
        p_pend_data_tbl++;
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	3320      	adds	r3, #32
 800434c:	60bb      	str	r3, [r7, #8]
    for (i = 0u; i < tbl_size; i++) {
 800434e:	8afb      	ldrh	r3, [r7, #22]
 8004350:	3301      	adds	r3, #1
 8004352:	82fb      	strh	r3, [r7, #22]
 8004354:	8afa      	ldrh	r2, [r7, #22]
 8004356:	88fb      	ldrh	r3, [r7, #6]
 8004358:	429a      	cmp	r2, r3
 800435a:	d3e0      	bcc.n	800431e <OS_PendDataInit+0x22>
    }
}
 800435c:	bf00      	nop
 800435e:	371c      	adds	r7, #28
 8004360:	46bd      	mov	sp, r7
 8004362:	bc80      	pop	{r7}
 8004364:	4770      	bx	lr
	...

08004368 <OS_PendDbgNameAdd>:


#if OS_CFG_DBG_EN > 0u
void  OS_PendDbgNameAdd (OS_PEND_OBJ  *p_obj,
                         OS_TCB       *p_tcb)
{
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
    OS_PEND_LIST  *p_pend_list;
    OS_PEND_DATA  *p_pend_data;
    OS_TCB        *p_tcb1;


    if (p_obj != (OS_PEND_OBJ *)0) {
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d012      	beq.n	800439e <OS_PendDbgNameAdd+0x36>
        p_tcb->DbgNamePtr =  p_obj->NamePtr;                /* Task pending on this object ... save name in TCB       */
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
        p_pend_list       = &p_obj->PendList;               /* Find name of HP task pending on this object ...        */
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	3308      	adds	r3, #8
 8004386:	617b      	str	r3, [r7, #20]
        p_pend_data       =  p_pend_list->HeadPtr;
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	613b      	str	r3, [r7, #16]
        p_tcb1            =  p_pend_data->TCBPtr;
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	60fb      	str	r3, [r7, #12]
        p_obj->DbgNamePtr = p_tcb1->NamePtr;                /* ... Save in object                                     */
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6a1a      	ldr	r2, [r3, #32]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	61da      	str	r2, [r3, #28]
            default:
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)" ");
                 break;
        }
    }
}
 800439c:	e016      	b.n	80043cc <OS_PendDbgNameAdd+0x64>
        switch (p_tcb->PendOn) {
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d002      	beq.n	80043ae <OS_PendDbgNameAdd+0x46>
 80043a8:	2b07      	cmp	r3, #7
 80043aa:	d005      	beq.n	80043b8 <OS_PendDbgNameAdd+0x50>
 80043ac:	e009      	b.n	80043c2 <OS_PendDbgNameAdd+0x5a>
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)"Task Q");
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	4a09      	ldr	r2, [pc, #36]	; (80043d8 <OS_PendDbgNameAdd+0x70>)
 80043b2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
                 break;
 80043b6:	e009      	b.n	80043cc <OS_PendDbgNameAdd+0x64>
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)"Task Sem");
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	4a08      	ldr	r2, [pc, #32]	; (80043dc <OS_PendDbgNameAdd+0x74>)
 80043bc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
                 break;
 80043c0:	e004      	b.n	80043cc <OS_PendDbgNameAdd+0x64>
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)" ");
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	4a06      	ldr	r2, [pc, #24]	; (80043e0 <OS_PendDbgNameAdd+0x78>)
 80043c6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
                 break;
 80043ca:	bf00      	nop
}
 80043cc:	bf00      	nop
 80043ce:	371c      	adds	r7, #28
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bc80      	pop	{r7}
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	0800e8bc 	.word	0x0800e8bc
 80043dc:	0800e8c4 	.word	0x0800e8c4
 80043e0:	0800e8d0 	.word	0x0800e8d0

080043e4 <OS_PendDbgNameRemove>:



void  OS_PendDbgNameRemove (OS_PEND_OBJ  *p_obj,
                            OS_TCB       *p_tcb)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b087      	sub	sp, #28
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
    OS_PEND_LIST  *p_pend_list;
    OS_PEND_DATA  *p_pend_data;
    OS_TCB        *p_tcb1;


    p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)" ");          /* Remove name of object pended on for readied task       */
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	4a0d      	ldr	r2, [pc, #52]	; (8004428 <OS_PendDbgNameRemove+0x44>)
 80043f2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    p_pend_list       = &p_obj->PendList;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	3308      	adds	r3, #8
 80043fa:	617b      	str	r3, [r7, #20]
    p_pend_data       =  p_pend_list->HeadPtr;
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	613b      	str	r3, [r7, #16]
    if (p_pend_data  != (OS_PEND_DATA *)0) {
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d007      	beq.n	8004418 <OS_PendDbgNameRemove+0x34>
        p_tcb1            = p_pend_data->TCBPtr;
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	60fb      	str	r3, [r7, #12]
        p_obj->DbgNamePtr = p_tcb1->NamePtr;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6a1a      	ldr	r2, [r3, #32]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	61da      	str	r2, [r3, #28]
    } else {
        p_obj->DbgNamePtr = (CPU_CHAR *)((void *)" ");      /* No other task pending on object                        */
    }
}
 8004416:	e002      	b.n	800441e <OS_PendDbgNameRemove+0x3a>
        p_obj->DbgNamePtr = (CPU_CHAR *)((void *)" ");      /* No other task pending on object                        */
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a03      	ldr	r2, [pc, #12]	; (8004428 <OS_PendDbgNameRemove+0x44>)
 800441c:	61da      	str	r2, [r3, #28]
}
 800441e:	bf00      	nop
 8004420:	371c      	adds	r7, #28
 8004422:	46bd      	mov	sp, r7
 8004424:	bc80      	pop	{r7}
 8004426:	4770      	bx	lr
 8004428:	0800e8d0 	.word	0x0800e8d0

0800442c <OS_PendListChangePrio>:
*              2) It's assumed that the TCB contains the NEW priority in its .Prio field.
************************************************************************************************************************
*/

void  OS_PendListChangePrio (OS_TCB   *p_tcb)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
    OS_PEND_DATA   *p_pend_data;
    OS_PEND_LIST   *p_pend_list;
    OS_PEND_OBJ    *p_obj;


    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to first wait list entry                 */
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004438:	613b      	str	r3, [r7, #16]
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get the number of pend list task is in         */
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004440:	82fb      	strh	r3, [r7, #22]

    while (n_pend_list > 0u) {
 8004442:	e017      	b.n	8004474 <OS_PendListChangePrio+0x48>
        p_obj       =  p_pend_data->PendObjPtr;                     /* Get pointer to pend list                       */
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	60fb      	str	r3, [r7, #12]
        p_pend_list = &p_obj->PendList;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	3308      	adds	r3, #8
 800444e:	60bb      	str	r3, [r7, #8]
        if (p_pend_list->NbrEntries > 1u) {                         /* Only move if multiple entries in the list      */
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	891b      	ldrh	r3, [r3, #8]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d907      	bls.n	8004468 <OS_PendListChangePrio+0x3c>
            OS_PendListRemove1(p_pend_list,                         /* Remove entry from current position             */
 8004458:	6939      	ldr	r1, [r7, #16]
 800445a:	68b8      	ldr	r0, [r7, #8]
 800445c:	f000 f8c0 	bl	80045e0 <OS_PendListRemove1>
                               p_pend_data);
            OS_PendListInsertPrio(p_pend_list,                      /* INSERT it back in the list                     */
 8004460:	6939      	ldr	r1, [r7, #16]
 8004462:	68b8      	ldr	r0, [r7, #8]
 8004464:	f000 f81f 	bl	80044a6 <OS_PendListInsertPrio>
                                  p_pend_data);
        }
        p_pend_data++;                                              /* Point to next wait list                        */
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	3320      	adds	r3, #32
 800446c:	613b      	str	r3, [r7, #16]
        n_pend_list--;
 800446e:	8afb      	ldrh	r3, [r7, #22]
 8004470:	3b01      	subs	r3, #1
 8004472:	82fb      	strh	r3, [r7, #22]
    while (n_pend_list > 0u) {
 8004474:	8afb      	ldrh	r3, [r7, #22]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1e4      	bne.n	8004444 <OS_PendListChangePrio+0x18>
    }
}
 800447a:	bf00      	nop
 800447c:	3718      	adds	r7, #24
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <OS_PendListInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application must not call it.
************************************************************************************************************************
*/

void  OS_PendListInit (OS_PEND_LIST  *p_pend_list)
{
 8004482:	b480      	push	{r7}
 8004484:	b083      	sub	sp, #12
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
    p_pend_list->HeadPtr    = (OS_PEND_DATA *)0;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	601a      	str	r2, [r3, #0]
    p_pend_list->TailPtr    = (OS_PEND_DATA *)0;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	605a      	str	r2, [r3, #4]
    p_pend_list->NbrEntries = (OS_OBJ_QTY    )0;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	811a      	strh	r2, [r3, #8]
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bc80      	pop	{r7}
 80044a4:	4770      	bx	lr

080044a6 <OS_PendListInsertPrio>:
************************************************************************************************************************
*/

void  OS_PendListInsertPrio (OS_PEND_LIST  *p_pend_list,
                             OS_PEND_DATA  *p_pend_data)
{
 80044a6:	b480      	push	{r7}
 80044a8:	b089      	sub	sp, #36	; 0x24
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
 80044ae:	6039      	str	r1, [r7, #0]
    OS_PEND_DATA  *p_pend_data_prev;
    OS_PEND_DATA  *p_pend_data_next;



    p_tcb = p_pend_data->TCBPtr;                                      /* Obtain the priority of the task to insert    */
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	61bb      	str	r3, [r7, #24]
    prio  = p_tcb->Prio;
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80044bc:	75fb      	strb	r3, [r7, #23]
    if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0) {                   /* CASE 0: Insert when there are no entries     */
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	891b      	ldrh	r3, [r3, #8]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10f      	bne.n	80044e6 <OS_PendListInsertPrio+0x40>
        p_pend_list->NbrEntries = (OS_OBJ_QTY)1;                      /*         This is the first entry              */
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	811a      	strh	r2, [r3, #8]
        p_pend_data->NextPtr    = (OS_PEND_DATA *)0;                  /*         No other OS_PEND_DATAs in the list   */
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	2200      	movs	r2, #0
 80044d0:	605a      	str	r2, [r3, #4]
        p_pend_data->PrevPtr    = (OS_PEND_DATA *)0;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	2200      	movs	r2, #0
 80044d6:	601a      	str	r2, [r3, #0]
        p_pend_list->HeadPtr    = p_pend_data;                        /*                                              */
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	683a      	ldr	r2, [r7, #0]
 80044dc:	601a      	str	r2, [r3, #0]
        p_pend_list->TailPtr    = p_pend_data;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	605a      	str	r2, [r3, #4]
                p_pend_data_prev->NextPtr  = p_pend_data;
                p_pend_data_next->PrevPtr  = p_pend_data;
            }
        }
    }
}
 80044e4:	e04d      	b.n	8004582 <OS_PendListInsertPrio+0xdc>
        p_pend_list->NbrEntries++;                                    /* CASE 1: One more OS_PEND_DATA in the list    */
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	891b      	ldrh	r3, [r3, #8]
 80044ea:	3301      	adds	r3, #1
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	811a      	strh	r2, [r3, #8]
        p_pend_data_next = p_pend_list->HeadPtr;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	61fb      	str	r3, [r7, #28]
        while (p_pend_data_next != (OS_PEND_DATA *)0) {               /*         Find the position where to insert    */
 80044f8:	e00b      	b.n	8004512 <OS_PendListInsertPrio+0x6c>
            p_tcb_next   = p_pend_data_next->TCBPtr;
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	613b      	str	r3, [r7, #16]
            if (prio < p_tcb_next->Prio) {
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8004506:	7dfa      	ldrb	r2, [r7, #23]
 8004508:	429a      	cmp	r2, r3
 800450a:	d306      	bcc.n	800451a <OS_PendListInsertPrio+0x74>
                p_pend_data_next = p_pend_data_next->NextPtr;         /*         Not Found, follow the list           */
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	61fb      	str	r3, [r7, #28]
        while (p_pend_data_next != (OS_PEND_DATA *)0) {               /*         Find the position where to insert    */
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1f0      	bne.n	80044fa <OS_PendListInsertPrio+0x54>
 8004518:	e000      	b.n	800451c <OS_PendListInsertPrio+0x76>
                break;                                                /*         Found! ... insert BEFORE current     */
 800451a:	bf00      	nop
        if (p_pend_data_next == (OS_PEND_DATA *)0) {                  /*         TCB to insert is lower in prio       */
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10f      	bne.n	8004542 <OS_PendListInsertPrio+0x9c>
            p_pend_data->NextPtr      = (OS_PEND_DATA *)0;            /*         ... insert at the tail.              */
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	2200      	movs	r2, #0
 8004526:	605a      	str	r2, [r3, #4]
            p_pend_data_prev          = p_pend_list->TailPtr;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	60fb      	str	r3, [r7, #12]
            p_pend_data->PrevPtr      = p_pend_data_prev;
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	601a      	str	r2, [r3, #0]
            p_pend_data_prev->NextPtr = p_pend_data;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	605a      	str	r2, [r3, #4]
            p_pend_list->TailPtr      = p_pend_data;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	683a      	ldr	r2, [r7, #0]
 800453e:	605a      	str	r2, [r3, #4]
}
 8004540:	e01f      	b.n	8004582 <OS_PendListInsertPrio+0xdc>
            if (p_pend_data_next->PrevPtr == (OS_PEND_DATA *)0) {     /*         Is new TCB highest priority?         */
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10c      	bne.n	8004564 <OS_PendListInsertPrio+0xbe>
                p_pend_data_next->PrevPtr  = p_pend_data;             /*         Yes, insert as new Head of list      */
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	601a      	str	r2, [r3, #0]
                p_pend_data->PrevPtr       = (OS_PEND_DATA *)0;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	2200      	movs	r2, #0
 8004554:	601a      	str	r2, [r3, #0]
                p_pend_data->NextPtr       = p_pend_data_next;
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	69fa      	ldr	r2, [r7, #28]
 800455a:	605a      	str	r2, [r3, #4]
                p_pend_list->HeadPtr       = p_pend_data;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	683a      	ldr	r2, [r7, #0]
 8004560:	601a      	str	r2, [r3, #0]
}
 8004562:	e00e      	b.n	8004582 <OS_PendListInsertPrio+0xdc>
                p_pend_data_prev           = p_pend_data_next->PrevPtr;/*        No,  insert in between two entries   */
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	60fb      	str	r3, [r7, #12]
                p_pend_data->PrevPtr       = p_pend_data_prev;
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	601a      	str	r2, [r3, #0]
                p_pend_data->NextPtr       = p_pend_data_next;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	69fa      	ldr	r2, [r7, #28]
 8004574:	605a      	str	r2, [r3, #4]
                p_pend_data_prev->NextPtr  = p_pend_data;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	683a      	ldr	r2, [r7, #0]
 800457a:	605a      	str	r2, [r3, #4]
                p_pend_data_next->PrevPtr  = p_pend_data;
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	601a      	str	r2, [r3, #0]
}
 8004582:	bf00      	nop
 8004584:	3724      	adds	r7, #36	; 0x24
 8004586:	46bd      	mov	sp, r7
 8004588:	bc80      	pop	{r7}
 800458a:	4770      	bx	lr

0800458c <OS_PendListRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_PendListRemove (OS_TCB  *p_tcb)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
    OS_PEND_LIST   *p_pend_list;
    OS_PEND_OBJ    *p_obj;



    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to the first OS_PEND_DATA to remove      */
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004598:	613b      	str	r3, [r7, #16]
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get number of entries in the table             */
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045a0:	82fb      	strh	r3, [r7, #22]

    while (n_pend_list > (OS_OBJ_QTY)0) {
 80045a2:	e00f      	b.n	80045c4 <OS_PendListRemove+0x38>
        p_obj       =  p_pend_data->PendObjPtr;                     /* Get pointer to pend list                       */
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	60fb      	str	r3, [r7, #12]
        p_pend_list = &p_obj->PendList;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	3308      	adds	r3, #8
 80045ae:	60bb      	str	r3, [r7, #8]
        OS_PendListRemove1(p_pend_list,
 80045b0:	6939      	ldr	r1, [r7, #16]
 80045b2:	68b8      	ldr	r0, [r7, #8]
 80045b4:	f000 f814 	bl	80045e0 <OS_PendListRemove1>
                           p_pend_data);
        p_pend_data++;
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	3320      	adds	r3, #32
 80045bc:	613b      	str	r3, [r7, #16]
        n_pend_list--;
 80045be:	8afb      	ldrh	r3, [r7, #22]
 80045c0:	3b01      	subs	r3, #1
 80045c2:	82fb      	strh	r3, [r7, #22]
    while (n_pend_list > (OS_OBJ_QTY)0) {
 80045c4:	8afb      	ldrh	r3, [r7, #22]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1ec      	bne.n	80045a4 <OS_PendListRemove+0x18>
    }
    p_tcb->PendDataTblEntries = (OS_OBJ_QTY    )0;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    p_tcb->PendDataTblPtr     = (OS_PEND_DATA *)0;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80045d8:	bf00      	nop
 80045da:	3718      	adds	r7, #24
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <OS_PendListRemove1>:
************************************************************************************************************************
*/

void  OS_PendListRemove1 (OS_PEND_LIST  *p_pend_list,
                          OS_PEND_DATA  *p_pend_data)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
    OS_PEND_DATA  *p_prev;
    OS_PEND_DATA  *p_next;



    if (p_pend_list->NbrEntries == 1u) {
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	891b      	ldrh	r3, [r3, #8]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d106      	bne.n	8004600 <OS_PendListRemove1+0x20>
        p_pend_list->HeadPtr = (OS_PEND_DATA *)0;           /* Only one entry in the pend list                        */
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	601a      	str	r2, [r3, #0]
        p_pend_list->TailPtr = (OS_PEND_DATA *)0;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	605a      	str	r2, [r3, #4]
 80045fe:	e027      	b.n	8004650 <OS_PendListRemove1+0x70>

    } else if (p_pend_data->PrevPtr == (OS_PEND_DATA *)0) { /* See if entry is at the head of the list                */
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d109      	bne.n	800461c <OS_PendListRemove1+0x3c>
        p_next               = p_pend_data->NextPtr;        /* Yes                                                    */
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	60bb      	str	r3, [r7, #8]
        p_next->PrevPtr      = (OS_PEND_DATA *)0;
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]
        p_pend_list->HeadPtr = p_next;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	68ba      	ldr	r2, [r7, #8]
 8004618:	601a      	str	r2, [r3, #0]
 800461a:	e019      	b.n	8004650 <OS_PendListRemove1+0x70>

    } else if (p_pend_data->NextPtr == (OS_PEND_DATA *)0) { /* See if entry is at the tail of the list                */
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d109      	bne.n	8004638 <OS_PendListRemove1+0x58>
        p_prev               = p_pend_data->PrevPtr;        /* Yes                                                    */
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	60fb      	str	r3, [r7, #12]
        p_prev->NextPtr      = (OS_PEND_DATA *)0;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	605a      	str	r2, [r3, #4]
        p_pend_list->TailPtr = p_prev;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	605a      	str	r2, [r3, #4]
 8004636:	e00b      	b.n	8004650 <OS_PendListRemove1+0x70>

    } else {
        p_prev               = p_pend_data->PrevPtr;        /* Remove from inside the list                            */
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	60fb      	str	r3, [r7, #12]
        p_next               = p_pend_data->NextPtr;
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	60bb      	str	r3, [r7, #8]
        p_prev->NextPtr      = p_next;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	68ba      	ldr	r2, [r7, #8]
 8004648:	605a      	str	r2, [r3, #4]
        p_next->PrevPtr      = p_prev;
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	601a      	str	r2, [r3, #0]
    }
    p_pend_list->NbrEntries--;                              /* One less entry in the list                             */
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	891b      	ldrh	r3, [r3, #8]
 8004654:	3b01      	subs	r3, #1
 8004656:	b29a      	uxth	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	811a      	strh	r2, [r3, #8]
    p_pend_data->NextPtr = (OS_PEND_DATA *)0;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	2200      	movs	r2, #0
 8004660:	605a      	str	r2, [r3, #4]
    p_pend_data->PrevPtr = (OS_PEND_DATA *)0;
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	2200      	movs	r2, #0
 8004666:	601a      	str	r2, [r3, #0]
}
 8004668:	bf00      	nop
 800466a:	3714      	adds	r7, #20
 800466c:	46bd      	mov	sp, r7
 800466e:	bc80      	pop	{r7}
 8004670:	4770      	bx	lr
	...

08004674 <OS_Post>:
void  OS_Post (OS_PEND_OBJ  *p_obj,
               OS_TCB       *p_tcb,
               void         *p_void,
               OS_MSG_SIZE   msg_size,
               CPU_TS        ts)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af02      	add	r7, sp, #8
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
 8004680:	807b      	strh	r3, [r7, #2]
    switch (p_tcb->TaskState) {
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004688:	2b07      	cmp	r3, #7
 800468a:	f200 8086 	bhi.w	800479a <OS_Post+0x126>
 800468e:	a201      	add	r2, pc, #4	; (adr r2, 8004694 <OS_Post+0x20>)
 8004690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004694:	0800479b 	.word	0x0800479b
 8004698:	0800479b 	.word	0x0800479b
 800469c:	080046b5 	.word	0x080046b5
 80046a0:	080046b5 	.word	0x080046b5
 80046a4:	0800479b 	.word	0x0800479b
 80046a8:	0800479b 	.word	0x0800479b
 80046ac:	0800472b 	.word	0x0800472b
 80046b0:	0800472b 	.word	0x0800472b
        case OS_TASK_STATE_DLY_SUSPENDED:                        /* Cannot Post a suspended task that was also dly'd  */
             break;

        case OS_TASK_STATE_PEND:
        case OS_TASK_STATE_PEND_TIMEOUT:
             if (p_tcb->PendOn == OS_TASK_PEND_ON_MULTI) {
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80046ba:	2b03      	cmp	r3, #3
 80046bc:	d109      	bne.n	80046d2 <OS_Post+0x5e>
                 OS_Post1(p_obj,                                 /* Indicate which object was posted to               */
 80046be:	887a      	ldrh	r2, [r7, #2]
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	4613      	mov	r3, r2
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	68b9      	ldr	r1, [r7, #8]
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f000 f86a 	bl	80047a4 <OS_Post1>
 80046d0:	e009      	b.n	80046e6 <OS_Post+0x72>
                          p_void,
                          msg_size,
                          ts);
             } else {
#if (OS_MSG_EN > 0u)
                 p_tcb->MsgPtr  = p_void;                        /* Deposit message in OS_TCB of task waiting         */
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	659a      	str	r2, [r3, #88]	; 0x58
                 p_tcb->MsgSize = msg_size;                      /* ... assuming posting a message                    */
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	887a      	ldrh	r2, [r7, #2]
 80046dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
#endif
                 p_tcb->TS      = ts;
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	69ba      	ldr	r2, [r7, #24]
 80046e4:	649a      	str	r2, [r3, #72]	; 0x48
             }
             if (p_obj != (OS_PEND_OBJ *)0) {
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d006      	beq.n	80046fa <OS_Post+0x86>
                 OS_PendListRemove(p_tcb);                       /* Remove task from wait list(s)                     */
 80046ec:	68b8      	ldr	r0, [r7, #8]
 80046ee:	f7ff ff4d 	bl	800458c <OS_PendListRemove>
#if OS_CFG_DBG_EN > 0u
                 OS_PendDbgNameRemove(p_obj,
 80046f2:	68b9      	ldr	r1, [r7, #8]
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f7ff fe75 	bl	80043e4 <OS_PendDbgNameRemove>
                                      p_tcb);
#endif
             }
             if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT) {
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004700:	2b03      	cmp	r3, #3
 8004702:	d102      	bne.n	800470a <OS_Post+0x96>
                 OS_TickListRemove(p_tcb);                       /* Remove from tick list                             */
 8004704:	68b8      	ldr	r0, [r7, #8]
 8004706:	f7fe fc1b 	bl	8002f40 <OS_TickListRemove>
             }
             OS_RdyListInsert(p_tcb);                            /* Insert the task in the ready list                 */
 800470a:	68b8      	ldr	r0, [r7, #8]
 800470c:	f000 f89e 	bl	800484c <OS_RdyListInsert>
             p_tcb->TaskState  = OS_TASK_STATE_RDY;
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             p_tcb->PendStatus = OS_STATUS_PEND_OK;              /* Clear pend status                                 */
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
             p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;        /* Indicate no longer pending                        */
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
             break;
 8004728:	e038      	b.n	800479c <OS_Post+0x128>

        case OS_TASK_STATE_PEND_SUSPENDED:
        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
             if (p_tcb->PendOn == OS_TASK_PEND_ON_MULTI) {
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004730:	2b03      	cmp	r3, #3
 8004732:	d109      	bne.n	8004748 <OS_Post+0xd4>
                 OS_Post1(p_obj,                                 /* Indicate which object was posted to               */
 8004734:	887a      	ldrh	r2, [r7, #2]
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	4613      	mov	r3, r2
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	68b9      	ldr	r1, [r7, #8]
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f000 f82f 	bl	80047a4 <OS_Post1>
 8004746:	e009      	b.n	800475c <OS_Post+0xe8>
                          p_void,
                          msg_size,
                          ts);
             } else {
#if (OS_MSG_EN > 0u)
                 p_tcb->MsgPtr  = p_void;                        /* Deposit message in OS_TCB of task waiting         */
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	659a      	str	r2, [r3, #88]	; 0x58
                 p_tcb->MsgSize = msg_size;                      /* ... assuming posting a message                    */
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	887a      	ldrh	r2, [r7, #2]
 8004752:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
#endif
                 p_tcb->TS      = ts;
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	649a      	str	r2, [r3, #72]	; 0x48
             }
             if (p_obj != (OS_PEND_OBJ *)0) {
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d006      	beq.n	8004770 <OS_Post+0xfc>
                 OS_PendListRemove(p_tcb);                       /* Remove task from wait list(s)                     */
 8004762:	68b8      	ldr	r0, [r7, #8]
 8004764:	f7ff ff12 	bl	800458c <OS_PendListRemove>
#if OS_CFG_DBG_EN > 0u
                 OS_PendDbgNameRemove(p_obj,
 8004768:	68b9      	ldr	r1, [r7, #8]
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f7ff fe3a 	bl	80043e4 <OS_PendDbgNameRemove>
                                      p_tcb);
#endif
             }
             if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED) {
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004776:	2b07      	cmp	r3, #7
 8004778:	d102      	bne.n	8004780 <OS_Post+0x10c>
                 OS_TickListRemove(p_tcb);                       /* Cancel any timeout                                */
 800477a:	68b8      	ldr	r0, [r7, #8]
 800477c:	f7fe fbe0 	bl	8002f40 <OS_TickListRemove>
             }
             p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	2204      	movs	r2, #4
 8004784:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             p_tcb->PendStatus = OS_STATUS_PEND_OK;              /* Clear pend status                                 */
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
             p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;        /* Indicate no longer pending                        */
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
             break;
 8004798:	e000      	b.n	800479c <OS_Post+0x128>

        default:
             break;
 800479a:	bf00      	nop
    }
}
 800479c:	bf00      	nop
 800479e:	3710      	adds	r7, #16
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <OS_Post1>:
void  OS_Post1 (OS_PEND_OBJ  *p_obj,
                OS_TCB       *p_tcb,
                void         *p_void,
                OS_MSG_SIZE   msg_size,
                CPU_TS        ts)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b087      	sub	sp, #28
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
 80047b0:	807b      	strh	r3, [r7, #2]
    OS_OBJ_QTY      n_pend_list;                                    /* Number of pend lists                           */
    OS_PEND_DATA   *p_pend_data;



    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to the first OS_PEND_DATA to remove      */
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b6:	613b      	str	r3, [r7, #16]
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get number of entries in the table             */
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047be:	82fb      	strh	r3, [r7, #22]

    while (n_pend_list > (OS_OBJ_QTY)0) {                           /* Mark posted object in OS_PEND_DATA table       */
 80047c0:	e017      	b.n	80047f2 <OS_Post1+0x4e>
        if (p_obj == p_pend_data->PendObjPtr) {                     /* Did we find the object posted to?              */
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d10c      	bne.n	80047e6 <OS_Post1+0x42>
            p_pend_data->RdyObjPtr  = p_obj;                        /* Yes, indicate the object in the .RdyObjPtr     */
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	611a      	str	r2, [r3, #16]
            p_pend_data->RdyMsgPtr  = p_void;                       /*      store the message posted                  */
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	615a      	str	r2, [r3, #20]
            p_pend_data->RdyMsgSize = msg_size;                     /*      store the size of the message posted      */
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	887a      	ldrh	r2, [r7, #2]
 80047dc:	831a      	strh	r2, [r3, #24]
            p_pend_data->RdyTS      = ts;                           /*      save the timestamp of the post            */
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	6a3a      	ldr	r2, [r7, #32]
 80047e2:	61da      	str	r2, [r3, #28]
            break;
 80047e4:	e008      	b.n	80047f8 <OS_Post1+0x54>
        }
        p_pend_data++;
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	3320      	adds	r3, #32
 80047ea:	613b      	str	r3, [r7, #16]
        n_pend_list--;
 80047ec:	8afb      	ldrh	r3, [r7, #22]
 80047ee:	3b01      	subs	r3, #1
 80047f0:	82fb      	strh	r3, [r7, #22]
    while (n_pend_list > (OS_OBJ_QTY)0) {                           /* Mark posted object in OS_PEND_DATA table       */
 80047f2:	8afb      	ldrh	r3, [r7, #22]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1e4      	bne.n	80047c2 <OS_Post1+0x1e>
    }
}
 80047f8:	bf00      	nop
 80047fa:	371c      	adds	r7, #28
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bc80      	pop	{r7}
 8004800:	4770      	bx	lr
	...

08004804 <OS_RdyListInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_RdyListInit (void)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
    OS_PRIO       i;
    OS_RDY_LIST  *p_rdy_list;



    for (i = 0u; i < OS_CFG_PRIO_MAX; i++) {                /* Initialize the array of OS_RDY_LIST at each priority   */
 800480a:	2300      	movs	r3, #0
 800480c:	71fb      	strb	r3, [r7, #7]
 800480e:	e013      	b.n	8004838 <OS_RdyListInit+0x34>
        p_rdy_list = &OSRdyList[i];
 8004810:	79fa      	ldrb	r2, [r7, #7]
 8004812:	4613      	mov	r3, r2
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	4413      	add	r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4a0b      	ldr	r2, [pc, #44]	; (8004848 <OS_RdyListInit+0x44>)
 800481c:	4413      	add	r3, r2
 800481e:	603b      	str	r3, [r7, #0]
        p_rdy_list->NbrEntries = (OS_OBJ_QTY)0;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	2200      	movs	r2, #0
 8004824:	811a      	strh	r2, [r3, #8]
        p_rdy_list->HeadPtr    = (OS_TCB   *)0;
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2200      	movs	r2, #0
 800482a:	601a      	str	r2, [r3, #0]
        p_rdy_list->TailPtr    = (OS_TCB   *)0;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	2200      	movs	r2, #0
 8004830:	605a      	str	r2, [r3, #4]
    for (i = 0u; i < OS_CFG_PRIO_MAX; i++) {                /* Initialize the array of OS_RDY_LIST at each priority   */
 8004832:	79fb      	ldrb	r3, [r7, #7]
 8004834:	3301      	adds	r3, #1
 8004836:	71fb      	strb	r3, [r7, #7]
 8004838:	79fb      	ldrb	r3, [r7, #7]
 800483a:	2b1f      	cmp	r3, #31
 800483c:	d9e8      	bls.n	8004810 <OS_RdyListInit+0xc>
    }
}
 800483e:	bf00      	nop
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	bc80      	pop	{r7}
 8004846:	4770      	bx	lr
 8004848:	20001f1c 	.word	0x20001f1c

0800484c <OS_RdyListInsert>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_RdyListInsert (OS_TCB  *p_tcb)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
    OS_PrioInsert(p_tcb->Prio);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800485a:	4618      	mov	r0, r3
 800485c:	f7fe feb8 	bl	80035d0 <OS_PrioInsert>
    if (p_tcb->Prio == OSPrioCur) {                         /* Are we readying a task at the same prio?               */
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8004866:	4b07      	ldr	r3, [pc, #28]	; (8004884 <OS_RdyListInsert+0x38>)
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	429a      	cmp	r2, r3
 800486c:	d103      	bne.n	8004876 <OS_RdyListInsert+0x2a>
        OS_RdyListInsertTail(p_tcb);                        /* Yes, insert readied task at the end of the list        */
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f84a 	bl	8004908 <OS_RdyListInsertTail>
    }

#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_READY(p_tcb);                         /* Record the event.                                      */
#endif
}
 8004874:	e002      	b.n	800487c <OS_RdyListInsert+0x30>
        OS_RdyListInsertHead(p_tcb);                        /* No,  insert readied task at the beginning of the list  */
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f806 	bl	8004888 <OS_RdyListInsertHead>
}
 800487c:	bf00      	nop
 800487e:	3708      	adds	r7, #8
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	200020a8 	.word	0x200020a8

08004888 <OS_RdyListInsertHead>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListInsertHead (OS_TCB  *p_tcb)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
    OS_RDY_LIST  *p_rdy_list;
    OS_TCB       *p_tcb2;



    p_rdy_list = &OSRdyList[p_tcb->Prio];
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8004896:	461a      	mov	r2, r3
 8004898:	4613      	mov	r3, r2
 800489a:	005b      	lsls	r3, r3, #1
 800489c:	4413      	add	r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	4a18      	ldr	r2, [pc, #96]	; (8004904 <OS_RdyListInsertHead+0x7c>)
 80048a2:	4413      	add	r3, r2
 80048a4:	60fb      	str	r3, [r7, #12]
    if (p_rdy_list->NbrEntries == (OS_OBJ_QTY)0) {          /* CASE 0: Insert when there are no entries               */
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	891b      	ldrh	r3, [r3, #8]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d10f      	bne.n	80048ce <OS_RdyListInsertHead+0x46>
        p_rdy_list->NbrEntries =  (OS_OBJ_QTY)1;            /*         This is the first entry                        */
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2201      	movs	r2, #1
 80048b2:	811a      	strh	r2, [r3, #8]
        p_tcb->NextPtr         =  (OS_TCB   *)0;            /*         No other OS_TCBs in the list                   */
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	60da      	str	r2, [r3, #12]
        p_tcb->PrevPtr         =  (OS_TCB   *)0;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	611a      	str	r2, [r3, #16]
        p_rdy_list->HeadPtr    =  p_tcb;                    /*         Both list pointers point to this OS_TCB        */
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	601a      	str	r2, [r3, #0]
        p_rdy_list->TailPtr    =  p_tcb;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	605a      	str	r2, [r3, #4]
        p_tcb->PrevPtr         = (OS_TCB    *)0;
        p_tcb2                 = p_rdy_list->HeadPtr;       /*         Adjust old head of list's links                */
        p_tcb2->PrevPtr        = p_tcb;
        p_rdy_list->HeadPtr    = p_tcb;
    }
}
 80048cc:	e015      	b.n	80048fa <OS_RdyListInsertHead+0x72>
        p_rdy_list->NbrEntries++;                           /*         One more OS_TCB in the list                    */
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	891b      	ldrh	r3, [r3, #8]
 80048d2:	3301      	adds	r3, #1
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	811a      	strh	r2, [r3, #8]
        p_tcb->NextPtr         = p_rdy_list->HeadPtr;       /*         Adjust new OS_TCBs links                       */
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	60da      	str	r2, [r3, #12]
        p_tcb->PrevPtr         = (OS_TCB    *)0;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	611a      	str	r2, [r3, #16]
        p_tcb2                 = p_rdy_list->HeadPtr;       /*         Adjust old head of list's links                */
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	60bb      	str	r3, [r7, #8]
        p_tcb2->PrevPtr        = p_tcb;
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	611a      	str	r2, [r3, #16]
        p_rdy_list->HeadPtr    = p_tcb;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	601a      	str	r2, [r3, #0]
}
 80048fa:	bf00      	nop
 80048fc:	3714      	adds	r7, #20
 80048fe:	46bd      	mov	sp, r7
 8004900:	bc80      	pop	{r7}
 8004902:	4770      	bx	lr
 8004904:	20001f1c 	.word	0x20001f1c

08004908 <OS_RdyListInsertTail>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListInsertTail (OS_TCB  *p_tcb)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
    OS_RDY_LIST  *p_rdy_list;
    OS_TCB       *p_tcb2;



    p_rdy_list = &OSRdyList[p_tcb->Prio];
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8004916:	461a      	mov	r2, r3
 8004918:	4613      	mov	r3, r2
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	4413      	add	r3, r2
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	4a18      	ldr	r2, [pc, #96]	; (8004984 <OS_RdyListInsertTail+0x7c>)
 8004922:	4413      	add	r3, r2
 8004924:	60fb      	str	r3, [r7, #12]
    if (p_rdy_list->NbrEntries == (OS_OBJ_QTY)0) {          /* CASE 0: Insert when there are no entries               */
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	891b      	ldrh	r3, [r3, #8]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10f      	bne.n	800494e <OS_RdyListInsertTail+0x46>
        p_rdy_list->NbrEntries  = (OS_OBJ_QTY)1;            /*         This is the first entry                        */
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2201      	movs	r2, #1
 8004932:	811a      	strh	r2, [r3, #8]
        p_tcb->NextPtr          = (OS_TCB   *)0;            /*         No other OS_TCBs in the list                   */
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	60da      	str	r2, [r3, #12]
        p_tcb->PrevPtr          = (OS_TCB   *)0;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	611a      	str	r2, [r3, #16]
        p_rdy_list->HeadPtr     = p_tcb;                    /*         Both list pointers point to this OS_TCB        */
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	601a      	str	r2, [r3, #0]
        p_rdy_list->TailPtr     = p_tcb;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	605a      	str	r2, [r3, #4]
        p_tcb2                  = p_rdy_list->TailPtr;
        p_tcb->PrevPtr          = p_tcb2;
        p_tcb2->NextPtr         = p_tcb;                    /*         Adjust old tail of list's links                */
        p_rdy_list->TailPtr     = p_tcb;
    }
}
 800494c:	e014      	b.n	8004978 <OS_RdyListInsertTail+0x70>
        p_rdy_list->NbrEntries++;                           /*         One more OS_TCB in the list                    */
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	891b      	ldrh	r3, [r3, #8]
 8004952:	3301      	adds	r3, #1
 8004954:	b29a      	uxth	r2, r3
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	811a      	strh	r2, [r3, #8]
        p_tcb->NextPtr          = (OS_TCB   *)0;            /*         Adjust new OS_TCBs links                       */
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	60da      	str	r2, [r3, #12]
        p_tcb2                  = p_rdy_list->TailPtr;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	60bb      	str	r3, [r7, #8]
        p_tcb->PrevPtr          = p_tcb2;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	611a      	str	r2, [r3, #16]
        p_tcb2->NextPtr         = p_tcb;                    /*         Adjust old tail of list's links                */
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	60da      	str	r2, [r3, #12]
        p_rdy_list->TailPtr     = p_tcb;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	605a      	str	r2, [r3, #4]
}
 8004978:	bf00      	nop
 800497a:	3714      	adds	r7, #20
 800497c:	46bd      	mov	sp, r7
 800497e:	bc80      	pop	{r7}
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	20001f1c 	.word	0x20001f1c

08004988 <OS_RdyListRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListRemove (OS_TCB  *p_tcb)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
    OS_TCB       *p_tcb1;
    OS_TCB       *p_tcb2;



    p_rdy_list = &OSRdyList[p_tcb->Prio];
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8004996:	461a      	mov	r2, r3
 8004998:	4613      	mov	r3, r2
 800499a:	005b      	lsls	r3, r3, #1
 800499c:	4413      	add	r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4a24      	ldr	r2, [pc, #144]	; (8004a34 <OS_RdyListRemove+0xac>)
 80049a2:	4413      	add	r3, r2
 80049a4:	617b      	str	r3, [r7, #20]
    p_tcb1     = p_tcb->PrevPtr;                            /* Point to next and previous OS_TCB in the list          */
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	613b      	str	r3, [r7, #16]
    p_tcb2     = p_tcb->NextPtr;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	60fb      	str	r3, [r7, #12]
    if (p_tcb1 == (OS_TCB *)0) {                            /* Was the OS_TCB to remove was at the head?              */
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d11f      	bne.n	80049f8 <OS_RdyListRemove+0x70>
        if (p_tcb2 == (OS_TCB *)0) {                        /* Yes, was it the only OS_TCB?                           */
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10f      	bne.n	80049de <OS_RdyListRemove+0x56>
            p_rdy_list->NbrEntries = (OS_OBJ_QTY)0;         /*      Yes, no more entries                              */
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	2200      	movs	r2, #0
 80049c2:	811a      	strh	r2, [r3, #8]
            p_rdy_list->HeadPtr    = (OS_TCB   *)0;
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	2200      	movs	r2, #0
 80049c8:	601a      	str	r2, [r3, #0]
            p_rdy_list->TailPtr    = (OS_TCB   *)0;
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	2200      	movs	r2, #0
 80049ce:	605a      	str	r2, [r3, #4]
            OS_PrioRemove(p_tcb->Prio);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7fe fe20 	bl	800361c <OS_PrioRemove>
 80049dc:	e01f      	b.n	8004a1e <OS_RdyListRemove+0x96>
        } else {
            p_rdy_list->NbrEntries--;                       /*      No,  one less entry                               */
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	891b      	ldrh	r3, [r3, #8]
 80049e2:	3b01      	subs	r3, #1
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	811a      	strh	r2, [r3, #8]
            p_tcb2->PrevPtr        = (OS_TCB   *)0;         /*           adjust back link of new list head            */
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	611a      	str	r2, [r3, #16]
            p_rdy_list->HeadPtr    = p_tcb2;                /*           adjust OS_RDY_LIST's new head                */
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	e012      	b.n	8004a1e <OS_RdyListRemove+0x96>
        }
    } else {
        p_rdy_list->NbrEntries--;                           /* No,  one less entry                                    */
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	891b      	ldrh	r3, [r3, #8]
 80049fc:	3b01      	subs	r3, #1
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	811a      	strh	r2, [r3, #8]
        p_tcb1->NextPtr = p_tcb2;
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	60da      	str	r2, [r3, #12]
        if (p_tcb2 == (OS_TCB *)0) {
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d103      	bne.n	8004a18 <OS_RdyListRemove+0x90>
            p_rdy_list->TailPtr = p_tcb1;                   /*      Removing the TCB at the tail, adj the tail ptr    */
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	605a      	str	r2, [r3, #4]
 8004a16:	e002      	b.n	8004a1e <OS_RdyListRemove+0x96>
        } else {
            p_tcb2->PrevPtr     = p_tcb1;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	611a      	str	r2, [r3, #16]
        }
    }
    p_tcb->PrevPtr = (OS_TCB *)0;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	611a      	str	r2, [r3, #16]
    p_tcb->NextPtr = (OS_TCB *)0;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	60da      	str	r2, [r3, #12]

#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_TASK_SUSPEND(p_tcb);                           /* Record the event.                                      */
#endif
}
 8004a2a:	bf00      	nop
 8004a2c:	3718      	adds	r7, #24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	20001f1c 	.word	0x20001f1c

08004a38 <OS_SchedLockTimeMeasStart>:
************************************************************************************************************************
*/

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
void  OS_SchedLockTimeMeasStart (void)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	af00      	add	r7, sp, #0
    if (OSSchedLockNestingCtr == 1u) {
 8004a3c:	4b05      	ldr	r3, [pc, #20]	; (8004a54 <OS_SchedLockTimeMeasStart+0x1c>)
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d104      	bne.n	8004a4e <OS_SchedLockTimeMeasStart+0x16>
        OSSchedLockTimeBegin = CPU_TS_TmrRd();
 8004a44:	f001 fc9e 	bl	8006384 <CPU_TS_TmrRd>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	4b03      	ldr	r3, [pc, #12]	; (8004a58 <OS_SchedLockTimeMeasStart+0x20>)
 8004a4c:	601a      	str	r2, [r3, #0]
    }
}
 8004a4e:	bf00      	nop
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	20001f08 	.word	0x20001f08
 8004a58:	20002170 	.word	0x20002170

08004a5c <OS_SchedLockTimeMeasStop>:




void  OS_SchedLockTimeMeasStop (void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
    CPU_TS_TMR  delta;


    if (OSSchedLockNestingCtr == (OS_NESTING_CTR)0) {       /* Make sure we fully un-nested scheduler lock            */
 8004a62:	4b0f      	ldr	r3, [pc, #60]	; (8004aa0 <OS_SchedLockTimeMeasStop+0x44>)
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d116      	bne.n	8004a98 <OS_SchedLockTimeMeasStop+0x3c>
        delta = CPU_TS_TmrRd()                              /* Compute the delta time between begin and end           */
 8004a6a:	f001 fc8b 	bl	8006384 <CPU_TS_TmrRd>
 8004a6e:	4602      	mov	r2, r0
              - OSSchedLockTimeBegin;
 8004a70:	4b0c      	ldr	r3, [pc, #48]	; (8004aa4 <OS_SchedLockTimeMeasStop+0x48>)
 8004a72:	681b      	ldr	r3, [r3, #0]
        delta = CPU_TS_TmrRd()                              /* Compute the delta time between begin and end           */
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	607b      	str	r3, [r7, #4]
        if (OSSchedLockTimeMax    < delta) {                /* Detect peak value                                      */
 8004a78:	4b0b      	ldr	r3, [pc, #44]	; (8004aa8 <OS_SchedLockTimeMeasStop+0x4c>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d902      	bls.n	8004a88 <OS_SchedLockTimeMeasStop+0x2c>
            OSSchedLockTimeMax    = delta;
 8004a82:	4a09      	ldr	r2, [pc, #36]	; (8004aa8 <OS_SchedLockTimeMeasStop+0x4c>)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6013      	str	r3, [r2, #0]
        }
        if (OSSchedLockTimeMaxCur < delta) {                /* Detect peak value (for resettable value)               */
 8004a88:	4b08      	ldr	r3, [pc, #32]	; (8004aac <OS_SchedLockTimeMeasStop+0x50>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d902      	bls.n	8004a98 <OS_SchedLockTimeMeasStop+0x3c>
            OSSchedLockTimeMaxCur = delta;
 8004a92:	4a06      	ldr	r2, [pc, #24]	; (8004aac <OS_SchedLockTimeMeasStop+0x50>)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6013      	str	r3, [r2, #0]
        }
    }
}
 8004a98:	bf00      	nop
 8004a9a:	3708      	adds	r7, #8
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	20001f08 	.word	0x20001f08
 8004aa4:	20002170 	.word	0x20002170
 8004aa8:	20002394 	.word	0x20002394
 8004aac:	20002184 	.word	0x20002184

08004ab0 <OS_TaskBlock>:
************************************************************************************************************************
*/

void  OS_TaskBlock (OS_TCB   *p_tcb,
                    OS_TICK   timeout)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
    if (timeout > (OS_TICK)0) {                             /* Add task to tick list if timeout non zero               */
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d009      	beq.n	8004ad4 <OS_TaskBlock+0x24>
        OS_TickListInsert(&OSTickListTimeout, p_tcb, timeout);
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	6879      	ldr	r1, [r7, #4]
 8004ac4:	4809      	ldr	r0, [pc, #36]	; (8004aec <OS_TaskBlock+0x3c>)
 8004ac6:	f7fe f921 	bl	8002d0c <OS_TickListInsert>
        p_tcb->TaskState = OS_TASK_STATE_PEND_TIMEOUT;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2203      	movs	r2, #3
 8004ace:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8004ad2:	e003      	b.n	8004adc <OS_TaskBlock+0x2c>
    } else {
        p_tcb->TaskState = OS_TASK_STATE_PEND;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    }
    OS_RdyListRemove(p_tcb);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f7ff ff53 	bl	8004988 <OS_RdyListRemove>
}
 8004ae2:	bf00      	nop
 8004ae4:	3708      	adds	r7, #8
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	20002484 	.word	0x20002484

08004af0 <OS_MsgPoolInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MsgPoolInit (OS_ERR  *p_err)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b087      	sub	sp, #28
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (OSCfg_MsgPoolBasePtr == (OS_MSG *)0) {
 8004af8:	4b2d      	ldr	r3, [pc, #180]	; (8004bb0 <OS_MsgPoolInit+0xc0>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d104      	bne.n	8004b0a <OS_MsgPoolInit+0x1a>
       *p_err = OS_ERR_MSG_POOL_NULL_PTR;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f245 721e 	movw	r2, #22302	; 0x571e
 8004b06:	801a      	strh	r2, [r3, #0]
        return;
 8004b08:	e04e      	b.n	8004ba8 <OS_MsgPoolInit+0xb8>
    }
    if (OSCfg_MsgPoolSize == (OS_MSG_QTY)0) {
 8004b0a:	4b2a      	ldr	r3, [pc, #168]	; (8004bb4 <OS_MsgPoolInit+0xc4>)
 8004b0c:	881b      	ldrh	r3, [r3, #0]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d104      	bne.n	8004b1c <OS_MsgPoolInit+0x2c>
       *p_err = OS_ERR_MSG_POOL_EMPTY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f245 721d 	movw	r2, #22301	; 0x571d
 8004b18:	801a      	strh	r2, [r3, #0]
        return;
 8004b1a:	e045      	b.n	8004ba8 <OS_MsgPoolInit+0xb8>
    }
#endif

    p_msg1 = OSCfg_MsgPoolBasePtr;
 8004b1c:	4b24      	ldr	r3, [pc, #144]	; (8004bb0 <OS_MsgPoolInit+0xc0>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	617b      	str	r3, [r7, #20]
    p_msg2 = OSCfg_MsgPoolBasePtr;
 8004b22:	4b23      	ldr	r3, [pc, #140]	; (8004bb0 <OS_MsgPoolInit+0xc0>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	613b      	str	r3, [r7, #16]
    p_msg2++;
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	3310      	adds	r3, #16
 8004b2c:	613b      	str	r3, [r7, #16]
    loops  = OSCfg_MsgPoolSize - 1u;
 8004b2e:	4b21      	ldr	r3, [pc, #132]	; (8004bb4 <OS_MsgPoolInit+0xc4>)
 8004b30:	881b      	ldrh	r3, [r3, #0]
 8004b32:	3b01      	subs	r3, #1
 8004b34:	81bb      	strh	r3, [r7, #12]
    for (i = 0u; i < loops; i++) {                          /* Init. list of free OS_MSGs                             */
 8004b36:	2300      	movs	r3, #0
 8004b38:	81fb      	strh	r3, [r7, #14]
 8004b3a:	e014      	b.n	8004b66 <OS_MsgPoolInit+0x76>
        p_msg1->NextPtr = p_msg2;
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	601a      	str	r2, [r3, #0]
        p_msg1->MsgPtr  = (void      *)0;
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	2200      	movs	r2, #0
 8004b46:	605a      	str	r2, [r3, #4]
        p_msg1->MsgSize = (OS_MSG_SIZE)0u;
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	811a      	strh	r2, [r3, #8]
        p_msg1->MsgTS   = (CPU_TS     )0u;
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	2200      	movs	r2, #0
 8004b52:	60da      	str	r2, [r3, #12]
        p_msg1++;
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	3310      	adds	r3, #16
 8004b58:	617b      	str	r3, [r7, #20]
        p_msg2++;
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	3310      	adds	r3, #16
 8004b5e:	613b      	str	r3, [r7, #16]
    for (i = 0u; i < loops; i++) {                          /* Init. list of free OS_MSGs                             */
 8004b60:	89fb      	ldrh	r3, [r7, #14]
 8004b62:	3301      	adds	r3, #1
 8004b64:	81fb      	strh	r3, [r7, #14]
 8004b66:	89fa      	ldrh	r2, [r7, #14]
 8004b68:	89bb      	ldrh	r3, [r7, #12]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d3e6      	bcc.n	8004b3c <OS_MsgPoolInit+0x4c>
    }
    p_msg1->NextPtr = (OS_MSG    *)0;                       /* Last OS_MSG                                            */
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	2200      	movs	r2, #0
 8004b72:	601a      	str	r2, [r3, #0]
    p_msg1->MsgPtr  = (void      *)0;
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	2200      	movs	r2, #0
 8004b78:	605a      	str	r2, [r3, #4]
    p_msg1->MsgSize = (OS_MSG_SIZE)0u;
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	811a      	strh	r2, [r3, #8]
    p_msg1->MsgTS   = (CPU_TS     )0u;
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	2200      	movs	r2, #0
 8004b84:	60da      	str	r2, [r3, #12]

    OSMsgPool.NextPtr    =  OSCfg_MsgPoolBasePtr;
 8004b86:	4b0a      	ldr	r3, [pc, #40]	; (8004bb0 <OS_MsgPoolInit+0xc0>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a0b      	ldr	r2, [pc, #44]	; (8004bb8 <OS_MsgPoolInit+0xc8>)
 8004b8c:	6013      	str	r3, [r2, #0]
    OSMsgPool.NbrFree    =  OSCfg_MsgPoolSize;
 8004b8e:	4b09      	ldr	r3, [pc, #36]	; (8004bb4 <OS_MsgPoolInit+0xc4>)
 8004b90:	881a      	ldrh	r2, [r3, #0]
 8004b92:	4b09      	ldr	r3, [pc, #36]	; (8004bb8 <OS_MsgPoolInit+0xc8>)
 8004b94:	809a      	strh	r2, [r3, #4]
    OSMsgPool.NbrUsed    = (OS_MSG_QTY)0;
 8004b96:	4b08      	ldr	r3, [pc, #32]	; (8004bb8 <OS_MsgPoolInit+0xc8>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	80da      	strh	r2, [r3, #6]
#if OS_CFG_DBG_EN > 0u
    OSMsgPool.NbrUsedMax = (OS_MSG_QTY)0;
 8004b9c:	4b06      	ldr	r3, [pc, #24]	; (8004bb8 <OS_MsgPoolInit+0xc8>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	811a      	strh	r2, [r3, #8]
#endif
   *p_err                =  OS_ERR_NONE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	801a      	strh	r2, [r3, #0]
}
 8004ba8:	371c      	adds	r7, #28
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bc80      	pop	{r7}
 8004bae:	4770      	bx	lr
 8004bb0:	0800eac4 	.word	0x0800eac4
 8004bb4:	0800eac0 	.word	0x0800eac0
 8004bb8:	20002264 	.word	0x20002264

08004bbc <OS_MsgQInit>:
************************************************************************************************************************
*/

void  OS_MsgQInit (OS_MSG_Q    *p_msg_q,
                   OS_MSG_QTY   size)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	807b      	strh	r3, [r7, #2]
    p_msg_q->NbrEntriesSize = (OS_MSG_QTY)size;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	887a      	ldrh	r2, [r7, #2]
 8004bcc:	811a      	strh	r2, [r3, #8]
    p_msg_q->NbrEntries     = (OS_MSG_QTY)0;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	815a      	strh	r2, [r3, #10]
#if OS_CFG_DBG_EN > 0u
    p_msg_q->NbrEntriesMax  = (OS_MSG_QTY)0;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	819a      	strh	r2, [r3, #12]
#endif
    p_msg_q->InPtr          = (OS_MSG   *)0;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	601a      	str	r2, [r3, #0]
    p_msg_q->OutPtr         = (OS_MSG   *)0;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	605a      	str	r2, [r3, #4]
}
 8004be6:	bf00      	nop
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bc80      	pop	{r7}
 8004bee:	4770      	bx	lr

08004bf0 <OS_MsgQGet>:

void  *OS_MsgQGet (OS_MSG_Q     *p_msg_q,
                   OS_MSG_SIZE  *p_msg_size,
                   CPU_TS       *p_ts,
                   OS_ERR       *p_err)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b087      	sub	sp, #28
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
 8004bfc:	603b      	str	r3, [r7, #0]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return ((void *)0);
    }
#endif

    if (p_msg_q->NbrEntries == (OS_MSG_QTY)0) {             /* Is the queue empty?                                    */
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	895b      	ldrh	r3, [r3, #10]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10e      	bne.n	8004c24 <OS_MsgQGet+0x34>
       *p_msg_size = (OS_MSG_SIZE)0;                        /* Yes                                                    */
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	801a      	strh	r2, [r3, #0]
        if (p_ts != (CPU_TS *)0) {
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d002      	beq.n	8004c18 <OS_MsgQGet+0x28>
           *p_ts  = (CPU_TS  )0;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	601a      	str	r2, [r3, #0]
        }
       *p_err = OS_ERR_Q_EMPTY;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	f246 5292 	movw	r2, #26002	; 0x6592
 8004c1e:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 8004c20:	2300      	movs	r3, #0
 8004c22:	e03c      	b.n	8004c9e <OS_MsgQGet+0xae>
    }

    p_msg           = p_msg_q->OutPtr;                      /* No, get the next message to extract from the queue     */
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	617b      	str	r3, [r7, #20]
    p_void          = p_msg->MsgPtr;
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	613b      	str	r3, [r7, #16]
   *p_msg_size      = p_msg->MsgSize;
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	891a      	ldrh	r2, [r3, #8]
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	801a      	strh	r2, [r3, #0]
    if (p_ts != (CPU_TS *)0) {
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d003      	beq.n	8004c46 <OS_MsgQGet+0x56>
       *p_ts  = p_msg->MsgTS;
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	68da      	ldr	r2, [r3, #12]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	601a      	str	r2, [r3, #0]
    }

    p_msg_q->OutPtr = p_msg->NextPtr;                       /* Point to next message to extract                       */
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	605a      	str	r2, [r3, #4]

    if (p_msg_q->OutPtr == (OS_MSG *)0) {                   /* Are there any more messages in the queue?              */
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d106      	bne.n	8004c64 <OS_MsgQGet+0x74>
        p_msg_q->InPtr      = (OS_MSG   *)0;                /* No                                                     */
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	601a      	str	r2, [r3, #0]
        p_msg_q->NbrEntries = (OS_MSG_QTY)0;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	815a      	strh	r2, [r3, #10]
 8004c62:	e005      	b.n	8004c70 <OS_MsgQGet+0x80>
    } else {
        p_msg_q->NbrEntries--;                              /* Yes, One less message in the queue                     */
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	895b      	ldrh	r3, [r3, #10]
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	815a      	strh	r2, [r3, #10]
    }

    p_msg->NextPtr    = OSMsgPool.NextPtr;                  /* Return message control block to free list              */
 8004c70:	4b0d      	ldr	r3, [pc, #52]	; (8004ca8 <OS_MsgQGet+0xb8>)
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	601a      	str	r2, [r3, #0]
    OSMsgPool.NextPtr = p_msg;
 8004c78:	4a0b      	ldr	r2, [pc, #44]	; (8004ca8 <OS_MsgQGet+0xb8>)
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	6013      	str	r3, [r2, #0]
    OSMsgPool.NbrFree++;
 8004c7e:	4b0a      	ldr	r3, [pc, #40]	; (8004ca8 <OS_MsgQGet+0xb8>)
 8004c80:	889b      	ldrh	r3, [r3, #4]
 8004c82:	3301      	adds	r3, #1
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	4b08      	ldr	r3, [pc, #32]	; (8004ca8 <OS_MsgQGet+0xb8>)
 8004c88:	809a      	strh	r2, [r3, #4]
    OSMsgPool.NbrUsed--;
 8004c8a:	4b07      	ldr	r3, [pc, #28]	; (8004ca8 <OS_MsgQGet+0xb8>)
 8004c8c:	88db      	ldrh	r3, [r3, #6]
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	4b05      	ldr	r3, [pc, #20]	; (8004ca8 <OS_MsgQGet+0xb8>)
 8004c94:	80da      	strh	r2, [r3, #6]

   *p_err             = OS_ERR_NONE;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	801a      	strh	r2, [r3, #0]
    return (p_void);
 8004c9c:	693b      	ldr	r3, [r7, #16]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	371c      	adds	r7, #28
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bc80      	pop	{r7}
 8004ca6:	4770      	bx	lr
 8004ca8:	20002264 	.word	0x20002264

08004cac <OS_MsgQPut>:
                  void         *p_void,
                  OS_MSG_SIZE   msg_size,
                  OS_OPT        opt,
                  CPU_TS        ts,
                  OS_ERR       *p_err)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b087      	sub	sp, #28
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	4611      	mov	r1, r2
 8004cb8:	461a      	mov	r2, r3
 8004cba:	460b      	mov	r3, r1
 8004cbc:	80fb      	strh	r3, [r7, #6]
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	80bb      	strh	r3, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    if (p_msg_q->NbrEntries >= p_msg_q->NbrEntriesSize) {
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	895a      	ldrh	r2, [r3, #10]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	891b      	ldrh	r3, [r3, #8]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d304      	bcc.n	8004cd8 <OS_MsgQPut+0x2c>
       *p_err = OS_ERR_Q_MAX;                               /* Message queue cannot accept any more messages          */
 8004cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd0:	f246 5293 	movw	r2, #26003	; 0x6593
 8004cd4:	801a      	strh	r2, [r3, #0]
        return;
 8004cd6:	e06b      	b.n	8004db0 <OS_MsgQPut+0x104>
    }

    if (OSMsgPool.NbrFree == (OS_MSG_QTY)0) {
 8004cd8:	4b37      	ldr	r3, [pc, #220]	; (8004db8 <OS_MsgQPut+0x10c>)
 8004cda:	889b      	ldrh	r3, [r3, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d104      	bne.n	8004cea <OS_MsgQPut+0x3e>
       *p_err = OS_ERR_MSG_POOL_EMPTY;                      /* No more OS_MSG to use                                  */
 8004ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce2:	f245 721d 	movw	r2, #22301	; 0x571d
 8004ce6:	801a      	strh	r2, [r3, #0]
        return;
 8004ce8:	e062      	b.n	8004db0 <OS_MsgQPut+0x104>
    }

    p_msg             = OSMsgPool.NextPtr;                  /* Remove message control block from free list            */
 8004cea:	4b33      	ldr	r3, [pc, #204]	; (8004db8 <OS_MsgQPut+0x10c>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	617b      	str	r3, [r7, #20]
    OSMsgPool.NextPtr = p_msg->NextPtr;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a30      	ldr	r2, [pc, #192]	; (8004db8 <OS_MsgQPut+0x10c>)
 8004cf6:	6013      	str	r3, [r2, #0]
    OSMsgPool.NbrFree--;
 8004cf8:	4b2f      	ldr	r3, [pc, #188]	; (8004db8 <OS_MsgQPut+0x10c>)
 8004cfa:	889b      	ldrh	r3, [r3, #4]
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	4b2d      	ldr	r3, [pc, #180]	; (8004db8 <OS_MsgQPut+0x10c>)
 8004d02:	809a      	strh	r2, [r3, #4]
    OSMsgPool.NbrUsed++;
 8004d04:	4b2c      	ldr	r3, [pc, #176]	; (8004db8 <OS_MsgQPut+0x10c>)
 8004d06:	88db      	ldrh	r3, [r3, #6]
 8004d08:	3301      	adds	r3, #1
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	4b2a      	ldr	r3, [pc, #168]	; (8004db8 <OS_MsgQPut+0x10c>)
 8004d0e:	80da      	strh	r2, [r3, #6]

#if OS_CFG_DBG_EN > 0u
    if (OSMsgPool.NbrUsedMax < OSMsgPool.NbrUsed) {
 8004d10:	4b29      	ldr	r3, [pc, #164]	; (8004db8 <OS_MsgQPut+0x10c>)
 8004d12:	891a      	ldrh	r2, [r3, #8]
 8004d14:	4b28      	ldr	r3, [pc, #160]	; (8004db8 <OS_MsgQPut+0x10c>)
 8004d16:	88db      	ldrh	r3, [r3, #6]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d203      	bcs.n	8004d24 <OS_MsgQPut+0x78>
        OSMsgPool.NbrUsedMax = OSMsgPool.NbrUsed;
 8004d1c:	4b26      	ldr	r3, [pc, #152]	; (8004db8 <OS_MsgQPut+0x10c>)
 8004d1e:	88da      	ldrh	r2, [r3, #6]
 8004d20:	4b25      	ldr	r3, [pc, #148]	; (8004db8 <OS_MsgQPut+0x10c>)
 8004d22:	811a      	strh	r2, [r3, #8]
    }
#endif

    if (p_msg_q->NbrEntries == (OS_MSG_QTY)0) {             /* Is this first message placed in the queue?             */
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	895b      	ldrh	r3, [r3, #10]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d10c      	bne.n	8004d46 <OS_MsgQPut+0x9a>
        p_msg_q->InPtr         = p_msg;                     /* Yes                                                    */
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	601a      	str	r2, [r3, #0]
        p_msg_q->OutPtr        = p_msg;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	697a      	ldr	r2, [r7, #20]
 8004d36:	605a      	str	r2, [r3, #4]
        p_msg_q->NbrEntries    = (OS_MSG_QTY)1;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	815a      	strh	r2, [r3, #10]
        p_msg->NextPtr         = (OS_MSG *)0;
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	2200      	movs	r2, #0
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	e01e      	b.n	8004d84 <OS_MsgQPut+0xd8>
    } else {                                                /* No                                                     */
        if ((opt & OS_OPT_POST_LIFO) == OS_OPT_POST_FIFO) { /* Is it FIFO or LIFO?                                    */
 8004d46:	88bb      	ldrh	r3, [r7, #4]
 8004d48:	f003 0310 	and.w	r3, r3, #16
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10c      	bne.n	8004d6a <OS_MsgQPut+0xbe>
            p_msg_in           = p_msg_q->InPtr;            /* FIFO, add to the head                                  */
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	613b      	str	r3, [r7, #16]
            p_msg_in->NextPtr  = p_msg;
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	601a      	str	r2, [r3, #0]
            p_msg_q->InPtr     = p_msg;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	601a      	str	r2, [r3, #0]
            p_msg->NextPtr     = (OS_MSG *)0;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	2200      	movs	r2, #0
 8004d66:	601a      	str	r2, [r3, #0]
 8004d68:	e006      	b.n	8004d78 <OS_MsgQPut+0xcc>
        } else {
            p_msg->NextPtr     = p_msg_q->OutPtr;           /* LIFO, add to the tail                                  */
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	685a      	ldr	r2, [r3, #4]
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	601a      	str	r2, [r3, #0]
            p_msg_q->OutPtr    = p_msg;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	605a      	str	r2, [r3, #4]
        }
        p_msg_q->NbrEntries++;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	895b      	ldrh	r3, [r3, #10]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	815a      	strh	r2, [r3, #10]
    }

#if OS_CFG_DBG_EN > 0u
    if (p_msg_q->NbrEntriesMax < p_msg_q->NbrEntries) {
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	899a      	ldrh	r2, [r3, #12]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	895b      	ldrh	r3, [r3, #10]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d203      	bcs.n	8004d98 <OS_MsgQPut+0xec>
        p_msg_q->NbrEntriesMax = p_msg_q->NbrEntries;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	895a      	ldrh	r2, [r3, #10]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	819a      	strh	r2, [r3, #12]
    }
#endif

    p_msg->MsgPtr  = p_void;                                /* Deposit message in the message queue entry             */
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	68ba      	ldr	r2, [r7, #8]
 8004d9c:	605a      	str	r2, [r3, #4]
    p_msg->MsgSize = msg_size;
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	88fa      	ldrh	r2, [r7, #6]
 8004da2:	811a      	strh	r2, [r3, #8]
    p_msg->MsgTS   = ts;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	6a3a      	ldr	r2, [r7, #32]
 8004da8:	60da      	str	r2, [r3, #12]
   *p_err          = OS_ERR_NONE;
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	2200      	movs	r2, #0
 8004dae:	801a      	strh	r2, [r3, #0]
}
 8004db0:	371c      	adds	r7, #28
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bc80      	pop	{r7}
 8004db6:	4770      	bx	lr
 8004db8:	20002264 	.word	0x20002264

08004dbc <OSTaskCreate>:
                    OS_MSG_QTY     q_size,
                    OS_TICK        time_quanta,
                    void          *p_ext,
                    OS_OPT         opt,
                    OS_ERR        *p_err)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b08c      	sub	sp, #48	; 0x30
 8004dc0:	af02      	add	r7, sp, #8
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
 8004dc8:	603b      	str	r3, [r7, #0]
    OS_TLS_ID      id;
#endif

    CPU_STK       *p_sp;
    CPU_STK       *p_stk_limit;
    CPU_SR_ALLOC();
 8004dca:	2300      	movs	r3, #0
 8004dcc:	61bb      	str	r3, [r7, #24]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* ---------- CANNOT CREATE A TASK FROM AN ISR ---------- */
 8004dce:	4b75      	ldr	r3, [pc, #468]	; (8004fa4 <OSTaskCreate+0x1e8>)
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d004      	beq.n	8004de0 <OSTaskCreate+0x24>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_CREATE_FAILED(p_tcb);                 /* Record the event.                                      */
#endif
       *p_err = OS_ERR_TASK_CREATE_ISR;
 8004dd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dd8:	f247 124a 	movw	r2, #29002	; 0x714a
 8004ddc:	801a      	strh	r2, [r3, #0]
        return;
 8004dde:	e0dd      	b.n	8004f9c <OSTaskCreate+0x1e0>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u                                  /* ---------------- VALIDATE ARGUMENTS ------------------ */
    if (p_tcb == (OS_TCB *)0) {                             /* User must supply a valid OS_TCB                        */
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d104      	bne.n	8004df0 <OSTaskCreate+0x34>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_CREATE_FAILED(p_tcb);                 /* Record the event.                                      */
#endif
       *p_err = OS_ERR_TCB_INVALID;
 8004de6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004de8:	f247 12ad 	movw	r2, #29101	; 0x71ad
 8004dec:	801a      	strh	r2, [r3, #0]
        return;
 8004dee:	e0d5      	b.n	8004f9c <OSTaskCreate+0x1e0>
    }
    if (p_task == (OS_TASK_PTR)0) {                         /* User must supply a valid task                          */
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d104      	bne.n	8004e00 <OSTaskCreate+0x44>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_CREATE_FAILED(p_tcb);                 /* Record the event.                                      */
#endif
       *p_err = OS_ERR_TASK_INVALID;
 8004df6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004df8:	f247 124f 	movw	r2, #29007	; 0x714f
 8004dfc:	801a      	strh	r2, [r3, #0]
        return;
 8004dfe:	e0cd      	b.n	8004f9c <OSTaskCreate+0x1e0>
    }
    if (p_stk_base == (CPU_STK *)0) {                       /* User must supply a valid stack base address            */
 8004e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d104      	bne.n	8004e10 <OSTaskCreate+0x54>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_CREATE_FAILED(p_tcb);                 /* Record the event.                                      */
#endif
       *p_err = OS_ERR_STK_INVALID;
 8004e06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e08:	f646 622f 	movw	r2, #28207	; 0x6e2f
 8004e0c:	801a      	strh	r2, [r3, #0]
        return;
 8004e0e:	e0c5      	b.n	8004f9c <OSTaskCreate+0x1e0>
    }
    if (stk_size < OSCfg_StkSizeMin) {                      /* User must supply a valid minimum stack size            */
 8004e10:	4b65      	ldr	r3, [pc, #404]	; (8004fa8 <OSTaskCreate+0x1ec>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d204      	bcs.n	8004e24 <OSTaskCreate+0x68>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_CREATE_FAILED(p_tcb);                 /* Record the event.                                      */
#endif
       *p_err = OS_ERR_STK_SIZE_INVALID;
 8004e1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e1c:	f646 6230 	movw	r2, #28208	; 0x6e30
 8004e20:	801a      	strh	r2, [r3, #0]
        return;
 8004e22:	e0bb      	b.n	8004f9c <OSTaskCreate+0x1e0>
    }
    if (stk_limit >= stk_size) {                            /* User must supply a valid stack limit                   */
 8004e24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d304      	bcc.n	8004e36 <OSTaskCreate+0x7a>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_CREATE_FAILED(p_tcb);                 /* Record the event.                                      */
#endif
       *p_err = OS_ERR_STK_LIMIT_INVALID;
 8004e2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e2e:	f646 6231 	movw	r2, #28209	; 0x6e31
 8004e32:	801a      	strh	r2, [r3, #0]
        return;
 8004e34:	e0b2      	b.n	8004f9c <OSTaskCreate+0x1e0>
    }
    if (prio >= OS_CFG_PRIO_MAX) {                          /* Priority must be within 0 and OS_CFG_PRIO_MAX-1        */
 8004e36:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004e3a:	2b1f      	cmp	r3, #31
 8004e3c:	d904      	bls.n	8004e48 <OSTaskCreate+0x8c>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_CREATE_FAILED(p_tcb);                 /* Record the event.                                      */
#endif
       *p_err = OS_ERR_PRIO_INVALID;
 8004e3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e40:	f246 2273 	movw	r2, #25203	; 0x6273
 8004e44:	801a      	strh	r2, [r3, #0]
        return;
 8004e46:	e0a9      	b.n	8004f9c <OSTaskCreate+0x1e0>
            return;
        }
    }
#endif

    if (prio == (OS_CFG_PRIO_MAX - 1u)) {
 8004e48:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004e4c:	2b1f      	cmp	r3, #31
 8004e4e:	d108      	bne.n	8004e62 <OSTaskCreate+0xa6>
        if (p_tcb != &OSIdleTaskTCB) {
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	4a56      	ldr	r2, [pc, #344]	; (8004fac <OSTaskCreate+0x1f0>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d004      	beq.n	8004e62 <OSTaskCreate+0xa6>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
            TRACE_OS_TASK_CREATE_FAILED(p_tcb);             /* Record the event.                                      */
#endif
           *p_err = OS_ERR_PRIO_INVALID;                    /* Not allowed to use same priority as idle task          */
 8004e58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e5a:	f246 2273 	movw	r2, #25203	; 0x6273
 8004e5e:	801a      	strh	r2, [r3, #0]
            return;
 8004e60:	e09c      	b.n	8004f9c <OSTaskCreate+0x1e0>
        }
    }

    OS_TaskInitTCB(p_tcb);                                  /* Initialize the TCB to default values                   */
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f000 faca 	bl	80053fc <OS_TaskInitTCB>

   *p_err = OS_ERR_NONE;
 8004e68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	801a      	strh	r2, [r3, #0]
                                                            /* --------------- CLEAR THE TASK'S STACK --------------- */
    if ((opt & OS_OPT_TASK_STK_CHK) != (OS_OPT)0) {         /* See if stack checking has been enabled                 */
 8004e6e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d017      	beq.n	8004eaa <OSTaskCreate+0xee>
        if ((opt & OS_OPT_TASK_STK_CLR) != (OS_OPT)0) {     /* See if stack needs to be cleared                       */
 8004e7a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d011      	beq.n	8004eaa <OSTaskCreate+0xee>
            p_sp = p_stk_base;
 8004e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e88:	61fb      	str	r3, [r7, #28]
            for (i = 0u; i < stk_size; i++) {               /* Stack grows from HIGH to LOW memory                    */
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e8e:	e008      	b.n	8004ea2 <OSTaskCreate+0xe6>
               *p_sp = (CPU_STK)0;                          /* Clear from bottom of stack and up!                     */
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	2200      	movs	r2, #0
 8004e94:	601a      	str	r2, [r3, #0]
                p_sp++;
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	3304      	adds	r3, #4
 8004e9a:	61fb      	str	r3, [r7, #28]
            for (i = 0u; i < stk_size; i++) {               /* Stack grows from HIGH to LOW memory                    */
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d3f2      	bcc.n	8004e90 <OSTaskCreate+0xd4>
            }
        }
    }
                                                            /* ------- INITIALIZE THE STACK FRAME OF THE TASK ------- */
#if (CPU_CFG_STK_GROWTH == CPU_STK_GROWTH_HI_TO_LO)
    p_stk_limit = p_stk_base + stk_limit;
 8004eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004eb0:	4413      	add	r3, r2
 8004eb2:	617b      	str	r3, [r7, #20]
#else
    p_stk_limit = p_stk_base + (stk_size - 1u) - stk_limit;
#endif

    p_sp = OSTaskStkInit(p_task,
 8004eb4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004eb8:	9301      	str	r3, [sp, #4]
 8004eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ebc:	9300      	str	r3, [sp, #0]
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ec2:	6839      	ldr	r1, [r7, #0]
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f001 f871 	bl	8005fac <OSTaskStkInit>
 8004eca:	61f8      	str	r0, [r7, #28]
                         stk_size,
                         opt);

                                                            /* -------------- INITIALIZE THE TCB FIELDS ------------- */
#if OS_CFG_DBG_EN > 0u
    p_tcb->TaskEntryAddr = p_task;                          /* Save task entry point address                          */
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	629a      	str	r2, [r3, #40]	; 0x28
    p_tcb->TaskEntryArg  = p_arg;                           /* Save task entry argument                               */
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	683a      	ldr	r2, [r7, #0]
 8004ed6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif

#if OS_CFG_DBG_EN > 0u
    p_tcb->NamePtr       = p_name;                          /* Save task name                                         */
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	68ba      	ldr	r2, [r7, #8]
 8004edc:	621a      	str	r2, [r3, #32]
#else
    (void)&p_name;
#endif

    p_tcb->Prio          = prio;                            /* Save the task's priority                               */
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8004ee4:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

#if OS_CFG_MUTEX_EN > 0u
    p_tcb->BasePrio      = prio;                            /* Set the base priority                                  */
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8004eee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
#endif

    p_tcb->StkPtr        = p_sp;                            /* Save the new top-of-stack pointer                      */
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	69fa      	ldr	r2, [r7, #28]
 8004ef6:	601a      	str	r2, [r3, #0]
#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u))
    p_tcb->StkLimitPtr   = p_stk_limit;                     /* Save the stack limit pointer                           */
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	609a      	str	r2, [r3, #8]
    }
#else
    (void)&time_quanta;
#endif

    p_tcb->ExtPtr        = p_ext;                           /* Save pointer to TCB extension                          */
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f02:	605a      	str	r2, [r3, #4]
#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u))
    p_tcb->StkBasePtr    = p_stk_base;                      /* Save pointer to the base address of the stack          */
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f08:	625a      	str	r2, [r3, #36]	; 0x24
    p_tcb->StkSize       = stk_size;                        /* Save the stack size (in number of CPU_STK elements)    */
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f0e:	641a      	str	r2, [r3, #64]	; 0x40
#endif
    p_tcb->Opt           = opt;                             /* Save task options                                      */
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8004f16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if OS_CFG_TASK_REG_TBL_SIZE > 0u
    for (reg_nbr = 0u; reg_nbr < OS_CFG_TASK_REG_TBL_SIZE; reg_nbr++) {
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f20:	e00b      	b.n	8004f3a <OSTaskCreate+0x17e>
        p_tcb->RegTbl[reg_nbr] = (OS_REG)0;
 8004f22:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	321e      	adds	r2, #30
 8004f2a:	2100      	movs	r1, #0
 8004f2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (reg_nbr = 0u; reg_nbr < OS_CFG_TASK_REG_TBL_SIZE; reg_nbr++) {
 8004f30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f34:	3301      	adds	r3, #1
 8004f36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d0ef      	beq.n	8004f22 <OSTaskCreate+0x166>
    }
#endif

#if OS_CFG_TASK_Q_EN > 0u
    OS_MsgQInit(&p_tcb->MsgQ,                               /* Initialize the task's message queue                    */
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	3360      	adds	r3, #96	; 0x60
 8004f46:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004f4a:	4611      	mov	r1, r2
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7ff fe35 	bl	8004bbc <OS_MsgQInit>
                q_size);
#else
    (void)&q_size;
#endif

    OSTaskCreateHook(p_tcb);                                /* Call user defined hook                                 */
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f001 f806 	bl	8005f64 <OSTaskCreateHook>
        p_tcb->TLS_Tbl[id] = (OS_TLS)0;
    }
    OS_TLS_TaskCreate(p_tcb);                               /* Call TLS hook                                          */
#endif
                                                            /* --------------- ADD TASK TO READY LIST --------------- */
    OS_CRITICAL_ENTER();
 8004f58:	f7fb f9c2 	bl	80002e0 <CPU_SR_Save>
 8004f5c:	61b8      	str	r0, [r7, #24]
    OS_PrioInsert(p_tcb->Prio);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7fe fb33 	bl	80035d0 <OS_PrioInsert>
    OS_RdyListInsertTail(p_tcb);
 8004f6a:	68f8      	ldr	r0, [r7, #12]
 8004f6c:	f7ff fccc 	bl	8004908 <OS_RdyListInsertTail>

#if OS_CFG_DBG_EN > 0u
    OS_TaskDbgListAdd(p_tcb);
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f000 fa01 	bl	8005378 <OS_TaskDbgListAdd>
#endif

    OSTaskQty++;                                            /* Increment the #tasks counter                           */
 8004f76:	4b0e      	ldr	r3, [pc, #56]	; (8004fb0 <OSTaskCreate+0x1f4>)
 8004f78:	881b      	ldrh	r3, [r3, #0]
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	4b0c      	ldr	r3, [pc, #48]	; (8004fb0 <OSTaskCreate+0x1f4>)
 8004f80:	801a      	strh	r2, [r3, #0]

    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Return if multitasking has not started                 */
 8004f82:	4b0c      	ldr	r3, [pc, #48]	; (8004fb4 <OSTaskCreate+0x1f8>)
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d003      	beq.n	8004f92 <OSTaskCreate+0x1d6>
        OS_CRITICAL_EXIT();
 8004f8a:	69b8      	ldr	r0, [r7, #24]
 8004f8c:	f7fb f9ac 	bl	80002e8 <CPU_SR_Restore>
        return;
 8004f90:	e004      	b.n	8004f9c <OSTaskCreate+0x1e0>
    }

    OS_CRITICAL_EXIT_NO_SCHED();
 8004f92:	69b8      	ldr	r0, [r7, #24]
 8004f94:	f7fb f9a8 	bl	80002e8 <CPU_SR_Restore>

    OSSched();
 8004f98:	f7ff f802 	bl	8003fa0 <OSSched>
}
 8004f9c:	3728      	adds	r7, #40	; 0x28
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	2000219e 	.word	0x2000219e
 8004fa8:	0800eadc 	.word	0x0800eadc
 8004fac:	20002270 	.word	0x20002270
 8004fb0:	200021a0 	.word	0x200021a0
 8004fb4:	20001f19 	.word	0x20001f19

08004fb8 <OSTaskResume>:
*/

#if OS_CFG_TASK_SUSPEND_EN > 0u
void  OSTaskResume (OS_TCB  *p_tcb,
                    OS_ERR  *p_err)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
    CPU_SR_ALLOC();
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	60fb      	str	r3, [r7, #12]
    }
#endif

#if (OS_CFG_ISR_POST_DEFERRED_EN   == 0u) && \
    (OS_CFG_CALLED_FROM_ISR_CHK_EN >  0u)
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 8004fc6:	4b13      	ldr	r3, [pc, #76]	; (8005014 <OSTaskResume+0x5c>)
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d004      	beq.n	8004fd8 <OSTaskResume+0x20>
       *p_err = OS_ERR_TASK_RESUME_ISR;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	f247 1255 	movw	r2, #29013	; 0x7155
 8004fd4:	801a      	strh	r2, [r3, #0]
        return;
 8004fd6:	e019      	b.n	800500c <OSTaskResume+0x54>
    }
#endif


    CPU_CRITICAL_ENTER();
 8004fd8:	f7fb f982 	bl	80002e0 <CPU_SR_Save>
 8004fdc:	60f8      	str	r0, [r7, #12]
#if OS_CFG_ARG_CHK_EN > 0u
    if ((p_tcb == (OS_TCB *)0) ||                           /* We cannot resume 'self'                                */
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d004      	beq.n	8004fee <OSTaskResume+0x36>
        (p_tcb == OSTCBCurPtr)) {
 8004fe4:	4b0c      	ldr	r3, [pc, #48]	; (8005018 <OSTaskResume+0x60>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
    if ((p_tcb == (OS_TCB *)0) ||                           /* We cannot resume 'self'                                */
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d107      	bne.n	8004ffe <OSTaskResume+0x46>
        CPU_CRITICAL_EXIT();
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f7fb f97a 	bl	80002e8 <CPU_SR_Restore>
       *p_err  = OS_ERR_TASK_RESUME_SELF;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	f247 1257 	movw	r2, #29015	; 0x7157
 8004ffa:	801a      	strh	r2, [r3, #0]
        return;
 8004ffc:	e006      	b.n	800500c <OSTaskResume+0x54>
    }
#endif
    CPU_CRITICAL_EXIT();
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f7fb f972 	bl	80002e8 <CPU_SR_Restore>
                    (OS_ERR    *)p_err);
        return;
    }
#endif

    OS_TaskResume(p_tcb, p_err);
 8005004:	6839      	ldr	r1, [r7, #0]
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 fac6 	bl	8005598 <OS_TaskResume>

#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_TASK_RESUME(p_tcb);                            /* Record the event.                                      */
#endif
}
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	2000219e 	.word	0x2000219e
 8005018:	20002174 	.word	0x20002174

0800501c <OSTaskSemPend>:

OS_SEM_CTR  OSTaskSemPend (OS_TICK   timeout,
                           OS_OPT    opt,
                           CPU_TS   *p_ts,
                           OS_ERR   *p_err)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	607a      	str	r2, [r7, #4]
 8005026:	603b      	str	r3, [r7, #0]
 8005028:	460b      	mov	r3, r1
 800502a:	817b      	strh	r3, [r7, #10]
    OS_SEM_CTR    ctr;
    CPU_SR_ALLOC();
 800502c:	2300      	movs	r3, #0
 800502e:	617b      	str	r3, [r7, #20]
        return ((OS_SEM_CTR)0);
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 8005030:	4b6f      	ldr	r3, [pc, #444]	; (80051f0 <OSTaskSemPend+0x1d4>)
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d005      	beq.n	8005044 <OSTaskSemPend+0x28>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_SEM_PEND_FAILED(OSTCBCurPtr);         /* Record the event.                                      */
#endif
       *p_err = OS_ERR_PEND_ISR;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	f246 12ae 	movw	r2, #25006	; 0x61ae
 800503e:	801a      	strh	r2, [r3, #0]
        return ((OS_SEM_CTR)0);
 8005040:	2300      	movs	r3, #0
 8005042:	e0d0      	b.n	80051e6 <OSTaskSemPend+0x1ca>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    switch (opt) {                                          /* Validate 'opt'                                         */
 8005044:	897b      	ldrh	r3, [r7, #10]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d008      	beq.n	800505c <OSTaskSemPend+0x40>
 800504a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800504e:	d005      	beq.n	800505c <OSTaskSemPend+0x40>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_TASK_SEM_PEND_FAILED(OSTCBCurPtr);    /* Record the event.                                      */
#endif
            *p_err = OS_ERR_OPT_INVALID;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	f645 6225 	movw	r2, #24101	; 0x5e25
 8005056:	801a      	strh	r2, [r3, #0]
             return ((OS_SEM_CTR)0);
 8005058:	2300      	movs	r3, #0
 800505a:	e0c4      	b.n	80051e6 <OSTaskSemPend+0x1ca>
             break;
 800505c:	bf00      	nop
    }
#endif

    if (p_ts != (CPU_TS *)0) {
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d002      	beq.n	800506a <OSTaskSemPend+0x4e>
       *p_ts  = (CPU_TS  )0;                                /* Initialize the returned timestamp                      */
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	601a      	str	r2, [r3, #0]
    }

    CPU_CRITICAL_ENTER();
 800506a:	f7fb f939 	bl	80002e0 <CPU_SR_Save>
 800506e:	6178      	str	r0, [r7, #20]
    if (OSTCBCurPtr->SemCtr > (OS_SEM_CTR)0) {              /* See if task already been signaled                      */
 8005070:	4b60      	ldr	r3, [pc, #384]	; (80051f4 <OSTaskSemPend+0x1d8>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005076:	2b00      	cmp	r3, #0
 8005078:	d035      	beq.n	80050e6 <OSTaskSemPend+0xca>
        OSTCBCurPtr->SemCtr--;
 800507a:	4b5e      	ldr	r3, [pc, #376]	; (80051f4 <OSTaskSemPend+0x1d8>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005080:	3a01      	subs	r2, #1
 8005082:	64da      	str	r2, [r3, #76]	; 0x4c
        ctr    = OSTCBCurPtr->SemCtr;
 8005084:	4b5b      	ldr	r3, [pc, #364]	; (80051f4 <OSTaskSemPend+0x1d8>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800508a:	613b      	str	r3, [r7, #16]
        if (p_ts != (CPU_TS *)0) {
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d004      	beq.n	800509c <OSTaskSemPend+0x80>
           *p_ts  = OSTCBCurPtr->TS;
 8005092:	4b58      	ldr	r3, [pc, #352]	; (80051f4 <OSTaskSemPend+0x1d8>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	601a      	str	r2, [r3, #0]
        }
#if OS_CFG_TASK_PROFILE_EN > 0u
        OSTCBCurPtr->SemPendTime = OS_TS_GET() - OSTCBCurPtr->TS;
 800509c:	f001 f972 	bl	8006384 <CPU_TS_TmrRd>
 80050a0:	4601      	mov	r1, r0
 80050a2:	4b54      	ldr	r3, [pc, #336]	; (80051f4 <OSTaskSemPend+0x1d8>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050a8:	4b52      	ldr	r3, [pc, #328]	; (80051f4 <OSTaskSemPend+0x1d8>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	1a8a      	subs	r2, r1, r2
 80050ae:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        if (OSTCBCurPtr->SemPendTimeMax < OSTCBCurPtr->SemPendTime) {
 80050b2:	4b50      	ldr	r3, [pc, #320]	; (80051f4 <OSTaskSemPend+0x1d8>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80050ba:	4b4e      	ldr	r3, [pc, #312]	; (80051f4 <OSTaskSemPend+0x1d8>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d207      	bcs.n	80050d6 <OSTaskSemPend+0xba>
            OSTCBCurPtr->SemPendTimeMax = OSTCBCurPtr->SemPendTime;
 80050c6:	4b4b      	ldr	r3, [pc, #300]	; (80051f4 <OSTaskSemPend+0x1d8>)
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	4b4a      	ldr	r3, [pc, #296]	; (80051f4 <OSTaskSemPend+0x1d8>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 80050d2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        }
#endif
        CPU_CRITICAL_EXIT();
 80050d6:	6978      	ldr	r0, [r7, #20]
 80050d8:	f7fb f906 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_SEM_PEND(OSTCBCurPtr);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_NONE;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	2200      	movs	r2, #0
 80050e0:	801a      	strh	r2, [r3, #0]
        return (ctr);
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	e07f      	b.n	80051e6 <OSTaskSemPend+0x1ca>
    }

    if ((opt & OS_OPT_PEND_NON_BLOCKING) != (OS_OPT)0) {    /* Caller wants to block if not available?                */
 80050e6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	da08      	bge.n	8005100 <OSTaskSemPend+0xe4>
        CPU_CRITICAL_EXIT();        
 80050ee:	6978      	ldr	r0, [r7, #20]
 80050f0:	f7fb f8fa 	bl	80002e8 <CPU_SR_Restore>
       *p_err = OS_ERR_PEND_WOULD_BLOCK;                    /* No                                                     */
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	f246 12b0 	movw	r2, #25008	; 0x61b0
 80050fa:	801a      	strh	r2, [r3, #0]
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_SEM_PEND_FAILED(OSTCBCurPtr);         /* Record the event.                                      */
#endif
        return ((OS_SEM_CTR)0);
 80050fc:	2300      	movs	r3, #0
 80050fe:	e072      	b.n	80051e6 <OSTaskSemPend+0x1ca>
    } else {                                                /* Yes                                                    */
        if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {    /* Can't pend when the scheduler is locked                */
 8005100:	4b3d      	ldr	r3, [pc, #244]	; (80051f8 <OSTaskSemPend+0x1dc>)
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d008      	beq.n	800511a <OSTaskSemPend+0xfe>
            CPU_CRITICAL_EXIT();
 8005108:	6978      	ldr	r0, [r7, #20]
 800510a:	f7fb f8ed 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
            TRACE_OS_TASK_SEM_PEND_FAILED(OSTCBCurPtr);     /* Record the event.                                      */
#endif
           *p_err = OS_ERR_SCHED_LOCKED;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	f646 5263 	movw	r2, #28003	; 0x6d63
 8005114:	801a      	strh	r2, [r3, #0]
            return ((OS_SEM_CTR)0);
 8005116:	2300      	movs	r3, #0
 8005118:	e065      	b.n	80051e6 <OSTaskSemPend+0x1ca>
        }
    }
                                                            /* Lock the scheduler/re-enable interrupts                */
    OS_CRITICAL_ENTER_CPU_EXIT();
    OS_Pend((OS_PEND_DATA *)0,                              /* Block task pending on Signal                           */
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2207      	movs	r2, #7
 800511e:	2100      	movs	r1, #0
 8005120:	2000      	movs	r0, #0
 8005122:	f7ff f8a9 	bl	8004278 <OS_Pend>
            (OS_PEND_OBJ  *)0,
            (OS_STATE      )OS_TASK_PEND_ON_TASK_SEM,
            (OS_TICK       )timeout);
    OS_CRITICAL_EXIT_NO_SCHED();
 8005126:	6978      	ldr	r0, [r7, #20]
 8005128:	f7fb f8de 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_TASK_SEM_PEND_BLOCK(OSTCBCurPtr);              /* Record the event.                                      */
#endif
    OSSched();                                              /* Find next highest priority task ready to run           */
 800512c:	f7fe ff38 	bl	8003fa0 <OSSched>

    CPU_CRITICAL_ENTER();
 8005130:	f7fb f8d6 	bl	80002e0 <CPU_SR_Save>
 8005134:	6178      	str	r0, [r7, #20]
    switch (OSTCBCurPtr->PendStatus) {                      /* See if we timed-out or aborted                         */
 8005136:	4b2f      	ldr	r3, [pc, #188]	; (80051f4 <OSTaskSemPend+0x1d8>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800513e:	2b01      	cmp	r3, #1
 8005140:	d02c      	beq.n	800519c <OSTaskSemPend+0x180>
 8005142:	2b03      	cmp	r3, #3
 8005144:	d037      	beq.n	80051b6 <OSTaskSemPend+0x19a>
 8005146:	2b00      	cmp	r3, #0
 8005148:	d140      	bne.n	80051cc <OSTaskSemPend+0x1b0>
        case OS_STATUS_PEND_OK:
             if (p_ts != (CPU_TS *)0) {
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d021      	beq.n	8005194 <OSTaskSemPend+0x178>
                *p_ts                    =  OSTCBCurPtr->TS;
 8005150:	4b28      	ldr	r3, [pc, #160]	; (80051f4 <OSTaskSemPend+0x1d8>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	601a      	str	r2, [r3, #0]
#if OS_CFG_TASK_PROFILE_EN > 0u
                OSTCBCurPtr->SemPendTime = OS_TS_GET() - OSTCBCurPtr->TS;
 800515a:	f001 f913 	bl	8006384 <CPU_TS_TmrRd>
 800515e:	4601      	mov	r1, r0
 8005160:	4b24      	ldr	r3, [pc, #144]	; (80051f4 <OSTaskSemPend+0x1d8>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005166:	4b23      	ldr	r3, [pc, #140]	; (80051f4 <OSTaskSemPend+0x1d8>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	1a8a      	subs	r2, r1, r2
 800516c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
                if (OSTCBCurPtr->SemPendTimeMax < OSTCBCurPtr->SemPendTime) {
 8005170:	4b20      	ldr	r3, [pc, #128]	; (80051f4 <OSTaskSemPend+0x1d8>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8005178:	4b1e      	ldr	r3, [pc, #120]	; (80051f4 <OSTaskSemPend+0x1d8>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005180:	429a      	cmp	r2, r3
 8005182:	d207      	bcs.n	8005194 <OSTaskSemPend+0x178>
                    OSTCBCurPtr->SemPendTimeMax = OSTCBCurPtr->SemPendTime;
 8005184:	4b1b      	ldr	r3, [pc, #108]	; (80051f4 <OSTaskSemPend+0x1d8>)
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	4b1a      	ldr	r3, [pc, #104]	; (80051f4 <OSTaskSemPend+0x1d8>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 8005190:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#endif
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_TASK_SEM_PEND(OSTCBCurPtr);           /* Record the event.                                      */
#endif
            *p_err = OS_ERR_NONE;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	2200      	movs	r2, #0
 8005198:	801a      	strh	r2, [r3, #0]
             break;
 800519a:	e01c      	b.n	80051d6 <OSTaskSemPend+0x1ba>

        case OS_STATUS_PEND_ABORT:
             if (p_ts != (CPU_TS *)0) {
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d004      	beq.n	80051ac <OSTaskSemPend+0x190>
                *p_ts  =  OSTCBCurPtr->TS;
 80051a2:	4b14      	ldr	r3, [pc, #80]	; (80051f4 <OSTaskSemPend+0x1d8>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_TASK_SEM_PEND_FAILED(OSTCBCurPtr);    /* Record the event.                                      */
#endif
            *p_err = OS_ERR_PEND_ABORT;                     /* Indicate that we aborted                               */
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	f246 12a9 	movw	r2, #25001	; 0x61a9
 80051b2:	801a      	strh	r2, [r3, #0]
             break;
 80051b4:	e00f      	b.n	80051d6 <OSTaskSemPend+0x1ba>

        case OS_STATUS_PEND_TIMEOUT:
             if (p_ts != (CPU_TS *)0) {
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d002      	beq.n	80051c2 <OSTaskSemPend+0x1a6>
                *p_ts  = (CPU_TS  )0;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_TASK_SEM_PEND_FAILED(OSTCBCurPtr);    /* Record the event.                                      */
#endif
            *p_err = OS_ERR_TIMEOUT;                        /* Indicate that we didn't get event within TO            */
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	f247 22d9 	movw	r2, #29401	; 0x72d9
 80051c8:	801a      	strh	r2, [r3, #0]
             break;
 80051ca:	e004      	b.n	80051d6 <OSTaskSemPend+0x1ba>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_TASK_SEM_PEND_FAILED(OSTCBCurPtr);    /* Record the event.                                      */
#endif
            *p_err = OS_ERR_STATUS_INVALID;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	f646 622e 	movw	r2, #28206	; 0x6e2e
 80051d2:	801a      	strh	r2, [r3, #0]
             break;
 80051d4:	bf00      	nop
    }
    ctr = OSTCBCurPtr->SemCtr;
 80051d6:	4b07      	ldr	r3, [pc, #28]	; (80051f4 <OSTaskSemPend+0x1d8>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051dc:	613b      	str	r3, [r7, #16]
    CPU_CRITICAL_EXIT();
 80051de:	6978      	ldr	r0, [r7, #20]
 80051e0:	f7fb f882 	bl	80002e8 <CPU_SR_Restore>
    return (ctr);
 80051e4:	693b      	ldr	r3, [r7, #16]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3718      	adds	r7, #24
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	2000219e 	.word	0x2000219e
 80051f4:	20002174 	.word	0x20002174
 80051f8:	20001f08 	.word	0x20001f08

080051fc <OSTaskSemPost>:
*/

OS_SEM_CTR  OSTaskSemPost (OS_TCB  *p_tcb,
                           OS_OPT   opt,
                           OS_ERR  *p_err)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	460b      	mov	r3, r1
 8005206:	607a      	str	r2, [r7, #4]
 8005208:	817b      	strh	r3, [r7, #10]
        return ((OS_SEM_CTR)0);
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    switch (opt) {                                          /* Validate 'opt'                                         */
 800520a:	897b      	ldrh	r3, [r7, #10]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d008      	beq.n	8005222 <OSTaskSemPost+0x26>
 8005210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005214:	d005      	beq.n	8005222 <OSTaskSemPost+0x26>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_TASK_SEM_POST_FAILED(p_tcb);          /* Record the event.                                      */
#endif
            *p_err =  OS_ERR_OPT_INVALID;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f645 6225 	movw	r2, #24101	; 0x5e25
 800521c:	801a      	strh	r2, [r3, #0]
             return ((OS_SEM_CTR)0u);
 800521e:	2300      	movs	r3, #0
 8005220:	e00b      	b.n	800523a <OSTaskSemPost+0x3e>
             break;
 8005222:	bf00      	nop
    }
#endif

    ts = OS_TS_GET();                                       /* Get timestamp                                          */
 8005224:	f001 f8ae 	bl	8006384 <CPU_TS_TmrRd>
 8005228:	6178      	str	r0, [r7, #20]

#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_TASK_SEM_POST(p_tcb);                          /* Record the event.                                      */
#endif

    ctr = OS_TaskSemPost(p_tcb,
 800522a:	8979      	ldrh	r1, [r7, #10]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f000 fa57 	bl	80056e4 <OS_TaskSemPost>
 8005236:	6138      	str	r0, [r7, #16]
                         opt,
                         ts,
                         p_err);

    return (ctr);
 8005238:	693b      	ldr	r3, [r7, #16]
}
 800523a:	4618      	mov	r0, r3
 800523c:	3718      	adds	r7, #24
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
	...

08005244 <OSTaskStkChk>:
#if OS_CFG_STAT_TASK_STK_CHK_EN > 0u
void  OSTaskStkChk (OS_TCB        *p_tcb,
                    CPU_STK_SIZE  *p_free,
                    CPU_STK_SIZE  *p_used,
                    OS_ERR        *p_err)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b088      	sub	sp, #32
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
 8005250:	603b      	str	r3, [r7, #0]
    CPU_STK_SIZE  free_stk;
    CPU_STK      *p_stk;
    CPU_SR_ALLOC();
 8005252:	2300      	movs	r3, #0
 8005254:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* See if trying to check stack from ISR                  */
 8005256:	4b35      	ldr	r3, [pc, #212]	; (800532c <OSTaskStkChk+0xe8>)
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d004      	beq.n	8005268 <OSTaskStkChk+0x24>
       *p_err = OS_ERR_TASK_STK_CHK_ISR;
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	f247 1259 	movw	r2, #29017	; 0x7159
 8005264:	801a      	strh	r2, [r3, #0]
        return;
 8005266:	e05e      	b.n	8005326 <OSTaskStkChk+0xe2>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_free == (CPU_STK_SIZE*)0) {                       /* User must specify valid destinations for the sizes     */
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d104      	bne.n	8005278 <OSTaskStkChk+0x34>
       *p_err  = OS_ERR_PTR_INVALID;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	f246 22d5 	movw	r2, #25301	; 0x62d5
 8005274:	801a      	strh	r2, [r3, #0]
        return;
 8005276:	e056      	b.n	8005326 <OSTaskStkChk+0xe2>
    }

    if (p_used == (CPU_STK_SIZE*)0) {
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d104      	bne.n	8005288 <OSTaskStkChk+0x44>
       *p_err  = OS_ERR_PTR_INVALID;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	f246 22d5 	movw	r2, #25301	; 0x62d5
 8005284:	801a      	strh	r2, [r3, #0]
        return;
 8005286:	e04e      	b.n	8005326 <OSTaskStkChk+0xe2>
    }
#endif

    CPU_CRITICAL_ENTER();
 8005288:	f7fb f82a 	bl	80002e0 <CPU_SR_Save>
 800528c:	6178      	str	r0, [r7, #20]
    if (p_tcb == (OS_TCB *)0) {                             /* Check the stack of the current task?                   */
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d102      	bne.n	800529a <OSTaskStkChk+0x56>
        p_tcb = OSTCBCurPtr;                                /* Yes                                                    */
 8005294:	4b26      	ldr	r3, [pc, #152]	; (8005330 <OSTaskStkChk+0xec>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	60fb      	str	r3, [r7, #12]
    }

    if (p_tcb->StkPtr == (CPU_STK*)0) {                     /* Make sure task exist                                   */
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d10d      	bne.n	80052be <OSTaskStkChk+0x7a>
        CPU_CRITICAL_EXIT();
 80052a2:	6978      	ldr	r0, [r7, #20]
 80052a4:	f7fb f820 	bl	80002e8 <CPU_SR_Restore>
       *p_free = (CPU_STK_SIZE)0;
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	2200      	movs	r2, #0
 80052ac:	601a      	str	r2, [r3, #0]
       *p_used = (CPU_STK_SIZE)0;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	601a      	str	r2, [r3, #0]
       *p_err  =  OS_ERR_TASK_NOT_EXIST;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	f247 1252 	movw	r2, #29010	; 0x7152
 80052ba:	801a      	strh	r2, [r3, #0]
        return;
 80052bc:	e033      	b.n	8005326 <OSTaskStkChk+0xe2>
    }

    if ((p_tcb->Opt & OS_OPT_TASK_STK_CHK) == (OS_OPT)0) {  /* Make sure stack checking option is set                 */
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80052c4:	f003 0301 	and.w	r3, r3, #1
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d10d      	bne.n	80052e8 <OSTaskStkChk+0xa4>
        CPU_CRITICAL_EXIT();
 80052cc:	6978      	ldr	r0, [r7, #20]
 80052ce:	f7fb f80b 	bl	80002e8 <CPU_SR_Restore>
       *p_free = (CPU_STK_SIZE)0;
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	2200      	movs	r2, #0
 80052d6:	601a      	str	r2, [r3, #0]
       *p_used = (CPU_STK_SIZE)0;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	601a      	str	r2, [r3, #0]
       *p_err  =  OS_ERR_TASK_OPT;
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	f247 1254 	movw	r2, #29012	; 0x7154
 80052e4:	801a      	strh	r2, [r3, #0]
        return;
 80052e6:	e01e      	b.n	8005326 <OSTaskStkChk+0xe2>
    }
    CPU_CRITICAL_EXIT();
 80052e8:	6978      	ldr	r0, [r7, #20]
 80052ea:	f7fa fffd 	bl	80002e8 <CPU_SR_Restore>

    free_stk  = 0u;
 80052ee:	2300      	movs	r3, #0
 80052f0:	61fb      	str	r3, [r7, #28]
#if CPU_CFG_STK_GROWTH == CPU_STK_GROWTH_HI_TO_LO
    p_stk = p_tcb->StkBasePtr;                              /* Start at the lowest memory and go up                   */
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f6:	61bb      	str	r3, [r7, #24]
    while (*p_stk == (CPU_STK)0) {                          /* Compute the number of zero entries on the stk          */
 80052f8:	e005      	b.n	8005306 <OSTaskStkChk+0xc2>
        p_stk++;
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	3304      	adds	r3, #4
 80052fe:	61bb      	str	r3, [r7, #24]
        free_stk++;
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	3301      	adds	r3, #1
 8005304:	61fb      	str	r3, [r7, #28]
    while (*p_stk == (CPU_STK)0) {                          /* Compute the number of zero entries on the stk          */
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d0f5      	beq.n	80052fa <OSTaskStkChk+0xb6>
    while (*p_stk == (CPU_STK)0) {
        free_stk++;
        p_stk--;
    }
#endif
   *p_free = free_stk;
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	69fa      	ldr	r2, [r7, #28]
 8005312:	601a      	str	r2, [r3, #0]
   *p_used = (p_tcb->StkSize - free_stk);                   /* Compute number of entries used on the stack            */
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	1ad2      	subs	r2, r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	601a      	str	r2, [r3, #0]
   *p_err  = OS_ERR_NONE;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	2200      	movs	r2, #0
 8005324:	801a      	strh	r2, [r3, #0]
}
 8005326:	3720      	adds	r7, #32
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	2000219e 	.word	0x2000219e
 8005330:	20002174 	.word	0x20002174

08005334 <OSTaskSuspend>:
*/

#if OS_CFG_TASK_SUSPEND_EN > 0u
void   OSTaskSuspend (OS_TCB  *p_tcb,
                      OS_ERR  *p_err)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
    }
#endif

#if (OS_CFG_ISR_POST_DEFERRED_EN   == 0u) && \
    (OS_CFG_CALLED_FROM_ISR_CHK_EN >  0u)
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 800533e:	4b0c      	ldr	r3, [pc, #48]	; (8005370 <OSTaskSuspend+0x3c>)
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d004      	beq.n	8005350 <OSTaskSuspend+0x1c>
       *p_err = OS_ERR_TASK_SUSPEND_ISR;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	f247 125d 	movw	r2, #29021	; 0x715d
 800534c:	801a      	strh	r2, [r3, #0]
        return;
 800534e:	e00c      	b.n	800536a <OSTaskSuspend+0x36>
    }
#endif

    if (p_tcb == &OSIdleTaskTCB) {                          /* Make sure not suspending the idle task                 */
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a08      	ldr	r2, [pc, #32]	; (8005374 <OSTaskSuspend+0x40>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d104      	bne.n	8005362 <OSTaskSuspend+0x2e>
       *p_err = OS_ERR_TASK_SUSPEND_IDLE;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	f247 125b 	movw	r2, #29019	; 0x715b
 800535e:	801a      	strh	r2, [r3, #0]
        return;
 8005360:	e003      	b.n	800536a <OSTaskSuspend+0x36>
                    (OS_ERR    *)p_err);
        return;
    }
#endif

    OS_TaskSuspend(p_tcb, p_err);
 8005362:	6839      	ldr	r1, [r7, #0]
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 fa51 	bl	800580c <OS_TaskSuspend>
}
 800536a:	3708      	adds	r7, #8
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	2000219e 	.word	0x2000219e
 8005374:	20002270 	.word	0x20002270

08005378 <OS_TaskDbgListAdd>:
************************************************************************************************************************
*/

#if OS_CFG_DBG_EN > 0u
void  OS_TaskDbgListAdd (OS_TCB  *p_tcb)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
    p_tcb->DbgPrevPtr                = (OS_TCB *)0;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    if (OSTaskDbgListPtr == (OS_TCB *)0) {
 8005388:	4b0d      	ldr	r3, [pc, #52]	; (80053c0 <OS_TaskDbgListAdd+0x48>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d104      	bne.n	800539a <OS_TaskDbgListAdd+0x22>
        p_tcb->DbgNextPtr            = (OS_TCB *)0;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8005398:	e009      	b.n	80053ae <OS_TaskDbgListAdd+0x36>
    } else {
        p_tcb->DbgNextPtr            =  OSTaskDbgListPtr;
 800539a:	4b09      	ldr	r3, [pc, #36]	; (80053c0 <OS_TaskDbgListAdd+0x48>)
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        OSTaskDbgListPtr->DbgPrevPtr =  p_tcb;
 80053a4:	4b06      	ldr	r3, [pc, #24]	; (80053c0 <OS_TaskDbgListAdd+0x48>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    }
    OSTaskDbgListPtr                 =  p_tcb;
 80053ae:	4a04      	ldr	r2, [pc, #16]	; (80053c0 <OS_TaskDbgListAdd+0x48>)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6013      	str	r3, [r2, #0]
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bc80      	pop	{r7}
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	20002188 	.word	0x20002188

080053c4 <OS_TaskInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TaskInit (OS_ERR  *p_err)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSTaskDbgListPtr = (OS_TCB      *)0;
 80053cc:	4b08      	ldr	r3, [pc, #32]	; (80053f0 <OS_TaskInit+0x2c>)
 80053ce:	2200      	movs	r2, #0
 80053d0:	601a      	str	r2, [r3, #0]
#endif

    OSTaskQty        = (OS_OBJ_QTY   )0;                    /* Clear the number of tasks                              */
 80053d2:	4b08      	ldr	r3, [pc, #32]	; (80053f4 <OS_TaskInit+0x30>)
 80053d4:	2200      	movs	r2, #0
 80053d6:	801a      	strh	r2, [r3, #0]
    OSTaskCtxSwCtr   = (OS_CTX_SW_CTR)0;                    /* Clear the context switch counter                       */
 80053d8:	4b07      	ldr	r3, [pc, #28]	; (80053f8 <OS_TaskInit+0x34>)
 80053da:	2200      	movs	r2, #0
 80053dc:	601a      	str	r2, [r3, #0]

   *p_err            = OS_ERR_NONE;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	801a      	strh	r2, [r3, #0]
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bc80      	pop	{r7}
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	20002188 	.word	0x20002188
 80053f4:	200021a0 	.word	0x200021a0
 80053f8:	20002198 	.word	0x20002198

080053fc <OS_TaskInitTCB>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TaskInitTCB (OS_TCB  *p_tcb)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
#if OS_CFG_TASK_PROFILE_EN > 0u
    CPU_TS      ts;
#endif


    p_tcb->StkPtr             = (CPU_STK       *)0;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	601a      	str	r2, [r3, #0]
#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u))
    p_tcb->StkLimitPtr        = (CPU_STK       *)0;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	609a      	str	r2, [r3, #8]
#endif

    p_tcb->ExtPtr             = (void          *)0;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	605a      	str	r2, [r3, #4]

    p_tcb->NextPtr            = (OS_TCB        *)0;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	60da      	str	r2, [r3, #12]
    p_tcb->PrevPtr            = (OS_TCB        *)0;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	611a      	str	r2, [r3, #16]

    p_tcb->TickNextPtr        = (OS_TCB        *)0;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	615a      	str	r2, [r3, #20]
    p_tcb->TickPrevPtr        = (OS_TCB        *)0;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	619a      	str	r2, [r3, #24]
    p_tcb->TickListPtr        = (OS_TICK_LIST  *)0;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	61da      	str	r2, [r3, #28]

#if OS_CFG_DBG_EN > 0u
    p_tcb->NamePtr            = (CPU_CHAR      *)((void *)"?Task");
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a56      	ldr	r2, [pc, #344]	; (8005590 <OS_TaskInitTCB+0x194>)
 8005438:	621a      	str	r2, [r3, #32]
#endif

#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u))
    p_tcb->StkBasePtr         = (CPU_STK       *)0;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	625a      	str	r2, [r3, #36]	; 0x24
#endif

#if OS_CFG_DBG_EN > 0u
    p_tcb->TaskEntryAddr      = (OS_TASK_PTR    )0;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	629a      	str	r2, [r3, #40]	; 0x28
    p_tcb->TaskEntryArg       = (void          *)0;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif

#if (OS_CFG_PEND_MULTI_EN > 0u)
    p_tcb->PendDataTblPtr     = (OS_PEND_DATA  *)0;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	631a      	str	r2, [r3, #48]	; 0x30
    p_tcb->PendDataTblEntries = (OS_OBJ_QTY     )0u;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
#endif

    p_tcb->TS                 = (CPU_TS         )0u;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	649a      	str	r2, [r3, #72]	; 0x48

#if (OS_MSG_EN > 0u)
    p_tcb->MsgPtr             = (void          *)0;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	659a      	str	r2, [r3, #88]	; 0x58
    p_tcb->MsgSize            = (OS_MSG_SIZE    )0u;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
#endif

#if OS_CFG_TASK_Q_EN > 0u
    OS_MsgQInit(&p_tcb->MsgQ,
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	3360      	adds	r3, #96	; 0x60
 8005472:	2100      	movs	r1, #0
 8005474:	4618      	mov	r0, r3
 8005476:	f7ff fba1 	bl	8004bbc <OS_MsgQInit>
                (OS_MSG_QTY)0u);
#if OS_CFG_TASK_PROFILE_EN > 0u
    p_tcb->MsgQPendTime       = (CPU_TS         )0u;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	671a      	str	r2, [r3, #112]	; 0x70
    p_tcb->MsgQPendTimeMax    = (CPU_TS         )0u;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	675a      	str	r2, [r3, #116]	; 0x74
#endif
#endif

#if OS_CFG_FLAG_EN > 0u
    p_tcb->FlagsPend          = (OS_FLAGS       )0u;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	67da      	str	r2, [r3, #124]	; 0x7c
    p_tcb->FlagsOpt           = (OS_OPT         )0u;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
    p_tcb->FlagsRdy           = (OS_FLAGS       )0u;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

#if OS_CFG_TASK_REG_TBL_SIZE > 0u
    for (reg_id = 0u; reg_id < OS_CFG_TASK_REG_TBL_SIZE; reg_id++) {
 800549c:	2300      	movs	r3, #0
 800549e:	73fb      	strb	r3, [r7, #15]
 80054a0:	e008      	b.n	80054b4 <OS_TaskInitTCB+0xb8>
        p_tcb->RegTbl[reg_id] = (OS_REG)0u;
 80054a2:	7bfa      	ldrb	r2, [r7, #15]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	321e      	adds	r2, #30
 80054a8:	2100      	movs	r1, #0
 80054aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (reg_id = 0u; reg_id < OS_CFG_TASK_REG_TBL_SIZE; reg_id++) {
 80054ae:	7bfb      	ldrb	r3, [r7, #15]
 80054b0:	3301      	adds	r3, #1
 80054b2:	73fb      	strb	r3, [r7, #15]
 80054b4:	7bfb      	ldrb	r3, [r7, #15]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d0f3      	beq.n	80054a2 <OS_TaskInitTCB+0xa6>
    for (id = 0u; id < OS_CFG_TLS_TBL_SIZE; id++) {
        p_tcb->TLS_Tbl[id]    = (OS_TLS)0;
    }
#endif

    p_tcb->SemCtr             = (OS_SEM_CTR     )0u;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	64da      	str	r2, [r3, #76]	; 0x4c
#if OS_CFG_TASK_PROFILE_EN > 0u
    p_tcb->SemPendTime        = (CPU_TS         )0u;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    p_tcb->SemPendTimeMax     = (CPU_TS         )0u;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#endif

#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u))
    p_tcb->StkSize            = (CPU_STK_SIZE   )0u;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	641a      	str	r2, [r3, #64]	; 0x40
#endif


#if OS_CFG_TASK_SUSPEND_EN > 0u
    p_tcb->SuspendCtr         = (OS_NESTING_CTR )0u;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
#endif

#if OS_CFG_STAT_TASK_STK_CHK_EN > 0u
    p_tcb->StkFree            = (CPU_STK_SIZE   )0u;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    p_tcb->StkUsed            = (CPU_STK_SIZE   )0u;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
#endif

    p_tcb->Opt                = (OS_OPT         )0u;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    p_tcb->TickRemain         = (OS_TICK        )0u;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	651a      	str	r2, [r3, #80]	; 0x50
    p_tcb->TickCtrPrev        = (OS_TICK        )0u;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	655a      	str	r2, [r3, #84]	; 0x54
    p_tcb->TimeQuanta         = (OS_TICK        )0u;
    p_tcb->TimeQuantaCtr      = (OS_TICK        )0u;
#endif

#if OS_CFG_TASK_PROFILE_EN > 0u
    p_tcb->CPUUsage           = (OS_CPU_USAGE   )0u;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    p_tcb->CPUUsageMax        = (OS_CPU_USAGE   )0u;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
    p_tcb->CtxSwCtr           = (OS_CTX_SW_CTR  )0u;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    p_tcb->CyclesDelta        = (CPU_TS         )0u;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ts                        = OS_TS_GET();                /* Read the current timestamp and save                    */
 8005522:	f000 ff2f 	bl	8006384 <CPU_TS_TmrRd>
 8005526:	60b8      	str	r0, [r7, #8]
    p_tcb->CyclesStart        = ts;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    p_tcb->CyclesTotal        = (OS_CYCLES      )0u;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif
#ifdef CPU_CFG_INT_DIS_MEAS_EN
    p_tcb->IntDisTimeMax      = (CPU_TS         )0u;
#endif
#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
    p_tcb->SchedLockTimeMax   = (CPU_TS         )0u;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
#endif

    p_tcb->PendOn             = (OS_STATE       )OS_TASK_PEND_ON_NOTHING;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    p_tcb->PendStatus         = (OS_STATUS      )OS_STATUS_PEND_OK;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    p_tcb->TaskState          = (OS_STATE       )OS_TASK_STATE_RDY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

    p_tcb->Prio               = (OS_PRIO        )OS_PRIO_INIT;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2220      	movs	r2, #32
 800555c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
#if OS_CFG_MUTEX_EN > 0u
    p_tcb->BasePrio           = (OS_PRIO        )OS_PRIO_INIT;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2220      	movs	r2, #32
 8005564:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    p_tcb->MutexGrpHeadPtr    = (OS_MUTEX      *)0;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif

#if OS_CFG_DBG_EN > 0u
    p_tcb->DbgPrevPtr         = (OS_TCB        *)0;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    p_tcb->DbgNextPtr         = (OS_TCB        *)0;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    p_tcb->DbgNamePtr         = (CPU_CHAR      *)((void *)" ");
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a04      	ldr	r2, [pc, #16]	; (8005594 <OS_TaskInitTCB+0x198>)
 8005582:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
#endif
}
 8005586:	bf00      	nop
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	0800e8d4 	.word	0x0800e8d4
 8005594:	0800e8dc 	.word	0x0800e8dc

08005598 <OS_TaskResume>:
*/

#if OS_CFG_TASK_SUSPEND_EN > 0u
void  OS_TaskResume (OS_TCB  *p_tcb,
                     OS_ERR  *p_err)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
    CPU_SR_ALLOC();
 80055a2:	2300      	movs	r3, #0
 80055a4:	60fb      	str	r3, [r7, #12]


    CPU_CRITICAL_ENTER();
 80055a6:	f7fa fe9b 	bl	80002e0 <CPU_SR_Save>
 80055aa:	60f8      	str	r0, [r7, #12]
   *p_err  = OS_ERR_NONE;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	2200      	movs	r2, #0
 80055b0:	801a      	strh	r2, [r3, #0]
    switch (p_tcb->TaskState) {
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80055b8:	2b07      	cmp	r3, #7
 80055ba:	d872      	bhi.n	80056a2 <OS_TaskResume+0x10a>
 80055bc:	a201      	add	r2, pc, #4	; (adr r2, 80055c4 <OS_TaskResume+0x2c>)
 80055be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c2:	bf00      	nop
 80055c4:	080055e5 	.word	0x080055e5
 80055c8:	080055e5 	.word	0x080055e5
 80055cc:	080055e5 	.word	0x080055e5
 80055d0:	080055e5 	.word	0x080055e5
 80055d4:	080055f5 	.word	0x080055f5
 80055d8:	08005625 	.word	0x08005625
 80055dc:	0800564f 	.word	0x0800564f
 80055e0:	08005679 	.word	0x08005679
        case OS_TASK_STATE_RDY:
        case OS_TASK_STATE_DLY:
        case OS_TASK_STATE_PEND:
        case OS_TASK_STATE_PEND_TIMEOUT:
             CPU_CRITICAL_EXIT();
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f7fa fe7f 	bl	80002e8 <CPU_SR_Restore>
            *p_err = OS_ERR_TASK_NOT_SUSPENDED;
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	f247 1253 	movw	r2, #29011	; 0x7153
 80055f0:	801a      	strh	r2, [r3, #0]
             break;
 80055f2:	e05e      	b.n	80056b2 <OS_TaskResume+0x11a>

        case OS_TASK_STATE_SUSPENDED:
             OS_CRITICAL_ENTER_CPU_EXIT();
             p_tcb->SuspendCtr--;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80055fa:	3b01      	subs	r3, #1
 80055fc:	b2da      	uxtb	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             if (p_tcb->SuspendCtr == (OS_NESTING_CTR)0) {
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800560a:	2b00      	cmp	r3, #0
 800560c:	d106      	bne.n	800561c <OS_TaskResume+0x84>
                 p_tcb->TaskState = OS_TASK_STATE_RDY;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                 OS_RdyListInsert(p_tcb);                            /* Insert the task in the ready list                      */
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f7ff f918 	bl	800484c <OS_RdyListInsert>
             }
             OS_CRITICAL_EXIT_NO_SCHED();
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f7fa fe63 	bl	80002e8 <CPU_SR_Restore>
             break;
 8005622:	e046      	b.n	80056b2 <OS_TaskResume+0x11a>

        case OS_TASK_STATE_DLY_SUSPENDED:
             p_tcb->SuspendCtr--;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800562a:	3b01      	subs	r3, #1
 800562c:	b2da      	uxtb	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             if (p_tcb->SuspendCtr == (OS_NESTING_CTR)0) {
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800563a:	2b00      	cmp	r3, #0
 800563c:	d103      	bne.n	8005646 <OS_TaskResume+0xae>
                 p_tcb->TaskState = OS_TASK_STATE_DLY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             }
             CPU_CRITICAL_EXIT();
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f7fa fe4e 	bl	80002e8 <CPU_SR_Restore>
             break;
 800564c:	e031      	b.n	80056b2 <OS_TaskResume+0x11a>

        case OS_TASK_STATE_PEND_SUSPENDED:
             p_tcb->SuspendCtr--;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8005654:	3b01      	subs	r3, #1
 8005656:	b2da      	uxtb	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             if (p_tcb->SuspendCtr == (OS_NESTING_CTR)0) {
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8005664:	2b00      	cmp	r3, #0
 8005666:	d103      	bne.n	8005670 <OS_TaskResume+0xd8>
                 p_tcb->TaskState = OS_TASK_STATE_PEND;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2202      	movs	r2, #2
 800566c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             }
             CPU_CRITICAL_EXIT();
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f7fa fe39 	bl	80002e8 <CPU_SR_Restore>
             break;
 8005676:	e01c      	b.n	80056b2 <OS_TaskResume+0x11a>

        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
             p_tcb->SuspendCtr--;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800567e:	3b01      	subs	r3, #1
 8005680:	b2da      	uxtb	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             if (p_tcb->SuspendCtr == (OS_NESTING_CTR)0) {
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800568e:	2b00      	cmp	r3, #0
 8005690:	d103      	bne.n	800569a <OS_TaskResume+0x102>
                 p_tcb->TaskState = OS_TASK_STATE_PEND_TIMEOUT;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2203      	movs	r2, #3
 8005696:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             }
             CPU_CRITICAL_EXIT();
 800569a:	68f8      	ldr	r0, [r7, #12]
 800569c:	f7fa fe24 	bl	80002e8 <CPU_SR_Restore>
             break;
 80056a0:	e007      	b.n	80056b2 <OS_TaskResume+0x11a>

        default:
             CPU_CRITICAL_EXIT();
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	f7fa fe20 	bl	80002e8 <CPU_SR_Restore>
            *p_err = OS_ERR_STATE_INVALID;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	f646 622d 	movw	r2, #28205	; 0x6e2d
 80056ae:	801a      	strh	r2, [r3, #0]
             return;
 80056b0:	e001      	b.n	80056b6 <OS_TaskResume+0x11e>
    }

    OSSched();
 80056b2:	f7fe fc75 	bl	8003fa0 <OSSched>
}
 80056b6:	3710      	adds	r7, #16
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <OS_TaskReturn>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TaskReturn (void)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
    OS_ERR  err;



    OSTaskReturnHook(OSTCBCurPtr);                          /* Call hook to let user decide on what to do             */
 80056c2:	4b06      	ldr	r3, [pc, #24]	; (80056dc <OS_TaskReturn+0x20>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f000 fc5e 	bl	8005f88 <OSTaskReturnHook>
#if OS_CFG_TASK_DEL_EN > 0u
    OSTaskDel((OS_TCB *)0,                                  /* Delete task if it accidentally returns!                */
              (OS_ERR *)&err);
#else
    for (;;) {
        OSTimeDly((OS_TICK )OSCfg_TickRate_Hz,
 80056cc:	4b04      	ldr	r3, [pc, #16]	; (80056e0 <OS_TaskReturn+0x24>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	1dba      	adds	r2, r7, #6
 80056d2:	2100      	movs	r1, #0
 80056d4:	4618      	mov	r0, r3
 80056d6:	f7fd fdb1 	bl	800323c <OSTimeDly>
 80056da:	e7f7      	b.n	80056cc <OS_TaskReturn+0x10>
 80056dc:	20002174 	.word	0x20002174
 80056e0:	0800eae0 	.word	0x0800eae0

080056e4 <OS_TaskSemPost>:

OS_SEM_CTR  OS_TaskSemPost (OS_TCB  *p_tcb,
                            OS_OPT   opt,
                            CPU_TS   ts,
                            OS_ERR  *p_err)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b088      	sub	sp, #32
 80056e8:	af02      	add	r7, sp, #8
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	607a      	str	r2, [r7, #4]
 80056ee:	603b      	str	r3, [r7, #0]
 80056f0:	460b      	mov	r3, r1
 80056f2:	817b      	strh	r3, [r7, #10]
    OS_SEM_CTR  ctr;
    CPU_SR_ALLOC();
 80056f4:	2300      	movs	r3, #0
 80056f6:	613b      	str	r3, [r7, #16]



    OS_CRITICAL_ENTER();
 80056f8:	f7fa fdf2 	bl	80002e0 <CPU_SR_Save>
 80056fc:	6138      	str	r0, [r7, #16]
    if (p_tcb == (OS_TCB *)0) {                             /* Post signal to 'self'?                                 */
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d102      	bne.n	800570a <OS_TaskSemPost+0x26>
        p_tcb = OSTCBCurPtr;
 8005704:	4b40      	ldr	r3, [pc, #256]	; (8005808 <OS_TaskSemPost+0x124>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	60fb      	str	r3, [r7, #12]
    }
    p_tcb->TS = ts;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	649a      	str	r2, [r3, #72]	; 0x48
   *p_err     = OS_ERR_NONE;                                /* Assume we won't have any errors                        */
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	2200      	movs	r2, #0
 8005714:	801a      	strh	r2, [r3, #0]
    switch (p_tcb->TaskState) {
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800571c:	2b07      	cmp	r3, #7
 800571e:	d863      	bhi.n	80057e8 <OS_TaskSemPost+0x104>
 8005720:	a201      	add	r2, pc, #4	; (adr r2, 8005728 <OS_TaskSemPost+0x44>)
 8005722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005726:	bf00      	nop
 8005728:	08005749 	.word	0x08005749
 800572c:	08005749 	.word	0x08005749
 8005730:	0800577f 	.word	0x0800577f
 8005734:	0800577f 	.word	0x0800577f
 8005738:	08005749 	.word	0x08005749
 800573c:	08005749 	.word	0x08005749
 8005740:	0800577f 	.word	0x0800577f
 8005744:	0800577f 	.word	0x0800577f
                          return ((OS_SEM_CTR)0);
                      }
                      break;

                 case 4u:
                      if (p_tcb->SemCtr == DEF_INT_32U_MAX_VAL) {
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800574c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005750:	d108      	bne.n	8005764 <OS_TaskSemPost+0x80>
                          OS_CRITICAL_EXIT();
 8005752:	6938      	ldr	r0, [r7, #16]
 8005754:	f7fa fdc8 	bl	80002e8 <CPU_SR_Restore>
                         *p_err = OS_ERR_SEM_OVF;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	f646 52c5 	movw	r2, #28101	; 0x6dc5
 800575e:	801a      	strh	r2, [r3, #0]
                          return ((OS_SEM_CTR)0);
 8005760:	2300      	movs	r3, #0
 8005762:	e04d      	b.n	8005800 <OS_TaskSemPost+0x11c>
                      }
                      break;
 8005764:	bf00      	nop

                 default:
                      break;
             }
             p_tcb->SemCtr++;                               /* Task signaled is not pending on anything               */
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800576a:	1c5a      	adds	r2, r3, #1
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	64da      	str	r2, [r3, #76]	; 0x4c
             ctr = p_tcb->SemCtr;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005774:	617b      	str	r3, [r7, #20]
             OS_CRITICAL_EXIT();
 8005776:	6938      	ldr	r0, [r7, #16]
 8005778:	f7fa fdb6 	bl	80002e8 <CPU_SR_Restore>
             break;
 800577c:	e03f      	b.n	80057fe <OS_TaskSemPost+0x11a>

        case OS_TASK_STATE_PEND:
        case OS_TASK_STATE_PEND_TIMEOUT:
        case OS_TASK_STATE_PEND_SUSPENDED:
        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
             if (p_tcb->PendOn == OS_TASK_PEND_ON_TASK_SEM) {   /* Is task signaled waiting for a signal?             */
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005784:	2b07      	cmp	r3, #7
 8005786:	d114      	bne.n	80057b2 <OS_TaskSemPost+0xce>
                 OS_Post((OS_PEND_OBJ *)0,                      /*      Task is pending on signal                     */
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	9300      	str	r3, [sp, #0]
 800578c:	2300      	movs	r3, #0
 800578e:	2200      	movs	r2, #0
 8005790:	68f9      	ldr	r1, [r7, #12]
 8005792:	2000      	movs	r0, #0
 8005794:	f7fe ff6e 	bl	8004674 <OS_Post>
                         (OS_TCB      *)p_tcb,
                         (void        *)0,
                         (OS_MSG_SIZE  )0u,
                         (CPU_TS       )ts);
                 ctr = p_tcb->SemCtr;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800579c:	617b      	str	r3, [r7, #20]
                 OS_CRITICAL_EXIT_NO_SCHED();
 800579e:	6938      	ldr	r0, [r7, #16]
 80057a0:	f7fa fda2 	bl	80002e8 <CPU_SR_Restore>
                 if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0) {
 80057a4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	db27      	blt.n	80057fc <OS_TaskSemPost+0x118>
                     OSSched();                                 /* Run the scheduler                                  */
 80057ac:	f7fe fbf8 	bl	8003fa0 <OSSched>
                 }
                 p_tcb->SemCtr++;                           /* No,  Task signaled is NOT pending on semaphore ...     */
                 ctr = p_tcb->SemCtr;                       /*      ... it must be waiting on something else          */
                 OS_CRITICAL_EXIT();
             }
             break;
 80057b0:	e024      	b.n	80057fc <OS_TaskSemPost+0x118>
                          if (p_tcb->SemCtr == DEF_INT_32U_MAX_VAL) {
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057ba:	d108      	bne.n	80057ce <OS_TaskSemPost+0xea>
                              OS_CRITICAL_EXIT();
 80057bc:	6938      	ldr	r0, [r7, #16]
 80057be:	f7fa fd93 	bl	80002e8 <CPU_SR_Restore>
                             *p_err = OS_ERR_SEM_OVF;
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	f646 52c5 	movw	r2, #28101	; 0x6dc5
 80057c8:	801a      	strh	r2, [r3, #0]
                              return ((OS_SEM_CTR)0);
 80057ca:	2300      	movs	r3, #0
 80057cc:	e018      	b.n	8005800 <OS_TaskSemPost+0x11c>
                          break;
 80057ce:	bf00      	nop
                 p_tcb->SemCtr++;                           /* No,  Task signaled is NOT pending on semaphore ...     */
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057d4:	1c5a      	adds	r2, r3, #1
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	64da      	str	r2, [r3, #76]	; 0x4c
                 ctr = p_tcb->SemCtr;                       /*      ... it must be waiting on something else          */
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057de:	617b      	str	r3, [r7, #20]
                 OS_CRITICAL_EXIT();
 80057e0:	6938      	ldr	r0, [r7, #16]
 80057e2:	f7fa fd81 	bl	80002e8 <CPU_SR_Restore>
             break;
 80057e6:	e009      	b.n	80057fc <OS_TaskSemPost+0x118>

        default:
             OS_CRITICAL_EXIT();
 80057e8:	6938      	ldr	r0, [r7, #16]
 80057ea:	f7fa fd7d 	bl	80002e8 <CPU_SR_Restore>
            *p_err = OS_ERR_STATE_INVALID;
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	f646 622d 	movw	r2, #28205	; 0x6e2d
 80057f4:	801a      	strh	r2, [r3, #0]
             ctr   = (OS_SEM_CTR)0;
 80057f6:	2300      	movs	r3, #0
 80057f8:	617b      	str	r3, [r7, #20]
             break;
 80057fa:	e000      	b.n	80057fe <OS_TaskSemPost+0x11a>
             break;
 80057fc:	bf00      	nop
    }
    return (ctr);
 80057fe:	697b      	ldr	r3, [r7, #20]
}
 8005800:	4618      	mov	r0, r3
 8005802:	3718      	adds	r7, #24
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	20002174 	.word	0x20002174

0800580c <OS_TaskSuspend>:
*/

#if OS_CFG_TASK_SUSPEND_EN > 0u
void  OS_TaskSuspend (OS_TCB  *p_tcb,
                      OS_ERR  *p_err)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
    CPU_SR_ALLOC();
 8005816:	2300      	movs	r3, #0
 8005818:	60fb      	str	r3, [r7, #12]


    CPU_CRITICAL_ENTER();
 800581a:	f7fa fd61 	bl	80002e0 <CPU_SR_Save>
 800581e:	60f8      	str	r0, [r7, #12]
    if (p_tcb == (OS_TCB *)0) {                             /* See if specified to suspend self                       */
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d102      	bne.n	800582c <OS_TaskSuspend+0x20>
        p_tcb = OSTCBCurPtr;
 8005826:	4b3d      	ldr	r3, [pc, #244]	; (800591c <OS_TaskSuspend+0x110>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	607b      	str	r3, [r7, #4]
    }

    if (p_tcb == OSTCBCurPtr) {
 800582c:	4b3b      	ldr	r3, [pc, #236]	; (800591c <OS_TaskSuspend+0x110>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	429a      	cmp	r2, r3
 8005834:	d10b      	bne.n	800584e <OS_TaskSuspend+0x42>
        if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {    /* Can't suspend when the scheduler is locked             */
 8005836:	4b3a      	ldr	r3, [pc, #232]	; (8005920 <OS_TaskSuspend+0x114>)
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d007      	beq.n	800584e <OS_TaskSuspend+0x42>
            CPU_CRITICAL_EXIT();
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f7fa fd52 	bl	80002e8 <CPU_SR_Restore>
           *p_err = OS_ERR_SCHED_LOCKED;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	f646 5263 	movw	r2, #28003	; 0x6d63
 800584a:	801a      	strh	r2, [r3, #0]
            return;
 800584c:	e063      	b.n	8005916 <OS_TaskSuspend+0x10a>
        }
    }

   *p_err = OS_ERR_NONE;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	2200      	movs	r2, #0
 8005852:	801a      	strh	r2, [r3, #0]
    switch (p_tcb->TaskState) {
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800585a:	2b07      	cmp	r3, #7
 800585c:	d851      	bhi.n	8005902 <OS_TaskSuspend+0xf6>
 800585e:	a201      	add	r2, pc, #4	; (adr r2, 8005864 <OS_TaskSuspend+0x58>)
 8005860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005864:	08005885 	.word	0x08005885
 8005868:	080058a3 	.word	0x080058a3
 800586c:	080058bb 	.word	0x080058bb
 8005870:	080058d3 	.word	0x080058d3
 8005874:	080058eb 	.word	0x080058eb
 8005878:	080058eb 	.word	0x080058eb
 800587c:	080058eb 	.word	0x080058eb
 8005880:	080058eb 	.word	0x080058eb
        case OS_TASK_STATE_RDY:
             OS_CRITICAL_ENTER_CPU_EXIT();
             p_tcb->TaskState  =  OS_TASK_STATE_SUSPENDED;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2204      	movs	r2, #4
 8005888:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             p_tcb->SuspendCtr = (OS_NESTING_CTR)1;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             OS_RdyListRemove(p_tcb);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f7ff f877 	bl	8004988 <OS_RdyListRemove>
             OS_CRITICAL_EXIT_NO_SCHED();
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f7fa fd24 	bl	80002e8 <CPU_SR_Restore>
             break;
 80058a0:	e037      	b.n	8005912 <OS_TaskSuspend+0x106>

        case OS_TASK_STATE_DLY:
             p_tcb->TaskState  = OS_TASK_STATE_DLY_SUSPENDED;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2205      	movs	r2, #5
 80058a6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             p_tcb->SuspendCtr = (OS_NESTING_CTR)1;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2201      	movs	r2, #1
 80058ae:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             CPU_CRITICAL_EXIT();
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	f7fa fd18 	bl	80002e8 <CPU_SR_Restore>
             break;
 80058b8:	e02b      	b.n	8005912 <OS_TaskSuspend+0x106>

        case OS_TASK_STATE_PEND:
             p_tcb->TaskState  = OS_TASK_STATE_PEND_SUSPENDED;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2206      	movs	r2, #6
 80058be:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             p_tcb->SuspendCtr = (OS_NESTING_CTR)1;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             CPU_CRITICAL_EXIT();
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f7fa fd0c 	bl	80002e8 <CPU_SR_Restore>
             break;
 80058d0:	e01f      	b.n	8005912 <OS_TaskSuspend+0x106>

        case OS_TASK_STATE_PEND_TIMEOUT:
             p_tcb->TaskState  = OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2207      	movs	r2, #7
 80058d6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             p_tcb->SuspendCtr = (OS_NESTING_CTR)1;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2201      	movs	r2, #1
 80058de:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             CPU_CRITICAL_EXIT();
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f7fa fd00 	bl	80002e8 <CPU_SR_Restore>
             break;
 80058e8:	e013      	b.n	8005912 <OS_TaskSuspend+0x106>

        case OS_TASK_STATE_SUSPENDED:
        case OS_TASK_STATE_DLY_SUSPENDED:
        case OS_TASK_STATE_PEND_SUSPENDED:
        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
             p_tcb->SuspendCtr++;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80058f0:	3301      	adds	r3, #1
 80058f2:	b2da      	uxtb	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             CPU_CRITICAL_EXIT();
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f7fa fcf4 	bl	80002e8 <CPU_SR_Restore>
             break;
 8005900:	e007      	b.n	8005912 <OS_TaskSuspend+0x106>

        default:
             CPU_CRITICAL_EXIT();
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f7fa fcf0 	bl	80002e8 <CPU_SR_Restore>
            *p_err = OS_ERR_STATE_INVALID;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	f646 622d 	movw	r2, #28205	; 0x6e2d
 800590e:	801a      	strh	r2, [r3, #0]
             return;
 8005910:	e001      	b.n	8005916 <OS_TaskSuspend+0x10a>
    }

    OSSched();
 8005912:	f7fe fb45 	bl	8003fa0 <OSSched>
}
 8005916:	3710      	adds	r7, #16
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	20002174 	.word	0x20002174
 8005920:	20001f08 	.word	0x20001f08

08005924 <OS_TaskChangePrio>:
************************************************************************************************************************
*/

void  OS_TaskChangePrio(OS_TCB  *p_tcb,
                        OS_PRIO  prio_new)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	460b      	mov	r3, r1
 800592e:	70fb      	strb	r3, [r7, #3]
    OS_PRIO  prio_cur;
#endif


    do {
        p_tcb_owner = (OS_TCB *)0;
 8005930:	2300      	movs	r3, #0
 8005932:	60fb      	str	r3, [r7, #12]
#if OS_CFG_MUTEX_EN > 0
        prio_cur    = p_tcb->Prio;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800593a:	72fb      	strb	r3, [r7, #11]
#endif
        switch (p_tcb->TaskState) {
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005942:	2b07      	cmp	r3, #7
 8005944:	f200 808c 	bhi.w	8005a60 <OS_TaskChangePrio+0x13c>
 8005948:	a201      	add	r2, pc, #4	; (adr r2, 8005950 <OS_TaskChangePrio+0x2c>)
 800594a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800594e:	bf00      	nop
 8005950:	08005971 	.word	0x08005971
 8005954:	080059a5 	.word	0x080059a5
 8005958:	080059af 	.word	0x080059af
 800595c:	080059af 	.word	0x080059af
 8005960:	080059a5 	.word	0x080059a5
 8005964:	080059a5 	.word	0x080059a5
 8005968:	080059af 	.word	0x080059af
 800596c:	080059af 	.word	0x080059af
            case OS_TASK_STATE_RDY:
                 OS_RdyListRemove(p_tcb);                   /* Remove from current priority                           */
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f7ff f809 	bl	8004988 <OS_RdyListRemove>
                 p_tcb->Prio = prio_new;                    /* Set new task priority                                  */
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	78fa      	ldrb	r2, [r7, #3]
 800597a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                 OS_PrioInsert(p_tcb->Prio);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8005984:	4618      	mov	r0, r3
 8005986:	f7fd fe23 	bl	80035d0 <OS_PrioInsert>
                 if (p_tcb == OSTCBCurPtr) {
 800598a:	4b37      	ldr	r3, [pc, #220]	; (8005a68 <OS_TaskChangePrio+0x144>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	429a      	cmp	r2, r3
 8005992:	d103      	bne.n	800599c <OS_TaskChangePrio+0x78>
                     OS_RdyListInsertHead(p_tcb);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f7fe ff77 	bl	8004888 <OS_RdyListInsertHead>
                 } else {
                     OS_RdyListInsertTail(p_tcb);
                 }
                 break;
 800599a:	e05a      	b.n	8005a52 <OS_TaskChangePrio+0x12e>
                     OS_RdyListInsertTail(p_tcb);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f7fe ffb3 	bl	8004908 <OS_RdyListInsertTail>
                 break;
 80059a2:	e056      	b.n	8005a52 <OS_TaskChangePrio+0x12e>

            case OS_TASK_STATE_DLY:                         /* Nothing to do except change the priority in the OS_TCB */
            case OS_TASK_STATE_SUSPENDED:
            case OS_TASK_STATE_DLY_SUSPENDED:
                 p_tcb->Prio = prio_new;                    /* Set new task priority                                  */
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	78fa      	ldrb	r2, [r7, #3]
 80059a8:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                 break;
 80059ac:	e051      	b.n	8005a52 <OS_TaskChangePrio+0x12e>

            case OS_TASK_STATE_PEND:
            case OS_TASK_STATE_PEND_TIMEOUT:
            case OS_TASK_STATE_PEND_SUSPENDED:
            case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
                 p_tcb->Prio = prio_new;                    /* Set new task priority                                  */
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	78fa      	ldrb	r2, [r7, #3]
 80059b2:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                 switch (p_tcb->PendOn) {                   /* What to do depends on what we are pending on           */
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80059bc:	3b01      	subs	r3, #1
 80059be:	2b05      	cmp	r3, #5
 80059c0:	d843      	bhi.n	8005a4a <OS_TaskChangePrio+0x126>
 80059c2:	a201      	add	r2, pc, #4	; (adr r2, 80059c8 <OS_TaskChangePrio+0xa4>)
 80059c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c8:	080059e1 	.word	0x080059e1
 80059cc:	08005a4b 	.word	0x08005a4b
 80059d0:	080059e1 	.word	0x080059e1
 80059d4:	080059e9 	.word	0x080059e9
 80059d8:	080059e1 	.word	0x080059e1
 80059dc:	080059e1 	.word	0x080059e1
                     case OS_TASK_PEND_ON_FLAG:
                     case OS_TASK_PEND_ON_MULTI:
                     case OS_TASK_PEND_ON_Q:
                     case OS_TASK_PEND_ON_SEM:
                          OS_PendListChangePrio(p_tcb);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f7fe fd23 	bl	800442c <OS_PendListChangePrio>
                          break;
 80059e6:	e033      	b.n	8005a50 <OS_TaskChangePrio+0x12c>

                     case OS_TASK_PEND_ON_MUTEX:
#if OS_CFG_MUTEX_EN > 0
                          OS_PendListChangePrio(p_tcb);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f7fe fd1f 	bl	800442c <OS_PendListChangePrio>
                          p_tcb_owner = ((OS_MUTEX *)p_tcb->PendDataTblPtr->PendObjPtr)->OwnerTCBPtr;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f6:	60fb      	str	r3, [r7, #12]
                          if (prio_cur > prio_new) {         /* Are we increasing the priority?                        */
 80059f8:	7afa      	ldrb	r2, [r7, #11]
 80059fa:	78fb      	ldrb	r3, [r7, #3]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d908      	bls.n	8005a12 <OS_TaskChangePrio+0xee>
                              if (p_tcb_owner->Prio <= prio_new) {/* Yes, do we need to give this prio to the owner?   */
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8005a06:	78fa      	ldrb	r2, [r7, #3]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d320      	bcc.n	8005a4e <OS_TaskChangePrio+0x12a>
                                  p_tcb_owner = (OS_TCB *)0;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	60fb      	str	r3, [r7, #12]
#endif
                                  }
                              }
                          }
#endif
                         break;
 8005a10:	e01d      	b.n	8005a4e <OS_TaskChangePrio+0x12a>
                              if (p_tcb_owner->Prio == prio_cur) {/* No, is it required to check for a lower prio?     */
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8005a18:	7afa      	ldrb	r2, [r7, #11]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d117      	bne.n	8005a4e <OS_TaskChangePrio+0x12a>
                                  prio_new = OS_MutexGrpPrioFindHighest(p_tcb_owner);
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f7fd f88f 	bl	8002b42 <OS_MutexGrpPrioFindHighest>
 8005a24:	4603      	mov	r3, r0
 8005a26:	70fb      	strb	r3, [r7, #3]
                                  prio_new = prio_new > p_tcb_owner->BasePrio ? p_tcb_owner->BasePrio : prio_new;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005a2e:	78fa      	ldrb	r2, [r7, #3]
 8005a30:	4293      	cmp	r3, r2
 8005a32:	bf28      	it	cs
 8005a34:	4613      	movcs	r3, r2
 8005a36:	70fb      	strb	r3, [r7, #3]
                                  if (prio_new == p_tcb_owner->Prio) {
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8005a3e:	78fa      	ldrb	r2, [r7, #3]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d104      	bne.n	8005a4e <OS_TaskChangePrio+0x12a>
                                      p_tcb_owner = (OS_TCB *)0;
 8005a44:	2300      	movs	r3, #0
 8005a46:	60fb      	str	r3, [r7, #12]
                         break;
 8005a48:	e001      	b.n	8005a4e <OS_TaskChangePrio+0x12a>

                     case OS_TASK_PEND_ON_TASK_Q:
                     case OS_TASK_PEND_ON_TASK_SEM:
                     default:
                          break;
 8005a4a:	bf00      	nop
 8005a4c:	e000      	b.n	8005a50 <OS_TaskChangePrio+0x12c>
                         break;
 8005a4e:	bf00      	nop
                 }
                 break;
 8005a50:	bf00      	nop

            default:
                 return;
        }
        p_tcb = p_tcb_owner;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	607b      	str	r3, [r7, #4]
    } while (p_tcb != (OS_TCB *)0);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f47f af69 	bne.w	8005930 <OS_TaskChangePrio+0xc>
 8005a5e:	e000      	b.n	8005a62 <OS_TaskChangePrio+0x13e>
                 return;
 8005a60:	bf00      	nop
}
 8005a62:	3710      	adds	r7, #16
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	20002174 	.word	0x20002174

08005a6c <OSQCreate>:
void  OSQCreate (OS_Q        *p_q,
                 CPU_CHAR    *p_name,
                 OS_MSG_QTY   max_qty,
                 OS_ERR      *p_err)

{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b086      	sub	sp, #24
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	603b      	str	r3, [r7, #0]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	80fb      	strh	r3, [r7, #6]
    CPU_SR_ALLOC();
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to be called from an ISR                   */
 8005a80:	4b1f      	ldr	r3, [pc, #124]	; (8005b00 <OSQCreate+0x94>)
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d004      	beq.n	8005a92 <OSQCreate+0x26>
       *p_err = OS_ERR_CREATE_ISR;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	f642 62e1 	movw	r2, #12001	; 0x2ee1
 8005a8e:	801a      	strh	r2, [r3, #0]
        return;
 8005a90:	e033      	b.n	8005afa <OSQCreate+0x8e>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_q == (OS_Q *)0) {                                 /* Validate arguments                                     */
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d104      	bne.n	8005aa2 <OSQCreate+0x36>
       *p_err = OS_ERR_OBJ_PTR_NULL;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	f645 52c3 	movw	r2, #24003	; 0x5dc3
 8005a9e:	801a      	strh	r2, [r3, #0]
        return;
 8005aa0:	e02b      	b.n	8005afa <OSQCreate+0x8e>
    }
    if (max_qty == (OS_MSG_QTY)0) {                         /* Cannot specify a zero size queue                       */
 8005aa2:	88fb      	ldrh	r3, [r7, #6]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d104      	bne.n	8005ab2 <OSQCreate+0x46>
       *p_err = OS_ERR_Q_SIZE;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	f246 5294 	movw	r2, #26004	; 0x6594
 8005aae:	801a      	strh	r2, [r3, #0]
        return;
 8005ab0:	e023      	b.n	8005afa <OSQCreate+0x8e>
    }
#endif

    OS_CRITICAL_ENTER();
 8005ab2:	f7fa fc15 	bl	80002e0 <CPU_SR_Save>
 8005ab6:	6178      	str	r0, [r7, #20]
#if OS_OBJ_TYPE_REQ > 0u
    p_q->Type    = OS_OBJ_TYPE_Q;                           /* Mark the data structure as a message queue             */
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	4a12      	ldr	r2, [pc, #72]	; (8005b04 <OSQCreate+0x98>)
 8005abc:	601a      	str	r2, [r3, #0]
#endif
#if OS_CFG_DBG_EN > 0u
    p_q->NamePtr = p_name;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	605a      	str	r2, [r3, #4]
#else
    (void)&p_name;
#endif
    OS_MsgQInit(&p_q->MsgQ,                                 /* Initialize the queue                                   */
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	3320      	adds	r3, #32
 8005ac8:	88fa      	ldrh	r2, [r7, #6]
 8005aca:	4611      	mov	r1, r2
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7ff f875 	bl	8004bbc <OS_MsgQInit>
                max_qty);
    OS_PendListInit(&p_q->PendList);                        /* Initialize the waiting list                            */
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	3308      	adds	r3, #8
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7fe fcd3 	bl	8004482 <OS_PendListInit>

#if OS_CFG_DBG_EN > 0u
    OS_QDbgListAdd(p_q);
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f000 f965 	bl	8005dac <OS_QDbgListAdd>
#endif
    OSQQty++;                                               /* One more queue created                                 */
 8005ae2:	4b09      	ldr	r3, [pc, #36]	; (8005b08 <OSQCreate+0x9c>)
 8005ae4:	881b      	ldrh	r3, [r3, #0]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	4b07      	ldr	r3, [pc, #28]	; (8005b08 <OSQCreate+0x9c>)
 8005aec:	801a      	strh	r2, [r3, #0]
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_Q_CREATE(p_q, p_name);                         /* Record the event.                                      */
#endif
    OS_CRITICAL_EXIT_NO_SCHED();
 8005aee:	6978      	ldr	r0, [r7, #20]
 8005af0:	f7fa fbfa 	bl	80002e8 <CPU_SR_Restore>
   *p_err = OS_ERR_NONE;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	2200      	movs	r2, #0
 8005af8:	801a      	strh	r2, [r3, #0]
}
 8005afa:	3718      	adds	r7, #24
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	2000219e 	.word	0x2000219e
 8005b04:	55455551 	.word	0x55455551
 8005b08:	20002178 	.word	0x20002178

08005b0c <OSQPend>:
                OS_TICK       timeout,
                OS_OPT        opt,
                OS_MSG_SIZE  *p_msg_size,
                CPU_TS       *p_ts,
                OS_ERR       *p_err)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b08e      	sub	sp, #56	; 0x38
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	603b      	str	r3, [r7, #0]
 8005b18:	4613      	mov	r3, r2
 8005b1a:	80fb      	strh	r3, [r7, #6]
    OS_PEND_DATA  pend_data;
    void         *p_void;
    CPU_SR_ALLOC();
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	633b      	str	r3, [r7, #48]	; 0x30
        return ((void *)0);
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 8005b20:	4b72      	ldr	r3, [pc, #456]	; (8005cec <OSQPend+0x1e0>)
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d005      	beq.n	8005b34 <OSQPend+0x28>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_PEND_FAILED(p_q);                        /* Record the event.                                      */
#endif
       *p_err = OS_ERR_PEND_ISR;
 8005b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b2a:	f246 12ae 	movw	r2, #25006	; 0x61ae
 8005b2e:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 8005b30:	2300      	movs	r3, #0
 8005b32:	e0d7      	b.n	8005ce4 <OSQPend+0x1d8>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_q == (OS_Q *)0) {                                 /* Validate arguments                                     */
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d105      	bne.n	8005b46 <OSQPend+0x3a>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_PEND_FAILED(p_q);                        /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_PTR_NULL;
 8005b3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b3c:	f645 52c3 	movw	r2, #24003	; 0x5dc3
 8005b40:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 8005b42:	2300      	movs	r3, #0
 8005b44:	e0ce      	b.n	8005ce4 <OSQPend+0x1d8>
    }
    if (p_msg_size == (OS_MSG_SIZE *)0) {
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d105      	bne.n	8005b58 <OSQPend+0x4c>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_PEND_FAILED(p_q);                        /* Record the event.                                      */
#endif
       *p_err = OS_ERR_PTR_INVALID;
 8005b4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b4e:	f246 22d5 	movw	r2, #25301	; 0x62d5
 8005b52:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 8005b54:	2300      	movs	r3, #0
 8005b56:	e0c5      	b.n	8005ce4 <OSQPend+0x1d8>
    }
    switch (opt) {
 8005b58:	88fb      	ldrh	r3, [r7, #6]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d008      	beq.n	8005b70 <OSQPend+0x64>
 8005b5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b62:	d005      	beq.n	8005b70 <OSQPend+0x64>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_Q_PEND_FAILED(p_q);                   /* Record the event.                                      */
#endif
            *p_err = OS_ERR_OPT_INVALID;
 8005b64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b66:	f645 6225 	movw	r2, #24101	; 0x5e25
 8005b6a:	801a      	strh	r2, [r3, #0]
             return ((void *)0);
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	e0b9      	b.n	8005ce4 <OSQPend+0x1d8>
             break;
 8005b70:	bf00      	nop
    }
#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_q->Type != OS_OBJ_TYPE_Q) {                       /* Make sure message queue was created                    */
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a5e      	ldr	r2, [pc, #376]	; (8005cf0 <OSQPend+0x1e4>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d005      	beq.n	8005b88 <OSQPend+0x7c>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_PEND_FAILED(p_q);                        /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_TYPE;
 8005b7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b7e:	f645 52c4 	movw	r2, #24004	; 0x5dc4
 8005b82:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 8005b84:	2300      	movs	r3, #0
 8005b86:	e0ad      	b.n	8005ce4 <OSQPend+0x1d8>
    }
#endif

    if (p_ts != (CPU_TS *)0) {
 8005b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d002      	beq.n	8005b94 <OSQPend+0x88>
       *p_ts  = (CPU_TS  )0;                                /* Initialize the returned timestamp                      */
 8005b8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b90:	2200      	movs	r2, #0
 8005b92:	601a      	str	r2, [r3, #0]
    }

    CPU_CRITICAL_ENTER();
 8005b94:	f7fa fba4 	bl	80002e0 <CPU_SR_Save>
 8005b98:	6338      	str	r0, [r7, #48]	; 0x30
    p_void = OS_MsgQGet(&p_q->MsgQ,                         /* Any message waiting in the message queue?              */
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f103 0020 	add.w	r0, r3, #32
 8005ba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ba2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ba4:	6839      	ldr	r1, [r7, #0]
 8005ba6:	f7ff f823 	bl	8004bf0 <OS_MsgQGet>
 8005baa:	6378      	str	r0, [r7, #52]	; 0x34
                        p_msg_size,
                        p_ts,
                        p_err);
    if (*p_err == OS_ERR_NONE) {
 8005bac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bae:	881b      	ldrh	r3, [r3, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d104      	bne.n	8005bbe <OSQPend+0xb2>
        CPU_CRITICAL_EXIT();
 8005bb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bb6:	f7fa fb97 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_PEND(p_q);                               /* Record the event.                                      */
#endif
        return (p_void);                                    /* Yes, Return message received                           */
 8005bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bbc:	e092      	b.n	8005ce4 <OSQPend+0x1d8>
    }

    if ((opt & OS_OPT_PEND_NON_BLOCKING) != (OS_OPT)0) {    /* Caller wants to block if not available?                */
 8005bbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	da08      	bge.n	8005bd8 <OSQPend+0xcc>
        CPU_CRITICAL_EXIT();
 8005bc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bc8:	f7fa fb8e 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_PEND_FAILED(p_q);                        /* Record the event.                                      */
#endif
       *p_err = OS_ERR_PEND_WOULD_BLOCK;                    /* No                                                     */
 8005bcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bce:	f246 12b0 	movw	r2, #25008	; 0x61b0
 8005bd2:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	e085      	b.n	8005ce4 <OSQPend+0x1d8>
    } else {
        if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {    /* Can't pend when the scheduler is locked                */
 8005bd8:	4b46      	ldr	r3, [pc, #280]	; (8005cf4 <OSQPend+0x1e8>)
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d008      	beq.n	8005bf2 <OSQPend+0xe6>
            CPU_CRITICAL_EXIT();
 8005be0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005be2:	f7fa fb81 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
            TRACE_OS_Q_PEND_FAILED(p_q);                    /* Record the event.                                      */
#endif
           *p_err = OS_ERR_SCHED_LOCKED;
 8005be6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005be8:	f646 5263 	movw	r2, #28003	; 0x6d63
 8005bec:	801a      	strh	r2, [r3, #0]
            return ((void *)0);
 8005bee:	2300      	movs	r3, #0
 8005bf0:	e078      	b.n	8005ce4 <OSQPend+0x1d8>
        }
    }
                                                            /* Lock the scheduler/re-enable interrupts                */
    OS_CRITICAL_ENTER_CPU_EXIT();
    OS_Pend(&pend_data,                                     /* Block task pending on Message Queue                    */
 8005bf2:	f107 0010 	add.w	r0, r7, #16
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	2205      	movs	r2, #5
 8005bfa:	68f9      	ldr	r1, [r7, #12]
 8005bfc:	f7fe fb3c 	bl	8004278 <OS_Pend>
            (OS_PEND_OBJ *)((void *)p_q),
            OS_TASK_PEND_ON_Q,
            timeout);
    OS_CRITICAL_EXIT_NO_SCHED();
 8005c00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c02:	f7fa fb71 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_Q_PEND_BLOCK(p_q);                             /* Record the event.                                      */
#endif
    OSSched();                                              /* Find the next highest priority task ready to run       */
 8005c06:	f7fe f9cb 	bl	8003fa0 <OSSched>

    CPU_CRITICAL_ENTER();
 8005c0a:	f7fa fb69 	bl	80002e0 <CPU_SR_Save>
 8005c0e:	6338      	str	r0, [r7, #48]	; 0x30
    switch (OSTCBCurPtr->PendStatus) {
 8005c10:	4b39      	ldr	r3, [pc, #228]	; (8005cf8 <OSQPend+0x1ec>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c18:	2b03      	cmp	r3, #3
 8005c1a:	d855      	bhi.n	8005cc8 <OSQPend+0x1bc>
 8005c1c:	a201      	add	r2, pc, #4	; (adr r2, 8005c24 <OSQPend+0x118>)
 8005c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c22:	bf00      	nop
 8005c24:	08005c35 	.word	0x08005c35
 8005c28:	08005c61 	.word	0x08005c61
 8005c2c:	08005ca5 	.word	0x08005ca5
 8005c30:	08005c85 	.word	0x08005c85
        case OS_STATUS_PEND_OK:                             /* Extract message from TCB (Put there by Post)           */
             p_void     = OSTCBCurPtr->MsgPtr;
 8005c34:	4b30      	ldr	r3, [pc, #192]	; (8005cf8 <OSQPend+0x1ec>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c3a:	637b      	str	r3, [r7, #52]	; 0x34
            *p_msg_size = OSTCBCurPtr->MsgSize;
 8005c3c:	4b2e      	ldr	r3, [pc, #184]	; (8005cf8 <OSQPend+0x1ec>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	801a      	strh	r2, [r3, #0]
             if (p_ts  != (CPU_TS *)0) {
 8005c48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d004      	beq.n	8005c58 <OSQPend+0x14c>
                *p_ts   =  OSTCBCurPtr->TS;
 8005c4e:	4b2a      	ldr	r3, [pc, #168]	; (8005cf8 <OSQPend+0x1ec>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c56:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_Q_PEND(p_q);                          /* Record the event.                                      */
#endif
            *p_err      = OS_ERR_NONE;
 8005c58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	801a      	strh	r2, [r3, #0]
             break;
 8005c5e:	e03d      	b.n	8005cdc <OSQPend+0x1d0>

        case OS_STATUS_PEND_ABORT:                          /* Indicate that we aborted                               */
             p_void     = (void      *)0;
 8005c60:	2300      	movs	r3, #0
 8005c62:	637b      	str	r3, [r7, #52]	; 0x34
            *p_msg_size = (OS_MSG_SIZE)0;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	2200      	movs	r2, #0
 8005c68:	801a      	strh	r2, [r3, #0]
             if (p_ts  != (CPU_TS *)0) {
 8005c6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d004      	beq.n	8005c7a <OSQPend+0x16e>
                *p_ts   =  OSTCBCurPtr->TS;
 8005c70:	4b21      	ldr	r3, [pc, #132]	; (8005cf8 <OSQPend+0x1ec>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c78:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_Q_PEND_FAILED(p_q);                   /* Record the event.                                      */
#endif
            *p_err      = OS_ERR_PEND_ABORT;
 8005c7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c7c:	f246 12a9 	movw	r2, #25001	; 0x61a9
 8005c80:	801a      	strh	r2, [r3, #0]
             break;
 8005c82:	e02b      	b.n	8005cdc <OSQPend+0x1d0>

        case OS_STATUS_PEND_TIMEOUT:                        /* Indicate that we didn't get event within TO            */
             p_void     = (void      *)0;
 8005c84:	2300      	movs	r3, #0
 8005c86:	637b      	str	r3, [r7, #52]	; 0x34
            *p_msg_size = (OS_MSG_SIZE)0;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	801a      	strh	r2, [r3, #0]
             if (p_ts  != (CPU_TS *)0) {
 8005c8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d002      	beq.n	8005c9a <OSQPend+0x18e>
                *p_ts   = (CPU_TS  )0;
 8005c94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c96:	2200      	movs	r2, #0
 8005c98:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_Q_PEND_FAILED(p_q);                   /* Record the event.                                      */
#endif
            *p_err      = OS_ERR_TIMEOUT;
 8005c9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c9c:	f247 22d9 	movw	r2, #29401	; 0x72d9
 8005ca0:	801a      	strh	r2, [r3, #0]
             break;
 8005ca2:	e01b      	b.n	8005cdc <OSQPend+0x1d0>

        case OS_STATUS_PEND_DEL:                            /* Indicate that object pended on has been deleted        */
             p_void     = (void      *)0;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	637b      	str	r3, [r7, #52]	; 0x34
            *p_msg_size = (OS_MSG_SIZE)0;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	2200      	movs	r2, #0
 8005cac:	801a      	strh	r2, [r3, #0]
             if (p_ts  != (CPU_TS *)0) {
 8005cae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d004      	beq.n	8005cbe <OSQPend+0x1b2>
                *p_ts   =  OSTCBCurPtr->TS;
 8005cb4:	4b10      	ldr	r3, [pc, #64]	; (8005cf8 <OSQPend+0x1ec>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cbc:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_Q_PEND_FAILED(p_q);                   /* Record the event.                                      */
#endif
            *p_err      = OS_ERR_OBJ_DEL;
 8005cbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cc0:	f645 52c2 	movw	r2, #24002	; 0x5dc2
 8005cc4:	801a      	strh	r2, [r3, #0]
             break;
 8005cc6:	e009      	b.n	8005cdc <OSQPend+0x1d0>

        default:
             p_void     = (void      *)0;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	637b      	str	r3, [r7, #52]	; 0x34
            *p_msg_size = (OS_MSG_SIZE)0;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	801a      	strh	r2, [r3, #0]
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_Q_PEND_FAILED(p_q);                   /* Record the event.                                      */
#endif
            *p_err      = OS_ERR_STATUS_INVALID;
 8005cd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cd4:	f646 622e 	movw	r2, #28206	; 0x6e2e
 8005cd8:	801a      	strh	r2, [r3, #0]
             break;
 8005cda:	bf00      	nop
    }
    CPU_CRITICAL_EXIT();
 8005cdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cde:	f7fa fb03 	bl	80002e8 <CPU_SR_Restore>
    return (p_void);
 8005ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3738      	adds	r7, #56	; 0x38
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	2000219e 	.word	0x2000219e
 8005cf0:	55455551 	.word	0x55455551
 8005cf4:	20001f08 	.word	0x20001f08
 8005cf8:	20002174 	.word	0x20002174

08005cfc <OSQPost>:
void  OSQPost (OS_Q         *p_q,
               void         *p_void,
               OS_MSG_SIZE   msg_size,
               OS_OPT        opt,
               OS_ERR       *p_err)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b088      	sub	sp, #32
 8005d00:	af02      	add	r7, sp, #8
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	4611      	mov	r1, r2
 8005d08:	461a      	mov	r2, r3
 8005d0a:	460b      	mov	r3, r1
 8005d0c:	80fb      	strh	r3, [r7, #6]
 8005d0e:	4613      	mov	r3, r2
 8005d10:	80bb      	strh	r3, [r7, #4]
        return;
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_q == (OS_Q *)0) {                                 /* Validate 'p_q'                                         */
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d104      	bne.n	8005d22 <OSQPost+0x26>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_POST_FAILED(p_q);                        /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_PTR_NULL;
 8005d18:	6a3b      	ldr	r3, [r7, #32]
 8005d1a:	f645 52c3 	movw	r2, #24003	; 0x5dc3
 8005d1e:	801a      	strh	r2, [r3, #0]
        return;
 8005d20:	e03f      	b.n	8005da2 <OSQPost+0xa6>
    }
    switch (opt) {                                          /* Validate 'opt'                                         */
 8005d22:	88bb      	ldrh	r3, [r7, #4]
 8005d24:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 8005d28:	d022      	beq.n	8005d70 <OSQPost+0x74>
 8005d2a:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 8005d2e:	dc07      	bgt.n	8005d40 <OSQPost+0x44>
 8005d30:	2b10      	cmp	r3, #16
 8005d32:	d01d      	beq.n	8005d70 <OSQPost+0x74>
 8005d34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d38:	d01a      	beq.n	8005d70 <OSQPost+0x74>
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d018      	beq.n	8005d70 <OSQPost+0x74>
 8005d3e:	e012      	b.n	8005d66 <OSQPost+0x6a>
 8005d40:	f248 0210 	movw	r2, #32784	; 0x8010
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d013      	beq.n	8005d70 <OSQPost+0x74>
 8005d48:	f248 0210 	movw	r2, #32784	; 0x8010
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	dc03      	bgt.n	8005d58 <OSQPost+0x5c>
 8005d50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d54:	d00c      	beq.n	8005d70 <OSQPost+0x74>
 8005d56:	e006      	b.n	8005d66 <OSQPost+0x6a>
 8005d58:	f5b3 4f02 	cmp.w	r3, #33280	; 0x8200
 8005d5c:	d008      	beq.n	8005d70 <OSQPost+0x74>
 8005d5e:	f248 2210 	movw	r2, #33296	; 0x8210
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d004      	beq.n	8005d70 <OSQPost+0x74>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_Q_POST_FAILED(p_q);                   /* Record the event.                                      */
#endif
            *p_err =  OS_ERR_OPT_INVALID;
 8005d66:	6a3b      	ldr	r3, [r7, #32]
 8005d68:	f645 6225 	movw	r2, #24101	; 0x5e25
 8005d6c:	801a      	strh	r2, [r3, #0]
             return;
 8005d6e:	e018      	b.n	8005da2 <OSQPost+0xa6>
             break;
 8005d70:	bf00      	nop
    }
#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_q->Type != OS_OBJ_TYPE_Q) {                       /* Make sure message queue was created                    */
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a0c      	ldr	r2, [pc, #48]	; (8005da8 <OSQPost+0xac>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d004      	beq.n	8005d86 <OSQPost+0x8a>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_POST_FAILED(p_q);                        /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_TYPE;
 8005d7c:	6a3b      	ldr	r3, [r7, #32]
 8005d7e:	f645 52c4 	movw	r2, #24004	; 0x5dc4
 8005d82:	801a      	strh	r2, [r3, #0]
        return;
 8005d84:	e00d      	b.n	8005da2 <OSQPost+0xa6>
    }
#endif

    ts = OS_TS_GET();                                       /* Get timestamp                                          */
 8005d86:	f000 fafd 	bl	8006384 <CPU_TS_TmrRd>
 8005d8a:	6178      	str	r0, [r7, #20]
    }
#endif
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_Q_POST(p_q);                                   /* Record the event.                                      */
#endif
    OS_QPost(p_q,
 8005d8c:	88b9      	ldrh	r1, [r7, #4]
 8005d8e:	88fa      	ldrh	r2, [r7, #6]
 8005d90:	6a3b      	ldr	r3, [r7, #32]
 8005d92:	9301      	str	r3, [sp, #4]
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	9300      	str	r3, [sp, #0]
 8005d98:	460b      	mov	r3, r1
 8005d9a:	68b9      	ldr	r1, [r7, #8]
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	f000 f841 	bl	8005e24 <OS_QPost>
             p_void,
             msg_size,
             opt,
             ts,
             p_err);
}
 8005da2:	3718      	adds	r7, #24
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	55455551 	.word	0x55455551

08005dac <OS_QDbgListAdd>:
*/


#if OS_CFG_DBG_EN > 0u
void  OS_QDbgListAdd (OS_Q  *p_q)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
    p_q->DbgNamePtr               = (CPU_CHAR *)((void *)" ");
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a0e      	ldr	r2, [pc, #56]	; (8005df0 <OS_QDbgListAdd+0x44>)
 8005db8:	61da      	str	r2, [r3, #28]
    p_q->DbgPrevPtr               = (OS_Q     *)0;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	615a      	str	r2, [r3, #20]
    if (OSQDbgListPtr == (OS_Q *)0) {
 8005dc0:	4b0c      	ldr	r3, [pc, #48]	; (8005df4 <OS_QDbgListAdd+0x48>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d103      	bne.n	8005dd0 <OS_QDbgListAdd+0x24>
        p_q->DbgNextPtr           = (OS_Q     *)0;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	619a      	str	r2, [r3, #24]
 8005dce:	e007      	b.n	8005de0 <OS_QDbgListAdd+0x34>
    } else {
        p_q->DbgNextPtr           =  OSQDbgListPtr;
 8005dd0:	4b08      	ldr	r3, [pc, #32]	; (8005df4 <OS_QDbgListAdd+0x48>)
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	619a      	str	r2, [r3, #24]
        OSQDbgListPtr->DbgPrevPtr =  p_q;
 8005dd8:	4b06      	ldr	r3, [pc, #24]	; (8005df4 <OS_QDbgListAdd+0x48>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	615a      	str	r2, [r3, #20]
    }
    OSQDbgListPtr                 =  p_q;
 8005de0:	4a04      	ldr	r2, [pc, #16]	; (8005df4 <OS_QDbgListAdd+0x48>)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6013      	str	r3, [r2, #0]
}
 8005de6:	bf00      	nop
 8005de8:	370c      	adds	r7, #12
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bc80      	pop	{r7}
 8005dee:	4770      	bx	lr
 8005df0:	0800e8e4 	.word	0x0800e8e4
 8005df4:	20002330 	.word	0x20002330

08005df8 <OS_QInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_QInit (OS_ERR  *p_err)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSQDbgListPtr = (OS_Q *)0;
 8005e00:	4b06      	ldr	r3, [pc, #24]	; (8005e1c <OS_QInit+0x24>)
 8005e02:	2200      	movs	r2, #0
 8005e04:	601a      	str	r2, [r3, #0]
#endif

    OSQQty        = (OS_OBJ_QTY)0;
 8005e06:	4b06      	ldr	r3, [pc, #24]	; (8005e20 <OS_QInit+0x28>)
 8005e08:	2200      	movs	r2, #0
 8005e0a:	801a      	strh	r2, [r3, #0]
   *p_err         = OS_ERR_NONE;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	801a      	strh	r2, [r3, #0]
}
 8005e12:	bf00      	nop
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bc80      	pop	{r7}
 8005e1a:	4770      	bx	lr
 8005e1c:	20002330 	.word	0x20002330
 8005e20:	20002178 	.word	0x20002178

08005e24 <OS_QPost>:
                void         *p_void,
                OS_MSG_SIZE   msg_size,
                OS_OPT        opt,
                CPU_TS        ts,
                OS_ERR       *p_err)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b08c      	sub	sp, #48	; 0x30
 8005e28:	af02      	add	r7, sp, #8
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	4611      	mov	r1, r2
 8005e30:	461a      	mov	r2, r3
 8005e32:	460b      	mov	r3, r1
 8005e34:	80fb      	strh	r3, [r7, #6]
 8005e36:	4613      	mov	r3, r2
 8005e38:	80bb      	strh	r3, [r7, #4]
    OS_OPT         post_type;
    OS_PEND_LIST  *p_pend_list;
    OS_PEND_DATA  *p_pend_data;
    OS_PEND_DATA  *p_pend_data_next;
    OS_TCB        *p_tcb;
    CPU_SR_ALLOC();
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	61fb      	str	r3, [r7, #28]



    OS_CRITICAL_ENTER();
 8005e3e:	f7fa fa4f 	bl	80002e0 <CPU_SR_Save>
 8005e42:	61f8      	str	r0, [r7, #28]
    p_pend_list = &p_q->PendList;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	3308      	adds	r3, #8
 8005e48:	61bb      	str	r3, [r7, #24]
    if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0) {         /* Any task waiting on message queue?                     */
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	891b      	ldrh	r3, [r3, #8]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d11a      	bne.n	8005e88 <OS_QPost+0x64>
        if ((opt & OS_OPT_POST_LIFO) == (OS_OPT)0) {        /* Determine whether we post FIFO or LIFO                 */
 8005e52:	88bb      	ldrh	r3, [r7, #4]
 8005e54:	f003 0310 	and.w	r3, r3, #16
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d102      	bne.n	8005e62 <OS_QPost+0x3e>
            post_type = OS_OPT_POST_FIFO;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005e60:	e001      	b.n	8005e66 <OS_QPost+0x42>
        } else {
            post_type = OS_OPT_POST_LIFO;
 8005e62:	2310      	movs	r3, #16
 8005e64:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
        OS_MsgQPut(&p_q->MsgQ,                              /* Place message in the message queue                     */
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f103 0020 	add.w	r0, r3, #32
 8005e6c:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8005e6e:	88fa      	ldrh	r2, [r7, #6]
 8005e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e72:	9301      	str	r3, [sp, #4]
 8005e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e76:	9300      	str	r3, [sp, #0]
 8005e78:	460b      	mov	r3, r1
 8005e7a:	68b9      	ldr	r1, [r7, #8]
 8005e7c:	f7fe ff16 	bl	8004cac <OS_MsgQPut>
                   p_void,
                   msg_size,
                   post_type,
                   ts,
                   p_err);
        OS_CRITICAL_EXIT();
 8005e80:	69f8      	ldr	r0, [r7, #28]
 8005e82:	f7fa fa31 	bl	80002e8 <CPU_SR_Restore>
        return;
 8005e86:	e031      	b.n	8005eec <OS_QPost+0xc8>
    }

    if ((opt & OS_OPT_POST_ALL) != (OS_OPT)0) {             /* Post message to all tasks waiting?                     */
 8005e88:	88bb      	ldrh	r3, [r7, #4]
 8005e8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d003      	beq.n	8005e9a <OS_QPost+0x76>
        cnt = p_pend_list->NbrEntries;                      /* Yes                                                    */
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	891b      	ldrh	r3, [r3, #8]
 8005e96:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005e98:	e001      	b.n	8005e9e <OS_QPost+0x7a>
    } else {
        cnt = (OS_OBJ_QTY)1;                                /* No                                                     */
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	84fb      	strh	r3, [r7, #38]	; 0x26
    }
    p_pend_data = p_pend_list->HeadPtr;
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	623b      	str	r3, [r7, #32]
    while (cnt > 0u) {
 8005ea4:	e013      	b.n	8005ece <OS_QPost+0xaa>
        p_tcb            = p_pend_data->TCBPtr;
 8005ea6:	6a3b      	ldr	r3, [r7, #32]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	617b      	str	r3, [r7, #20]
        p_pend_data_next = p_pend_data->NextPtr;
 8005eac:	6a3b      	ldr	r3, [r7, #32]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	613b      	str	r3, [r7, #16]
        OS_Post((OS_PEND_OBJ *)((void *)p_q),
 8005eb2:	88fa      	ldrh	r2, [r7, #6]
 8005eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb6:	9300      	str	r3, [sp, #0]
 8005eb8:	4613      	mov	r3, r2
 8005eba:	68ba      	ldr	r2, [r7, #8]
 8005ebc:	6979      	ldr	r1, [r7, #20]
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	f7fe fbd8 	bl	8004674 <OS_Post>
                p_tcb,
                p_void,
                msg_size,
                ts);
        p_pend_data = p_pend_data_next;
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	623b      	str	r3, [r7, #32]
        cnt--;
 8005ec8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	84fb      	strh	r3, [r7, #38]	; 0x26
    while (cnt > 0u) {
 8005ece:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1e8      	bne.n	8005ea6 <OS_QPost+0x82>
    }
    OS_CRITICAL_EXIT_NO_SCHED();
 8005ed4:	69f8      	ldr	r0, [r7, #28]
 8005ed6:	f7fa fa07 	bl	80002e8 <CPU_SR_Restore>
    if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0) {
 8005eda:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	db01      	blt.n	8005ee6 <OS_QPost+0xc2>
        OSSched();                                          /* Run the scheduler                                      */
 8005ee2:	f7fe f85d 	bl	8003fa0 <OSSched>
    }
   *p_err = OS_ERR_NONE;
 8005ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ee8:	2200      	movs	r2, #0
 8005eea:	801a      	strh	r2, [r3, #0]
}
 8005eec:	3728      	adds	r7, #40	; 0x28
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
	...

08005ef4 <OSIdleTaskHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSIdleTaskHook (void)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	af00      	add	r7, sp, #0
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppIdleTaskHookPtr != (OS_APP_HOOK_VOID)0) {
 8005ef8:	4b04      	ldr	r3, [pc, #16]	; (8005f0c <OSIdleTaskHook+0x18>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d002      	beq.n	8005f06 <OSIdleTaskHook+0x12>
        (*OS_AppIdleTaskHookPtr)();
 8005f00:	4b02      	ldr	r3, [pc, #8]	; (8005f0c <OSIdleTaskHook+0x18>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4798      	blx	r3
    }
#endif
}
 8005f06:	bf00      	nop
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	2000236c 	.word	0x2000236c

08005f10 <OSInitHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSInitHook (void)
{
 8005f10:	b480      	push	{r7}
 8005f12:	af00      	add	r7, sp, #0
                                                                    /* 8-byte align the ISR stack.                            */    
    OS_CPU_ExceptStkBase = (CPU_STK *)(OSCfg_ISRStkBasePtr + OSCfg_ISRStkSize);
 8005f14:	4b09      	ldr	r3, [pc, #36]	; (8005f3c <OSInitHook+0x2c>)
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	4b09      	ldr	r3, [pc, #36]	; (8005f40 <OSInitHook+0x30>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4413      	add	r3, r2
 8005f20:	4a08      	ldr	r2, [pc, #32]	; (8005f44 <OSInitHook+0x34>)
 8005f22:	6013      	str	r3, [r2, #0]
    OS_CPU_ExceptStkBase = (CPU_STK *)((CPU_STK)(OS_CPU_ExceptStkBase) & 0xFFFFFFF8);
 8005f24:	4b07      	ldr	r3, [pc, #28]	; (8005f44 <OSInitHook+0x34>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f023 0307 	bic.w	r3, r3, #7
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	4b05      	ldr	r3, [pc, #20]	; (8005f44 <OSInitHook+0x34>)
 8005f30:	601a      	str	r2, [r3, #0]
}
 8005f32:	bf00      	nop
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bc80      	pop	{r7}
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	0800eab8 	.word	0x0800eab8
 8005f40:	0800eabc 	.word	0x0800eabc
 8005f44:	20003310 	.word	0x20003310

08005f48 <OSStatTaskHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSStatTaskHook (void)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	af00      	add	r7, sp, #0
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppStatTaskHookPtr != (OS_APP_HOOK_VOID)0) {
 8005f4c:	4b04      	ldr	r3, [pc, #16]	; (8005f60 <OSStatTaskHook+0x18>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d002      	beq.n	8005f5a <OSStatTaskHook+0x12>
        (*OS_AppStatTaskHookPtr)();
 8005f54:	4b02      	ldr	r3, [pc, #8]	; (8005f60 <OSStatTaskHook+0x18>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4798      	blx	r3
    }
#endif
}
 8005f5a:	bf00      	nop
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	20002388 	.word	0x20002388

08005f64 <OSTaskCreateHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSTaskCreateHook (OS_TCB  *p_tcb)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskCreateHookPtr != (OS_APP_HOOK_TCB)0) {
 8005f6c:	4b05      	ldr	r3, [pc, #20]	; (8005f84 <OSTaskCreateHook+0x20>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d003      	beq.n	8005f7c <OSTaskCreateHook+0x18>
        (*OS_AppTaskCreateHookPtr)(p_tcb);
 8005f74:	4b03      	ldr	r3, [pc, #12]	; (8005f84 <OSTaskCreateHook+0x20>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	4798      	blx	r3
    }
#else
    (void)p_tcb;                                            /* Prevent compiler warning                               */
#endif
}
 8005f7c:	bf00      	nop
 8005f7e:	3708      	adds	r7, #8
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	200020a4 	.word	0x200020a4

08005f88 <OSTaskReturnHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSTaskReturnHook (OS_TCB  *p_tcb)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskReturnHookPtr != (OS_APP_HOOK_TCB)0) {
 8005f90:	4b05      	ldr	r3, [pc, #20]	; (8005fa8 <OSTaskReturnHook+0x20>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d003      	beq.n	8005fa0 <OSTaskReturnHook+0x18>
        (*OS_AppTaskReturnHookPtr)(p_tcb);
 8005f98:	4b03      	ldr	r3, [pc, #12]	; (8005fa8 <OSTaskReturnHook+0x20>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	4798      	blx	r3
    }
#else
    (void)p_tcb;                                            /* Prevent compiler warning                               */
#endif
}
 8005fa0:	bf00      	nop
 8005fa2:	3708      	adds	r7, #8
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	20001f0c 	.word	0x20001f0c

08005fac <OSTaskStkInit>:
                         void          *p_arg,
                         CPU_STK       *p_stk_base,
                         CPU_STK       *p_stk_limit,
                         CPU_STK_SIZE   stk_size,
                         OS_OPT         opt)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b087      	sub	sp, #28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
 8005fb8:	603b      	str	r3, [r7, #0]
    CPU_STK    *p_stk;

    
    (void)opt;                                                  /* Prevent compiler warning                               */

    p_stk = &p_stk_base[stk_size];                              /* Load stack pointer                                     */
 8005fba:	6a3b      	ldr	r3, [r7, #32]
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	617b      	str	r3, [r7, #20]
                                                                /* Align the stack to 8-bytes.                            */
    p_stk = (CPU_STK *)((CPU_STK)(p_stk) & 0xFFFFFFF8);
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	f023 0307 	bic.w	r3, r3, #7
 8005fca:	617b      	str	r3, [r7, #20]
                                                                /* Registers stacked as if auto-saved on exception        */
    *--p_stk = (CPU_STK)0x01000000u;                            /* xPSR                                                   */
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	3b04      	subs	r3, #4
 8005fd0:	617b      	str	r3, [r7, #20]
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005fd8:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)p_task;                                 /* Entry Point                                            */
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	3b04      	subs	r3, #4
 8005fde:	617b      	str	r3, [r7, #20]
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)OS_TaskReturn;                          /* R14 (LR)                                               */
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	3b04      	subs	r3, #4
 8005fea:	617b      	str	r3, [r7, #20]
 8005fec:	4a30      	ldr	r2, [pc, #192]	; (80060b0 <OSTaskStkInit+0x104>)
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x12121212u;                            /* R12                                                    */
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	3b04      	subs	r3, #4
 8005ff6:	617b      	str	r3, [r7, #20]
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 8005ffe:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x03030303u;                            /* R3                                                     */
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	3b04      	subs	r3, #4
 8006004:	617b      	str	r3, [r7, #20]
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 800600c:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x02020202u;                            /* R2                                                     */
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	3b04      	subs	r3, #4
 8006012:	617b      	str	r3, [r7, #20]
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 800601a:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)p_stk_limit;                            /* R1                                                     */
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	3b04      	subs	r3, #4
 8006020:	617b      	str	r3, [r7, #20]
 8006022:	683a      	ldr	r2, [r7, #0]
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)p_arg;                                  /* R0 : argument                                          */
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	3b04      	subs	r3, #4
 800602c:	617b      	str	r3, [r7, #20]
 800602e:	68ba      	ldr	r2, [r7, #8]
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	601a      	str	r2, [r3, #0]
                                                                /* Remaining registers saved on process stack             */
    *--p_stk = (CPU_STK)0x11111111u;                            /* R11                                                    */
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	3b04      	subs	r3, #4
 8006038:	617b      	str	r3, [r7, #20]
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8006040:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x10101010u;                            /* R10                                                    */
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	3b04      	subs	r3, #4
 8006046:	617b      	str	r3, [r7, #20]
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 800604e:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x09090909u;                            /* R9                                                     */
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	3b04      	subs	r3, #4
 8006054:	617b      	str	r3, [r7, #20]
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 800605c:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x08080808u;                            /* R8                                                     */
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	3b04      	subs	r3, #4
 8006062:	617b      	str	r3, [r7, #20]
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 800606a:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x07070707u;                            /* R7                                                     */
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	3b04      	subs	r3, #4
 8006070:	617b      	str	r3, [r7, #20]
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 8006078:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x06060606u;                            /* R6                                                     */
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	3b04      	subs	r3, #4
 800607e:	617b      	str	r3, [r7, #20]
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 8006086:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x05050505u;                            /* R5                                                     */
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	3b04      	subs	r3, #4
 800608c:	617b      	str	r3, [r7, #20]
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 8006094:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x04040404u;                            /* R4                                                     */
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	3b04      	subs	r3, #4
 800609a:	617b      	str	r3, [r7, #20]
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 80060a2:	601a      	str	r2, [r3, #0]
        *--p_stk = (CPU_STK)0x3F800000u;                        /* S1                                                     */
        *--p_stk = (CPU_STK)0x00000000u;                        /* S0                                                     */
    }
#endif    

    return (p_stk);
 80060a4:	697b      	ldr	r3, [r7, #20]
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	371c      	adds	r7, #28
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bc80      	pop	{r7}
 80060ae:	4770      	bx	lr
 80060b0:	080056bd 	.word	0x080056bd

080060b4 <OSTaskSwHook>:
*                 to the task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/

void  OSTaskSwHook (void)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
        OS_CPU_FP_Reg_Pop(OSTCBHighRdyPtr->StkPtr);
    }
#endif    

#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskSwHookPtr != (OS_APP_HOOK_VOID)0) {
 80060ba:	4b20      	ldr	r3, [pc, #128]	; (800613c <OSTaskSwHook+0x88>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d002      	beq.n	80060c8 <OSTaskSwHook+0x14>
        (*OS_AppTaskSwHookPtr)();
 80060c2:	4b1e      	ldr	r3, [pc, #120]	; (800613c <OSTaskSwHook+0x88>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4798      	blx	r3
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_TASK_SWITCHED_IN(OSTCBHighRdyPtr);             /* Record the event.                                      */
#endif

#if OS_CFG_TASK_PROFILE_EN > 0u
    ts = OS_TS_GET();
 80060c8:	f000 f95c 	bl	8006384 <CPU_TS_TmrRd>
 80060cc:	6078      	str	r0, [r7, #4]
    if (OSTCBCurPtr != OSTCBHighRdyPtr) {
 80060ce:	4b1c      	ldr	r3, [pc, #112]	; (8006140 <OSTaskSwHook+0x8c>)
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	4b1c      	ldr	r3, [pc, #112]	; (8006144 <OSTaskSwHook+0x90>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d016      	beq.n	8006108 <OSTaskSwHook+0x54>
        OSTCBCurPtr->CyclesDelta  = ts - OSTCBCurPtr->CyclesStart;
 80060da:	4b19      	ldr	r3, [pc, #100]	; (8006140 <OSTaskSwHook+0x8c>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80060e2:	4b17      	ldr	r3, [pc, #92]	; (8006140 <OSTaskSwHook+0x8c>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	6879      	ldr	r1, [r7, #4]
 80060e8:	1a8a      	subs	r2, r1, r2
 80060ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        OSTCBCurPtr->CyclesTotal += (OS_CYCLES)OSTCBCurPtr->CyclesDelta;
 80060ee:	4b14      	ldr	r3, [pc, #80]	; (8006140 <OSTaskSwHook+0x8c>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 80060f6:	4b12      	ldr	r3, [pc, #72]	; (8006140 <OSTaskSwHook+0x8c>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80060fe:	4b10      	ldr	r3, [pc, #64]	; (8006140 <OSTaskSwHook+0x8c>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	440a      	add	r2, r1
 8006104:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }

    OSTCBHighRdyPtr->CyclesStart = ts;
 8006108:	4b0e      	ldr	r3, [pc, #56]	; (8006144 <OSTaskSwHook+0x90>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }
#endif

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
                                                            /* Keep track of per-task scheduler lock time             */
    if (OSTCBCurPtr->SchedLockTimeMax < OSSchedLockTimeMaxCur) {
 8006112:	4b0b      	ldr	r3, [pc, #44]	; (8006140 <OSTaskSwHook+0x8c>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800611a:	4b0b      	ldr	r3, [pc, #44]	; (8006148 <OSTaskSwHook+0x94>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	429a      	cmp	r2, r3
 8006120:	d205      	bcs.n	800612e <OSTaskSwHook+0x7a>
        OSTCBCurPtr->SchedLockTimeMax = OSSchedLockTimeMaxCur;
 8006122:	4b07      	ldr	r3, [pc, #28]	; (8006140 <OSTaskSwHook+0x8c>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a08      	ldr	r2, [pc, #32]	; (8006148 <OSTaskSwHook+0x94>)
 8006128:	6812      	ldr	r2, [r2, #0]
 800612a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }
    OSSchedLockTimeMaxCur = (CPU_TS)0;                      /* Reset the per-task value                               */
 800612e:	4b06      	ldr	r3, [pc, #24]	; (8006148 <OSTaskSwHook+0x94>)
 8006130:	2200      	movs	r2, #0
 8006132:	601a      	str	r2, [r3, #0]
#endif
}
 8006134:	bf00      	nop
 8006136:	3708      	adds	r7, #8
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}
 800613c:	20002378 	.word	0x20002378
 8006140:	20002174 	.word	0x20002174
 8006144:	20002180 	.word	0x20002180
 8006148:	20002184 	.word	0x20002184

0800614c <OSTimeTickHook>:
* Note(s)    : 1) This function is assumed to be called from the Tick ISR.
*********************************************************************************************************
*/

void  OSTimeTickHook (void)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	af00      	add	r7, sp, #0
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTimeTickHookPtr != (OS_APP_HOOK_VOID)0) {
 8006150:	4b04      	ldr	r3, [pc, #16]	; (8006164 <OSTimeTickHook+0x18>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d002      	beq.n	800615e <OSTimeTickHook+0x12>
        (*OS_AppTimeTickHookPtr)();
 8006158:	4b02      	ldr	r3, [pc, #8]	; (8006164 <OSTimeTickHook+0x18>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4798      	blx	r3
    }
#endif
}
 800615e:	bf00      	nop
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	20002194 	.word	0x20002194

08006168 <OS_CPU_SysTickHandler>:
* Note(s)    : 1) This function MUST be placed on entry 15 of the Cortex-M4 vector table.
*********************************************************************************************************
*/

void  OS_CPU_SysTickHandler (void)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
 800616e:	2300      	movs	r3, #0
 8006170:	607b      	str	r3, [r7, #4]


    CPU_CRITICAL_ENTER();
 8006172:	f7fa f8b5 	bl	80002e0 <CPU_SR_Save>
 8006176:	6078      	str	r0, [r7, #4]
    OSIntNestingCtr++;                                      /* Tell uC/OS-III that we are starting an ISR             */
 8006178:	4b08      	ldr	r3, [pc, #32]	; (800619c <OS_CPU_SysTickHandler+0x34>)
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	3301      	adds	r3, #1
 800617e:	b2da      	uxtb	r2, r3
 8006180:	4b06      	ldr	r3, [pc, #24]	; (800619c <OS_CPU_SysTickHandler+0x34>)
 8006182:	701a      	strb	r2, [r3, #0]
    CPU_CRITICAL_EXIT();
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f7fa f8af 	bl	80002e8 <CPU_SR_Restore>

    OSTimeTick();                                           /* Call uC/OS-III's OSTimeTick()                          */
 800618a:	f7fd f9bb 	bl	8003504 <OSTimeTick>

    OSIntExit();                                            /* Tell uC/OS-III that we are leaving the ISR             */
 800618e:	f7fd fe9b 	bl	8003ec8 <OSIntExit>
}
 8006192:	bf00      	nop
 8006194:	3708      	adds	r7, #8
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	2000219e 	.word	0x2000219e

080061a0 <OS_CPU_SysTickInit>:
* Note(s)    : 1) This function MUST be called after OSStart() & after processor initialization.
*********************************************************************************************************
*/

void  OS_CPU_SysTickInit (CPU_INT32U  cnts)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
    CPU_INT32U  prio;


    CPU_REG_NVIC_ST_RELOAD = cnts - 1u;
 80061a8:	4a0f      	ldr	r2, [pc, #60]	; (80061e8 <OS_CPU_SysTickInit+0x48>)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	3b01      	subs	r3, #1
 80061ae:	6013      	str	r3, [r2, #0]

                                                            /* Set SysTick handler prio.                              */
    prio                   = CPU_REG_NVIC_SHPRI3;
 80061b0:	4b0e      	ldr	r3, [pc, #56]	; (80061ec <OS_CPU_SysTickInit+0x4c>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	60fb      	str	r3, [r7, #12]
    prio                  &= DEF_BIT_FIELD(24, 0);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80061bc:	60fb      	str	r3, [r7, #12]
    prio                  |= DEF_BIT_MASK(OS_CPU_CFG_SYSTICK_PRIO, 24);

    CPU_REG_NVIC_SHPRI3    = prio;
 80061be:	4a0b      	ldr	r2, [pc, #44]	; (80061ec <OS_CPU_SysTickInit+0x4c>)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6013      	str	r3, [r2, #0]

                                                            /* Enable timer.                                          */
    CPU_REG_NVIC_ST_CTRL  |= CPU_REG_NVIC_ST_CTRL_CLKSOURCE |
 80061c4:	4b0a      	ldr	r3, [pc, #40]	; (80061f0 <OS_CPU_SysTickInit+0x50>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a09      	ldr	r2, [pc, #36]	; (80061f0 <OS_CPU_SysTickInit+0x50>)
 80061ca:	f043 0305 	orr.w	r3, r3, #5
 80061ce:	6013      	str	r3, [r2, #0]
                             CPU_REG_NVIC_ST_CTRL_ENABLE;
                                                            /* Enable timer interrupt.                                */
    CPU_REG_NVIC_ST_CTRL  |= CPU_REG_NVIC_ST_CTRL_TICKINT;
 80061d0:	4b07      	ldr	r3, [pc, #28]	; (80061f0 <OS_CPU_SysTickInit+0x50>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a06      	ldr	r2, [pc, #24]	; (80061f0 <OS_CPU_SysTickInit+0x50>)
 80061d6:	f043 0302 	orr.w	r3, r3, #2
 80061da:	6013      	str	r3, [r2, #0]
}
 80061dc:	bf00      	nop
 80061de:	3714      	adds	r7, #20
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bc80      	pop	{r7}
 80061e4:	4770      	bx	lr
 80061e6:	bf00      	nop
 80061e8:	e000e014 	.word	0xe000e014
 80061ec:	e000ed20 	.word	0xe000ed20
 80061f0:	e000e010 	.word	0xe000e010

080061f4 <XMC_GPIO_SetOutputHigh>:
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	460b      	mov	r3, r1
 80061fe:	70fb      	strb	r3, [r7, #3]
  port->OMR = (uint32_t)0x1U << pin;
 8006200:	78fb      	ldrb	r3, [r7, #3]
 8006202:	2201      	movs	r2, #1
 8006204:	409a      	lsls	r2, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	605a      	str	r2, [r3, #4]
}
 800620a:	bf00      	nop
 800620c:	370c      	adds	r7, #12
 800620e:	46bd      	mov	sp, r7
 8006210:	bc80      	pop	{r7}
 8006212:	4770      	bx	lr

08006214 <XMC_GPIO_SetOutputLow>:
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	460b      	mov	r3, r1
 800621e:	70fb      	strb	r3, [r7, #3]
  port->OMR = 0x10000U << pin;
 8006220:	78fb      	ldrb	r3, [r7, #3]
 8006222:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006226:	409a      	lsls	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	605a      	str	r2, [r3, #4]
}
 800622c:	bf00      	nop
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	bc80      	pop	{r7}
 8006234:	4770      	bx	lr

08006236 <_mcp23s08_reset_ss>:
 *  @param XMC_GPIO_PORT_t *const port, const uint8_t pin
 *  @return on success this function returns MCP23S08_OK (0) otherwise it check
 *  the given port on validity
 */
uint8_t _mcp23s08_reset_ss(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8006236:	b580      	push	{r7, lr}
 8006238:	b082      	sub	sp, #8
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
 800623e:	460b      	mov	r3, r1
 8006240:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));

  XMC_GPIO_SetOutputLow(port,pin);
 8006242:	78fb      	ldrb	r3, [r7, #3]
 8006244:	4619      	mov	r1, r3
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f7ff ffe4 	bl	8006214 <XMC_GPIO_SetOutputLow>

  return MCP23S08_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3708      	adds	r7, #8
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}

08006256 <_mcp23s08_set_ss>:
 *  @param XMC_GPIO_PORT_t *const port, const uint8_t pin
 *  @return on success this function returns MCP23S08_OK (0) otherwise it check
 *  the given port on validity
 */
uint8_t _mcp23s08_set_ss(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8006256:	b580      	push	{r7, lr}
 8006258:	b082      	sub	sp, #8
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
 800625e:	460b      	mov	r3, r1
 8006260:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));

  XMC_GPIO_SetOutputHigh(port,pin);
 8006262:	78fb      	ldrb	r3, [r7, #3]
 8006264:	4619      	mov	r1, r3
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f7ff ffc4 	bl	80061f4 <XMC_GPIO_SetOutputHigh>

  return MCP23S08_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3708      	adds	r7, #8
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
	...

08006278 <_mcp23s08_reset>:
 *  @brief This function toggles the reset for the MCP23S08
 *  @param XMC_GPIO_PORT_t *const port, const uint8_t pin
 *  @return on success this function returns MCP23S08_OK (0)
 */
uint8_t _mcp23s08_reset(void)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	af00      	add	r7, sp, #0
  XMC_GPIO_SetOutputLow(MCP23S08_RESET);
 800627c:	210c      	movs	r1, #12
 800627e:	4805      	ldr	r0, [pc, #20]	; (8006294 <_mcp23s08_reset+0x1c>)
 8006280:	f7ff ffc8 	bl	8006214 <XMC_GPIO_SetOutputLow>
  XMC_GPIO_SetOutputHigh(MCP23S08_RESET);
 8006284:	210c      	movs	r1, #12
 8006286:	4803      	ldr	r0, [pc, #12]	; (8006294 <_mcp23s08_reset+0x1c>)
 8006288:	f7ff ffb4 	bl	80061f4 <XMC_GPIO_SetOutputHigh>

  return MCP23S08_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	48028000 	.word	0x48028000

08006298 <_mcp23s08_reg_xfer>:
 *		   data ...... content of the register
 *		   rd_wr ..... read/write
 *  @return on success this function returns MCP23S08_OK (0)
 */
uint8_t _mcp23s08_reg_xfer(XMC_USIC_CH_t *const channel, uint8_t reg_name, uint8_t data, uint8_t rd_wr)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	4608      	mov	r0, r1
 80062a2:	4611      	mov	r1, r2
 80062a4:	461a      	mov	r2, r3
 80062a6:	4603      	mov	r3, r0
 80062a8:	70fb      	strb	r3, [r7, #3]
 80062aa:	460b      	mov	r3, r1
 80062ac:	70bb      	strb	r3, [r7, #2]
 80062ae:	4613      	mov	r3, r2
 80062b0:	707b      	strb	r3, [r7, #1]
  uint8_t recv = 0, mcp23s08_addr_rd = 0;
 80062b2:	2300      	movs	r3, #0
 80062b4:	73fb      	strb	r3, [r7, #15]
 80062b6:	2300      	movs	r3, #0
 80062b8:	73bb      	strb	r3, [r7, #14]

  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if(rd_wr)
 80062ba:	787b      	ldrb	r3, [r7, #1]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d020      	beq.n	8006302 <_mcp23s08_reg_xfer+0x6a>
  {
	mcp23s08_addr_rd = mcp23s08_addr|MCP23S08_RD;
 80062c0:	4b1f      	ldr	r3, [pc, #124]	; (8006340 <_mcp23s08_reg_xfer+0xa8>)
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	f043 0301 	orr.w	r3, r3, #1
 80062c8:	73bb      	strb	r3, [r7, #14]

	_spi_transmit(channel,mcp23s08_addr_rd);
 80062ca:	7bbb      	ldrb	r3, [r7, #14]
 80062cc:	4619      	mov	r1, r3
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 fc80 	bl	8006bd4 <_spi_transmit>
	_spi_receive(channel);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 fc9d 	bl	8006c14 <_spi_receive>

	_spi_transmit(channel,reg_name);
 80062da:	78fb      	ldrb	r3, [r7, #3]
 80062dc:	4619      	mov	r1, r3
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 fc78 	bl	8006bd4 <_spi_transmit>
	_spi_receive(channel);
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 fc95 	bl	8006c14 <_spi_receive>

	_spi_transmit(channel,mcp23s08_nop);
 80062ea:	4b16      	ldr	r3, [pc, #88]	; (8006344 <_mcp23s08_reg_xfer+0xac>)
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	4619      	mov	r1, r3
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 fc6f 	bl	8006bd4 <_spi_transmit>
	recv = _spi_receive(channel);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 fc8c 	bl	8006c14 <_spi_receive>
 80062fc:	4603      	mov	r3, r0
 80062fe:	73fb      	strb	r3, [r7, #15]
 8006300:	e018      	b.n	8006334 <_mcp23s08_reg_xfer+0x9c>

  }
  else
  {
	_spi_transmit(channel,mcp23s08_addr);
 8006302:	4b0f      	ldr	r3, [pc, #60]	; (8006340 <_mcp23s08_reg_xfer+0xa8>)
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	4619      	mov	r1, r3
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 fc63 	bl	8006bd4 <_spi_transmit>
	_spi_receive(channel);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 fc80 	bl	8006c14 <_spi_receive>

	_spi_transmit(channel,reg_name);
 8006314:	78fb      	ldrb	r3, [r7, #3]
 8006316:	4619      	mov	r1, r3
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 fc5b 	bl	8006bd4 <_spi_transmit>
	_spi_receive(channel);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 fc78 	bl	8006c14 <_spi_receive>

	_spi_transmit(channel,data);
 8006324:	78bb      	ldrb	r3, [r7, #2]
 8006326:	4619      	mov	r1, r3
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 fc53 	bl	8006bd4 <_spi_transmit>
	_spi_receive(channel);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 fc70 	bl	8006c14 <_spi_receive>
  }

  return recv;
 8006334:	7bfb      	ldrb	r3, [r7, #15]
}
 8006336:	4618      	mov	r0, r3
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	20000000 	.word	0x20000000
 8006344:	20001824 	.word	0x20001824

08006348 <CPU_TS_TmrInit>:
 *
 *              See also CPU_TS_TmrRd()
 */
#if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
void  CPU_TS_TmrInit (void)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
	CPU_INT32U  fclk_freq;

	fclk_freq = BSP_SysClkFreqGet();
 800634e:	f000 f94f 	bl	80065f0 <BSP_SysClkFreqGet>
 8006352:	6078      	str	r0, [r7, #4]

	CPU_BSP_REG_DEMCR  |= DEF_BIT_24;
 8006354:	4b09      	ldr	r3, [pc, #36]	; (800637c <CPU_TS_TmrInit+0x34>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a08      	ldr	r2, [pc, #32]	; (800637c <CPU_TS_TmrInit+0x34>)
 800635a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800635e:	6013      	str	r3, [r2, #0]
	CPU_BSP_REG_DWT_CR |= DEF_BIT_00;
 8006360:	4b07      	ldr	r3, [pc, #28]	; (8006380 <CPU_TS_TmrInit+0x38>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a06      	ldr	r2, [pc, #24]	; (8006380 <CPU_TS_TmrInit+0x38>)
 8006366:	f043 0301 	orr.w	r3, r3, #1
 800636a:	6013      	str	r3, [r2, #0]

	CPU_TS_TmrFreqSet ( (CPU_TS_TMR_FREQ) fclk_freq);
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f7fb fbd9 	bl	8001b24 <CPU_TS_TmrFreqSet>
}
 8006372:	bf00      	nop
 8006374:	3708      	adds	r7, #8
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	e000edfc 	.word	0xe000edfc
 8006380:	e0001000 	.word	0xe0001000

08006384 <CPU_TS_TmrRd>:
 *             resolution inadequate to measure desired times.
 *
 */
#if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
CPU_TS_TMR  CPU_TS_TmrRd (void)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
	CPU_TS_TMR  ts_tmr_cnts;


	ts_tmr_cnts = (CPU_TS_TMR) CPU_BSP_REG_DWT_CYCCNT;
 800638a:	4b04      	ldr	r3, [pc, #16]	; (800639c <CPU_TS_TmrRd+0x18>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	607b      	str	r3, [r7, #4]

	return (ts_tmr_cnts);
 8006390:	687b      	ldr	r3, [r7, #4]
}
 8006392:	4618      	mov	r0, r3
 8006394:	370c      	adds	r7, #12
 8006396:	46bd      	mov	sp, r7
 8006398:	bc80      	pop	{r7}
 800639a:	4770      	bx	lr
 800639c:	e0001004 	.word	0xe0001004

080063a0 <BSP_LowLevelInit>:
 * @note Problems with Branch prediction if accessing the flash via the cached
 *       memory interface. In this silicon(step A11), branch prediction has to
 *       be switched off by setting PCON.PBS = 1.
 */
void  BSP_LowLevelInit (void)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
	CPU_INT32U  reg_val;

	/* Disable Watchdog timer */
	DEF_BIT_CLR (BSP_REG_WDT_CTR, BSP_BIT_WDT_CTR_ENB);
 80063a6:	4b0d      	ldr	r3, [pc, #52]	; (80063dc <BSP_LowLevelInit+0x3c>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a0c      	ldr	r2, [pc, #48]	; (80063dc <BSP_LowLevelInit+0x3c>)
 80063ac:	f023 0301 	bic.w	r3, r3, #1
 80063b0:	6013      	str	r3, [r2, #0]
	DEF_BIT_SET (BSP_REG_PREF_PCON, BSP_BIT_PREF_PCON_PBS);
 80063b2:	4b0b      	ldr	r3, [pc, #44]	; (80063e0 <BSP_LowLevelInit+0x40>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a0a      	ldr	r2, [pc, #40]	; (80063e0 <BSP_LowLevelInit+0x40>)
 80063b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063bc:	6013      	str	r3, [r2, #0]

	reg_val = BSP_REG_FLASH0_FCON;
 80063be:	4b09      	ldr	r3, [pc, #36]	; (80063e4 <BSP_LowLevelInit+0x44>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	607b      	str	r3, [r7, #4]
	reg_val = 0x3;
 80063c4:	2303      	movs	r3, #3
 80063c6:	607b      	str	r3, [r7, #4]
	BSP_REG_FLASH0_FCON = reg_val;
 80063c8:	4a06      	ldr	r2, [pc, #24]	; (80063e4 <BSP_LowLevelInit+0x44>)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6013      	str	r3, [r2, #0]

	BSP_SysInit();
 80063ce:	f000 f80b 	bl	80063e8 <BSP_SysInit>
}
 80063d2:	bf00      	nop
 80063d4:	3708      	adds	r7, #8
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	50008004 	.word	0x50008004
 80063e0:	58004000 	.word	0x58004000
 80063e4:	58002014 	.word	0x58002014

080063e8 <BSP_SysInit>:
 *       result in multiple changes of the K2-Divider to avoid big frequency
 *       changes. Between the update of two K2-divider values 6 cycles of fpll
 *       should be waited.
 */
void  BSP_SysInit (void)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
	CPU_INT32U  reg_to;
	CPU_INT32U  reg;

	/* Set VCO and PLL power saving mode to normal behavior */
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON0, (BSP_BIT_PLLCON0_VCOPWD |
 80063ee:	4b74      	ldr	r3, [pc, #464]	; (80065c0 <BSP_SysInit+0x1d8>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a73      	ldr	r2, [pc, #460]	; (80065c0 <BSP_SysInit+0x1d8>)
 80063f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063f8:	f023 0302 	bic.w	r3, r3, #2
 80063fc:	6013      	str	r3, [r2, #0]
					   BSP_BIT_PLLCON0_PLLPWD));

	reg = BSP_REG_SCU_OSCHPCTRL;
 80063fe:	4b71      	ldr	r3, [pc, #452]	; (80065c4 <BSP_SysInit+0x1dc>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	603b      	str	r3, [r7, #0]
	/* Set Ext. Crystal mod; osc power saving isn't entered */
	DEF_BIT_CLR (reg, (BSP_BIT_OSCHPCTRL_MODE_MASK  |
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800640a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800640e:	603b      	str	r3, [r7, #0]
			   BSP_BIT_OSCHPCTRL_OSCVAL_MASK));
	/* Cfg. foscref = fosc / (OSCVAL + 1) */
	DEF_BIT_SET (reg, BSP_BIT_OSCHPCTRL_OSCVAL);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006416:	603b      	str	r3, [r7, #0]
	BSP_REG_SCU_OSCHPCTRL = reg;
 8006418:	4a6a      	ldr	r2, [pc, #424]	; (80065c4 <BSP_SysInit+0x1dc>)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	6013      	str	r3, [r2, #0]

	/* Set ext. osc as PLL input */
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON2, BSP_BIT_PLLCON2_PINSEL);
 800641e:	4b6a      	ldr	r3, [pc, #424]	; (80065c8 <BSP_SysInit+0x1e0>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a69      	ldr	r2, [pc, #420]	; (80065c8 <BSP_SysInit+0x1e0>)
 8006424:	f023 0301 	bic.w	r3, r3, #1
 8006428:	6013      	str	r3, [r2, #0]
	/* Restart osc watchdog of the PLL */
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_OSCRES);
 800642a:	4b65      	ldr	r3, [pc, #404]	; (80065c0 <BSP_SysInit+0x1d8>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a64      	ldr	r2, [pc, #400]	; (80065c0 <BSP_SysInit+0x1d8>)
 8006430:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006434:	6013      	str	r3, [r2, #0]
	/* Wait for stable OSC frequency */
	reg_to = BSP_REG_VAL_TO;
 8006436:	4b65      	ldr	r3, [pc, #404]	; (80065cc <BSP_SysInit+0x1e4>)
 8006438:	607b      	str	r3, [r7, #4]
	while ( (DEF_BIT_IS_CLR (BSP_REG_SCU_PLLSTAT, (BSP_BIT_PLLSTAT_PLLLV |
 800643a:	e002      	b.n	8006442 <BSP_SysInit+0x5a>
						       BSP_BIT_PLLSTAT_PLLHV |
						       BSP_BIT_PLLSTAT_PLLSP))) &
		(reg_to > 0u)) {
		reg_to--;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	3b01      	subs	r3, #1
 8006440:	607b      	str	r3, [r7, #4]
	while ( (DEF_BIT_IS_CLR (BSP_REG_SCU_PLLSTAT, (BSP_BIT_PLLSTAT_PLLLV |
 8006442:	4b63      	ldr	r3, [pc, #396]	; (80065d0 <BSP_SysInit+0x1e8>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f403 7360 	and.w	r3, r3, #896	; 0x380
 800644a:	2b00      	cmp	r3, #0
 800644c:	d101      	bne.n	8006452 <BSP_SysInit+0x6a>
 800644e:	2301      	movs	r3, #1
 8006450:	e000      	b.n	8006454 <BSP_SysInit+0x6c>
 8006452:	2300      	movs	r3, #0
		(reg_to > 0u)) {
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	2a00      	cmp	r2, #0
 8006458:	bf14      	ite	ne
 800645a:	2201      	movne	r2, #1
 800645c:	2200      	moveq	r2, #0
 800645e:	b2d2      	uxtb	r2, r2
						       BSP_BIT_PLLSTAT_PLLSP))) &
 8006460:	4013      	ands	r3, r2
	while ( (DEF_BIT_IS_CLR (BSP_REG_SCU_PLLSTAT, (BSP_BIT_PLLSTAT_PLLLV |
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1ea      	bne.n	800643c <BSP_SysInit+0x54>
	}
	if (reg_to == 0u) {
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d100      	bne.n	800646e <BSP_SysInit+0x86>
		while (DEF_TRUE);
 800646c:	e7fe      	b.n	800646c <BSP_SysInit+0x84>
	}
	/* ---------------- PLL CONFIGURATION ----------------- */
	/* Select OSC_FI as system clk */
	BSP_REG_SCU_SYSCLKCR = BSP_BIT_SYSCLKCR_OSC_FI;
 800646e:	4b59      	ldr	r3, [pc, #356]	; (80065d4 <BSP_SysInit+0x1ec>)
 8006470:	2200      	movs	r2, #0
 8006472:	601a      	str	r2, [r3, #0]
	/* PLL is bypassed */
	DEF_BIT_SET (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_VCOBYP);
 8006474:	4b52      	ldr	r3, [pc, #328]	; (80065c0 <BSP_SysInit+0x1d8>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a51      	ldr	r2, [pc, #324]	; (80065c0 <BSP_SysInit+0x1d8>)
 800647a:	f043 0301 	orr.w	r3, r3, #1
 800647e:	6013      	str	r3, [r2, #0]
	/* Disconnect OSC_HP from PLL */
	DEF_BIT_SET (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_FINDIS);
 8006480:	4b4f      	ldr	r3, [pc, #316]	; (80065c0 <BSP_SysInit+0x1d8>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a4e      	ldr	r2, [pc, #312]	; (80065c0 <BSP_SysInit+0x1d8>)
 8006486:	f043 0310 	orr.w	r3, r3, #16
 800648a:	6013      	str	r3, [r2, #0]

	/* fpll = (NDIV  * fosc) / (PDIV * K2DIV))              */
	/*      = (40 * 12MHz) / (1 * 20)) = 24MHz              */
	BSP_REG_SCU_PLLCON1 = ( ( (BSP_PLLCON1_K1DIV       - 1u) <<  0u)
 800648c:	4b52      	ldr	r3, [pc, #328]	; (80065d8 <BSP_SysInit+0x1f0>)
 800648e:	4a53      	ldr	r2, [pc, #332]	; (80065dc <BSP_SysInit+0x1f4>)
 8006490:	601a      	str	r2, [r3, #0]
				| ( (BSP_PLLCON1_NDIV        - 1u) <<  8u)
				| ( (BSP_PLLCON1_K2DIV_STEP1 - 1u) << 16u)
				| ( (BSP_PLLCON1_PDIV        - 1u) << 24u));

	/* Keeps OSC clk conn. to VCO in case of Loss-of-lock */
	BSP_REG_SCU_PLLCON0 |= BSP_BIT_PLLCON0_OSCDISCDIS;
 8006492:	4b4b      	ldr	r3, [pc, #300]	; (80065c0 <BSP_SysInit+0x1d8>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a4a      	ldr	r2, [pc, #296]	; (80065c0 <BSP_SysInit+0x1d8>)
 8006498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800649c:	6013      	str	r3, [r2, #0]
	/* Connect OSC_HP to PLL */
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_FINDIS);
 800649e:	4b48      	ldr	r3, [pc, #288]	; (80065c0 <BSP_SysInit+0x1d8>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a47      	ldr	r2, [pc, #284]	; (80065c0 <BSP_SysInit+0x1d8>)
 80064a4:	f023 0310 	bic.w	r3, r3, #16
 80064a8:	6013      	str	r3, [r2, #0]
	/* Restart PLL lock detection */
	DEF_BIT_SET (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_RESLD);
 80064aa:	4b45      	ldr	r3, [pc, #276]	; (80065c0 <BSP_SysInit+0x1d8>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a44      	ldr	r2, [pc, #272]	; (80065c0 <BSP_SysInit+0x1d8>)
 80064b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064b4:	6013      	str	r3, [r2, #0]

	/* Wait for PLL Lock */
	reg_to = BSP_REG_VAL_TO;
 80064b6:	4b45      	ldr	r3, [pc, #276]	; (80065cc <BSP_SysInit+0x1e4>)
 80064b8:	607b      	str	r3, [r7, #4]
	while ( (DEF_BIT_IS_CLR (BSP_REG_SCU_PLLSTAT, BSP_BIT_PLLSTAT_VCOLOCK)) &
 80064ba:	e002      	b.n	80064c2 <BSP_SysInit+0xda>
		(reg_to > 0u)) {
		reg_to--;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	3b01      	subs	r3, #1
 80064c0:	607b      	str	r3, [r7, #4]
	while ( (DEF_BIT_IS_CLR (BSP_REG_SCU_PLLSTAT, BSP_BIT_PLLSTAT_VCOLOCK)) &
 80064c2:	4b43      	ldr	r3, [pc, #268]	; (80065d0 <BSP_SysInit+0x1e8>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0304 	and.w	r3, r3, #4
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d101      	bne.n	80064d2 <BSP_SysInit+0xea>
 80064ce:	2301      	movs	r3, #1
 80064d0:	e000      	b.n	80064d4 <BSP_SysInit+0xec>
 80064d2:	2300      	movs	r3, #0
		(reg_to > 0u)) {
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	2a00      	cmp	r2, #0
 80064d8:	bf14      	ite	ne
 80064da:	2201      	movne	r2, #1
 80064dc:	2200      	moveq	r2, #0
 80064de:	b2d2      	uxtb	r2, r2
	while ( (DEF_BIT_IS_CLR (BSP_REG_SCU_PLLSTAT, BSP_BIT_PLLSTAT_VCOLOCK)) &
 80064e0:	4013      	ands	r3, r2
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d1ea      	bne.n	80064bc <BSP_SysInit+0xd4>
	}
	if (reg_to == 0u) {
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d100      	bne.n	80064ee <BSP_SysInit+0x106>
		while (DEF_TRUE);
 80064ec:	e7fe      	b.n	80064ec <BSP_SysInit+0x104>
	}

	/* Normal opertaion, PLL is not bypassed */
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_VCOBYP);
 80064ee:	4b34      	ldr	r3, [pc, #208]	; (80065c0 <BSP_SysInit+0x1d8>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a33      	ldr	r2, [pc, #204]	; (80065c0 <BSP_SysInit+0x1d8>)
 80064f4:	f023 0301 	bic.w	r3, r3, #1
 80064f8:	6013      	str	r3, [r2, #0]
	/* Enable MMC clock */
	DEF_BIT_SET (BSP_REG_SCU_CLKSET, BSP_BIT_CLKSET_MMCEN);
 80064fa:	4b39      	ldr	r3, [pc, #228]	; (80065e0 <BSP_SysInit+0x1f8>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a38      	ldr	r2, [pc, #224]	; (80065e0 <BSP_SysInit+0x1f8>)
 8006500:	f043 0302 	orr.w	r3, r3, #2
 8006504:	6013      	str	r3, [r2, #0]
	/* fcpu = fsys */
	DEF_BIT_CLR (BSP_REG_SCU_CPUCLKCR, BSP_BIT_CPUCLKCR_CPUDIV);
 8006506:	4b37      	ldr	r3, [pc, #220]	; (80065e4 <BSP_SysInit+0x1fc>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a36      	ldr	r2, [pc, #216]	; (80065e4 <BSP_SysInit+0x1fc>)
 800650c:	f023 0301 	bic.w	r3, r3, #1
 8006510:	6013      	str	r3, [r2, #0]
	/* fpb  = fsys */
	DEF_BIT_CLR (BSP_REG_SCU_PBCLKCR,  BSP_BIT_PBCLKCR_PBDIV);
 8006512:	4b35      	ldr	r3, [pc, #212]	; (80065e8 <BSP_SysInit+0x200>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a34      	ldr	r2, [pc, #208]	; (80065e8 <BSP_SysInit+0x200>)
 8006518:	f023 0301 	bic.w	r3, r3, #1
 800651c:	6013      	str	r3, [r2, #0]
	/* fccu = fsys */
	DEF_BIT_CLR (BSP_REG_SCU_CCUCLKCR, BSP_BIT_CCUCLKCR_CCUDIV);
 800651e:	4b33      	ldr	r3, [pc, #204]	; (80065ec <BSP_SysInit+0x204>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a32      	ldr	r2, [pc, #200]	; (80065ec <BSP_SysInit+0x204>)
 8006524:	f023 0301 	bic.w	r3, r3, #1
 8006528:	6013      	str	r3, [r2, #0]
	/* Select PLL clock as system clk */
	BSP_REG_SCU_SYSCLKCR |= BSP_BIT_SYSCLKCR_PLL_CLK;
 800652a:	4b2a      	ldr	r3, [pc, #168]	; (80065d4 <BSP_SysInit+0x1ec>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a29      	ldr	r2, [pc, #164]	; (80065d4 <BSP_SysInit+0x1ec>)
 8006530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006534:	6013      	str	r3, [r2, #0]
	/* Wait between K2 divider updates */
	reg_to = BSP_REG_VAL_TO;
 8006536:	4b25      	ldr	r3, [pc, #148]	; (80065cc <BSP_SysInit+0x1e4>)
 8006538:	607b      	str	r3, [r7, #4]
	while (reg_to > 0u) {
 800653a:	e002      	b.n	8006542 <BSP_SysInit+0x15a>
		reg_to--;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	3b01      	subs	r3, #1
 8006540:	607b      	str	r3, [r7, #4]
	while (reg_to > 0u) {
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1f9      	bne.n	800653c <BSP_SysInit+0x154>
	}
	/* fpll = (NDIV  * fosc) / (PDIV * K2DIV)) */
	/*      = (40 * 12MHz) / (1 * 8)) = 60MHz  */
	reg  = (BSP_REG_SCU_PLLCON1 & ~BSP_PLLCON1_K2DIV_MASK);
 8006548:	4b23      	ldr	r3, [pc, #140]	; (80065d8 <BSP_SysInit+0x1f0>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8006550:	603b      	str	r3, [r7, #0]
	reg |= ( (BSP_PLLCON1_K2DIV_STEP2 - 1u) << 16);
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8006558:	603b      	str	r3, [r7, #0]
	BSP_REG_SCU_PLLCON1 = reg;
 800655a:	4a1f      	ldr	r2, [pc, #124]	; (80065d8 <BSP_SysInit+0x1f0>)
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	6013      	str	r3, [r2, #0]
	/* Wait between K2 divider updates */
	reg_to = BSP_REG_VAL_TO;
 8006560:	4b1a      	ldr	r3, [pc, #104]	; (80065cc <BSP_SysInit+0x1e4>)
 8006562:	607b      	str	r3, [r7, #4]
	while (reg_to > 0u) {
 8006564:	e002      	b.n	800656c <BSP_SysInit+0x184>
		reg_to--;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	3b01      	subs	r3, #1
 800656a:	607b      	str	r3, [r7, #4]
	while (reg_to > 0u) {
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1f9      	bne.n	8006566 <BSP_SysInit+0x17e>
	}

	/* fpll = (NDIV  * fosc) / (PDIV * K2DIV)) */
	/*      = (40 * 12MHz) / (1 * 5)) = 96MHz  */
	reg                 = (BSP_REG_SCU_PLLCON1 & ~BSP_PLLCON1_K2DIV_MASK);
 8006572:	4b19      	ldr	r3, [pc, #100]	; (80065d8 <BSP_SysInit+0x1f0>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800657a:	603b      	str	r3, [r7, #0]
	reg                |= ( (BSP_PLLCON1_K2DIV_STEP3 - 1u) << 16);
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006582:	603b      	str	r3, [r7, #0]
	BSP_REG_SCU_PLLCON1 = reg;
 8006584:	4a14      	ldr	r2, [pc, #80]	; (80065d8 <BSP_SysInit+0x1f0>)
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	6013      	str	r3, [r2, #0]
	/* Wait between K2 divider updates */
	reg_to = BSP_REG_VAL_TO;
 800658a:	4b10      	ldr	r3, [pc, #64]	; (80065cc <BSP_SysInit+0x1e4>)
 800658c:	607b      	str	r3, [r7, #4]
	while (reg_to > 0u) {
 800658e:	e002      	b.n	8006596 <BSP_SysInit+0x1ae>
		reg_to--;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	3b01      	subs	r3, #1
 8006594:	607b      	str	r3, [r7, #4]
	while (reg_to > 0u) {
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d1f9      	bne.n	8006590 <BSP_SysInit+0x1a8>
	}
	/* fpll = (NDIV  * fosc) / (PDIV * K2DIV)) */
	/*      = (40 * 12MHz) / (1 * 4)) = 120MHz */
	reg                 = (BSP_REG_SCU_PLLCON1 & ~BSP_PLLCON1_K2DIV_MASK);
 800659c:	4b0e      	ldr	r3, [pc, #56]	; (80065d8 <BSP_SysInit+0x1f0>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80065a4:	603b      	str	r3, [r7, #0]
	reg                |= ( (BSP_PLLCON1_K2DIV_FINAL - 1u) << 16);
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80065ac:	603b      	str	r3, [r7, #0]
	BSP_REG_SCU_PLLCON1 = reg;
 80065ae:	4a0a      	ldr	r2, [pc, #40]	; (80065d8 <BSP_SysInit+0x1f0>)
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	6013      	str	r3, [r2, #0]
}
 80065b4:	bf00      	nop
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bc80      	pop	{r7}
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop
 80065c0:	50004714 	.word	0x50004714
 80065c4:	50004704 	.word	0x50004704
 80065c8:	5000471c 	.word	0x5000471c
 80065cc:	0007ffff 	.word	0x0007ffff
 80065d0:	50004710 	.word	0x50004710
 80065d4:	5000460c 	.word	0x5000460c
 80065d8:	50004718 	.word	0x50004718
 80065dc:	00132700 	.word	0x00132700
 80065e0:	50004604 	.word	0x50004604
 80065e4:	50004610 	.word	0x50004610
 80065e8:	50004614 	.word	0x50004614
 80065ec:	50004620 	.word	0x50004620

080065f0 <BSP_SysClkFreqGet>:
 *
 * @brief This function is used to retrieve system or CPU clock frequency
 *
 */
CPU_INT32U BSP_SysClkFreqGet (void)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
	CPU_INT08U  pll_p;
	CPU_INT08U  pll_k2;
	CPU_INT32U  cpu_freq;


	sysclk_src = (BSP_REG_SCU_SYSCLKCR & DEF_BIT_FIELD (2u, 16u)) >> 16u;
 80065f6:	4b26      	ldr	r3, [pc, #152]	; (8006690 <BSP_SysClkFreqGet+0xa0>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	0c1b      	lsrs	r3, r3, #16
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	f003 0303 	and.w	r3, r3, #3
 8006602:	72fb      	strb	r3, [r7, #11]
	sysclk_div = (BSP_REG_SCU_SYSCLKCR & DEF_BIT_FIELD (8u, 0u)) + 1u;
 8006604:	4b22      	ldr	r3, [pc, #136]	; (8006690 <BSP_SysClkFreqGet+0xa0>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	b29b      	uxth	r3, r3
 800660a:	b2db      	uxtb	r3, r3
 800660c:	b29b      	uxth	r3, r3
 800660e:	3301      	adds	r3, #1
 8006610:	813b      	strh	r3, [r7, #8]

	switch (sysclk_src) {
 8006612:	7afb      	ldrb	r3, [r7, #11]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d002      	beq.n	800661e <BSP_SysClkFreqGet+0x2e>
 8006618:	2b01      	cmp	r3, #1
 800661a:	d003      	beq.n	8006624 <BSP_SysClkFreqGet+0x34>
 800661c:	e022      	b.n	8006664 <BSP_SysClkFreqGet+0x74>
	case 0:
		/* Fast Internal Oscillator selected as system clk */
		cpu_freq = BSP_CFG_SYS_INT_OSC_FI_FREQ_HZ;
 800661e:	4b1d      	ldr	r3, [pc, #116]	; (8006694 <BSP_SysClkFreqGet+0xa4>)
 8006620:	60fb      	str	r3, [r7, #12]
		break;
 8006622:	e021      	b.n	8006668 <BSP_SysClkFreqGet+0x78>

	case 1:
		/* PLL clock is selected as system clk */
		cpu_freq = BSP_CFG_SYS_XTAL_OSC_FREQ_HZ;
 8006624:	4b1c      	ldr	r3, [pc, #112]	; (8006698 <BSP_SysClkFreqGet+0xa8>)
 8006626:	60fb      	str	r3, [r7, #12]
		pll_n    = (BSP_REG_SCU_PLLCON1 >>  8u) + 1u;
 8006628:	4b1c      	ldr	r3, [pc, #112]	; (800669c <BSP_SysClkFreqGet+0xac>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	0a1b      	lsrs	r3, r3, #8
 800662e:	b2db      	uxtb	r3, r3
 8006630:	3301      	adds	r3, #1
 8006632:	71fb      	strb	r3, [r7, #7]
		pll_p    = (BSP_REG_SCU_PLLCON1 >> 24u) + 1u;
 8006634:	4b19      	ldr	r3, [pc, #100]	; (800669c <BSP_SysClkFreqGet+0xac>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	0e1b      	lsrs	r3, r3, #24
 800663a:	b2db      	uxtb	r3, r3
 800663c:	3301      	adds	r3, #1
 800663e:	71bb      	strb	r3, [r7, #6]
		pll_k2   = (BSP_REG_SCU_PLLCON1 >> 16u) + 1u;
 8006640:	4b16      	ldr	r3, [pc, #88]	; (800669c <BSP_SysClkFreqGet+0xac>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	0c1b      	lsrs	r3, r3, #16
 8006646:	b2db      	uxtb	r3, r3
 8006648:	3301      	adds	r3, #1
 800664a:	717b      	strb	r3, [r7, #5]
		cpu_freq = ( (cpu_freq / pll_p) * pll_n) / pll_k2;
 800664c:	79bb      	ldrb	r3, [r7, #6]
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	fbb2 f3f3 	udiv	r3, r2, r3
 8006654:	79fa      	ldrb	r2, [r7, #7]
 8006656:	fb02 f203 	mul.w	r2, r2, r3
 800665a:	797b      	ldrb	r3, [r7, #5]
 800665c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006660:	60fb      	str	r3, [r7, #12]
		break;
 8006662:	e001      	b.n	8006668 <BSP_SysClkFreqGet+0x78>

	case 2:
	case 3:
	default:
		return ( (CPU_INT32U) 0u);
 8006664:	2300      	movs	r3, #0
 8006666:	e00e      	b.n	8006686 <BSP_SysClkFreqGet+0x96>
	}
	cpu_freq /= sysclk_div;
 8006668:	893b      	ldrh	r3, [r7, #8]
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006670:	60fb      	str	r3, [r7, #12]
	if (DEF_BIT_IS_SET (BSP_REG_SCU_CPUCLKCR, BSP_BIT_CPUCLKCR_CPUDIV)) {
 8006672:	4b0b      	ldr	r3, [pc, #44]	; (80066a0 <BSP_SysClkFreqGet+0xb0>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 0301 	and.w	r3, r3, #1
 800667a:	2b01      	cmp	r3, #1
 800667c:	d102      	bne.n	8006684 <BSP_SysClkFreqGet+0x94>
		cpu_freq /= 2u;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	085b      	lsrs	r3, r3, #1
 8006682:	60fb      	str	r3, [r7, #12]
	}
	return (cpu_freq);
 8006684:	68fb      	ldr	r3, [r7, #12]
}
 8006686:	4618      	mov	r0, r3
 8006688:	3714      	adds	r7, #20
 800668a:	46bd      	mov	sp, r7
 800668c:	bc80      	pop	{r7}
 800668e:	4770      	bx	lr
 8006690:	5000460c 	.word	0x5000460c
 8006694:	016e3600 	.word	0x016e3600
 8006698:	00b71b00 	.word	0x00b71b00
 800669c:	50004718 	.word	0x50004718
 80066a0:	50004610 	.word	0x50004610

080066a4 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	4603      	mov	r3, r0
 80066ac:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80066ae:	79fb      	ldrb	r3, [r7, #7]
 80066b0:	f003 031f 	and.w	r3, r3, #31
 80066b4:	2201      	movs	r2, #1
 80066b6:	fa02 f103 	lsl.w	r1, r2, r3
 80066ba:	4a05      	ldr	r2, [pc, #20]	; (80066d0 <NVIC_EnableIRQ+0x2c>)
 80066bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066c0:	095b      	lsrs	r3, r3, #5
 80066c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80066c6:	bf00      	nop
 80066c8:	370c      	adds	r7, #12
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bc80      	pop	{r7}
 80066ce:	4770      	bx	lr
 80066d0:	e000e100 	.word	0xe000e100

080066d4 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	4603      	mov	r3, r0
 80066dc:	6039      	str	r1, [r7, #0]
 80066de:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80066e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	da0b      	bge.n	8006700 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	b2da      	uxtb	r2, r3
 80066ec:	490c      	ldr	r1, [pc, #48]	; (8006720 <NVIC_SetPriority+0x4c>)
 80066ee:	79fb      	ldrb	r3, [r7, #7]
 80066f0:	f003 030f 	and.w	r3, r3, #15
 80066f4:	3b04      	subs	r3, #4
 80066f6:	0092      	lsls	r2, r2, #2
 80066f8:	b2d2      	uxtb	r2, r2
 80066fa:	440b      	add	r3, r1
 80066fc:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 80066fe:	e009      	b.n	8006714 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	b2da      	uxtb	r2, r3
 8006704:	4907      	ldr	r1, [pc, #28]	; (8006724 <NVIC_SetPriority+0x50>)
 8006706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800670a:	0092      	lsls	r2, r2, #2
 800670c:	b2d2      	uxtb	r2, r2
 800670e:	440b      	add	r3, r1
 8006710:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006714:	bf00      	nop
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	bc80      	pop	{r7}
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	e000ed00 	.word	0xe000ed00
 8006724:	e000e100 	.word	0xe000e100

08006728 <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR> 
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_CHECK_MODULE_PTR(module));
  module->GIDLC |= (uint32_t) CCU8_GIDLC_SPRB_Msk;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	60da      	str	r2, [r3, #12]
}
 800673c:	bf00      	nop
 800673e:	370c      	adds	r7, #12
 8006740:	46bd      	mov	sp, r7
 8006742:	bc80      	pop	{r7}
 8006744:	4770      	bx	lr

08006746 <XMC_CCU8_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_DisableClock()<BR>  XMC_CCU8_EnableMultipleClocks()<BR>  XMC_CCU8_StartPrescaler()<BR>  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_EnableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_number)
{
 8006746:	b480      	push	{r7}
 8006748:	b083      	sub	sp, #12
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
 800674e:	460b      	mov	r3, r1
 8006750:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Module Pointer", XMC_CCU8_CHECK_MODULE_PTR(module));
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1 << slice_number);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	68da      	ldr	r2, [r3, #12]
 8006756:	78fb      	ldrb	r3, [r7, #3]
 8006758:	2101      	movs	r1, #1
 800675a:	fa01 f303 	lsl.w	r3, r1, r3
 800675e:	431a      	orrs	r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	60da      	str	r2, [r3, #12]
}
 8006764:	bf00      	nop
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	bc80      	pop	{r7}
 800676c:	4770      	bx	lr

0800676e <XMC_CCU8_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StartTimer(XMC_CCU8_SLICE_t *const slice)
{
 800676e:	b480      	push	{r7}
 8006770:	b083      	sub	sp, #12
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU8_CHECK_SLICE_PTR(slice));
  slice->TCSET = CCU8_CC8_TCSET_TRBS_Msk;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2201      	movs	r2, #1
 800677a:	60da      	str	r2, [r3, #12]
}
 800677c:	bf00      	nop
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	bc80      	pop	{r7}
 8006784:	4770      	bx	lr

08006786 <XMC_CCU8_SLICE_EnableEvent>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_SetInterruptNode()<BR>  XMC_CCU8_SLICE_EnableMultipleEvents()<BR>  XMC_CCU8_SLICE_DisableEvent()<BR> 
 *  XMC_CCU8_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_EnableEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IRQ_ID_t event)
{
 8006786:	b480      	push	{r7}
 8006788:	b083      	sub	sp, #12
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
 800678e:	460b      	mov	r3, r1
 8006790:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU8_CHECK_SLICE_PTR(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8006798:	78fb      	ldrb	r3, [r7, #3]
 800679a:	2101      	movs	r1, #1
 800679c:	fa01 f303 	lsl.w	r3, r1, r3
 80067a0:	431a      	orrs	r2, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 80067a8:	bf00      	nop
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bc80      	pop	{r7}
 80067b0:	4770      	bx	lr
	...

080067b4 <BSP_ConfigCCU8_Timer>:
  .output_level        = XMC_GPIO_OUTPUT_LEVEL_LOW,
	.output_strength     = XMC_GPIO_OUTPUT_STRENGTH_MEDIUM,
};

_Bool BSP_ConfigCCU8_Timer(void)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	af00      	add	r7, sp, #0
  /* Enable CCU8 module */
  XMC_CCU8_Init(MODULE_PTR, XMC_CCU8_SLICE_MCMS_ACTION_TRANSFER_PR_CR);
 80067b8:	2100      	movs	r1, #0
 80067ba:	483b      	ldr	r0, [pc, #236]	; (80068a8 <BSP_ConfigCCU8_Timer+0xf4>)
 80067bc:	f001 fb0b 	bl	8007dd6 <XMC_CCU8_Init>
  /* Start the prescaler */
  XMC_CCU8_StartPrescaler(MODULE_PTR);
 80067c0:	4839      	ldr	r0, [pc, #228]	; (80068a8 <BSP_ConfigCCU8_Timer+0xf4>)
 80067c2:	f7ff ffb1 	bl	8006728 <XMC_CCU8_StartPrescaler>
  /* Ensure fCCU reaches CCU80 */
  XMC_CCU8_SetModuleClock(MODULE_PTR, XMC_CCU8_CLOCK_SCU);
 80067c6:	2100      	movs	r1, #0
 80067c8:	4837      	ldr	r0, [pc, #220]	; (80068a8 <BSP_ConfigCCU8_Timer+0xf4>)
 80067ca:	f001 fb20 	bl	8007e0e <XMC_CCU8_SetModuleClock>
  /* Configure CCU8x_CC8y slice as timer */
  XMC_CCU8_SLICE_CompareInit(SLICE0_PTR, &g_timer_object_CCU8_CH1);
 80067ce:	4937      	ldr	r1, [pc, #220]	; (80068ac <BSP_ConfigCCU8_Timer+0xf8>)
 80067d0:	4837      	ldr	r0, [pc, #220]	; (80068b0 <BSP_ConfigCCU8_Timer+0xfc>)
 80067d2:	f001 fb36 	bl	8007e42 <XMC_CCU8_SLICE_CompareInit>
  XMC_CCU8_SLICE_CompareInit(SLICE1_PTR, &g_timer_object_CCU8_CH1);
 80067d6:	4935      	ldr	r1, [pc, #212]	; (80068ac <BSP_ConfigCCU8_Timer+0xf8>)
 80067d8:	4836      	ldr	r0, [pc, #216]	; (80068b4 <BSP_ConfigCCU8_Timer+0x100>)
 80067da:	f001 fb32 	bl	8007e42 <XMC_CCU8_SLICE_CompareInit>

  /* Set period match value of the timer */
  XMC_CCU8_SLICE_SetTimerPeriodMatch(SLICE0_PTR, PWM_PERIOD_VALUE);
 80067de:	f247 2170 	movw	r1, #29296	; 0x7270
 80067e2:	4833      	ldr	r0, [pc, #204]	; (80068b0 <BSP_ConfigCCU8_Timer+0xfc>)
 80067e4:	f001 fb67 	bl	8007eb6 <XMC_CCU8_SLICE_SetTimerPeriodMatch>
  XMC_CCU8_SLICE_SetTimerPeriodMatch(SLICE1_PTR, PWM_PERIOD_VALUE);
 80067e8:	f247 2170 	movw	r1, #29296	; 0x7270
 80067ec:	4831      	ldr	r0, [pc, #196]	; (80068b4 <BSP_ConfigCCU8_Timer+0x100>)
 80067ee:	f001 fb62 	bl	8007eb6 <XMC_CCU8_SLICE_SetTimerPeriodMatch>

  /* Set timer compare match value for channel 1 - 50% duty */
  XMC_CCU8_SLICE_SetTimerCompareMatch(SLICE0_PTR, XMC_CCU8_SLICE_COMPARE_CHANNEL_1, PWM_DEF_COMP_VALUE);
 80067f2:	f643 1238 	movw	r2, #14648	; 0x3938
 80067f6:	2100      	movs	r1, #0
 80067f8:	482d      	ldr	r0, [pc, #180]	; (80068b0 <BSP_ConfigCCU8_Timer+0xfc>)
 80067fa:	f001 fb6a 	bl	8007ed2 <XMC_CCU8_SLICE_SetTimerCompareMatch>
  XMC_CCU8_SLICE_SetTimerCompareMatch(SLICE0_PTR, XMC_CCU8_SLICE_COMPARE_CHANNEL_2, PWM_DEF_COMP_VALUE);
 80067fe:	f643 1238 	movw	r2, #14648	; 0x3938
 8006802:	2101      	movs	r1, #1
 8006804:	482a      	ldr	r0, [pc, #168]	; (80068b0 <BSP_ConfigCCU8_Timer+0xfc>)
 8006806:	f001 fb64 	bl	8007ed2 <XMC_CCU8_SLICE_SetTimerCompareMatch>

  XMC_CCU8_SLICE_SetTimerCompareMatch(SLICE1_PTR, XMC_CCU8_SLICE_COMPARE_CHANNEL_2, PWM_DEF_COMP_VALUE);
 800680a:	f643 1238 	movw	r2, #14648	; 0x3938
 800680e:	2101      	movs	r1, #1
 8006810:	4828      	ldr	r0, [pc, #160]	; (80068b4 <BSP_ConfigCCU8_Timer+0x100>)
 8006812:	f001 fb5e 	bl	8007ed2 <XMC_CCU8_SLICE_SetTimerCompareMatch>

  /* Transfer value from shadow timer registers to actual timer registers */
  XMC_CCU8_EnableShadowTransfer(MODULE_PTR, XMC_CCU8_SHADOW_TRANSFER_SLICE_0);
 8006816:	2101      	movs	r1, #1
 8006818:	4823      	ldr	r0, [pc, #140]	; (80068a8 <BSP_ConfigCCU8_Timer+0xf4>)
 800681a:	f001 fb71 	bl	8007f00 <XMC_CCU8_EnableShadowTransfer>

  XMC_CCU8_EnableShadowTransfer(MODULE_PTR, XMC_CCU8_SHADOW_TRANSFER_SLICE_1);
 800681e:	2110      	movs	r1, #16
 8006820:	4821      	ldr	r0, [pc, #132]	; (80068a8 <BSP_ConfigCCU8_Timer+0xf4>)
 8006822:	f001 fb6d 	bl	8007f00 <XMC_CCU8_EnableShadowTransfer>

  /* Configure events */
  /* Enable events: Period Match and Compare Match-Ch2 */
  XMC_CCU8_SLICE_EnableEvent(SLICE0_PTR, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1);
 8006826:	2102      	movs	r1, #2
 8006828:	4821      	ldr	r0, [pc, #132]	; (80068b0 <BSP_ConfigCCU8_Timer+0xfc>)
 800682a:	f7ff ffac 	bl	8006786 <XMC_CCU8_SLICE_EnableEvent>
  XMC_CCU8_SLICE_EnableEvent(SLICE0_PTR, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2);
 800682e:	2104      	movs	r1, #4
 8006830:	481f      	ldr	r0, [pc, #124]	; (80068b0 <BSP_ConfigCCU8_Timer+0xfc>)
 8006832:	f7ff ffa8 	bl	8006786 <XMC_CCU8_SLICE_EnableEvent>

  XMC_CCU8_SLICE_EnableEvent(SLICE1_PTR, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2);
 8006836:	2104      	movs	r1, #4
 8006838:	481e      	ldr	r0, [pc, #120]	; (80068b4 <BSP_ConfigCCU8_Timer+0x100>)
 800683a:	f7ff ffa4 	bl	8006786 <XMC_CCU8_SLICE_EnableEvent>

  /* Connect event to SR0 and SR2 */
  XMC_CCU8_SLICE_SetInterruptNode(SLICE0_PTR, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH, XMC_CCU8_SLICE_SR_ID_0);
 800683e:	2200      	movs	r2, #0
 8006840:	2100      	movs	r1, #0
 8006842:	481b      	ldr	r0, [pc, #108]	; (80068b0 <BSP_ConfigCCU8_Timer+0xfc>)
 8006844:	f001 fb6c 	bl	8007f20 <XMC_CCU8_SLICE_SetInterruptNode>
  XMC_CCU8_SLICE_SetInterruptNode(SLICE0_PTR, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH, XMC_CCU8_SLICE_SR_ID_2);
 8006848:	2202      	movs	r2, #2
 800684a:	2100      	movs	r1, #0
 800684c:	4818      	ldr	r0, [pc, #96]	; (80068b0 <BSP_ConfigCCU8_Timer+0xfc>)
 800684e:	f001 fb67 	bl	8007f20 <XMC_CCU8_SLICE_SetInterruptNode>

  XMC_CCU8_SLICE_SetInterruptNode(SLICE1_PTR, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH, XMC_CCU8_SLICE_SR_ID_2);
 8006852:	2202      	movs	r2, #2
 8006854:	2100      	movs	r1, #0
 8006856:	4817      	ldr	r0, [pc, #92]	; (80068b4 <BSP_ConfigCCU8_Timer+0x100>)
 8006858:	f001 fb62 	bl	8007f20 <XMC_CCU8_SLICE_SetInterruptNode>

  /* Configure NVIC */
  /* Set priority */
  NVIC_SetPriority(CCU80_0_IRQn, 5U);
 800685c:	2105      	movs	r1, #5
 800685e:	203c      	movs	r0, #60	; 0x3c
 8006860:	f7ff ff38 	bl	80066d4 <NVIC_SetPriority>
  NVIC_SetPriority(CCU80_2_IRQn, 4U);
 8006864:	2104      	movs	r1, #4
 8006866:	203e      	movs	r0, #62	; 0x3e
 8006868:	f7ff ff34 	bl	80066d4 <NVIC_SetPriority>

  NVIC_SetPriority(CCU80_3_IRQn, 3U);
 800686c:	2103      	movs	r1, #3
 800686e:	203f      	movs	r0, #63	; 0x3f
 8006870:	f7ff ff30 	bl	80066d4 <NVIC_SetPriority>
  /* Enable IRQ */
  NVIC_EnableIRQ(CCU80_0_IRQn);
 8006874:	203c      	movs	r0, #60	; 0x3c
 8006876:	f7ff ff15 	bl	80066a4 <NVIC_EnableIRQ>
  NVIC_EnableIRQ(CCU80_2_IRQn);
 800687a:	203e      	movs	r0, #62	; 0x3e
 800687c:	f7ff ff12 	bl	80066a4 <NVIC_EnableIRQ>

  NVIC_EnableIRQ(CCU80_3_IRQn);
 8006880:	203f      	movs	r0, #63	; 0x3f
 8006882:	f7ff ff0f 	bl	80066a4 <NVIC_EnableIRQ>
   /*Initializes the GPIO*/
  // XMC_GPIO_Init(PORT0_5, &PWM_1_gpio_out_config);
  // XMC_GPIO_Init(PORT0_10, &PWM_1_gpio_out_config);
  // XMC_GPIO_Init(PORT0_9, &PWM_1_gpio_out_config);
  /* Get the slice out of idle mode */
  XMC_CCU8_EnableClock(MODULE_PTR, SLICE0_NUMBER);
 8006886:	2100      	movs	r1, #0
 8006888:	4807      	ldr	r0, [pc, #28]	; (80068a8 <BSP_ConfigCCU8_Timer+0xf4>)
 800688a:	f7ff ff5c 	bl	8006746 <XMC_CCU8_EnableClock>

  XMC_CCU8_EnableClock(MODULE_PTR, SLICE1_NUMBER);
 800688e:	2101      	movs	r1, #1
 8006890:	4805      	ldr	r0, [pc, #20]	; (80068a8 <BSP_ConfigCCU8_Timer+0xf4>)
 8006892:	f7ff ff58 	bl	8006746 <XMC_CCU8_EnableClock>
  /* Start the timer */
  XMC_CCU8_SLICE_StartTimer(SLICE0_PTR);
 8006896:	4806      	ldr	r0, [pc, #24]	; (80068b0 <BSP_ConfigCCU8_Timer+0xfc>)
 8006898:	f7ff ff69 	bl	800676e <XMC_CCU8_SLICE_StartTimer>

  XMC_CCU8_SLICE_StartTimer(SLICE1_PTR);
 800689c:	4805      	ldr	r0, [pc, #20]	; (80068b4 <BSP_ConfigCCU8_Timer+0x100>)
 800689e:	f7ff ff66 	bl	800676e <XMC_CCU8_SLICE_StartTimer>

  return true;
 80068a2:	2301      	movs	r3, #1
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	40020000 	.word	0x40020000
 80068ac:	20000004 	.word	0x20000004
 80068b0:	40020100 	.word	0x40020100
 80068b4:	40020200 	.word	0x40020200

080068b8 <NVIC_EnableIRQ>:
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	4603      	mov	r3, r0
 80068c0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80068c2:	79fb      	ldrb	r3, [r7, #7]
 80068c4:	f003 031f 	and.w	r3, r3, #31
 80068c8:	2201      	movs	r2, #1
 80068ca:	fa02 f103 	lsl.w	r1, r2, r3
 80068ce:	4a05      	ldr	r2, [pc, #20]	; (80068e4 <NVIC_EnableIRQ+0x2c>)
 80068d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068d4:	095b      	lsrs	r3, r3, #5
 80068d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80068da:	bf00      	nop
 80068dc:	370c      	adds	r7, #12
 80068de:	46bd      	mov	sp, r7
 80068e0:	bc80      	pop	{r7}
 80068e2:	4770      	bx	lr
 80068e4:	e000e100 	.word	0xe000e100

080068e8 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	460b      	mov	r3, r1
 80068f2:	70fb      	strb	r3, [r7, #3]
 80068f4:	4613      	mov	r3, r2
 80068f6:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 80068f8:	78fb      	ldrb	r3, [r7, #3]
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	3306      	adds	r3, #6
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	4413      	add	r3, r2
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f023 0107 	bic.w	r1, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8006908:	78ba      	ldrb	r2, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 800690a:	78fb      	ldrb	r3, [r7, #3]
 800690c:	430a      	orrs	r2, r1
 800690e:	6879      	ldr	r1, [r7, #4]
 8006910:	3306      	adds	r3, #6
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	440b      	add	r3, r1
 8006916:	605a      	str	r2, [r3, #4]
}
 8006918:	bf00      	nop
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	bc80      	pop	{r7}
 8006920:	4770      	bx	lr

08006922 <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
 8006922:	b480      	push	{r7}
 8006924:	b083      	sub	sp, #12
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692e:	f023 030f 	bic.w	r3, r3, #15
 8006932:	f043 0202 	orr.w	r2, r3, #2
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	641a      	str	r2, [r3, #64]	; 0x40
}
 800693a:	bf00      	nop
 800693c:	370c      	adds	r7, #12
 800693e:	46bd      	mov	sp, r7
 8006940:	bc80      	pop	{r7}
 8006942:	4770      	bx	lr

08006944 <XMC_UART_CH_SetInterruptNodePointer>:
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                         const uint8_t service_request)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	460b      	mov	r3, r1
 800694e:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetInterruptNodePointer(channel, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL, 
 8006950:	78fb      	ldrb	r3, [r7, #3]
 8006952:	461a      	mov	r2, r3
 8006954:	2110      	movs	r1, #16
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f001 fe2e 	bl	80085b8 <XMC_USIC_CH_SetInterruptNodePointer>
                                              (uint32_t)service_request);
}
 800695c:	bf00      	nop
 800695e:	3708      	adds	r7, #8
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <XMC_UART_CH_SetInputSource>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_EnableInputInversion() \n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_UART_CH_INPUT_t input, const uint8_t source)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	460b      	mov	r3, r1
 800696e:	70fb      	strb	r3, [r7, #3]
 8006970:	4613      	mov	r3, r2
 8006972:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = 0U;
 8006974:	78fb      	ldrb	r3, [r7, #3]
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	3306      	adds	r3, #6
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	4413      	add	r3, r2
 800697e:	2200      	movs	r2, #0
 8006980:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 8006982:	78ba      	ldrb	r2, [r7, #2]
 8006984:	78fb      	ldrb	r3, [r7, #3]
 8006986:	4619      	mov	r1, r3
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f7ff ffad 	bl	80068e8 <XMC_USIC_CH_SetInputSource>
}
 800698e:	bf00      	nop
 8006990:	3708      	adds	r7, #8
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
	...

08006998 <BSP_UART_Init>:
/**
 * @brief  Initialize UART1 CH1 - Tx=P0.1, Rx=P0.0, 9600-8N1
 * @return true on success, false otherwise
 */
_Bool BSP_UART_Init (void)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	af00      	add	r7, sp, #0

	XMC_UART_CH_Init (XMC_UART1_CH1, &uart_config);
 800699c:	4917      	ldr	r1, [pc, #92]	; (80069fc <BSP_UART_Init+0x64>)
 800699e:	4818      	ldr	r0, [pc, #96]	; (8006a00 <BSP_UART_Init+0x68>)
 80069a0:	f001 fb4c 	bl	800803c <XMC_UART_CH_Init>
	XMC_UART_CH_Init (XMC_UART1_CH0, &uart_config);
 80069a4:	4915      	ldr	r1, [pc, #84]	; (80069fc <BSP_UART_Init+0x64>)
 80069a6:	4817      	ldr	r0, [pc, #92]	; (8006a04 <BSP_UART_Init+0x6c>)
 80069a8:	f001 fb48 	bl	800803c <XMC_UART_CH_Init>
	XMC_UART_CH_SetInputSource (XMC_UART1_CH1, XMC_UART_CH_INPUT_RXD, 
 80069ac:	2203      	movs	r2, #3
 80069ae:	2100      	movs	r1, #0
 80069b0:	4813      	ldr	r0, [pc, #76]	; (8006a00 <BSP_UART_Init+0x68>)
 80069b2:	f7ff ffd7 	bl	8006964 <XMC_UART_CH_SetInputSource>
	                            USIC1_C1_DX0_P0_0);

	XMC_UART_CH_SetInterruptNodePointer	(XMC_UART1_CH1, 0) ;
 80069b6:	2100      	movs	r1, #0
 80069b8:	4811      	ldr	r0, [pc, #68]	; (8006a00 <BSP_UART_Init+0x68>)
 80069ba:	f7ff ffc3 	bl	8006944 <XMC_UART_CH_SetInterruptNodePointer>
	XMC_UART_CH_EnableEvent (XMC_UART1_CH1, XMC_UART_CH_EVENT_STANDARD_RECEIVE);
 80069be:	4912      	ldr	r1, [pc, #72]	; (8006a08 <BSP_UART_Init+0x70>)
 80069c0:	480f      	ldr	r0, [pc, #60]	; (8006a00 <BSP_UART_Init+0x68>)
 80069c2:	f001 fbcf 	bl	8008164 <XMC_UART_CH_EnableEvent>
	XMC_UART_CH_EnableEvent (XMC_UART1_CH1, 
 80069c6:	f04f 2180 	mov.w	r1, #2147516416	; 0x80008000
 80069ca:	480d      	ldr	r0, [pc, #52]	; (8006a00 <BSP_UART_Init+0x68>)
 80069cc:	f001 fbca 	bl	8008164 <XMC_UART_CH_EnableEvent>
	                         XMC_UART_CH_EVENT_ALTERNATIVE_RECEIVE);
	NVIC_EnableIRQ (USIC1_0_IRQn);
 80069d0:	205a      	movs	r0, #90	; 0x5a
 80069d2:	f7ff ff71 	bl	80068b8 <NVIC_EnableIRQ>

	XMC_UART_CH_Start (XMC_UART1_CH1);
 80069d6:	480a      	ldr	r0, [pc, #40]	; (8006a00 <BSP_UART_Init+0x68>)
 80069d8:	f7ff ffa3 	bl	8006922 <XMC_UART_CH_Start>
	XMC_UART_CH_Start (XMC_UART1_CH0);
 80069dc:	4809      	ldr	r0, [pc, #36]	; (8006a04 <BSP_UART_Init+0x6c>)
 80069de:	f7ff ffa0 	bl	8006922 <XMC_UART_CH_Start>

	XMC_GPIO_SetMode (UART_TX, XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT2);
 80069e2:	2290      	movs	r2, #144	; 0x90
 80069e4:	2101      	movs	r1, #1
 80069e6:	4809      	ldr	r0, [pc, #36]	; (8006a0c <BSP_UART_Init+0x74>)
 80069e8:	f000 ffbc 	bl	8007964 <XMC_GPIO_SetMode>
	XMC_GPIO_SetMode (UART_RX, XMC_GPIO_MODE_INPUT_TRISTATE);
 80069ec:	2200      	movs	r2, #0
 80069ee:	2100      	movs	r1, #0
 80069f0:	4806      	ldr	r0, [pc, #24]	; (8006a0c <BSP_UART_Init+0x74>)
 80069f2:	f000 ffb7 	bl	8007964 <XMC_GPIO_SetMode>

	return true;
 80069f6:	2301      	movs	r3, #1
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	20000014 	.word	0x20000014
 8006a00:	48020200 	.word	0x48020200
 8006a04:	48020000 	.word	0x48020000
 8006a08:	80004000 	.word	0x80004000
 8006a0c:	48028000 	.word	0x48028000

08006a10 <XMC_USIC_CH_SetInputSource>:
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	460b      	mov	r3, r1
 8006a1a:	70fb      	strb	r3, [r7, #3]
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8006a20:	78fb      	ldrb	r3, [r7, #3]
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	3306      	adds	r3, #6
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	4413      	add	r3, r2
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	f023 0107 	bic.w	r1, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8006a30:	78ba      	ldrb	r2, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8006a32:	78fb      	ldrb	r3, [r7, #3]
 8006a34:	430a      	orrs	r2, r1
 8006a36:	6879      	ldr	r1, [r7, #4]
 8006a38:	3306      	adds	r3, #6
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	440b      	add	r3, r1
 8006a3e:	605a      	str	r2, [r3, #4]
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bc80      	pop	{r7}
 8006a48:	4770      	bx	lr

08006a4a <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 8006a4a:	b480      	push	{r7}
 8006a4c:	b083      	sub	sp, #12
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
 8006a52:	460b      	mov	r3, r1
 8006a54:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5a:	f023 020f 	bic.w	r2, r3, #15
 8006a5e:	78fb      	ldrb	r3, [r7, #3]
 8006a60:	431a      	orrs	r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	641a      	str	r2, [r3, #64]	; 0x40
}
 8006a66:	bf00      	nop
 8006a68:	370c      	adds	r7, #12
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bc80      	pop	{r7}
 8006a6e:	4770      	bx	lr

08006a70 <XMC_SPI_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Init(), XMC_SPI_CH_Stop()
 */
__STATIC_INLINE void XMC_SPI_CH_Start(XMC_USIC_CH_t *const channel)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  /* USIC channel in SPI mode */
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_SPI);
 8006a78:	2101      	movs	r1, #1
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f7ff ffe5 	bl	8006a4a <XMC_USIC_CH_SetMode>
}
 8006a80:	bf00      	nop
 8006a82:	3708      	adds	r7, #8
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <XMC_SPI_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_ClearStatusFlag()
 */
__STATIC_INLINE uint32_t XMC_SPI_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  return channel->PSR_SSCMode;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bc80      	pop	{r7}
 8006a9c:	4770      	bx	lr

08006a9e <XMC_SPI_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_GetStatusFlag()
 */
__STATIC_INLINE void XMC_SPI_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b083      	sub	sp, #12
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
 8006aa6:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	431a      	orrs	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8006ab4:	bf00      	nop
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bc80      	pop	{r7}
 8006abc:	4770      	bx	lr

08006abe <XMC_SPI_CH_SetInputSource>:
 * the SPI communication.
 */
__STATIC_INLINE void XMC_SPI_CH_SetInputSource(XMC_USIC_CH_t *const channel,
                                               const XMC_SPI_CH_INPUT_t input,
                                               const uint8_t source)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b082      	sub	sp, #8
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	70fb      	strb	r3, [r7, #3]
 8006aca:	4613      	mov	r3, r2
 8006acc:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = USIC_CH_DX0CR_INSW_Msk;
 8006ace:	78fb      	ldrb	r3, [r7, #3]
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	3306      	adds	r3, #6
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	4413      	add	r3, r2
 8006ad8:	2210      	movs	r2, #16
 8006ada:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 8006adc:	78ba      	ldrb	r2, [r7, #2]
 8006ade:	78fb      	ldrb	r3, [r7, #3]
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f7ff ff94 	bl	8006a10 <XMC_USIC_CH_SetInputSource>
}
 8006ae8:	bf00      	nop
 8006aea:	3708      	adds	r7, #8
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <XMC_GPIO_SetOutputHigh>:
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	460b      	mov	r3, r1
 8006afa:	70fb      	strb	r3, [r7, #3]
  port->OMR = (uint32_t)0x1U << pin;
 8006afc:	78fb      	ldrb	r3, [r7, #3]
 8006afe:	2201      	movs	r2, #1
 8006b00:	409a      	lsls	r2, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	605a      	str	r2, [r3, #4]
}
 8006b06:	bf00      	nop
 8006b08:	370c      	adds	r7, #12
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bc80      	pop	{r7}
 8006b0e:	4770      	bx	lr

08006b10 <_init_spi>:
 *  @brief This function configures the SPI interface to communicate with the MCP23S08 & the MCP3004
 *  @param none
 *  @return on success this function returns SPI_OK (0)
 */
uint8_t _init_spi(void)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	af00      	add	r7, sp, #0
	/*Initialize and Start SPI*/
	XMC_SPI_CH_Init(XMC_SPI1_CH0, &spi_config);
 8006b14:	4929      	ldr	r1, [pc, #164]	; (8006bbc <_init_spi+0xac>)
 8006b16:	482a      	ldr	r0, [pc, #168]	; (8006bc0 <_init_spi+0xb0>)
 8006b18:	f001 fb6c 	bl	80081f4 <XMC_SPI_CH_Init>

	/*Input source selected*/
	XMC_SPI_CH_SetInputSource(XMC_SPI1_CH0,XMC_SPI_CH_INPUT_DIN0,USIC1_C0_DX0_P0_4);
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	2100      	movs	r1, #0
 8006b20:	4827      	ldr	r0, [pc, #156]	; (8006bc0 <_init_spi+0xb0>)
 8006b22:	f7ff ffcc 	bl	8006abe <XMC_SPI_CH_SetInputSource>
	XMC_SPI_CH_EnableEvent(XMC_SPI1_CH0,XMC_SPI_CH_EVENT_STANDARD_RECEIVE);
 8006b26:	4927      	ldr	r1, [pc, #156]	; (8006bc4 <_init_spi+0xb4>)
 8006b28:	4825      	ldr	r0, [pc, #148]	; (8006bc0 <_init_spi+0xb0>)
 8006b2a:	f001 fbf7 	bl	800831c <XMC_SPI_CH_EnableEvent>
	XMC_SPI_CH_Start(XMC_SPI1_CH0);
 8006b2e:	4824      	ldr	r0, [pc, #144]	; (8006bc0 <_init_spi+0xb0>)
 8006b30:	f7ff ff9e 	bl	8006a70 <XMC_SPI_CH_Start>

	/*GPIO configuration*/
	XMC_GPIO_SetMode(SPI_MOSI, XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT2);
 8006b34:	2290      	movs	r2, #144	; 0x90
 8006b36:	2105      	movs	r1, #5
 8006b38:	4823      	ldr	r0, [pc, #140]	; (8006bc8 <_init_spi+0xb8>)
 8006b3a:	f000 ff13 	bl	8007964 <XMC_GPIO_SetMode>
	XMC_GPIO_SetMode(SPI_MISO, XMC_GPIO_MODE_INPUT_TRISTATE);
 8006b3e:	2200      	movs	r2, #0
 8006b40:	2104      	movs	r1, #4
 8006b42:	4821      	ldr	r0, [pc, #132]	; (8006bc8 <_init_spi+0xb8>)
 8006b44:	f000 ff0e 	bl	8007964 <XMC_GPIO_SetMode>
	XMC_GPIO_SetMode(SPI_SCLK, XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT2);
 8006b48:	2290      	movs	r2, #144	; 0x90
 8006b4a:	210b      	movs	r1, #11
 8006b4c:	481e      	ldr	r0, [pc, #120]	; (8006bc8 <_init_spi+0xb8>)
 8006b4e:	f000 ff09 	bl	8007964 <XMC_GPIO_SetMode>

	gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL;
 8006b52:	4b1e      	ldr	r3, [pc, #120]	; (8006bcc <_init_spi+0xbc>)
 8006b54:	2280      	movs	r2, #128	; 0x80
 8006b56:	701a      	strb	r2, [r3, #0]
	gpio_config.output_level = XMC_GPIO_OUTPUT_LEVEL_HIGH;
 8006b58:	4b1c      	ldr	r3, [pc, #112]	; (8006bcc <_init_spi+0xbc>)
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	605a      	str	r2, [r3, #4]
	gpio_config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_MEDIUM;
 8006b5e:	4b1b      	ldr	r3, [pc, #108]	; (8006bcc <_init_spi+0xbc>)
 8006b60:	2204      	movs	r2, #4
 8006b62:	721a      	strb	r2, [r3, #8]

	XMC_GPIO_Init(MCP23S08_SS, &gpio_config); //IO-Expander CS
 8006b64:	4a19      	ldr	r2, [pc, #100]	; (8006bcc <_init_spi+0xbc>)
 8006b66:	2102      	movs	r1, #2
 8006b68:	4819      	ldr	r0, [pc, #100]	; (8006bd0 <_init_spi+0xc0>)
 8006b6a:	f001 f877 	bl	8007c5c <XMC_GPIO_Init>
	XMC_GPIO_SetOutputHigh(MCP23S08_SS);
 8006b6e:	2102      	movs	r1, #2
 8006b70:	4817      	ldr	r0, [pc, #92]	; (8006bd0 <_init_spi+0xc0>)
 8006b72:	f7ff ffbd 	bl	8006af0 <XMC_GPIO_SetOutputHigh>

	gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL;
 8006b76:	4b15      	ldr	r3, [pc, #84]	; (8006bcc <_init_spi+0xbc>)
 8006b78:	2280      	movs	r2, #128	; 0x80
 8006b7a:	701a      	strb	r2, [r3, #0]
	gpio_config.output_level = XMC_GPIO_OUTPUT_LEVEL_HIGH;
 8006b7c:	4b13      	ldr	r3, [pc, #76]	; (8006bcc <_init_spi+0xbc>)
 8006b7e:	2201      	movs	r2, #1
 8006b80:	605a      	str	r2, [r3, #4]
	gpio_config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_MEDIUM;
 8006b82:	4b12      	ldr	r3, [pc, #72]	; (8006bcc <_init_spi+0xbc>)
 8006b84:	2204      	movs	r2, #4
 8006b86:	721a      	strb	r2, [r3, #8]

	XMC_GPIO_Init(MCP3004_SS, &gpio_config); //ADC-CS
 8006b88:	4a10      	ldr	r2, [pc, #64]	; (8006bcc <_init_spi+0xbc>)
 8006b8a:	2104      	movs	r1, #4
 8006b8c:	4810      	ldr	r0, [pc, #64]	; (8006bd0 <_init_spi+0xc0>)
 8006b8e:	f001 f865 	bl	8007c5c <XMC_GPIO_Init>
	XMC_GPIO_SetOutputHigh(MCP3004_SS);
 8006b92:	2104      	movs	r1, #4
 8006b94:	480e      	ldr	r0, [pc, #56]	; (8006bd0 <_init_spi+0xc0>)
 8006b96:	f7ff ffab 	bl	8006af0 <XMC_GPIO_SetOutputHigh>

	gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL;
 8006b9a:	4b0c      	ldr	r3, [pc, #48]	; (8006bcc <_init_spi+0xbc>)
 8006b9c:	2280      	movs	r2, #128	; 0x80
 8006b9e:	701a      	strb	r2, [r3, #0]
	gpio_config.output_level = XMC_GPIO_OUTPUT_LEVEL_HIGH;
 8006ba0:	4b0a      	ldr	r3, [pc, #40]	; (8006bcc <_init_spi+0xbc>)
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	605a      	str	r2, [r3, #4]
	gpio_config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_MEDIUM;
 8006ba6:	4b09      	ldr	r3, [pc, #36]	; (8006bcc <_init_spi+0xbc>)
 8006ba8:	2204      	movs	r2, #4
 8006baa:	721a      	strb	r2, [r3, #8]

	XMC_GPIO_Init(MCP23S08_RESET, &gpio_config); //IO-Expander Reset
 8006bac:	4a07      	ldr	r2, [pc, #28]	; (8006bcc <_init_spi+0xbc>)
 8006bae:	210c      	movs	r1, #12
 8006bb0:	4805      	ldr	r0, [pc, #20]	; (8006bc8 <_init_spi+0xb8>)
 8006bb2:	f001 f853 	bl	8007c5c <XMC_GPIO_Init>

	return SPI_OK;
 8006bb6:	2300      	movs	r3, #0
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	20000020 	.word	0x20000020
 8006bc0:	48020000 	.word	0x48020000
 8006bc4:	80004000 	.word	0x80004000
 8006bc8:	48028000 	.word	0x48028000
 8006bcc:	20003314 	.word	0x20003314
 8006bd0:	48028100 	.word	0x48028100

08006bd4 <_spi_transmit>:
 *  @param channel ... SPI channel
 *		   spi_data .. byte which should be transmitted
 *  @return on success this function returns SPI_OK (0)
 */
uint8_t _spi_transmit(XMC_USIC_CH_t *const channel, uint8_t spi_data)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	460b      	mov	r3, r1
 8006bde:	70fb      	strb	r3, [r7, #3]
	XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

	XMC_SPI_CH_Transmit(channel, spi_data, XMC_SPI_CH_MODE_STANDARD);
 8006be0:	78fb      	ldrb	r3, [r7, #3]
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	2200      	movs	r2, #0
 8006be6:	4619      	mov	r1, r3
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f001 fb39 	bl	8008260 <XMC_SPI_CH_Transmit>
	while((XMC_SPI_CH_GetStatusFlag(channel) & XMC_SPI_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION) == 0U);
 8006bee:	bf00      	nop
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f7ff ff49 	bl	8006a88 <XMC_SPI_CH_GetStatusFlag>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d0f7      	beq.n	8006bf0 <_spi_transmit+0x1c>
	XMC_SPI_CH_ClearStatusFlag(channel, XMC_SPI_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION);
 8006c00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f7ff ff4a 	bl	8006a9e <XMC_SPI_CH_ClearStatusFlag>

	return SPI_OK;
 8006c0a:	2300      	movs	r3, #0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3708      	adds	r7, #8
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <_spi_receive>:
 *  @brief This function reads data from a specific SPI channel
 *  @param channel ... SPI channel
 *  @return byte which was received and is valid
 */
uint8_t _spi_receive(XMC_USIC_CH_t *const channel)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
	XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

	return XMC_SPI_CH_GetReceivedData(channel);
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f001 fb56 	bl	80082ce <XMC_SPI_CH_GetReceivedData>
 8006c22:	4603      	mov	r3, r0
 8006c24:	b2db      	uxtb	r3, r3
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3708      	adds	r7, #8
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
	...

08006c30 <BSP_Init>:
 * @params none
 * @returns none
 * @brief Initialization of the board support.
 */
void  BSP_Init (void)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	af00      	add	r7, sp, #0
	BSP_IntInit();
 8006c34:	f000 f8de 	bl	8006df4 <BSP_IntInit>
	BSP_UART_Init();
 8006c38:	f7ff feae 	bl	8006998 <BSP_UART_Init>
	BSP_DAC0_1_Init();
 8006c3c:	f000 fd8e 	bl	800775c <BSP_DAC0_1_Init>
	BSP_ConfigCCU4_Timer();
 8006c40:	f000 fd08 	bl	8007654 <BSP_ConfigCCU4_Timer>
	BSP_ConfigCCU8_Timer();
 8006c44:	f7ff fdb6 	bl	80067b4 <BSP_ConfigCCU8_Timer>
	initRetargetSwo();
 8006c48:	f000 f83e 	bl	8006cc8 <initRetargetSwo>
  if(_init_spi()!=SPI_OK)
 8006c4c:	f7ff ff60 	bl	8006b10 <_init_spi>
  {
	  /*Error should never get here*/
  }
	_mcp23s08_reset();
 8006c50:	f7ff fb12 	bl	8006278 <_mcp23s08_reset>
	_mcp23s08_reset_ss(MCP23S08_SS);
 8006c54:	2102      	movs	r1, #2
 8006c56:	4807      	ldr	r0, [pc, #28]	; (8006c74 <BSP_Init+0x44>)
 8006c58:	f7ff faed 	bl	8006236 <_mcp23s08_reset_ss>
	_mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_IODIR,0xf0,MCP23S08_WR);
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	22f0      	movs	r2, #240	; 0xf0
 8006c60:	2100      	movs	r1, #0
 8006c62:	4805      	ldr	r0, [pc, #20]	; (8006c78 <BSP_Init+0x48>)
 8006c64:	f7ff fb18 	bl	8006298 <_mcp23s08_reg_xfer>
	_mcp23s08_set_ss(MCP23S08_SS);
 8006c68:	2102      	movs	r1, #2
 8006c6a:	4802      	ldr	r0, [pc, #8]	; (8006c74 <BSP_Init+0x44>)
 8006c6c:	f7ff faf3 	bl	8006256 <_mcp23s08_set_ss>
}
 8006c70:	bf00      	nop
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	48028100 	.word	0x48028100
 8006c78:	48020000 	.word	0x48020000

08006c7c <ITM_SendChar>:
    \param [in]     ch  Character to transmit.

    \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  if ((ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8006c84:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006c88:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8006c8c:	f003 0301 	and.w	r3, r3, #1
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d012      	beq.n	8006cba <ITM_SendChar+0x3e>
      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
 8006c94:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006c98:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8006c9c:	f003 0301 	and.w	r3, r3, #1
  if ((ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00a      	beq.n	8006cba <ITM_SendChar+0x3e>
  {
    while (ITM->PORT[0].u32 == 0);
 8006ca4:	bf00      	nop
 8006ca6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d0fa      	beq.n	8006ca6 <ITM_SendChar+0x2a>
    ITM->PORT[0].u8 = (uint8_t) ch;
 8006cb0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	b2d2      	uxtb	r2, r2
 8006cb8:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8006cba:	687b      	ldr	r3, [r7, #4]
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bc80      	pop	{r7}
 8006cc4:	4770      	bx	lr
	...

08006cc8 <initRetargetSwo>:
 *            CMSIS-Core > Reference > Debug Access
 *        (2) ARM Cortex-M4 Processor Technical Reference Manual
 *        (3) ARMv7-M Architecture Reference Manual
 */
void initRetargetSwo (void)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	af00      	add	r7, sp, #0
	// P2.1: After a system reset, this pin selects HWO0 (DB.TDO/DB.TRACESWO)
	// PORT2->HWSEL ... clear bits [3:2]
	PORT2->HWSEL &= ~PORT2_HWSEL_HW1_Msk;
 8006ccc:	4b1c      	ldr	r3, [pc, #112]	; (8006d40 <initRetargetSwo+0x78>)
 8006cce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cd0:	4a1b      	ldr	r2, [pc, #108]	; (8006d40 <initRetargetSwo+0x78>)
 8006cd2:	f023 030c 	bic.w	r3, r3, #12
 8006cd6:	6753      	str	r3, [r2, #116]	; 0x74
	// PORT2->HWSEL ... set bit [2] -> HWO0
	PORT2->HWSEL |= 0x01UL << PORT2_HWSEL_HW1_Pos;
 8006cd8:	4b19      	ldr	r3, [pc, #100]	; (8006d40 <initRetargetSwo+0x78>)
 8006cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cdc:	4a18      	ldr	r2, [pc, #96]	; (8006d40 <initRetargetSwo+0x78>)
 8006cde:	f043 0304 	orr.w	r3, r3, #4
 8006ce2:	6753      	str	r3, [r2, #116]	; 0x74

	// Enable trace systems
	// Source: ARMv7-M Architecture Reference Manual
	// DEMCR = Debug Exception and Monitor Control Register
	//         TRCENA ... global enable for DWT and ITM blocks
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8006ce4:	4b17      	ldr	r3, [pc, #92]	; (8006d44 <initRetargetSwo+0x7c>)
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	4a16      	ldr	r2, [pc, #88]	; (8006d44 <initRetargetSwo+0x7c>)
 8006cea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cee:	60d3      	str	r3, [r2, #12]
	// SWO baud rate prescaler value
	// ACPR = Asynchronous Clock Prescaler Register
	//        fSWO = fCPU / (SWOSCALAR + 1)
	//        fSWO = 1MHz (maximum speed JLINK Lite CortexM)
	//        fCPU = 120MHz
	TPI->ACPR = 119UL;
 8006cf0:	4b15      	ldr	r3, [pc, #84]	; (8006d48 <initRetargetSwo+0x80>)
 8006cf2:	2277      	movs	r2, #119	; 0x77
 8006cf4:	611a      	str	r2, [r3, #16]
	// Source: ARMv7-M Architecture Reference Manual
	// SPPR = Selected Pin Control Register
	//        0x0 ... Synchronous Trace Port Mode
	//        0x1 ... Asynchronous Serial Wire Output (Manchester)
	//        0x2 ... Asynchronous Serial Wire Output (NRZ)
	TPI->SPPR = 0x2UL;
 8006cf6:	4b14      	ldr	r3, [pc, #80]	; (8006d48 <initRetargetSwo+0x80>)
 8006cf8:	2202      	movs	r2, #2
 8006cfa:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	// Source: ARM Cortex-M4 Processor Technical Reference Manual
	// Source: infineonforums -> 358-ITM-printf-style-debugging-not-working
	// FFCR = Formatter and Flash Control Register
	//        0x0 ... continuous formatting disabled
	//        0x1 ... continuous formatting enabled
	TPI->FFCR &= ~TPI_FFCR_EnFCont_Msk;
 8006cfe:	4b12      	ldr	r3, [pc, #72]	; (8006d48 <initRetargetSwo+0x80>)
 8006d00:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 8006d04:	4a10      	ldr	r2, [pc, #64]	; (8006d48 <initRetargetSwo+0x80>)
 8006d06:	f023 0302 	bic.w	r3, r3, #2
 8006d0a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

	// Unlock ITM
	// Source: infineonforums -> 358-ITM-printf-style-debugging-not-working
	ITM->LAR = 0xC5ACCE55;
 8006d0e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006d12:	4a0e      	ldr	r2, [pc, #56]	; (8006d4c <initRetargetSwo+0x84>)
 8006d14:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
	// Source: ARMv7-M Architecture Reference Manual, Sec. C1-7
	// TCR = Trace Control Register
	//       ITMENA ... enable ITM
	ITM->TCR |= ITM_TCR_ITMENA_Msk;
 8006d18:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006d1c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8006d20:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006d24:	f043 0301 	orr.w	r3, r3, #1
 8006d28:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
	// Source: ARMv7-M Architecture Reference Manual, Sec. C1-7
	// TER = Trace Enable Register
	//       STIMENA ... Stimulus Port #N is enabled when bit STIMENA[N]
	ITM->TER = 0xFFFFFFFF;
 8006d2c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006d30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d34:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
}
 8006d38:	bf00      	nop
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bc80      	pop	{r7}
 8006d3e:	4770      	bx	lr
 8006d40:	48028200 	.word	0x48028200
 8006d44:	e000edf0 	.word	0xe000edf0
 8006d48:	e0040000 	.word	0xe0040000
 8006d4c:	c5acce55 	.word	0xc5acce55

08006d50 <_write>:
 * @brief Retarget the printf() function to output via the ITM Debug module.
 *        This function relies on ITM_SendChar() defined in core_cm4.h of the
 *        CMSIS library.
 */
int _write (int file, char *buf, int nbytes)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b086      	sub	sp, #24
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	607a      	str	r2, [r7, #4]
	int i;

	for (i = 0; i < nbytes; i++) {
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	617b      	str	r3, [r7, #20]
 8006d60:	e00a      	b.n	8006d78 <_write+0x28>
		ITM_SendChar ( (*buf++));
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	1c5a      	adds	r2, r3, #1
 8006d66:	60ba      	str	r2, [r7, #8]
 8006d68:	f993 3000 	ldrsb.w	r3, [r3]
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7ff ff85 	bl	8006c7c <ITM_SendChar>
	for (i = 0; i < nbytes; i++) {
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	3301      	adds	r3, #1
 8006d76:	617b      	str	r3, [r7, #20]
 8006d78:	697a      	ldr	r2, [r7, #20]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	dbf0      	blt.n	8006d62 <_write+0x12>
	}
	return nbytes;
 8006d80:	687b      	ldr	r3, [r7, #4]
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3718      	adds	r7, #24
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}

08006d8a <BSP_IntDisAll>:
 * \params   none
 * \returns  none
 * \brief    disable all interrupts
 */
void  BSP_IntDisAll (void)
{
 8006d8a:	b580      	push	{r7, lr}
 8006d8c:	af00      	add	r7, sp, #0
	CPU_IntDis();
 8006d8e:	f7f9 faa3 	bl	80002d8 <CPU_IntDis>
}
 8006d92:	bf00      	nop
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <BSP_IntEn>:
 * \params   int_id ... interrupt to enable
 * \returns  none
 * \brief    enable interrupt
 */
void  BSP_IntEn (CPU_DATA  int_id)
{
 8006d96:	b580      	push	{r7, lr}
 8006d98:	b082      	sub	sp, #8
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
	if (int_id < BSP_INT_ID_MAX) {
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2b6f      	cmp	r3, #111	; 0x6f
 8006da2:	d806      	bhi.n	8006db2 <BSP_IntEn+0x1c>
		CPU_IntSrcEn (int_id + 16);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	3310      	adds	r3, #16
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	4618      	mov	r0, r3
 8006dae:	f7fa fed9 	bl	8001b64 <CPU_IntSrcEn>
	}
}
 8006db2:	bf00      	nop
 8006db4:	3708      	adds	r7, #8
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
	...

08006dbc <BSP_IntVectSet>:
 *           isr ...... handler to assign
 * \returns  none
 * \brief    assign ISR handler
 */
void  BSP_IntVectSet (CPU_DATA int_id, CPU_FNCT_VOID  isr)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
	CPU_SR_ALLOC();
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	60fb      	str	r3, [r7, #12]

	if (int_id < BSP_INT_ID_MAX) {
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2b6f      	cmp	r3, #111	; 0x6f
 8006dce:	d80a      	bhi.n	8006de6 <BSP_IntVectSet+0x2a>
		CPU_CRITICAL_ENTER();
 8006dd0:	f7f9 fa86 	bl	80002e0 <CPU_SR_Save>
 8006dd4:	60f8      	str	r0, [r7, #12]
		BSP_IntVectTbl[int_id] = isr;
 8006dd6:	4906      	ldr	r1, [pc, #24]	; (8006df0 <BSP_IntVectSet+0x34>)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	683a      	ldr	r2, [r7, #0]
 8006ddc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		CPU_CRITICAL_EXIT();
 8006de0:	68f8      	ldr	r0, [r7, #12]
 8006de2:	f7f9 fa81 	bl	80002e8 <CPU_SR_Restore>
	}
}
 8006de6:	bf00      	nop
 8006de8:	3710      	adds	r7, #16
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	20001828 	.word	0x20001828

08006df4 <BSP_IntInit>:
 * \params   none
 * \returns  none
 * \brief    initialize interrupts
 */
void  BSP_IntInit (void)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	af00      	add	r7, sp, #0
	BSP_IntVectSet (USIC1_1_IRQn, BSP_IntHandler_Uart_Recive); //**
 8006df8:	4904      	ldr	r1, [pc, #16]	; (8006e0c <BSP_IntInit+0x18>)
 8006dfa:	205b      	movs	r0, #91	; 0x5b
 8006dfc:	f7ff ffde 	bl	8006dbc <BSP_IntVectSet>
	BSP_IntVectSet (USIC1_0_IRQn, BSP_IntHandler_Uart_Recive); //**
 8006e00:	4902      	ldr	r1, [pc, #8]	; (8006e0c <BSP_IntInit+0x18>)
 8006e02:	205a      	movs	r0, #90	; 0x5a
 8006e04:	f7ff ffda 	bl	8006dbc <BSP_IntVectSet>
}
 8006e08:	bf00      	nop
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	08006e11 	.word	0x08006e11

08006e10 <BSP_IntHandler_Uart_Recive>:
 * \brief    UART interrupt handler
 *           https://doc.micrium.com/display/osiiidoc/Keeping+the+Data+in+Scope
 */

static  void  BSP_IntHandler_Uart_Recive (void)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af02      	add	r7, sp, #8
	static CPU_CHAR    *RxDataPtr  = NULL ;
	static CPU_INT32U  RxDataCtr = 0;
	static CPU_CHAR    msg_receiving = 0;

	// receive byte
	RxData = XMC_UART_CH_GetReceivedData (XMC_UART1_CH1);                   // <1>
 8006e16:	4838      	ldr	r0, [pc, #224]	; (8006ef8 <BSP_IntHandler_Uart_Recive+0xe8>)
 8006e18:	f001 f98b 	bl	8008132 <XMC_UART_CH_GetReceivedData>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	71fb      	strb	r3, [r7, #7]

	// is the character a "start of packet" character?                      // <2>
	if ( ( (int) RxData == Start_of_Packet) && msg_receiving == 0) {
 8006e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e24:	4a35      	ldr	r2, [pc, #212]	; (8006efc <BSP_IntHandler_Uart_Recive+0xec>)
 8006e26:	7812      	ldrb	r2, [r2, #0]
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d116      	bne.n	8006e5a <BSP_IntHandler_Uart_Recive+0x4a>
 8006e2c:	4b34      	ldr	r3, [pc, #208]	; (8006f00 <BSP_IntHandler_Uart_Recive+0xf0>)
 8006e2e:	f993 3000 	ldrsb.w	r3, [r3]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d111      	bne.n	8006e5a <BSP_IntHandler_Uart_Recive+0x4a>
		// allocate a memory block
		RxDataPtr = (CPU_CHAR *) OSMemGet (&Mem_Partition, &err);
 8006e36:	1d3b      	adds	r3, r7, #4
 8006e38:	4619      	mov	r1, r3
 8006e3a:	4832      	ldr	r0, [pc, #200]	; (8006f04 <BSP_IntHandler_Uart_Recive+0xf4>)
 8006e3c:	f7fb fa1c 	bl	8002278 <OSMemGet>
 8006e40:	4602      	mov	r2, r0
 8006e42:	4b31      	ldr	r3, [pc, #196]	; (8006f08 <BSP_IntHandler_Uart_Recive+0xf8>)
 8006e44:	601a      	str	r2, [r3, #0]
		if (err != OS_ERR_NONE)
 8006e46:	88bb      	ldrh	r3, [r7, #4]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d003      	beq.n	8006e54 <BSP_IntHandler_Uart_Recive+0x44>
			APP_TRACE_DBG ("Error OSMemGet: BSP_IntHandler_Uart_Recive\n");
 8006e4c:	482f      	ldr	r0, [pc, #188]	; (8006f0c <BSP_IntHandler_Uart_Recive+0xfc>)
 8006e4e:	f001 fcef 	bl	8008830 <puts>
 8006e52:	e002      	b.n	8006e5a <BSP_IntHandler_Uart_Recive+0x4a>
		else
			msg_receiving = 1;
 8006e54:	4b2a      	ldr	r3, [pc, #168]	; (8006f00 <BSP_IntHandler_Uart_Recive+0xf0>)
 8006e56:	2201      	movs	r2, #1
 8006e58:	701a      	strb	r2, [r3, #0]

	// receive characters and put them into the memory partition            // <3>
	// until we detect and "end of packet character"
	// NOTE: the message itself may also contain a "start of packet character"
	//       but no "end of packet character"
	if ( ( (int) RxData != Start_of_Packet) && ( (int) RxData != End_of_Packet)
 8006e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e5e:	4a27      	ldr	r2, [pc, #156]	; (8006efc <BSP_IntHandler_Uart_Recive+0xec>)
 8006e60:	7812      	ldrb	r2, [r2, #0]
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d018      	beq.n	8006e98 <BSP_IntHandler_Uart_Recive+0x88>
 8006e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e6a:	4a29      	ldr	r2, [pc, #164]	; (8006f10 <BSP_IntHandler_Uart_Recive+0x100>)
 8006e6c:	7812      	ldrb	r2, [r2, #0]
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d012      	beq.n	8006e98 <BSP_IntHandler_Uart_Recive+0x88>
	     && msg_receiving == 1) {
 8006e72:	4b23      	ldr	r3, [pc, #140]	; (8006f00 <BSP_IntHandler_Uart_Recive+0xf0>)
 8006e74:	f993 3000 	ldrsb.w	r3, [r3]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d10d      	bne.n	8006e98 <BSP_IntHandler_Uart_Recive+0x88>
		// put byte into the memory partition at the respective address
		*RxDataPtr = RxData;
 8006e7c:	4b22      	ldr	r3, [pc, #136]	; (8006f08 <BSP_IntHandler_Uart_Recive+0xf8>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	79fa      	ldrb	r2, [r7, #7]
 8006e82:	701a      	strb	r2, [r3, #0]
		// increment the address to point to the next location
		RxDataPtr++;
 8006e84:	4b20      	ldr	r3, [pc, #128]	; (8006f08 <BSP_IntHandler_Uart_Recive+0xf8>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	3301      	adds	r3, #1
 8006e8a:	4a1f      	ldr	r2, [pc, #124]	; (8006f08 <BSP_IntHandler_Uart_Recive+0xf8>)
 8006e8c:	6013      	str	r3, [r2, #0]
		// increment the receive counter
		RxDataCtr++;
 8006e8e:	4b21      	ldr	r3, [pc, #132]	; (8006f14 <BSP_IntHandler_Uart_Recive+0x104>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	3301      	adds	r3, #1
 8006e94:	4a1f      	ldr	r2, [pc, #124]	; (8006f14 <BSP_IntHandler_Uart_Recive+0x104>)
 8006e96:	6013      	str	r3, [r2, #0]
	}

	// is the character a "end of packet" character?                        // <4>
	if ( ( (int) RxData == End_of_Packet) && msg_receiving == 1) {
 8006e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e9c:	4a1c      	ldr	r2, [pc, #112]	; (8006f10 <BSP_IntHandler_Uart_Recive+0x100>)
 8006e9e:	7812      	ldrb	r2, [r2, #0]
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d124      	bne.n	8006eee <BSP_IntHandler_Uart_Recive+0xde>
 8006ea4:	4b16      	ldr	r3, [pc, #88]	; (8006f00 <BSP_IntHandler_Uart_Recive+0xf0>)
 8006ea6:	f993 3000 	ldrsb.w	r3, [r3]
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d11f      	bne.n	8006eee <BSP_IntHandler_Uart_Recive+0xde>
		// send the message to the application task - to that end put a pointer to
		// the memory block into the queue to the application task
		OSQPost ( (OS_Q      *) &UART_ISR,
 8006eae:	4b16      	ldr	r3, [pc, #88]	; (8006f08 <BSP_IntHandler_Uart_Recive+0xf8>)
 8006eb0:	681a      	ldr	r2, [r3, #0]
			  (void      *) (RxDataPtr - RxDataCtr),
 8006eb2:	4b18      	ldr	r3, [pc, #96]	; (8006f14 <BSP_IntHandler_Uart_Recive+0x104>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	425b      	negs	r3, r3
 8006eb8:	18d1      	adds	r1, r2, r3
			  (OS_MSG_SIZE) RxDataCtr + 1,
 8006eba:	4b16      	ldr	r3, [pc, #88]	; (8006f14 <BSP_IntHandler_Uart_Recive+0x104>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	b29b      	uxth	r3, r3
		OSQPost ( (OS_Q      *) &UART_ISR,
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	b29a      	uxth	r2, r3
 8006ec4:	1d3b      	adds	r3, r7, #4
 8006ec6:	9300      	str	r3, [sp, #0]
 8006ec8:	2300      	movs	r3, #0
 8006eca:	4813      	ldr	r0, [pc, #76]	; (8006f18 <BSP_IntHandler_Uart_Recive+0x108>)
 8006ecc:	f7fe ff16 	bl	8005cfc <OSQPost>
			  (OS_OPT)      OS_OPT_POST_FIFO,
			  (OS_ERR    *) &err);
		if (err != OS_ERR_NONE)
 8006ed0:	88bb      	ldrh	r3, [r7, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d002      	beq.n	8006edc <BSP_IntHandler_Uart_Recive+0xcc>
			APP_TRACE_DBG ("Error OSQPost: BSP_IntHandler_Uart_Recive\n");
 8006ed6:	4811      	ldr	r0, [pc, #68]	; (8006f1c <BSP_IntHandler_Uart_Recive+0x10c>)
 8006ed8:	f001 fcaa 	bl	8008830 <puts>

		// clear the receive pointer and counter                              // <5>
		RxDataPtr = NULL;
 8006edc:	4b0a      	ldr	r3, [pc, #40]	; (8006f08 <BSP_IntHandler_Uart_Recive+0xf8>)
 8006ede:	2200      	movs	r2, #0
 8006ee0:	601a      	str	r2, [r3, #0]
		RxDataCtr = 0;
 8006ee2:	4b0c      	ldr	r3, [pc, #48]	; (8006f14 <BSP_IntHandler_Uart_Recive+0x104>)
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	601a      	str	r2, [r3, #0]
		// ready for a next message
		msg_receiving = 0;
 8006ee8:	4b05      	ldr	r3, [pc, #20]	; (8006f00 <BSP_IntHandler_Uart_Recive+0xf0>)
 8006eea:	2200      	movs	r2, #0
 8006eec:	701a      	strb	r2, [r3, #0]
	}
}
 8006eee:	bf00      	nop
 8006ef0:	3708      	adds	r7, #8
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	48020200 	.word	0x48020200
 8006efc:	20000028 	.word	0x20000028
 8006f00:	200019e8 	.word	0x200019e8
 8006f04:	20001ab8 	.word	0x20001ab8
 8006f08:	200019ec 	.word	0x200019ec
 8006f0c:	0800e8e8 	.word	0x0800e8e8
 8006f10:	20000029 	.word	0x20000029
 8006f14:	200019f0 	.word	0x200019f0
 8006f18:	20001a88 	.word	0x20001a88
 8006f1c:	0800e914 	.word	0x0800e914

08006f20 <BSP_IntHandlerSCU>:
 * \params   none
 * \returns  none
 * \brief    handle an interrupt
 */
void BSP_IntHandlerSCU (void)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_SCU);
 8006f24:	2000      	movs	r0, #0
 8006f26:	f000 fabf 	bl	80074a8 <BSP_IntHandler>
}
 8006f2a:	bf00      	nop
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <BSP_IntHandlerERU0_00>:
void BSP_IntHandlerERU0_00 (void)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU0_00);
 8006f32:	2001      	movs	r0, #1
 8006f34:	f000 fab8 	bl	80074a8 <BSP_IntHandler>
}
 8006f38:	bf00      	nop
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <BSP_IntHandlerERU0_01>:
void BSP_IntHandlerERU0_01 (void)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU0_01);
 8006f40:	2002      	movs	r0, #2
 8006f42:	f000 fab1 	bl	80074a8 <BSP_IntHandler>
}
 8006f46:	bf00      	nop
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <BSP_IntHandlerERU0_02>:
void BSP_IntHandlerERU0_02 (void)
{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU0_02);
 8006f4e:	2003      	movs	r0, #3
 8006f50:	f000 faaa 	bl	80074a8 <BSP_IntHandler>
}
 8006f54:	bf00      	nop
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <BSP_IntHandlerERU0_03>:
void BSP_IntHandlerERU0_03 (void)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU0_03);
 8006f5c:	2004      	movs	r0, #4
 8006f5e:	f000 faa3 	bl	80074a8 <BSP_IntHandler>
}
 8006f62:	bf00      	nop
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <BSP_IntHandlerERU1_00>:
void BSP_IntHandlerERU1_00 (void)
{
 8006f66:	b580      	push	{r7, lr}
 8006f68:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU1_00);
 8006f6a:	2005      	movs	r0, #5
 8006f6c:	f000 fa9c 	bl	80074a8 <BSP_IntHandler>
}
 8006f70:	bf00      	nop
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <BSP_IntHandlerERU1_01>:
void BSP_IntHandlerERU1_01 (void)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU1_01);
 8006f78:	2006      	movs	r0, #6
 8006f7a:	f000 fa95 	bl	80074a8 <BSP_IntHandler>
}
 8006f7e:	bf00      	nop
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <BSP_IntHandlerERU1_02>:
void BSP_IntHandlerERU1_02 (void)
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU1_02);
 8006f86:	2007      	movs	r0, #7
 8006f88:	f000 fa8e 	bl	80074a8 <BSP_IntHandler>
}
 8006f8c:	bf00      	nop
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <BSP_IntHandlerERU1_03>:
void BSP_IntHandlerERU1_03 (void)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU1_03);
 8006f94:	2008      	movs	r0, #8
 8006f96:	f000 fa87 	bl	80074a8 <BSP_IntHandler>
}
 8006f9a:	bf00      	nop
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <BSP_IntHandlerPMU0_00>:
void BSP_IntHandlerPMU0_00 (void)
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_PMU0_00);
 8006fa2:	200c      	movs	r0, #12
 8006fa4:	f000 fa80 	bl	80074a8 <BSP_IntHandler>
}
 8006fa8:	bf00      	nop
 8006faa:	bd80      	pop	{r7, pc}

08006fac <BSP_IntHandlerVADC0_C0_00>:
void BSP_IntHandlerVADC0_C0_00 (void)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_C0_00);
 8006fb0:	200e      	movs	r0, #14
 8006fb2:	f000 fa79 	bl	80074a8 <BSP_IntHandler>
}
 8006fb6:	bf00      	nop
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <BSP_IntHandlerVADC0_C0_01>:
void BSP_IntHandlerVADC0_C0_01 (void)
{
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_C0_01);
 8006fbe:	200f      	movs	r0, #15
 8006fc0:	f000 fa72 	bl	80074a8 <BSP_IntHandler>
}
 8006fc4:	bf00      	nop
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <BSP_IntHandlerVADC0_C0_02>:
void BSP_IntHandlerVADC0_C0_02 (void)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_C0_02);
 8006fcc:	2010      	movs	r0, #16
 8006fce:	f000 fa6b 	bl	80074a8 <BSP_IntHandler>
}
 8006fd2:	bf00      	nop
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <BSP_IntHandlerVADC0_C0_03>:
void BSP_IntHandlerVADC0_C0_03 (void)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_C0_03);
 8006fda:	2011      	movs	r0, #17
 8006fdc:	f000 fa64 	bl	80074a8 <BSP_IntHandler>
}
 8006fe0:	bf00      	nop
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <BSP_IntHandlerVADC0_G0_00>:
void BSP_IntHandlerVADC0_G0_00 (void)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G0_00);
 8006fe8:	2012      	movs	r0, #18
 8006fea:	f000 fa5d 	bl	80074a8 <BSP_IntHandler>
}
 8006fee:	bf00      	nop
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <BSP_IntHandlerVADC0_G0_01>:
void BSP_IntHandlerVADC0_G0_01 (void)
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G0_01);
 8006ff6:	2013      	movs	r0, #19
 8006ff8:	f000 fa56 	bl	80074a8 <BSP_IntHandler>
}
 8006ffc:	bf00      	nop
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <BSP_IntHandlerVADC0_G0_02>:
void BSP_IntHandlerVADC0_G0_02 (void)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G0_02);
 8007004:	2014      	movs	r0, #20
 8007006:	f000 fa4f 	bl	80074a8 <BSP_IntHandler>
}
 800700a:	bf00      	nop
 800700c:	bd80      	pop	{r7, pc}

0800700e <BSP_IntHandlerVADC0_G0_03>:
void BSP_IntHandlerVADC0_G0_03 (void)
{
 800700e:	b580      	push	{r7, lr}
 8007010:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G0_03);
 8007012:	2015      	movs	r0, #21
 8007014:	f000 fa48 	bl	80074a8 <BSP_IntHandler>
}
 8007018:	bf00      	nop
 800701a:	bd80      	pop	{r7, pc}

0800701c <BSP_IntHandlerVADC0_G1_00>:
void BSP_IntHandlerVADC0_G1_00 (void)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G1_00);
 8007020:	2016      	movs	r0, #22
 8007022:	f000 fa41 	bl	80074a8 <BSP_IntHandler>
}
 8007026:	bf00      	nop
 8007028:	bd80      	pop	{r7, pc}

0800702a <BSP_IntHandlerVADC0_G1_01>:
void BSP_IntHandlerVADC0_G1_01 (void)
{
 800702a:	b580      	push	{r7, lr}
 800702c:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G1_01);
 800702e:	2017      	movs	r0, #23
 8007030:	f000 fa3a 	bl	80074a8 <BSP_IntHandler>
}
 8007034:	bf00      	nop
 8007036:	bd80      	pop	{r7, pc}

08007038 <BSP_IntHandlerVADC0_G1_02>:
void BSP_IntHandlerVADC0_G1_02 (void)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G1_02);
 800703c:	2018      	movs	r0, #24
 800703e:	f000 fa33 	bl	80074a8 <BSP_IntHandler>
}
 8007042:	bf00      	nop
 8007044:	bd80      	pop	{r7, pc}

08007046 <BSP_IntHandlerVADC0_G1_03>:
void BSP_IntHandlerVADC0_G1_03 (void)
{
 8007046:	b580      	push	{r7, lr}
 8007048:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G1_03);
 800704a:	2019      	movs	r0, #25
 800704c:	f000 fa2c 	bl	80074a8 <BSP_IntHandler>
}
 8007050:	bf00      	nop
 8007052:	bd80      	pop	{r7, pc}

08007054 <BSP_IntHandlerVADC0_G2_00>:
void BSP_IntHandlerVADC0_G2_00 (void)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G2_00);
 8007058:	201a      	movs	r0, #26
 800705a:	f000 fa25 	bl	80074a8 <BSP_IntHandler>
}
 800705e:	bf00      	nop
 8007060:	bd80      	pop	{r7, pc}

08007062 <BSP_IntHandlerVADC0_G2_01>:
void BSP_IntHandlerVADC0_G2_01 (void)
{
 8007062:	b580      	push	{r7, lr}
 8007064:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G2_01);
 8007066:	201b      	movs	r0, #27
 8007068:	f000 fa1e 	bl	80074a8 <BSP_IntHandler>
}
 800706c:	bf00      	nop
 800706e:	bd80      	pop	{r7, pc}

08007070 <BSP_IntHandlerVADC0_G2_02>:
void BSP_IntHandlerVADC0_G2_02 (void)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G2_02);
 8007074:	201c      	movs	r0, #28
 8007076:	f000 fa17 	bl	80074a8 <BSP_IntHandler>
}
 800707a:	bf00      	nop
 800707c:	bd80      	pop	{r7, pc}

0800707e <BSP_IntHandlerVADC0_G2_03>:
void BSP_IntHandlerVADC0_G2_03 (void)
{
 800707e:	b580      	push	{r7, lr}
 8007080:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G2_03);
 8007082:	201d      	movs	r0, #29
 8007084:	f000 fa10 	bl	80074a8 <BSP_IntHandler>
}
 8007088:	bf00      	nop
 800708a:	bd80      	pop	{r7, pc}

0800708c <BSP_IntHandlerVADC0_G3_00>:
void BSP_IntHandlerVADC0_G3_00 (void)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G3_00);
 8007090:	201e      	movs	r0, #30
 8007092:	f000 fa09 	bl	80074a8 <BSP_IntHandler>
}
 8007096:	bf00      	nop
 8007098:	bd80      	pop	{r7, pc}

0800709a <BSP_IntHandlerVADC0_G3_01>:
void BSP_IntHandlerVADC0_G3_01 (void)
{
 800709a:	b580      	push	{r7, lr}
 800709c:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G3_01);
 800709e:	201f      	movs	r0, #31
 80070a0:	f000 fa02 	bl	80074a8 <BSP_IntHandler>
}
 80070a4:	bf00      	nop
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <BSP_IntHandlerVADC0_G3_02>:
void BSP_IntHandlerVADC0_G3_02 (void)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G3_02);
 80070ac:	2020      	movs	r0, #32
 80070ae:	f000 f9fb 	bl	80074a8 <BSP_IntHandler>
}
 80070b2:	bf00      	nop
 80070b4:	bd80      	pop	{r7, pc}

080070b6 <BSP_IntHandlerVADC0_G3_03>:
void BSP_IntHandlerVADC0_G3_03 (void)
{
 80070b6:	b580      	push	{r7, lr}
 80070b8:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G3_03);
 80070ba:	2021      	movs	r0, #33	; 0x21
 80070bc:	f000 f9f4 	bl	80074a8 <BSP_IntHandler>
}
 80070c0:	bf00      	nop
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <BSP_IntHandlerDSD0_00>:
void BSP_IntHandlerDSD0_00 (void)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_00);
 80070c8:	2022      	movs	r0, #34	; 0x22
 80070ca:	f000 f9ed 	bl	80074a8 <BSP_IntHandler>
}
 80070ce:	bf00      	nop
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <BSP_IntHandlerDSD0_01>:
void BSP_IntHandlerDSD0_01 (void)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_01);
 80070d6:	2023      	movs	r0, #35	; 0x23
 80070d8:	f000 f9e6 	bl	80074a8 <BSP_IntHandler>
}
 80070dc:	bf00      	nop
 80070de:	bd80      	pop	{r7, pc}

080070e0 <BSP_IntHandlerDSD0_02>:
void BSP_IntHandlerDSD0_02 (void)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_02);
 80070e4:	2024      	movs	r0, #36	; 0x24
 80070e6:	f000 f9df 	bl	80074a8 <BSP_IntHandler>
}
 80070ea:	bf00      	nop
 80070ec:	bd80      	pop	{r7, pc}

080070ee <BSP_IntHandlerDSD0_03>:
void BSP_IntHandlerDSD0_03 (void)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_03);
 80070f2:	2025      	movs	r0, #37	; 0x25
 80070f4:	f000 f9d8 	bl	80074a8 <BSP_IntHandler>
}
 80070f8:	bf00      	nop
 80070fa:	bd80      	pop	{r7, pc}

080070fc <BSP_IntHandlerDSD0_04>:
void BSP_IntHandlerDSD0_04 (void)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_04);
 8007100:	2026      	movs	r0, #38	; 0x26
 8007102:	f000 f9d1 	bl	80074a8 <BSP_IntHandler>
}
 8007106:	bf00      	nop
 8007108:	bd80      	pop	{r7, pc}

0800710a <BSP_IntHandlerDSD0_05>:
void BSP_IntHandlerDSD0_05 (void)
{
 800710a:	b580      	push	{r7, lr}
 800710c:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_05);
 800710e:	2027      	movs	r0, #39	; 0x27
 8007110:	f000 f9ca 	bl	80074a8 <BSP_IntHandler>
}
 8007114:	bf00      	nop
 8007116:	bd80      	pop	{r7, pc}

08007118 <BSP_IntHandlerDSD0_06>:
void BSP_IntHandlerDSD0_06 (void)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_06);
 800711c:	2028      	movs	r0, #40	; 0x28
 800711e:	f000 f9c3 	bl	80074a8 <BSP_IntHandler>
}
 8007122:	bf00      	nop
 8007124:	bd80      	pop	{r7, pc}

08007126 <BSP_IntHandlerDSD0_07>:
void BSP_IntHandlerDSD0_07 (void)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_07);
 800712a:	2029      	movs	r0, #41	; 0x29
 800712c:	f000 f9bc 	bl	80074a8 <BSP_IntHandler>
}
 8007130:	bf00      	nop
 8007132:	bd80      	pop	{r7, pc}

08007134 <BSP_IntHandlerDAC0_00>:
void BSP_IntHandlerDAC0_00 (void)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DAC0_00);
 8007138:	202a      	movs	r0, #42	; 0x2a
 800713a:	f000 f9b5 	bl	80074a8 <BSP_IntHandler>
}
 800713e:	bf00      	nop
 8007140:	bd80      	pop	{r7, pc}

08007142 <BSP_IntHandlerDAC0_01>:
void BSP_IntHandlerDAC0_01 (void)
{
 8007142:	b580      	push	{r7, lr}
 8007144:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DAC0_01);
 8007146:	202b      	movs	r0, #43	; 0x2b
 8007148:	f000 f9ae 	bl	80074a8 <BSP_IntHandler>
}
 800714c:	bf00      	nop
 800714e:	bd80      	pop	{r7, pc}

08007150 <BSP_IntHandlerCCU40_00>:
void BSP_IntHandlerCCU40_00 (void)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU40_00);
 8007154:	202c      	movs	r0, #44	; 0x2c
 8007156:	f000 f9a7 	bl	80074a8 <BSP_IntHandler>
}
 800715a:	bf00      	nop
 800715c:	bd80      	pop	{r7, pc}

0800715e <BSP_IntHandlerCCU40_01>:
void BSP_IntHandlerCCU40_01 (void)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU40_01);
 8007162:	202d      	movs	r0, #45	; 0x2d
 8007164:	f000 f9a0 	bl	80074a8 <BSP_IntHandler>
}
 8007168:	bf00      	nop
 800716a:	bd80      	pop	{r7, pc}

0800716c <BSP_IntHandlerCCU40_02>:
void BSP_IntHandlerCCU40_02 (void)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU40_02);
 8007170:	202e      	movs	r0, #46	; 0x2e
 8007172:	f000 f999 	bl	80074a8 <BSP_IntHandler>
}
 8007176:	bf00      	nop
 8007178:	bd80      	pop	{r7, pc}

0800717a <BSP_IntHandlerCCU40_03>:
void BSP_IntHandlerCCU40_03 (void)
{
 800717a:	b580      	push	{r7, lr}
 800717c:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU40_03);
 800717e:	202f      	movs	r0, #47	; 0x2f
 8007180:	f000 f992 	bl	80074a8 <BSP_IntHandler>
}
 8007184:	bf00      	nop
 8007186:	bd80      	pop	{r7, pc}

08007188 <BSP_IntHandlerCCU41_00>:
void BSP_IntHandlerCCU41_00 (void)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU41_00);
 800718c:	2030      	movs	r0, #48	; 0x30
 800718e:	f000 f98b 	bl	80074a8 <BSP_IntHandler>
}
 8007192:	bf00      	nop
 8007194:	bd80      	pop	{r7, pc}

08007196 <BSP_IntHandlerCCU41_01>:
void BSP_IntHandlerCCU41_01 (void)
{
 8007196:	b580      	push	{r7, lr}
 8007198:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU41_01);
 800719a:	2031      	movs	r0, #49	; 0x31
 800719c:	f000 f984 	bl	80074a8 <BSP_IntHandler>
}
 80071a0:	bf00      	nop
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <BSP_IntHandlerCCU41_02>:
void BSP_IntHandlerCCU41_02 (void)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU41_02);
 80071a8:	2032      	movs	r0, #50	; 0x32
 80071aa:	f000 f97d 	bl	80074a8 <BSP_IntHandler>
}
 80071ae:	bf00      	nop
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <BSP_IntHandlerCCU41_03>:
void BSP_IntHandlerCCU41_03 (void)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU41_03);
 80071b6:	2033      	movs	r0, #51	; 0x33
 80071b8:	f000 f976 	bl	80074a8 <BSP_IntHandler>
}
 80071bc:	bf00      	nop
 80071be:	bd80      	pop	{r7, pc}

080071c0 <BSP_IntHandlerCCU42_00>:
void BSP_IntHandlerCCU42_00 (void)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU42_00);
 80071c4:	2034      	movs	r0, #52	; 0x34
 80071c6:	f000 f96f 	bl	80074a8 <BSP_IntHandler>
}
 80071ca:	bf00      	nop
 80071cc:	bd80      	pop	{r7, pc}

080071ce <BSP_IntHandlerCCU42_01>:
void BSP_IntHandlerCCU42_01 (void)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU42_01);
 80071d2:	2035      	movs	r0, #53	; 0x35
 80071d4:	f000 f968 	bl	80074a8 <BSP_IntHandler>
}
 80071d8:	bf00      	nop
 80071da:	bd80      	pop	{r7, pc}

080071dc <BSP_IntHandlerCCU42_02>:
void BSP_IntHandlerCCU42_02 (void)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU42_02);
 80071e0:	2036      	movs	r0, #54	; 0x36
 80071e2:	f000 f961 	bl	80074a8 <BSP_IntHandler>
}
 80071e6:	bf00      	nop
 80071e8:	bd80      	pop	{r7, pc}

080071ea <BSP_IntHandlerCCU42_03>:
void BSP_IntHandlerCCU42_03 (void)
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU42_03);
 80071ee:	2037      	movs	r0, #55	; 0x37
 80071f0:	f000 f95a 	bl	80074a8 <BSP_IntHandler>
}
 80071f4:	bf00      	nop
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <BSP_IntHandlerCCU43_00>:
void BSP_IntHandlerCCU43_00 (void)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU43_00);
 80071fc:	2038      	movs	r0, #56	; 0x38
 80071fe:	f000 f953 	bl	80074a8 <BSP_IntHandler>
}
 8007202:	bf00      	nop
 8007204:	bd80      	pop	{r7, pc}

08007206 <BSP_IntHandlerCCU43_01>:
void BSP_IntHandlerCCU43_01 (void)
{
 8007206:	b580      	push	{r7, lr}
 8007208:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU43_01);
 800720a:	2039      	movs	r0, #57	; 0x39
 800720c:	f000 f94c 	bl	80074a8 <BSP_IntHandler>
}
 8007210:	bf00      	nop
 8007212:	bd80      	pop	{r7, pc}

08007214 <BSP_IntHandlerCCU43_02>:
void BSP_IntHandlerCCU43_02 (void)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU43_02);
 8007218:	203a      	movs	r0, #58	; 0x3a
 800721a:	f000 f945 	bl	80074a8 <BSP_IntHandler>
}
 800721e:	bf00      	nop
 8007220:	bd80      	pop	{r7, pc}

08007222 <BSP_IntHandlerCCU43_03>:
void BSP_IntHandlerCCU43_03 (void)
{
 8007222:	b580      	push	{r7, lr}
 8007224:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU43_03);
 8007226:	203b      	movs	r0, #59	; 0x3b
 8007228:	f000 f93e 	bl	80074a8 <BSP_IntHandler>
}
 800722c:	bf00      	nop
 800722e:	bd80      	pop	{r7, pc}

08007230 <BSP_IntHandlerCCU80_00>:
void BSP_IntHandlerCCU80_00 (void)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU80_00);
 8007234:	203c      	movs	r0, #60	; 0x3c
 8007236:	f000 f937 	bl	80074a8 <BSP_IntHandler>
}
 800723a:	bf00      	nop
 800723c:	bd80      	pop	{r7, pc}

0800723e <BSP_IntHandlerCCU80_01>:
void BSP_IntHandlerCCU80_01 (void)
{
 800723e:	b580      	push	{r7, lr}
 8007240:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU80_01);
 8007242:	203d      	movs	r0, #61	; 0x3d
 8007244:	f000 f930 	bl	80074a8 <BSP_IntHandler>
}
 8007248:	bf00      	nop
 800724a:	bd80      	pop	{r7, pc}

0800724c <BSP_IntHandlerCCU80_02>:
void BSP_IntHandlerCCU80_02 (void)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU80_02);
 8007250:	203e      	movs	r0, #62	; 0x3e
 8007252:	f000 f929 	bl	80074a8 <BSP_IntHandler>
}
 8007256:	bf00      	nop
 8007258:	bd80      	pop	{r7, pc}

0800725a <BSP_IntHandlerCCU80_03>:
void BSP_IntHandlerCCU80_03 (void)
{
 800725a:	b580      	push	{r7, lr}
 800725c:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU80_03);
 800725e:	203f      	movs	r0, #63	; 0x3f
 8007260:	f000 f922 	bl	80074a8 <BSP_IntHandler>
}
 8007264:	bf00      	nop
 8007266:	bd80      	pop	{r7, pc}

08007268 <BSP_IntHandlerCCU81_00>:
void BSP_IntHandlerCCU81_00 (void)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU81_00);
 800726c:	2040      	movs	r0, #64	; 0x40
 800726e:	f000 f91b 	bl	80074a8 <BSP_IntHandler>
}
 8007272:	bf00      	nop
 8007274:	bd80      	pop	{r7, pc}

08007276 <BSP_IntHandlerCCU81_01>:
void BSP_IntHandlerCCU81_01 (void)
{
 8007276:	b580      	push	{r7, lr}
 8007278:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU81_01);
 800727a:	2041      	movs	r0, #65	; 0x41
 800727c:	f000 f914 	bl	80074a8 <BSP_IntHandler>
}
 8007280:	bf00      	nop
 8007282:	bd80      	pop	{r7, pc}

08007284 <BSP_IntHandlerCCU81_02>:
void BSP_IntHandlerCCU81_02 (void)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU81_02);
 8007288:	2042      	movs	r0, #66	; 0x42
 800728a:	f000 f90d 	bl	80074a8 <BSP_IntHandler>
}
 800728e:	bf00      	nop
 8007290:	bd80      	pop	{r7, pc}

08007292 <BSP_IntHandlerCCU81_03>:
void BSP_IntHandlerCCU81_03 (void)
{
 8007292:	b580      	push	{r7, lr}
 8007294:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU81_03);
 8007296:	2043      	movs	r0, #67	; 0x43
 8007298:	f000 f906 	bl	80074a8 <BSP_IntHandler>
}
 800729c:	bf00      	nop
 800729e:	bd80      	pop	{r7, pc}

080072a0 <BSP_IntHandlerPOSIF0_00>:
void BSP_IntHandlerPOSIF0_00 (void)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_POSIF0_00);
 80072a4:	2044      	movs	r0, #68	; 0x44
 80072a6:	f000 f8ff 	bl	80074a8 <BSP_IntHandler>
}
 80072aa:	bf00      	nop
 80072ac:	bd80      	pop	{r7, pc}

080072ae <BSP_IntHandlerPOSIF0_01>:
void BSP_IntHandlerPOSIF0_01 (void)
{
 80072ae:	b580      	push	{r7, lr}
 80072b0:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_POSIF0_01);
 80072b2:	2045      	movs	r0, #69	; 0x45
 80072b4:	f000 f8f8 	bl	80074a8 <BSP_IntHandler>
}
 80072b8:	bf00      	nop
 80072ba:	bd80      	pop	{r7, pc}

080072bc <BSP_IntHandlerPOSIF1_00>:
void BSP_IntHandlerPOSIF1_00 (void)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_POSIF1_00);
 80072c0:	2046      	movs	r0, #70	; 0x46
 80072c2:	f000 f8f1 	bl	80074a8 <BSP_IntHandler>
}
 80072c6:	bf00      	nop
 80072c8:	bd80      	pop	{r7, pc}

080072ca <BSP_IntHandlerPOSIF1_01>:
void BSP_IntHandlerPOSIF1_01 (void)
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_POSIF1_01);
 80072ce:	2047      	movs	r0, #71	; 0x47
 80072d0:	f000 f8ea 	bl	80074a8 <BSP_IntHandler>
}
 80072d4:	bf00      	nop
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <BSP_IntHandlerCAN0_00>:
void BSP_IntHandlerCAN0_00 (void)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_00);
 80072dc:	204c      	movs	r0, #76	; 0x4c
 80072de:	f000 f8e3 	bl	80074a8 <BSP_IntHandler>
}
 80072e2:	bf00      	nop
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <BSP_IntHandlerCAN0_01>:
void BSP_IntHandlerCAN0_01 (void)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_01);
 80072ea:	204d      	movs	r0, #77	; 0x4d
 80072ec:	f000 f8dc 	bl	80074a8 <BSP_IntHandler>
}
 80072f0:	bf00      	nop
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <BSP_IntHandlerCAN0_02>:
void BSP_IntHandlerCAN0_02 (void)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_02);
 80072f8:	204e      	movs	r0, #78	; 0x4e
 80072fa:	f000 f8d5 	bl	80074a8 <BSP_IntHandler>
}
 80072fe:	bf00      	nop
 8007300:	bd80      	pop	{r7, pc}

08007302 <BSP_IntHandlerCAN0_03>:
void BSP_IntHandlerCAN0_03 (void)
{
 8007302:	b580      	push	{r7, lr}
 8007304:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_03);
 8007306:	204f      	movs	r0, #79	; 0x4f
 8007308:	f000 f8ce 	bl	80074a8 <BSP_IntHandler>
}
 800730c:	bf00      	nop
 800730e:	bd80      	pop	{r7, pc}

08007310 <BSP_IntHandlerCAN0_04>:
void BSP_IntHandlerCAN0_04 (void)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_04);
 8007314:	2050      	movs	r0, #80	; 0x50
 8007316:	f000 f8c7 	bl	80074a8 <BSP_IntHandler>
}
 800731a:	bf00      	nop
 800731c:	bd80      	pop	{r7, pc}

0800731e <BSP_IntHandlerCAN0_05>:
void BSP_IntHandlerCAN0_05 (void)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_05);
 8007322:	2051      	movs	r0, #81	; 0x51
 8007324:	f000 f8c0 	bl	80074a8 <BSP_IntHandler>
}
 8007328:	bf00      	nop
 800732a:	bd80      	pop	{r7, pc}

0800732c <BSP_IntHandlerCAN0_06>:
void BSP_IntHandlerCAN0_06 (void)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_06);
 8007330:	2052      	movs	r0, #82	; 0x52
 8007332:	f000 f8b9 	bl	80074a8 <BSP_IntHandler>
}
 8007336:	bf00      	nop
 8007338:	bd80      	pop	{r7, pc}

0800733a <BSP_IntHandlerCAN0_07>:
void BSP_IntHandlerCAN0_07 (void)
{
 800733a:	b580      	push	{r7, lr}
 800733c:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_07);
 800733e:	2053      	movs	r0, #83	; 0x53
 8007340:	f000 f8b2 	bl	80074a8 <BSP_IntHandler>
}
 8007344:	bf00      	nop
 8007346:	bd80      	pop	{r7, pc}

08007348 <BSP_IntHandlerUSIC0_00>:
void BSP_IntHandlerUSIC0_00 (void)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC0_00);
 800734c:	2054      	movs	r0, #84	; 0x54
 800734e:	f000 f8ab 	bl	80074a8 <BSP_IntHandler>
}
 8007352:	bf00      	nop
 8007354:	bd80      	pop	{r7, pc}

08007356 <BSP_IntHandlerUSIC0_01>:
void BSP_IntHandlerUSIC0_01 (void)
{
 8007356:	b580      	push	{r7, lr}
 8007358:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC0_01);
 800735a:	2055      	movs	r0, #85	; 0x55
 800735c:	f000 f8a4 	bl	80074a8 <BSP_IntHandler>
}
 8007360:	bf00      	nop
 8007362:	bd80      	pop	{r7, pc}

08007364 <BSP_IntHandlerUSIC0_02>:
void BSP_IntHandlerUSIC0_02 (void)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC0_02);
 8007368:	2056      	movs	r0, #86	; 0x56
 800736a:	f000 f89d 	bl	80074a8 <BSP_IntHandler>
}
 800736e:	bf00      	nop
 8007370:	bd80      	pop	{r7, pc}

08007372 <BSP_IntHandlerUSIC0_03>:
void BSP_IntHandlerUSIC0_03 (void)
{
 8007372:	b580      	push	{r7, lr}
 8007374:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC0_03);
 8007376:	2057      	movs	r0, #87	; 0x57
 8007378:	f000 f896 	bl	80074a8 <BSP_IntHandler>
}
 800737c:	bf00      	nop
 800737e:	bd80      	pop	{r7, pc}

08007380 <BSP_IntHandlerUSIC0_04>:
void BSP_IntHandlerUSIC0_04 (void)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC0_04);
 8007384:	2058      	movs	r0, #88	; 0x58
 8007386:	f000 f88f 	bl	80074a8 <BSP_IntHandler>
}
 800738a:	bf00      	nop
 800738c:	bd80      	pop	{r7, pc}

0800738e <BSP_IntHandlerUSIC0_05>:
void BSP_IntHandlerUSIC0_05 (void)
{
 800738e:	b580      	push	{r7, lr}
 8007390:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC0_05);
 8007392:	2059      	movs	r0, #89	; 0x59
 8007394:	f000 f888 	bl	80074a8 <BSP_IntHandler>
}
 8007398:	bf00      	nop
 800739a:	bd80      	pop	{r7, pc}

0800739c <BSP_IntHandlerUSIC1_00>:
void BSP_IntHandlerUSIC1_00 (void)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC1_00);
 80073a0:	205a      	movs	r0, #90	; 0x5a
 80073a2:	f000 f881 	bl	80074a8 <BSP_IntHandler>
}
 80073a6:	bf00      	nop
 80073a8:	bd80      	pop	{r7, pc}

080073aa <BSP_IntHandlerUSIC1_01>:
void BSP_IntHandlerUSIC1_01 (void)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC1_01);
 80073ae:	205b      	movs	r0, #91	; 0x5b
 80073b0:	f000 f87a 	bl	80074a8 <BSP_IntHandler>
}
 80073b4:	bf00      	nop
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <BSP_IntHandlerUSIC1_02>:
void BSP_IntHandlerUSIC1_02 (void)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC1_02);
 80073bc:	205c      	movs	r0, #92	; 0x5c
 80073be:	f000 f873 	bl	80074a8 <BSP_IntHandler>
}
 80073c2:	bf00      	nop
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <BSP_IntHandlerUSIC1_03>:
void BSP_IntHandlerUSIC1_03 (void)
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC1_03);
 80073ca:	205d      	movs	r0, #93	; 0x5d
 80073cc:	f000 f86c 	bl	80074a8 <BSP_IntHandler>
}
 80073d0:	bf00      	nop
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <BSP_IntHandlerUSIC1_04>:
void BSP_IntHandlerUSIC1_04 (void)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC1_04);
 80073d8:	205e      	movs	r0, #94	; 0x5e
 80073da:	f000 f865 	bl	80074a8 <BSP_IntHandler>
}
 80073de:	bf00      	nop
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <BSP_IntHandlerUSIC1_05>:
void BSP_IntHandlerUSIC1_05 (void)
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC1_05);
 80073e6:	205f      	movs	r0, #95	; 0x5f
 80073e8:	f000 f85e 	bl	80074a8 <BSP_IntHandler>
}
 80073ec:	bf00      	nop
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <BSP_IntHandlerUSIC2_00>:
void BSP_IntHandlerUSIC2_00 (void)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC2_00);
 80073f4:	2060      	movs	r0, #96	; 0x60
 80073f6:	f000 f857 	bl	80074a8 <BSP_IntHandler>
}
 80073fa:	bf00      	nop
 80073fc:	bd80      	pop	{r7, pc}

080073fe <BSP_IntHandlerUSIC2_01>:
void BSP_IntHandlerUSIC2_01 (void)
{
 80073fe:	b580      	push	{r7, lr}
 8007400:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC2_01);
 8007402:	2061      	movs	r0, #97	; 0x61
 8007404:	f000 f850 	bl	80074a8 <BSP_IntHandler>
}
 8007408:	bf00      	nop
 800740a:	bd80      	pop	{r7, pc}

0800740c <BSP_IntHandlerUSIC2_02>:
void BSP_IntHandlerUSIC2_02 (void)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC2_02);
 8007410:	2062      	movs	r0, #98	; 0x62
 8007412:	f000 f849 	bl	80074a8 <BSP_IntHandler>
}
 8007416:	bf00      	nop
 8007418:	bd80      	pop	{r7, pc}

0800741a <BSP_IntHandlerUSIC2_03>:
void BSP_IntHandlerUSIC2_03 (void)
{
 800741a:	b580      	push	{r7, lr}
 800741c:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC2_03);
 800741e:	2063      	movs	r0, #99	; 0x63
 8007420:	f000 f842 	bl	80074a8 <BSP_IntHandler>
}
 8007424:	bf00      	nop
 8007426:	bd80      	pop	{r7, pc}

08007428 <BSP_IntHandlerUSIC2_04>:
void BSP_IntHandlerUSIC2_04 (void)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC2_04);
 800742c:	2064      	movs	r0, #100	; 0x64
 800742e:	f000 f83b 	bl	80074a8 <BSP_IntHandler>
}
 8007432:	bf00      	nop
 8007434:	bd80      	pop	{r7, pc}

08007436 <BSP_IntHandlerUSIC2_05>:
void BSP_IntHandlerUSIC2_05 (void)
{
 8007436:	b580      	push	{r7, lr}
 8007438:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC2_05);
 800743a:	2065      	movs	r0, #101	; 0x65
 800743c:	f000 f834 	bl	80074a8 <BSP_IntHandler>
}
 8007440:	bf00      	nop
 8007442:	bd80      	pop	{r7, pc}

08007444 <BSP_IntHandlerLEDTS0_00>:
void BSP_IntHandlerLEDTS0_00 (void)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_LEDTS0_00);
 8007448:	2066      	movs	r0, #102	; 0x66
 800744a:	f000 f82d 	bl	80074a8 <BSP_IntHandler>
}
 800744e:	bf00      	nop
 8007450:	bd80      	pop	{r7, pc}

08007452 <BSP_IntHandlerFCE0_00>:
void BSP_IntHandlerFCE0_00 (void)
{
 8007452:	b580      	push	{r7, lr}
 8007454:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_FCE0_00);
 8007456:	2068      	movs	r0, #104	; 0x68
 8007458:	f000 f826 	bl	80074a8 <BSP_IntHandler>
}
 800745c:	bf00      	nop
 800745e:	bd80      	pop	{r7, pc}

08007460 <BSP_IntHandlerGPDMA0_00>:
void BSP_IntHandlerGPDMA0_00 (void)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_GPDMA0_00);
 8007464:	2069      	movs	r0, #105	; 0x69
 8007466:	f000 f81f 	bl	80074a8 <BSP_IntHandler>
}
 800746a:	bf00      	nop
 800746c:	bd80      	pop	{r7, pc}

0800746e <BSP_IntHandlerSDMMC0_00>:
void BSP_IntHandlerSDMMC0_00 (void)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_SDMMC0_00);
 8007472:	206a      	movs	r0, #106	; 0x6a
 8007474:	f000 f818 	bl	80074a8 <BSP_IntHandler>
}
 8007478:	bf00      	nop
 800747a:	bd80      	pop	{r7, pc}

0800747c <BSP_IntHandlerUSB0_00>:
void BSP_IntHandlerUSB0_00 (void)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USB0_00);
 8007480:	206b      	movs	r0, #107	; 0x6b
 8007482:	f000 f811 	bl	80074a8 <BSP_IntHandler>
}
 8007486:	bf00      	nop
 8007488:	bd80      	pop	{r7, pc}

0800748a <BSP_IntHandlerETH0_00>:
void BSP_IntHandlerETH0_00 (void)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ETH0_00);
 800748e:	206c      	movs	r0, #108	; 0x6c
 8007490:	f000 f80a 	bl	80074a8 <BSP_IntHandler>
}
 8007494:	bf00      	nop
 8007496:	bd80      	pop	{r7, pc}

08007498 <BSP_IntHandlerGPDMA1_00>:
void BSP_IntHandlerGPDMA1_00 (void)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_GPDMA1_00);
 800749c:	206e      	movs	r0, #110	; 0x6e
 800749e:	f000 f803 	bl	80074a8 <BSP_IntHandler>
}
 80074a2:	bf00      	nop
 80074a4:	bd80      	pop	{r7, pc}
	...

080074a8 <BSP_IntHandler>:
 * \params   int_id interrupt that will be handled
 * \returns  none
 * \brief    central interrupt handler
 */
static  void  BSP_IntHandler (CPU_DATA  int_id)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
	CPU_FNCT_VOID  isr;
	CPU_SR_ALLOC();
 80074b0:	2300      	movs	r3, #0
 80074b2:	60fb      	str	r3, [r7, #12]

	/* tell the OS that we are starting an ISR */
	CPU_CRITICAL_ENTER();
 80074b4:	f7f8 ff14 	bl	80002e0 <CPU_SR_Save>
 80074b8:	60f8      	str	r0, [r7, #12]
	OSIntEnter();
 80074ba:	f7fc fce9 	bl	8003e90 <OSIntEnter>
	CPU_CRITICAL_EXIT();
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	f7f8 ff12 	bl	80002e8 <CPU_SR_Restore>

	if (int_id < BSP_INT_ID_MAX) {
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2b6f      	cmp	r3, #111	; 0x6f
 80074c8:	d809      	bhi.n	80074de <BSP_IntHandler+0x36>
		isr = BSP_IntVectTbl[int_id];
 80074ca:	4a08      	ldr	r2, [pc, #32]	; (80074ec <BSP_IntHandler+0x44>)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074d2:	60bb      	str	r3, [r7, #8]
		if (isr != (CPU_FNCT_VOID) 0) {
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d001      	beq.n	80074de <BSP_IntHandler+0x36>
			isr();
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	4798      	blx	r3
		}
	}
	/* tell the OS that we are leaving an ISR */
	OSIntExit();
 80074de:	f7fc fcf3 	bl	8003ec8 <OSIntExit>
}
 80074e2:	bf00      	nop
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	20001828 	.word	0x20001828

080074f0 <NVIC_EnableIRQ>:
{
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	4603      	mov	r3, r0
 80074f8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80074fa:	79fb      	ldrb	r3, [r7, #7]
 80074fc:	f003 031f 	and.w	r3, r3, #31
 8007500:	2201      	movs	r2, #1
 8007502:	fa02 f103 	lsl.w	r1, r2, r3
 8007506:	4a05      	ldr	r2, [pc, #20]	; (800751c <NVIC_EnableIRQ+0x2c>)
 8007508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800750c:	095b      	lsrs	r3, r3, #5
 800750e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8007512:	bf00      	nop
 8007514:	370c      	adds	r7, #12
 8007516:	46bd      	mov	sp, r7
 8007518:	bc80      	pop	{r7}
 800751a:	4770      	bx	lr
 800751c:	e000e100 	.word	0xe000e100

08007520 <NVIC_SetPriority>:
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	4603      	mov	r3, r0
 8007528:	6039      	str	r1, [r7, #0]
 800752a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 800752c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007530:	2b00      	cmp	r3, #0
 8007532:	da0b      	bge.n	800754c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	b2da      	uxtb	r2, r3
 8007538:	490c      	ldr	r1, [pc, #48]	; (800756c <NVIC_SetPriority+0x4c>)
 800753a:	79fb      	ldrb	r3, [r7, #7]
 800753c:	f003 030f 	and.w	r3, r3, #15
 8007540:	3b04      	subs	r3, #4
 8007542:	0092      	lsls	r2, r2, #2
 8007544:	b2d2      	uxtb	r2, r2
 8007546:	440b      	add	r3, r1
 8007548:	761a      	strb	r2, [r3, #24]
}
 800754a:	e009      	b.n	8007560 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	b2da      	uxtb	r2, r3
 8007550:	4907      	ldr	r1, [pc, #28]	; (8007570 <NVIC_SetPriority+0x50>)
 8007552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007556:	0092      	lsls	r2, r2, #2
 8007558:	b2d2      	uxtb	r2, r2
 800755a:	440b      	add	r3, r1
 800755c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	bc80      	pop	{r7}
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	e000ed00 	.word	0xe000ed00
 8007570:	e000e100 	.word	0xe000e100

08007574 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_CHECK_MODULE_PTR(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	60da      	str	r2, [r3, #12]
}
 8007588:	bf00      	nop
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	bc80      	pop	{r7}
 8007590:	4770      	bx	lr

08007592 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8007592:	b480      	push	{r7}
 8007594:	b083      	sub	sp, #12
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
 800759a:	460b      	mov	r3, r1
 800759c:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_CHECK_MODULE_PTR(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	68da      	ldr	r2, [r3, #12]
 80075a2:	78fb      	ldrb	r3, [r7, #3]
 80075a4:	2101      	movs	r1, #1
 80075a6:	fa01 f303 	lsl.w	r3, r1, r3
 80075aa:	431a      	orrs	r2, r3
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	60da      	str	r2, [r3, #12]
}
 80075b0:	bf00      	nop
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bc80      	pop	{r7}
 80075b8:	4770      	bx	lr

080075ba <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 80075ba:	b480      	push	{r7}
 80075bc:	b083      	sub	sp, #12
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2201      	movs	r2, #1
 80075c6:	60da      	str	r2, [r3, #12]
}
 80075c8:	bf00      	nop
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bc80      	pop	{r7}
 80075d0:	4770      	bx	lr

080075d2 <XMC_CCU4_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StopTimer(XMC_CCU4_SLICE_t *const slice)
{
 80075d2:	b480      	push	{r7}
 80075d4:	b083      	sub	sp, #12
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  slice->TCCLR |= (uint32_t) CCU4_CC4_TCCLR_TRBC_Msk;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	f043 0201 	orr.w	r2, r3, #1
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	611a      	str	r2, [r3, #16]
}
 80075e6:	bf00      	nop
 80075e8:	370c      	adds	r7, #12
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bc80      	pop	{r7}
 80075ee:	4770      	bx	lr

080075f0 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	460b      	mov	r3, r1
 80075fa:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  slice->PRS = (uint32_t) period_val;
 80075fc:	887a      	ldrh	r2, [r7, #2]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	635a      	str	r2, [r3, #52]	; 0x34
}
 8007602:	bf00      	nop
 8007604:	370c      	adds	r7, #12
 8007606:	46bd      	mov	sp, r7
 8007608:	bc80      	pop	{r7}
 800760a:	4770      	bx	lr

0800760c <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	460b      	mov	r3, r1
 8007616:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  slice->CRS = (uint32_t) compare_val;
 8007618:	887a      	ldrh	r2, [r7, #2]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800761e:	bf00      	nop
 8007620:	370c      	adds	r7, #12
 8007622:	46bd      	mov	sp, r7
 8007624:	bc80      	pop	{r7}
 8007626:	4770      	bx	lr

08007628 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	460b      	mov	r3, r1
 8007632:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800763a:	78fb      	ldrb	r3, [r7, #3]
 800763c:	2101      	movs	r1, #1
 800763e:	fa01 f303 	lsl.w	r3, r1, r3
 8007642:	431a      	orrs	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 800764a:	bf00      	nop
 800764c:	370c      	adds	r7, #12
 800764e:	46bd      	mov	sp, r7
 8007650:	bc80      	pop	{r7}
 8007652:	4770      	bx	lr

08007654 <BSP_ConfigCCU4_Timer>:
	.output_strength     = XMC_GPIO_OUTPUT_STRENGTH_MEDIUM,
};


_Bool BSP_ConfigCCU4_Timer(void)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	af00      	add	r7, sp, #0
  XMC_CCU4_Init(MODULE_PTR_CCU40, XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR);
 8007658:	2100      	movs	r1, #0
 800765a:	481e      	ldr	r0, [pc, #120]	; (80076d4 <BSP_ConfigCCU4_Timer+0x80>)
 800765c:	f000 f9d0 	bl	8007a00 <XMC_CCU4_Init>
  /* Start the prescaler and restore clocks to slices */
  XMC_CCU4_StartPrescaler(MODULE_PTR_CCU40);
 8007660:	481c      	ldr	r0, [pc, #112]	; (80076d4 <BSP_ConfigCCU4_Timer+0x80>)
 8007662:	f7ff ff87 	bl	8007574 <XMC_CCU4_StartPrescaler>
  /* Start of CCU4 configurations *//* Ensure fCCU reaches CCU4 */
  XMC_CCU4_SetModuleClock(MODULE_PTR_CCU40, XMC_CCU4_CLOCK_SCU);
 8007666:	2100      	movs	r1, #0
 8007668:	481a      	ldr	r0, [pc, #104]	; (80076d4 <BSP_ConfigCCU4_Timer+0x80>)
 800766a:	f000 f9e5 	bl	8007a38 <XMC_CCU4_SetModuleClock>

  /* Initialize the Slice */
  XMC_CCU4_SLICE_CompareInit(SLICE_PTR_CCU40_CC40, &g_timer_object);
 800766e:	491a      	ldr	r1, [pc, #104]	; (80076d8 <BSP_ConfigCCU4_Timer+0x84>)
 8007670:	481a      	ldr	r0, [pc, #104]	; (80076dc <BSP_ConfigCCU4_Timer+0x88>)
 8007672:	f000 f9fb 	bl	8007a6c <XMC_CCU4_SLICE_CompareInit>
  // XMC_CCU4_SLICE_CompareInit(SLICE_PTR_CCU40_CC41, &g_timer_object);

  XMC_CCU4_SLICE_SetTimerPeriodMatch(SLICE_PTR_CCU40_CC40, PWM_PERIOD_VALUE_PEN); // sollte man eine Frequenz von 1650Hz herausbekommen
 8007676:	f640 1127 	movw	r1, #2343	; 0x927
 800767a:	4818      	ldr	r0, [pc, #96]	; (80076dc <BSP_ConfigCCU4_Timer+0x88>)
 800767c:	f7ff ffb8 	bl	80075f0 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  // XMC_CCU4_SLICE_SetTimerPeriodMatch(SLICE_PTR_CCU40_CC41, PWM_PERIOD_VALUE_XY); // sollte man eine Frequenz von 1650Hz herausbekommen
  XMC_CCU4_SLICE_SetTimerCompareMatch(SLICE_PTR_CCU40_CC40, PWM_DEF_COMP_VALUE_UP);
 8007680:	2175      	movs	r1, #117	; 0x75
 8007682:	4816      	ldr	r0, [pc, #88]	; (80076dc <BSP_ConfigCCU4_Timer+0x88>)
 8007684:	f7ff ffc2 	bl	800760c <XMC_CCU4_SLICE_SetTimerCompareMatch>
  // XMC_CCU4_SLICE_SetTimerCompareMatch(SLICE_PTR_CCU40_CC41, PWM_DEF_COMP_VALUE_XY);
  /* Enable shadow transfer */
  XMC_CCU4_EnableShadowTransfer(MODULE_PTR_CCU40, XMC_CCU4_SHADOW_TRANSFER_SLICE_0);
 8007688:	2101      	movs	r1, #1
 800768a:	4812      	ldr	r0, [pc, #72]	; (80076d4 <BSP_ConfigCCU4_Timer+0x80>)
 800768c:	f000 fa51 	bl	8007b32 <XMC_CCU4_EnableShadowTransfer>
  // XMC_CCU4_EnableShadowTransfer(MODULE_PTR_CCU40, XMC_CCU4_SHADOW_TRANSFER_SLICE_1);
  /* Enable External Start to Event 0 */
  XMC_CCU4_SLICE_StartConfig(SLICE_PTR_CCU40_CC40, XMC_CCU4_SLICE_EVENT_0, XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR);
 8007690:	2201      	movs	r2, #1
 8007692:	2101      	movs	r1, #1
 8007694:	4811      	ldr	r0, [pc, #68]	; (80076dc <BSP_ConfigCCU4_Timer+0x88>)
 8007696:	f000 fa1f 	bl	8007ad8 <XMC_CCU4_SLICE_StartConfig>
  // XMC_CCU4_SLICE_StartConfig(SLICE_PTR_CCU40_CC41, XMC_CCU4_SLICE_EVENT_0, XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR);

  /* Enable compare match events */
  XMC_CCU4_SLICE_EnableEvent(SLICE_PTR_CCU40_CC40, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);
 800769a:	2102      	movs	r1, #2
 800769c:	480f      	ldr	r0, [pc, #60]	; (80076dc <BSP_ConfigCCU4_Timer+0x88>)
 800769e:	f7ff ffc3 	bl	8007628 <XMC_CCU4_SLICE_EnableEvent>
  // XMC_CCU4_SLICE_EnableEvent(SLICE_PTR_CCU40_CC41, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);
  /* Connect compare match event to SR0 */
  XMC_CCU4_SLICE_SetInterruptNode(SLICE_PTR_CCU40_CC40, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP, XMC_CCU4_SLICE_SR_ID_0);
 80076a2:	2200      	movs	r2, #0
 80076a4:	2102      	movs	r1, #2
 80076a6:	480d      	ldr	r0, [pc, #52]	; (80076dc <BSP_ConfigCCU4_Timer+0x88>)
 80076a8:	f000 fa54 	bl	8007b54 <XMC_CCU4_SLICE_SetInterruptNode>
  // XMC_CCU4_SLICE_SetInterruptNode(SLICE_PTR_CCU40_CC41, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP, XMC_CCU4_SLICE_SR_ID_1);
  /* Set NVIC priority */
  NVIC_SetPriority(CCU40_0_IRQn, 14U);
 80076ac:	210e      	movs	r1, #14
 80076ae:	202c      	movs	r0, #44	; 0x2c
 80076b0:	f7ff ff36 	bl	8007520 <NVIC_SetPriority>
  // NVIC_SetPriority(CCU40_1_IRQn, 13U);
  /* Enable IRQ */
  NVIC_EnableIRQ(CCU40_0_IRQn);
 80076b4:	202c      	movs	r0, #44	; 0x2c
 80076b6:	f7ff ff1b 	bl	80074f0 <NVIC_EnableIRQ>
  // NVIC_EnableIRQ(CCU40_1_IRQn);
  /* Enable CCU4 PWM output */
  XMC_GPIO_Init(OUTP1_3, &PWM_0_gpio_out_config);
 80076ba:	4a09      	ldr	r2, [pc, #36]	; (80076e0 <BSP_ConfigCCU4_Timer+0x8c>)
 80076bc:	2103      	movs	r1, #3
 80076be:	4809      	ldr	r0, [pc, #36]	; (80076e4 <BSP_ConfigCCU4_Timer+0x90>)
 80076c0:	f000 facc 	bl	8007c5c <XMC_GPIO_Init>
  /* Get the slice out of idle mode */
  XMC_CCU4_EnableClock(MODULE_PTR_CCU40, SLICE_NUMBER_CCU40_CC40);
 80076c4:	2100      	movs	r1, #0
 80076c6:	4803      	ldr	r0, [pc, #12]	; (80076d4 <BSP_ConfigCCU4_Timer+0x80>)
 80076c8:	f7ff ff63 	bl	8007592 <XMC_CCU4_EnableClock>
  // XMC_CCU4_EnableClock(MODULE_PTR_CCU40, SLICE_NUMBER_CCU40_CC41);
  /* Start timer*/
  //XMC_CCU4_SLICE_StartTimer(SLICE_PTR_CCU40_CC40);
  //XMC_CCU4_SLICE_StartTimer(SLICE_PTR_CCU40_CC41);

  return true;
 80076cc:	2301      	movs	r3, #1
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	4000c000 	.word	0x4000c000
 80076d8:	2000002c 	.word	0x2000002c
 80076dc:	4000c100 	.word	0x4000c100
 80076e0:	0800eb08 	.word	0x0800eb08
 80076e4:	48028100 	.word	0x48028100

080076e8 <BSP_PWM_SetPen>:

_Bool BSP_PWM_SetPen(uint8_t cmd)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	4603      	mov	r3, r0
 80076f0:	71fb      	strb	r3, [r7, #7]
  if(cmd == 1) // Pen UP --> 1,5ms
 80076f2:	79fb      	ldrb	r3, [r7, #7]
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d10f      	bne.n	8007718 <BSP_PWM_SetPen+0x30>
  {
    XMC_CCU4_SLICE_SetTimerPeriodMatch(SLICE_PTR_CCU40_CC40, PWM_PERIOD_VALUE_PEN);
 80076f8:	f640 1127 	movw	r1, #2343	; 0x927
 80076fc:	4815      	ldr	r0, [pc, #84]	; (8007754 <BSP_PWM_SetPen+0x6c>)
 80076fe:	f7ff ff77 	bl	80075f0 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
    XMC_CCU4_SLICE_SetTimerCompareMatch(SLICE_PTR_CCU40_CC40, PWM_DEF_COMP_VALUE_UP);
 8007702:	2175      	movs	r1, #117	; 0x75
 8007704:	4813      	ldr	r0, [pc, #76]	; (8007754 <BSP_PWM_SetPen+0x6c>)
 8007706:	f7ff ff81 	bl	800760c <XMC_CCU4_SLICE_SetTimerCompareMatch>
    XMC_CCU4_EnableShadowTransfer(MODULE_PTR_CCU40, XMC_CCU4_SHADOW_TRANSFER_SLICE_0);
 800770a:	2101      	movs	r1, #1
 800770c:	4812      	ldr	r0, [pc, #72]	; (8007758 <BSP_PWM_SetPen+0x70>)
 800770e:	f000 fa10 	bl	8007b32 <XMC_CCU4_EnableShadowTransfer>
    XMC_CCU4_SLICE_StartTimer(SLICE_PTR_CCU40_CC40);
 8007712:	4810      	ldr	r0, [pc, #64]	; (8007754 <BSP_PWM_SetPen+0x6c>)
 8007714:	f7ff ff51 	bl	80075ba <XMC_CCU4_SLICE_StartTimer>
  }
  if(cmd == 2)  // Pen Down --> 2ms
 8007718:	79fb      	ldrb	r3, [r7, #7]
 800771a:	2b02      	cmp	r3, #2
 800771c:	d10f      	bne.n	800773e <BSP_PWM_SetPen+0x56>
  {
    XMC_CCU4_SLICE_SetTimerPeriodMatch(SLICE_PTR_CCU40_CC40, PWM_PERIOD_VALUE_PEN);
 800771e:	f640 1127 	movw	r1, #2343	; 0x927
 8007722:	480c      	ldr	r0, [pc, #48]	; (8007754 <BSP_PWM_SetPen+0x6c>)
 8007724:	f7ff ff64 	bl	80075f0 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
    XMC_CCU4_SLICE_SetTimerCompareMatch(SLICE_PTR_CCU40_CC40, PWM_DEF_COMP_VALUE_DOWN);
 8007728:	21af      	movs	r1, #175	; 0xaf
 800772a:	480a      	ldr	r0, [pc, #40]	; (8007754 <BSP_PWM_SetPen+0x6c>)
 800772c:	f7ff ff6e 	bl	800760c <XMC_CCU4_SLICE_SetTimerCompareMatch>
    XMC_CCU4_EnableShadowTransfer(MODULE_PTR_CCU40, XMC_CCU4_SHADOW_TRANSFER_SLICE_0);
 8007730:	2101      	movs	r1, #1
 8007732:	4809      	ldr	r0, [pc, #36]	; (8007758 <BSP_PWM_SetPen+0x70>)
 8007734:	f000 f9fd 	bl	8007b32 <XMC_CCU4_EnableShadowTransfer>
    XMC_CCU4_SLICE_StartTimer(SLICE_PTR_CCU40_CC40);
 8007738:	4806      	ldr	r0, [pc, #24]	; (8007754 <BSP_PWM_SetPen+0x6c>)
 800773a:	f7ff ff3e 	bl	80075ba <XMC_CCU4_SLICE_StartTimer>
  //   XMC_CCU4_SLICE_SetTimerPeriodMatch(SLICE_PTR_CCU40_CC41, PWM_PERIOD_VALUE_XY);
  //   XMC_CCU4_SLICE_SetTimerCompareMatch(SLICE_PTR_CCU40_CC41, PWM_DEF_COMP_VALUE_XY);
  //   XMC_CCU4_EnableShadowTransfer(MODULE_PTR_CCU40, XMC_CCU4_SHADOW_TRANSFER_SLICE_1);
  //   XMC_CCU4_SLICE_StartTimer(SLICE_PTR_CCU40_CC41);
  // }
  if(cmd == 3) // Timer ausschalten
 800773e:	79fb      	ldrb	r3, [r7, #7]
 8007740:	2b03      	cmp	r3, #3
 8007742:	d102      	bne.n	800774a <BSP_PWM_SetPen+0x62>
  {
    XMC_CCU4_SLICE_StopTimer(SLICE_PTR_CCU40_CC40);
 8007744:	4803      	ldr	r0, [pc, #12]	; (8007754 <BSP_PWM_SetPen+0x6c>)
 8007746:	f7ff ff44 	bl	80075d2 <XMC_CCU4_SLICE_StopTimer>
  // {
  //   XMC_CCU4_SLICE_StopTimer(SLICE_PTR_CCU40_CC41);
  // }


	return true;
 800774a:	2301      	movs	r3, #1
}
 800774c:	4618      	mov	r0, r3
 800774e:	3708      	adds	r7, #8
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	4000c100 	.word	0x4000c100
 8007758:	4000c000 	.word	0x4000c000

0800775c <BSP_DAC0_1_Init>:
  .output_negation = XMC_DAC_CH_OUTPUT_NEGATION_DISABLED,
};


// init of DAC0, OUT_1, port / pin 14.9
void BSP_DAC0_1_Init(void){
 800775c:	b580      	push	{r7, lr}
 800775e:	af00      	add	r7, sp, #0
  /* API to initial DAC Module*/

  XMC_DAC_CH_Init(XMC_DAC0, 1, &config);
 8007760:	4a05      	ldr	r2, [pc, #20]	; (8007778 <BSP_DAC0_1_Init+0x1c>)
 8007762:	2101      	movs	r1, #1
 8007764:	4805      	ldr	r0, [pc, #20]	; (800777c <BSP_DAC0_1_Init+0x20>)
 8007766:	f000 f8c7 	bl	80078f8 <XMC_DAC_CH_Init>

  /* API to initial DAC in SingleValue mode */
  XMC_DAC_CH_StartSingleValueMode(XMC_DAC0, 1);
 800776a:	2101      	movs	r1, #1
 800776c:	4803      	ldr	r0, [pc, #12]	; (800777c <BSP_DAC0_1_Init+0x20>)
 800776e:	f000 f8e7 	bl	8007940 <XMC_DAC_CH_StartSingleValueMode>

}
 8007772:	bf00      	nop
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	0800eb14 	.word	0x0800eb14
 800777c:	48018000 	.word	0x48018000

08007780 <_lseek>:

/*
 * File position seek
 */
__attribute__((weak)) int _lseek(int file, int offset, int whence)
{
 8007780:	b480      	push	{r7}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	60b9      	str	r1, [r7, #8]
 800778a:	607a      	str	r2, [r7, #4]
 file = file;
 offset = offset;
 whence = whence;
 return -1;
 800778c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007790:	4618      	mov	r0, r3
 8007792:	3714      	adds	r7, #20
 8007794:	46bd      	mov	sp, r7
 8007796:	bc80      	pop	{r7}
 8007798:	4770      	bx	lr

0800779a <_read>:

/*
 * File read
 */
__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800779a:	b480      	push	{r7}
 800779c:	b085      	sub	sp, #20
 800779e:	af00      	add	r7, sp, #0
 80077a0:	60f8      	str	r0, [r7, #12]
 80077a2:	60b9      	str	r1, [r7, #8]
 80077a4:	607a      	str	r2, [r7, #4]
 file = file;
 len  = len;
 return 0;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3714      	adds	r7, #20
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bc80      	pop	{r7}
 80077b0:	4770      	bx	lr

080077b2 <_close>:

/*
 * File close
 */
__attribute__((weak)) int _close(void)
{
 80077b2:	b480      	push	{r7}
 80077b4:	af00      	add	r7, sp, #0
 return -1;
 80077b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	46bd      	mov	sp, r7
 80077be:	bc80      	pop	{r7}
 80077c0:	4770      	bx	lr

080077c2 <_fstat>:

/*
 * File status
 */
__attribute__((weak)) int _fstat(int file, struct stat *st)
{
 80077c2:	b480      	push	{r7}
 80077c4:	b083      	sub	sp, #12
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
 80077ca:	6039      	str	r1, [r7, #0]
 file = file;
 if(st)
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d002      	beq.n	80077d8 <_fstat+0x16>
  return -1;
 80077d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077d6:	e001      	b.n	80077dc <_fstat+0x1a>
 else
  return -2;
 80077d8:	f06f 0301 	mvn.w	r3, #1
}
 80077dc:	4618      	mov	r0, r3
 80077de:	370c      	adds	r7, #12
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bc80      	pop	{r7}
 80077e4:	4770      	bx	lr
	...

080077e8 <_sbrk>:
/* ========================================================================= */
/*
 * Heap break (position)
 */
__attribute__((weak)) void *_sbrk(int RequestedSize)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b087      	sub	sp, #28
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 unsigned int  HeapSize;
 static unsigned char *HeapBound;
 static unsigned char * heap= (unsigned char *)NULL;


 HeapSize   = (unsigned int)(&Heap_Bank1_Size);
 80077f0:	4b15      	ldr	r3, [pc, #84]	; (8007848 <_sbrk+0x60>)
 80077f2:	617b      	str	r3, [r7, #20]

 /*
  * If this is the first time malloc() was invoked, we start with the
  * begining of the heap.
  */
 if(heap == (unsigned char *)NULL)
 80077f4:	4b15      	ldr	r3, [pc, #84]	; (800784c <_sbrk+0x64>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d108      	bne.n	800780e <_sbrk+0x26>
  {
   heap = (unsigned char *)&Heap_Bank1_Start;
 80077fc:	4b13      	ldr	r3, [pc, #76]	; (800784c <_sbrk+0x64>)
 80077fe:	4a14      	ldr	r2, [pc, #80]	; (8007850 <_sbrk+0x68>)
 8007800:	601a      	str	r2, [r3, #0]
   HeapBound  = (unsigned char *) (heap + HeapSize);
 8007802:	4b12      	ldr	r3, [pc, #72]	; (800784c <_sbrk+0x64>)
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	4413      	add	r3, r2
 800780a:	4a12      	ldr	r2, [pc, #72]	; (8007854 <_sbrk+0x6c>)
 800780c:	6013      	str	r3, [r2, #0]
  }

 /* Super duper algo to find out if we have memory for the latest request */
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;
 800780e:	4b0f      	ldr	r3, [pc, #60]	; (800784c <_sbrk+0x64>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	613b      	str	r3, [r7, #16]

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
 8007814:	4b0d      	ldr	r3, [pc, #52]	; (800784c <_sbrk+0x64>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	461a      	mov	r2, r3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4413      	add	r3, r2
 800781e:	3307      	adds	r3, #7
                                          & 0xFFFFFFF8);
 8007820:	f023 0307 	bic.w	r3, r3, #7
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
 8007824:	60fb      	str	r3, [r7, #12]

 /* Return no memory condition if we sense we are crossing the limit */
 if (NextBreak >=  HeapBound )
 8007826:	4b0b      	ldr	r3, [pc, #44]	; (8007854 <_sbrk+0x6c>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	68fa      	ldr	r2, [r7, #12]
 800782c:	429a      	cmp	r2, r3
 800782e:	d301      	bcc.n	8007834 <_sbrk+0x4c>
  return ((unsigned char *)NULL);
 8007830:	2300      	movs	r3, #0
 8007832:	e003      	b.n	800783c <_sbrk+0x54>
 else
 {
  heap = NextBreak;
 8007834:	4a05      	ldr	r2, [pc, #20]	; (800784c <_sbrk+0x64>)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6013      	str	r3, [r2, #0]
  return CurrBreak;
 800783a:	693b      	ldr	r3, [r7, #16]
 }
}
 800783c:	4618      	mov	r0, r3
 800783e:	371c      	adds	r7, #28
 8007840:	46bd      	mov	sp, r7
 8007842:	bc80      	pop	{r7}
 8007844:	4770      	bx	lr
 8007846:	bf00      	nop
 8007848:	0000cab8 	.word	0x0000cab8
 800784c:	200019f4 	.word	0x200019f4
 8007850:	20003548 	.word	0x20003548
 8007854:	200019f8 	.word	0x200019f8

08007858 <_init>:
 while(1){}
}

/* Init */
__attribute__((weak)) void _init(void)
{}
 8007858:	b480      	push	{r7}
 800785a:	af00      	add	r7, sp, #0
 800785c:	bf00      	nop
 800785e:	46bd      	mov	sp, r7
 8007860:	bc80      	pop	{r7}
 8007862:	4770      	bx	lr

08007864 <_isatty>:

/*
 * Terminal type evaluation
 */
__attribute__((weak)) int _isatty(int file)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 file = file;
 return -1;
 800786c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007870:	4618      	mov	r0, r3
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	bc80      	pop	{r7}
 8007878:	4770      	bx	lr

0800787a <XMC_DAC_CH_EnableOutput>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_DisableOutput(), XMC_DAC_CH_IsOutputEnabled()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_EnableOutput(XMC_DAC_t *const dac, const uint8_t channel)
{
 800787a:	b480      	push	{r7}
 800787c:	b083      	sub	sp, #12
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
 8007882:	460b      	mov	r3, r1
 8007884:	70fb      	strb	r3, [r7, #3]
  dac->DACCFG[channel].high |= DAC_DAC0CFG1_ANAEN_Msk;
 8007886:	78fb      	ldrb	r3, [r7, #3]
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	00db      	lsls	r3, r3, #3
 800788c:	4413      	add	r3, r2
 800788e:	689a      	ldr	r2, [r3, #8]
 8007890:	78fb      	ldrb	r3, [r7, #3]
 8007892:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007896:	6879      	ldr	r1, [r7, #4]
 8007898:	00db      	lsls	r3, r3, #3
 800789a:	440b      	add	r3, r1
 800789c:	609a      	str	r2, [r3, #8]
}
 800789e:	bf00      	nop
 80078a0:	370c      	adds	r7, #12
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bc80      	pop	{r7}
 80078a6:	4770      	bx	lr

080078a8 <XMC_DAC_CH_SetMode>:
 * Sets the operating \e mode for the \e channel by setting the \a MODE bit-field of \a DAC0CFG0 register (for channel 0) / \a DAC1CFG0 register (for channel 1).
 * Different modes of DAC operation are defined by enum XMC_DAC_CH_MODE_t.
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetMode(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_MODE_t mode)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b085      	sub	sp, #20
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	460b      	mov	r3, r1
 80078b2:	607a      	str	r2, [r7, #4]
 80078b4:	72fb      	strb	r3, [r7, #11]
  dac->DACCFG[channel].low = (dac->DACCFG[channel].low & ~DAC_DAC0CFG0_MODE_Msk) |
 80078b6:	7afb      	ldrb	r3, [r7, #11]
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	00db      	lsls	r3, r3, #3
 80078bc:	4413      	add	r3, r2
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 80078c4:	7afb      	ldrb	r3, [r7, #11]
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	430a      	orrs	r2, r1
 80078ca:	68f9      	ldr	r1, [r7, #12]
 80078cc:	00db      	lsls	r3, r3, #3
 80078ce:	440b      	add	r3, r1
 80078d0:	605a      	str	r2, [r3, #4]
                             mode;
}
 80078d2:	bf00      	nop
 80078d4:	3714      	adds	r7, #20
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bc80      	pop	{r7}
 80078da:	4770      	bx	lr

080078dc <XMC_DAC_Enable>:
 * API IMPLEMENTATION
 *******************************************************************************/

/* API to enable the DAC module */
void XMC_DAC_Enable(XMC_DAC_t *const dac)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b082      	sub	sp, #8
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  XMC_UNUSED_ARG(dac);
  
#if(UC_SERIES != XMC45)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_DAC);
#endif
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_DAC);
 80078e4:	4803      	ldr	r0, [pc, #12]	; (80078f4 <XMC_DAC_Enable+0x18>)
 80078e6:	f000 fd3f 	bl	8008368 <XMC_SCU_RESET_DeassertPeripheralReset>
}
 80078ea:	bf00      	nop
 80078ec:	3708      	adds	r7, #8
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	10000020 	.word	0x10000020

080078f8 <XMC_DAC_CH_Init>:
  return (status);
}

/* API to initialize DAC channel configuration */
void XMC_DAC_CH_Init(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_CONFIG_t *const config)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b084      	sub	sp, #16
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	460b      	mov	r3, r1
 8007902:	607a      	str	r2, [r7, #4]
 8007904:	72fb      	strb	r3, [r7, #11]
  XMC_DAC_Enable(dac);
 8007906:	68f8      	ldr	r0, [r7, #12]
 8007908:	f7ff ffe8 	bl	80078dc <XMC_DAC_Enable>

  dac->DACCFG[channel].low = config->cfg0;
 800790c:	7afb      	ldrb	r3, [r7, #11]
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	6812      	ldr	r2, [r2, #0]
 8007912:	68f9      	ldr	r1, [r7, #12]
 8007914:	00db      	lsls	r3, r3, #3
 8007916:	440b      	add	r3, r1
 8007918:	605a      	str	r2, [r3, #4]
  dac->DACCFG[channel].high = config->cfg1;
 800791a:	7afb      	ldrb	r3, [r7, #11]
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	6852      	ldr	r2, [r2, #4]
 8007920:	68f9      	ldr	r1, [r7, #12]
 8007922:	00db      	lsls	r3, r3, #3
 8007924:	440b      	add	r3, r1
 8007926:	609a      	str	r2, [r3, #8]
  if (channel < XMC_DAC_NO_CHANNELS)
 8007928:	7afb      	ldrb	r3, [r7, #11]
 800792a:	2b01      	cmp	r3, #1
 800792c:	d804      	bhi.n	8007938 <XMC_DAC_CH_Init+0x40>
  {
    XMC_DAC_CH_EnableOutput(dac, channel);
 800792e:	7afb      	ldrb	r3, [r7, #11]
 8007930:	4619      	mov	r1, r3
 8007932:	68f8      	ldr	r0, [r7, #12]
 8007934:	f7ff ffa1 	bl	800787a <XMC_DAC_CH_EnableOutput>
  }
}
 8007938:	bf00      	nop
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <XMC_DAC_CH_StartSingleValueMode>:
  return XMC_DAC_CH_SetFrequency(dac, channel, frequency * ((stop - start) + 1U));
}

/* API to start the operation in Single Value Mode. */
XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartSingleValueMode(XMC_DAC_t *const dac, const uint8_t channel)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	460b      	mov	r3, r1
 800794a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_DAC_CH_StartSingleValueMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_StartSingleValueMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_StartSingleValueMode: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_SINGLE);
 800794c:	78fb      	ldrb	r3, [r7, #3]
 800794e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007952:	4619      	mov	r1, r3
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f7ff ffa7 	bl	80078a8 <XMC_DAC_CH_SetMode>

  return XMC_DAC_CH_STATUS_OK;
 800795a:	2300      	movs	r3, #0
}
 800795c:	4618      	mov	r0, r3
 800795e:	3708      	adds	r7, #8
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	460b      	mov	r3, r1
 800796e:	70fb      	strb	r3, [r7, #3]
 8007970:	4613      	mov	r3, r2
 8007972:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_CHECK_MODE(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 8007974:	78fb      	ldrb	r3, [r7, #3]
 8007976:	089b      	lsrs	r3, r3, #2
 8007978:	b2db      	uxtb	r3, r3
 800797a:	461a      	mov	r2, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	3204      	adds	r2, #4
 8007980:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007984:	78fb      	ldrb	r3, [r7, #3]
 8007986:	f003 0303 	and.w	r3, r3, #3
 800798a:	00db      	lsls	r3, r3, #3
 800798c:	21f8      	movs	r1, #248	; 0xf8
 800798e:	fa01 f303 	lsl.w	r3, r1, r3
 8007992:	43db      	mvns	r3, r3
 8007994:	78f9      	ldrb	r1, [r7, #3]
 8007996:	0889      	lsrs	r1, r1, #2
 8007998:	b2c9      	uxtb	r1, r1
 800799a:	4608      	mov	r0, r1
 800799c:	ea02 0103 	and.w	r1, r2, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	1d02      	adds	r2, r0, #4
 80079a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80079a8:	78fb      	ldrb	r3, [r7, #3]
 80079aa:	089b      	lsrs	r3, r3, #2
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	461a      	mov	r2, r3
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	3204      	adds	r2, #4
 80079b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80079b8:	78b9      	ldrb	r1, [r7, #2]
 80079ba:	78fb      	ldrb	r3, [r7, #3]
 80079bc:	f003 0303 	and.w	r3, r3, #3
 80079c0:	00db      	lsls	r3, r3, #3
 80079c2:	fa01 f303 	lsl.w	r3, r1, r3
 80079c6:	78f9      	ldrb	r1, [r7, #3]
 80079c8:	0889      	lsrs	r1, r1, #2
 80079ca:	b2c9      	uxtb	r1, r1
 80079cc:	4608      	mov	r0, r1
 80079ce:	ea42 0103 	orr.w	r1, r2, r3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	1d02      	adds	r2, r0, #4
 80079d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80079da:	bf00      	nop
 80079dc:	370c      	adds	r7, #12
 80079de:	46bd      	mov	sp, r7
 80079e0:	bc80      	pop	{r7}
 80079e2:	4770      	bx	lr

080079e4 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b082      	sub	sp, #8
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_CHECK_MODULE_PTR(module));

# if (UC_FAMILY == XMC4)
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 80079ec:	2010      	movs	r0, #16
 80079ee:	f000 fce9 	bl	80083c4 <XMC_SCU_CLOCK_EnableClock>

  /* De-assert CCU4 module */
  XMC_CCU4_lDeassertReset(module);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 f906 	bl	8007c04 <XMC_CCU4_lDeassertReset>
# if ((UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41) || (UC_FAMILY == XMC1))
  /* Disable CCU4 clock gating */
  XMC_CCU4_lUngateClock(module);
# endif

}
 80079f8:	bf00      	nop
 80079fa:	3708      	adds	r7, #8
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <XMC_CCU4_Init>:

}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	460b      	mov	r3, r1
 8007a0a:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_CHECK_MODULE_PTR(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f7ff ffe9 	bl	80079e4 <XMC_CCU4_EnableModule>

  gctrl = module->GCTRL;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007a1e:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8007a20:	78fb      	ldrb	r3, [r7, #3]
 8007a22:	039b      	lsls	r3, r3, #14
 8007a24:	68fa      	ldr	r2, [r7, #12]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	68fa      	ldr	r2, [r7, #12]
 8007a2e:	601a      	str	r2, [r3, #0]
}
 8007a30:	bf00      	nop
 8007a32:	3710      	adds	r7, #16
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <XMC_CCU4_SetModuleClock>:

/* API to select CCU4 module clock */
void XMC_CCU4_SetModuleClock(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_CLOCK_t clock)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	460b      	mov	r3, r1
 8007a42:	70fb      	strb	r3, [r7, #3]
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Pointer", XMC_CCU4_CHECK_MODULE_PTR(module));
  XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Clock", XMC_CCU4_SLICE_CHECK_CLOCK(clock));

  gctrl = module->GCTRL;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_PCIS_Msk);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007a50:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) clock) << CCU4_GCTRL_PCIS_Pos;
 8007a52:	78fb      	ldrb	r3, [r7, #3]
 8007a54:	011b      	lsls	r3, r3, #4
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	68fa      	ldr	r2, [r7, #12]
 8007a60:	601a      	str	r2, [r3, #0]
}
 8007a62:	bf00      	nop
 8007a64:	3714      	adds	r7, #20
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bc80      	pop	{r7}
 8007a6a:	4770      	bx	lr

08007a6c <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
		                            const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	795b      	ldrb	r3, [r3, #5]
 8007a82:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	051a      	lsls	r2, r3, #20
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	791b      	ldrb	r3, [r3, #4]
 8007a92:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	461a      	mov	r2, r3
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	795b      	ldrb	r3, [r3, #5]
 8007aa2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	795b      	ldrb	r3, [r3, #5]
 8007ab2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	461a      	mov	r2, r3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	791b      	ldrb	r3, [r3, #4]
 8007ac2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	461a      	mov	r2, r3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007ace:	bf00      	nop
 8007ad0:	370c      	adds	r7, #12
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bc80      	pop	{r7}
 8007ad6:	4770      	bx	lr

08007ad8 <XMC_CCU4_SLICE_StartConfig>:

/* API to configure the Start trigger function of a slice */
void XMC_CCU4_SLICE_StartConfig(XMC_CCU4_SLICE_t *const slice,
		                        const XMC_CCU4_SLICE_EVENT_t event,
                                const XMC_CCU4_SLICE_START_MODE_t start_mode)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b085      	sub	sp, #20
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	460b      	mov	r3, r1
 8007ae2:	70fb      	strb	r3, [r7, #3]
 8007ae4:	4613      	mov	r3, r2
 8007ae6:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Start Mode", 
             ((start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR) ||\
		          (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START)));
  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	60bb      	str	r3, [r7, #8]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_STRTS_Msk);
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	f023 0303 	bic.w	r3, r3, #3
 8007af4:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_STRTS_Pos;
 8007af6:	78fb      	ldrb	r3, [r7, #3]
 8007af8:	68ba      	ldr	r2, [r7, #8]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	68ba      	ldr	r2, [r7, #8]
 8007b02:	605a      	str	r2, [r3, #4]
  
  tc  = slice->TC;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	695b      	ldr	r3, [r3, #20]
 8007b08:	60fb      	str	r3, [r7, #12]
  /* Next, Configure the start mode */
  if (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR)
 8007b0a:	78bb      	ldrb	r3, [r7, #2]
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d104      	bne.n	8007b1a <XMC_CCU4_SLICE_StartConfig+0x42>
  {
    tc |= (uint32_t)CCU4_CC4_TC_STRM_Msk;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007b16:	60fb      	str	r3, [r7, #12]
 8007b18:	e003      	b.n	8007b22 <XMC_CCU4_SLICE_StartConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t)CCU4_CC4_TC_STRM_Msk);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b20:	60fb      	str	r3, [r7, #12]
  }
  
  slice->TC = tc;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	68fa      	ldr	r2, [r7, #12]
 8007b26:	615a      	str	r2, [r3, #20]
}
 8007b28:	bf00      	nop
 8007b2a:	3714      	adds	r7, #20
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bc80      	pop	{r7}
 8007b30:	4770      	bx	lr

08007b32 <XMC_CCU4_EnableShadowTransfer>:
  slice->PSC = (uint32_t) div_val;
}

/* Transfers value from shadow timer registers to actual timer registers */
void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8007b32:	b480      	push	{r7}
 8007b34:	b083      	sub	sp, #12
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
 8007b3a:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_CHECK_MODULE_PTR(module));
  module->GCSS |= (uint32_t)shadow_transfer_msk;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	691a      	ldr	r2, [r3, #16]
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	431a      	orrs	r2, r3
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	611a      	str	r2, [r3, #16]
}
 8007b48:	bf00      	nop
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bc80      	pop	{r7}
 8007b50:	4770      	bx	lr
	...

08007b54 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b087      	sub	sp, #28
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	70fb      	strb	r3, [r7, #3]
 8007b60:	4613      	mov	r3, r2
 8007b62:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007b6a:	60fb      	str	r3, [r7, #12]
  
  switch(event)
 8007b6c:	78fb      	ldrb	r3, [r7, #3]
 8007b6e:	2b09      	cmp	r3, #9
 8007b70:	d82c      	bhi.n	8007bcc <XMC_CCU4_SLICE_SetInterruptNode+0x78>
 8007b72:	a201      	add	r2, pc, #4	; (adr r2, 8007b78 <XMC_CCU4_SLICE_SetInterruptNode+0x24>)
 8007b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b78:	08007ba1 	.word	0x08007ba1
 8007b7c:	08007ba1 	.word	0x08007ba1
 8007b80:	08007bab 	.word	0x08007bab
 8007b84:	08007bab 	.word	0x08007bab
 8007b88:	08007bcd 	.word	0x08007bcd
 8007b8c:	08007bcd 	.word	0x08007bcd
 8007b90:	08007bcd 	.word	0x08007bcd
 8007b94:	08007bcd 	.word	0x08007bcd
 8007b98:	08007bb5 	.word	0x08007bb5
 8007b9c:	08007bc1 	.word	0x08007bc1
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	617b      	str	r3, [r7, #20]
      break;
 8007ba8:	e016      	b.n	8007bd8 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 8007baa:	230c      	movs	r3, #12
 8007bac:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 8007bae:	2302      	movs	r3, #2
 8007bb0:	617b      	str	r3, [r7, #20]
      break;
 8007bb2:	e011      	b.n	8007bd8 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 8007bb4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007bb8:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 8007bba:	2308      	movs	r3, #8
 8007bbc:	617b      	str	r3, [r7, #20]
      break;
 8007bbe:	e00b      	b.n	8007bd8 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 8007bc0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007bc4:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 8007bc6:	230a      	movs	r3, #10
 8007bc8:	617b      	str	r3, [r7, #20]
      break;
 8007bca:	e005      	b.n	8007bd8 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 8007bcc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8007bd0:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 8007bd2:	230c      	movs	r3, #12
 8007bd4:	617b      	str	r3, [r7, #20]
      break;
 8007bd6:	bf00      	nop
  }
  
  srs &= ~mask; 
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	43db      	mvns	r3, r3
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	4013      	ands	r3, r2
 8007be0:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 8007be2:	78ba      	ldrb	r2, [r7, #2]
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bea:	68fa      	ldr	r2, [r7, #12]
 8007bec:	4313      	orrs	r3, r2
 8007bee:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	68fa      	ldr	r2, [r7, #12]
 8007bf4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8007bf8:	bf00      	nop
 8007bfa:	371c      	adds	r7, #28
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bc80      	pop	{r7}
 8007c00:	4770      	bx	lr
 8007c02:	bf00      	nop

08007c04 <XMC_CCU4_lDeassertReset>:
}

#if (UC_FAMILY == XMC4)
/* De-asserts CCU4 module from reset state */
void XMC_CCU4_lDeassertReset(XMC_CCU4_MODULE_t *const module)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  /* Enable the module */
  # if ((UC_SERIES == XMC45) || (UC_SERIES == XMC44))
	if (CCU40 == module)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4a0f      	ldr	r2, [pc, #60]	; (8007c4c <XMC_CCU4_lDeassertReset+0x48>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d103      	bne.n	8007c1c <XMC_CCU4_lDeassertReset+0x18>
	{
	  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8007c14:	2004      	movs	r0, #4
 8007c16:	f000 fba7 	bl	8008368 <XMC_SCU_RESET_DeassertPeripheralReset>
	else
	{
	  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
	}
  # endif
}
 8007c1a:	e012      	b.n	8007c42 <XMC_CCU4_lDeassertReset+0x3e>
	else if (CCU41 == module)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	4a0c      	ldr	r2, [pc, #48]	; (8007c50 <XMC_CCU4_lDeassertReset+0x4c>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d103      	bne.n	8007c2c <XMC_CCU4_lDeassertReset+0x28>
	  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8007c24:	2008      	movs	r0, #8
 8007c26:	f000 fb9f 	bl	8008368 <XMC_SCU_RESET_DeassertPeripheralReset>
}
 8007c2a:	e00a      	b.n	8007c42 <XMC_CCU4_lDeassertReset+0x3e>
	else if (CCU42 == module)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	4a09      	ldr	r2, [pc, #36]	; (8007c54 <XMC_CCU4_lDeassertReset+0x50>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d103      	bne.n	8007c3c <XMC_CCU4_lDeassertReset+0x38>
	  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8007c34:	2010      	movs	r0, #16
 8007c36:	f000 fb97 	bl	8008368 <XMC_SCU_RESET_DeassertPeripheralReset>
}
 8007c3a:	e002      	b.n	8007c42 <XMC_CCU4_lDeassertReset+0x3e>
	  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8007c3c:	4806      	ldr	r0, [pc, #24]	; (8007c58 <XMC_CCU4_lDeassertReset+0x54>)
 8007c3e:	f000 fb93 	bl	8008368 <XMC_SCU_RESET_DeassertPeripheralReset>
}
 8007c42:	bf00      	nop
 8007c44:	3708      	adds	r7, #8
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
 8007c4a:	bf00      	nop
 8007c4c:	4000c000 	.word	0x4000c000
 8007c50:	40010000 	.word	0x40010000
 8007c54:	40014000 	.word	0x40014000
 8007c58:	10000001 	.word	0x10000001

08007c5c <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b085      	sub	sp, #20
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	460b      	mov	r3, r1
 8007c66:	607a      	str	r2, [r7, #4]
 8007c68:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_CHECK_MODE(config->mode));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 8007c6a:	7afb      	ldrb	r3, [r7, #11]
 8007c6c:	089b      	lsrs	r3, r3, #2
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	461a      	mov	r2, r3
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	3204      	adds	r2, #4
 8007c76:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007c7a:	7afb      	ldrb	r3, [r7, #11]
 8007c7c:	f003 0303 	and.w	r3, r3, #3
 8007c80:	00db      	lsls	r3, r3, #3
 8007c82:	21f8      	movs	r1, #248	; 0xf8
 8007c84:	fa01 f303 	lsl.w	r3, r1, r3
 8007c88:	43db      	mvns	r3, r3
 8007c8a:	7af9      	ldrb	r1, [r7, #11]
 8007c8c:	0889      	lsrs	r1, r1, #2
 8007c8e:	b2c9      	uxtb	r1, r1
 8007c90:	4608      	mov	r0, r1
 8007c92:	ea02 0103 	and.w	r1, r2, r3
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	1d02      	adds	r2, r0, #4
 8007c9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007ca2:	7afb      	ldrb	r3, [r7, #11]
 8007ca4:	005b      	lsls	r3, r3, #1
 8007ca6:	2103      	movs	r1, #3
 8007ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8007cac:	43db      	mvns	r3, r3
 8007cae:	401a      	ands	r2, r3
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	4a37      	ldr	r2, [pc, #220]	; (8007d94 <XMC_GPIO_Init+0x138>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d003      	beq.n	8007cc4 <XMC_GPIO_Init+0x68>
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	4a36      	ldr	r2, [pc, #216]	; (8007d98 <XMC_GPIO_Init+0x13c>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d10a      	bne.n	8007cda <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007cc8:	7afb      	ldrb	r3, [r7, #11]
 8007cca:	2101      	movs	r1, #1
 8007ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8007cd0:	43db      	mvns	r3, r3
 8007cd2:	401a      	ands	r2, r3
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	661a      	str	r2, [r3, #96]	; 0x60
 8007cd8:	e03c      	b.n	8007d54 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	685a      	ldr	r2, [r3, #4]
 8007cde:	7afb      	ldrb	r3, [r7, #11]
 8007ce0:	409a      	lsls	r2, r3
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8007ce6:	7afb      	ldrb	r3, [r7, #11]
 8007ce8:	08db      	lsrs	r3, r3, #3
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	461a      	mov	r2, r3
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	3210      	adds	r2, #16
 8007cf2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007cf6:	7afb      	ldrb	r3, [r7, #11]
 8007cf8:	f003 0307 	and.w	r3, r3, #7
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	2107      	movs	r1, #7
 8007d00:	fa01 f303 	lsl.w	r3, r1, r3
 8007d04:	43db      	mvns	r3, r3
 8007d06:	7af9      	ldrb	r1, [r7, #11]
 8007d08:	08c9      	lsrs	r1, r1, #3
 8007d0a:	b2c9      	uxtb	r1, r1
 8007d0c:	4608      	mov	r0, r1
 8007d0e:	ea02 0103 	and.w	r1, r2, r3
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f100 0210 	add.w	r2, r0, #16
 8007d18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8007d1c:	7afb      	ldrb	r3, [r7, #11]
 8007d1e:	08db      	lsrs	r3, r3, #3
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	461a      	mov	r2, r3
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	3210      	adds	r2, #16
 8007d28:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	7a1b      	ldrb	r3, [r3, #8]
 8007d30:	4619      	mov	r1, r3
 8007d32:	7afb      	ldrb	r3, [r7, #11]
 8007d34:	f003 0307 	and.w	r3, r3, #7
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8007d3e:	7af9      	ldrb	r1, [r7, #11]
 8007d40:	08c9      	lsrs	r1, r1, #3
 8007d42:	b2c9      	uxtb	r1, r1
 8007d44:	4608      	mov	r0, r1
 8007d46:	ea42 0103 	orr.w	r1, r2, r3
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f100 0210 	add.w	r2, r0, #16
 8007d50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8007d54:	7afb      	ldrb	r3, [r7, #11]
 8007d56:	089b      	lsrs	r3, r3, #2
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	3204      	adds	r2, #4
 8007d60:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	4619      	mov	r1, r3
 8007d6a:	7afb      	ldrb	r3, [r7, #11]
 8007d6c:	f003 0303 	and.w	r3, r3, #3
 8007d70:	00db      	lsls	r3, r3, #3
 8007d72:	fa01 f303 	lsl.w	r3, r1, r3
 8007d76:	7af9      	ldrb	r1, [r7, #11]
 8007d78:	0889      	lsrs	r1, r1, #2
 8007d7a:	b2c9      	uxtb	r1, r1
 8007d7c:	4608      	mov	r0, r1
 8007d7e:	ea42 0103 	orr.w	r1, r2, r3
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	1d02      	adds	r2, r0, #4
 8007d86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8007d8a:	bf00      	nop
 8007d8c:	3714      	adds	r7, #20
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bc80      	pop	{r7}
 8007d92:	4770      	bx	lr
 8007d94:	48028e00 	.word	0x48028e00
 8007d98:	48028f00 	.word	0x48028f00

08007d9c <XMC_CCU8_SLICE_StopTimer>:
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  slice->TCCLR |= (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	f043 0201 	orr.w	r2, r3, #1
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	611a      	str	r2, [r3, #16]
}
 8007db0:	bf00      	nop
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bc80      	pop	{r7}
 8007db8:	4770      	bx	lr

08007dba <XMC_CCU8_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* API to set the CCU8 module as active and enable the clock  */
void XMC_CCU8_EnableModule(XMC_CCU8_MODULE_t *const module)
{
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b082      	sub	sp, #8
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_EnableModule:Invalid Module Pointer", XMC_CCU8_CHECK_MODULE_PTR(module));
# if (UC_FAMILY == XMC4)
  /* Enable CCU8 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8007dc2:	2010      	movs	r0, #16
 8007dc4:	f000 fafe 	bl	80083c4 <XMC_SCU_CLOCK_EnableClock>

  /* De-assert CCU8 module */
  XMC_CCU8_lDeassertReset(module);
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 f905 	bl	8007fd8 <XMC_CCU8_lDeassertReset>

# if ((UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41) || (UC_FAMILY == XMC1))
  /* Disable CCU8 clock gating */
  XMC_CCU8_lUngateClock(module);
# endif
}
 8007dce:	bf00      	nop
 8007dd0:	3708      	adds	r7, #8
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <XMC_CCU8_Init>:

}

/* API to initialize CCU8 global resources  */
void XMC_CCU8_Init(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SLICE_MCMS_ACTION_t mcs_action)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b084      	sub	sp, #16
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
 8007dde:	460b      	mov	r3, r1
 8007de0:	70fb      	strb	r3, [r7, #3]

  XMC_ASSERT("XMC_CCU8_Init:Invalid Module Pointer", XMC_CCU8_CHECK_MODULE_PTR(module));
  XMC_ASSERT("XMC_CCU8_Init:Invalid mcs action", XMC_CCU8_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU8 module */
  XMC_CCU8_EnableModule(module);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f7ff ffe9 	bl	8007dba <XMC_CCU8_EnableModule>

  gctrl = module->GCTRL;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU8_GCTRL_MSDE_Msk);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007df4:	60fb      	str	r3, [r7, #12]
  gctrl |= (uint32_t)mcs_action << CCU8_GCTRL_MSDE_Pos;
 8007df6:	78fb      	ldrb	r3, [r7, #3]
 8007df8:	039b      	lsls	r3, r3, #14
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	68fa      	ldr	r2, [r7, #12]
 8007e04:	601a      	str	r2, [r3, #0]
}
 8007e06:	bf00      	nop
 8007e08:	3710      	adds	r7, #16
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <XMC_CCU8_SetModuleClock>:

/* API to select CCU8 module clock */
void XMC_CCU8_SetModuleClock(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_CLOCK_t clock)
{
 8007e0e:	b480      	push	{r7}
 8007e10:	b085      	sub	sp, #20
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
 8007e16:	460b      	mov	r3, r1
 8007e18:	70fb      	strb	r3, [r7, #3]
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU8_SetModuleClock:Invalid Module Pointer", XMC_CCU8_CHECK_MODULE_PTR(module));
  XMC_ASSERT("XMC_CCU8_SetModuleClock:Invalid Module Clock", XMC_CCU8_SLICE_CHECK_CLOCK(clock));

  gctrl = module->GCTRL;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU8_GCTRL_PCIS_Msk);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007e26:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) clock) << CCU8_GCTRL_PCIS_Pos;
 8007e28:	78fb      	ldrb	r3, [r7, #3]
 8007e2a:	011b      	lsls	r3, r3, #4
 8007e2c:	68fa      	ldr	r2, [r7, #12]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	60fb      	str	r3, [r7, #12]

  module->GCTRL = gctrl;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	68fa      	ldr	r2, [r7, #12]
 8007e36:	601a      	str	r2, [r3, #0]
}
 8007e38:	bf00      	nop
 8007e3a:	3714      	adds	r7, #20
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bc80      	pop	{r7}
 8007e40:	4770      	bx	lr

08007e42 <XMC_CCU8_SLICE_CompareInit>:

/* API to configure CC8 Slice in Compare mode */
void XMC_CCU8_SLICE_CompareInit(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b082      	sub	sp, #8
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
 8007e4a:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU8_CHECK_SLICE_PTR(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Timer Init Pointer is NULL",
             (XMC_CCU8_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);
  /* Stops the timer */
  XMC_CCU8_SLICE_StopTimer(slice);
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f7ff ffa5 	bl	8007d9c <XMC_CCU8_SLICE_StopTimer>
  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	7b5b      	ldrb	r3, [r3, #13]
 8007e5e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	051a      	lsls	r2, r3, #20
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	7b1b      	ldrb	r3, [r3, #12]
 8007e6e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	461a      	mov	r2, r3
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	7b1b      	ldrb	r3, [r3, #12]
 8007e7e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	461a      	mov	r2, r3
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	7b5b      	ldrb	r3, [r3, #13]
 8007e8e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	461a      	mov	r2, r3
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->psl;
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	685a      	ldr	r2, [r3, #4]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	619a      	str	r2, [r3, #24]
  /* Asymmetric PWM and Slice output routing configuration */
  slice->CHC = (uint32_t)((uint32_t)compare_init->chc ^ XMC_CCU8_SLICE_CHC_CONFIG_MASK);
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	f083 0214 	eor.w	r2, r3, #20
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	649a      	str	r2, [r3, #72]	; 0x48
}
 8007eae:	bf00      	nop
 8007eb0:	3708      	adds	r7, #8
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}

08007eb6 <XMC_CCU8_SLICE_SetTimerPeriodMatch>:
  slice->TC = tc;
}

/* Programs period match value of the timer  */
void XMC_CCU8_SLICE_SetTimerPeriodMatch(XMC_CCU8_SLICE_t *const slice, const uint16_t period_val)
{
 8007eb6:	b480      	push	{r7}
 8007eb8:	b083      	sub	sp, #12
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_CHECK_SLICE_PTR(slice));
  slice->PRS = (uint32_t) period_val;
 8007ec2:	887a      	ldrh	r2, [r7, #2]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	635a      	str	r2, [r3, #52]	; 0x34
}
 8007ec8:	bf00      	nop
 8007eca:	370c      	adds	r7, #12
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bc80      	pop	{r7}
 8007ed0:	4770      	bx	lr

08007ed2 <XMC_CCU8_SLICE_SetTimerCompareMatch>:

/* Programs timer compare match value for channel 1 or 2 */
void XMC_CCU8_SLICE_SetTimerCompareMatch(XMC_CCU8_SLICE_t *const slice,
                                         const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
                                         const uint16_t compare_val)
{
 8007ed2:	b480      	push	{r7}
 8007ed4:	b083      	sub	sp, #12
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
 8007eda:	460b      	mov	r3, r1
 8007edc:	70fb      	strb	r3, [r7, #3]
 8007ede:	4613      	mov	r3, r2
 8007ee0:	803b      	strh	r3, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU8_CHECK_SLICE_PTR(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(channel));

  if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 8007ee2:	78fb      	ldrb	r3, [r7, #3]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d103      	bne.n	8007ef0 <XMC_CCU8_SLICE_SetTimerCompareMatch+0x1e>
  {
    slice->CR1S = (uint32_t) compare_val;
 8007ee8:	883a      	ldrh	r2, [r7, #0]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  else
  {
    slice->CR2S = (uint32_t) compare_val;
  }
}
 8007eee:	e002      	b.n	8007ef6 <XMC_CCU8_SLICE_SetTimerCompareMatch+0x24>
    slice->CR2S = (uint32_t) compare_val;
 8007ef0:	883a      	ldrh	r2, [r7, #0]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	645a      	str	r2, [r3, #68]	; 0x44
}
 8007ef6:	bf00      	nop
 8007ef8:	370c      	adds	r7, #12
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bc80      	pop	{r7}
 8007efe:	4770      	bx	lr

08007f00 <XMC_CCU8_EnableShadowTransfer>:

  return(compare_value);
}

void XMC_CCU8_EnableShadowTransfer(XMC_CCU8_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b083      	sub	sp, #12
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_EnableShadowTransfer:Invalid module Pointer", XMC_CCU8_CHECK_MODULE_PTR(module));
  module->GCSS |= (uint32_t)shadow_transfer_msk;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	691a      	ldr	r2, [r3, #16]
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	431a      	orrs	r2, r3
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	611a      	str	r2, [r3, #16]
}
 8007f16:	bf00      	nop
 8007f18:	370c      	adds	r7, #12
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bc80      	pop	{r7}
 8007f1e:	4770      	bx	lr

08007f20 <XMC_CCU8_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU8_SLICE_SetInterruptNode(XMC_CCU8_SLICE_t *const slice,
                                     const XMC_CCU8_SLICE_IRQ_ID_t event,
                                     const XMC_CCU8_SLICE_SR_ID_t sr)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b087      	sub	sp, #28
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	460b      	mov	r3, r1
 8007f2a:	70fb      	strb	r3, [r7, #3]
 8007f2c:	4613      	mov	r3, r2
 8007f2e:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU8_CHECK_SLICE_PTR(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU8_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  srs = slice->SRS;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007f36:	60fb      	str	r3, [r7, #12]

  switch(event)
 8007f38:	78fb      	ldrb	r3, [r7, #3]
 8007f3a:	2b09      	cmp	r3, #9
 8007f3c:	d831      	bhi.n	8007fa2 <XMC_CCU8_SLICE_SetInterruptNode+0x82>
 8007f3e:	a201      	add	r2, pc, #4	; (adr r2, 8007f44 <XMC_CCU8_SLICE_SetInterruptNode+0x24>)
 8007f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f44:	08007f6d 	.word	0x08007f6d
 8007f48:	08007f6d 	.word	0x08007f6d
 8007f4c:	08007f77 	.word	0x08007f77
 8007f50:	08007f77 	.word	0x08007f77
 8007f54:	08007f81 	.word	0x08007f81
 8007f58:	08007f81 	.word	0x08007f81
 8007f5c:	08007fa3 	.word	0x08007fa3
 8007f60:	08007fa3 	.word	0x08007fa3
 8007f64:	08007f8b 	.word	0x08007f8b
 8007f68:	08007f97 	.word	0x08007f97
  {
    case XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU8_CC8_SRS_POSR_Msk);
 8007f6c:	2303      	movs	r3, #3
 8007f6e:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_POSR_Pos;
 8007f70:	2300      	movs	r3, #0
 8007f72:	613b      	str	r3, [r7, #16]
      break;
 8007f74:	e01b      	b.n	8007fae <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1:
    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1:
      mask = ((uint32_t) CCU8_CC8_SRS_CM1SR_Msk);
 8007f76:	230c      	movs	r3, #12
 8007f78:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_CM1SR_Pos;
 8007f7a:	2302      	movs	r3, #2
 8007f7c:	613b      	str	r3, [r7, #16]
      break;
 8007f7e:	e016      	b.n	8007fae <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2:
    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2:
      mask = ((uint32_t) CCU8_CC8_SRS_CM2SR_Msk);
 8007f80:	2330      	movs	r3, #48	; 0x30
 8007f82:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_CM2SR_Pos;
 8007f84:	2304      	movs	r3, #4
 8007f86:	613b      	str	r3, [r7, #16]
      break;
 8007f88:	e011      	b.n	8007fae <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU8_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU8_CC8_SRS_E0SR_Msk);
 8007f8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007f8e:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E0SR_Pos;
 8007f90:	2308      	movs	r3, #8
 8007f92:	613b      	str	r3, [r7, #16]
      break;
 8007f94:	e00b      	b.n	8007fae <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU8_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU8_CC8_SRS_E1SR_Msk);
 8007f96:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007f9a:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E1SR_Pos;
 8007f9c:	230a      	movs	r3, #10
 8007f9e:	613b      	str	r3, [r7, #16]
      break;
 8007fa0:	e005      	b.n	8007fae <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    default:
      mask = ((uint32_t) CCU8_CC8_SRS_E2SR_Msk);
 8007fa2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8007fa6:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E2SR_Pos;
 8007fa8:	230c      	movs	r3, #12
 8007faa:	613b      	str	r3, [r7, #16]
      break;
 8007fac:	bf00      	nop
  }
  
  srs &= ~mask;
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	43db      	mvns	r3, r3
 8007fb2:	68fa      	ldr	r2, [r7, #12]
 8007fb4:	4013      	ands	r3, r2
 8007fb6:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 8007fb8:	78ba      	ldrb	r2, [r7, #2]
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8007fc0:	68fa      	ldr	r2, [r7, #12]
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	60fb      	str	r3, [r7, #12]
  
  slice->SRS = srs;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	68fa      	ldr	r2, [r7, #12]
 8007fca:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8007fce:	bf00      	nop
 8007fd0:	371c      	adds	r7, #28
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bc80      	pop	{r7}
 8007fd6:	4770      	bx	lr

08007fd8 <XMC_CCU8_lDeassertReset>:
}

#if (UC_FAMILY == XMC4)
/* De-asserts CCU8 module from reset state */
void XMC_CCU8_lDeassertReset(XMC_CCU8_MODULE_t *const module)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  /* Enable the module */
  #if ((UC_SERIES == XMC45) || (UC_SERIES == XMC44))
    if (CCU80 == module)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	4a07      	ldr	r2, [pc, #28]	; (8008000 <XMC_CCU8_lDeassertReset+0x28>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d103      	bne.n	8007ff0 <XMC_CCU8_lDeassertReset+0x18>
    {
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU80);
 8007fe8:	2080      	movs	r0, #128	; 0x80
 8007fea:	f000 f9bd 	bl	8008368 <XMC_SCU_RESET_DeassertPeripheralReset>
    if (CCU80 == module)
    {
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU80);
    }
  #endif
}
 8007fee:	e003      	b.n	8007ff8 <XMC_CCU8_lDeassertReset+0x20>
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU81);
 8007ff0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007ff4:	f000 f9b8 	bl	8008368 <XMC_SCU_RESET_DeassertPeripheralReset>
}
 8007ff8:	bf00      	nop
 8007ffa:	3708      	adds	r7, #8
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	40020000 	.word	0x40020000

08008004 <XMC_USIC_CH_GetTransmitBufferStatus>:
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008010:	b2db      	uxtb	r3, r3
 8008012:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008016:	b2db      	uxtb	r3, r3
}
 8008018:	4618      	mov	r0, r3
 800801a:	370c      	adds	r7, #12
 800801c:	46bd      	mov	sp, r7
 800801e:	bc80      	pop	{r7}
 8008020:	4770      	bx	lr

08008022 <XMC_UART_CH_ClearStatusFlag>:
{
 8008022:	b480      	push	{r7}
 8008024:	b083      	sub	sp, #12
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
 800802a:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	683a      	ldr	r2, [r7, #0]
 8008030:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8008032:	bf00      	nop
 8008034:	370c      	adds	r7, #12
 8008036:	46bd      	mov	sp, r7
 8008038:	bc80      	pop	{r7}
 800803a:	4770      	bx	lr

0800803c <XMC_UART_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b084      	sub	sp, #16
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 8008046:	2310      	movs	r3, #16
 8008048:	60fb      	str	r3, [r7, #12]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 f9f4 	bl	8008438 <XMC_USIC_CH_Enable>
  
  if(config->oversampling != 0U)
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	79db      	ldrb	r3, [r3, #7]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d002      	beq.n	800805e <XMC_UART_CH_Init+0x22>
  {
    oversampling = (uint32_t)config->oversampling;
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	79db      	ldrb	r3, [r3, #7]
 800805c:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure baud rate */
  (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	68fa      	ldr	r2, [r7, #12]
 8008064:	4619      	mov	r1, r3
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 fa34 	bl	80084d4 <XMC_USIC_CH_SetBaudrate>
   * Configure the number of stop bits
   * Pulse length is set to 0 to have standard UART signaling, 
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	799b      	ldrb	r3, [r3, #6]
 8008070:	3b01      	subs	r3, #1
 8008072:	005a      	lsls	r2, r3, #1
			             (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	085b      	lsrs	r3, r3, #1
 8008078:	3301      	adds	r3, #1
 800807a:	021b      	lsls	r3, r3, #8
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 800807c:	4313      	orrs	r3, r2
 800807e:	f043 0201 	orr.w	r2, r3, #1
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	791b      	ldrb	r3, [r3, #4]
 800808a:	3b01      	subs	r3, #1
 800808c:	061b      	lsls	r3, r3, #24
 800808e:	f443 7281 	orr.w	r2, r3, #258	; 0x102
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	635a      	str	r2, [r3, #52]	; 0x34
		              ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	795b      	ldrb	r3, [r3, #5]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d009      	beq.n	80080b2 <XMC_UART_CH_Init+0x76>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	795b      	ldrb	r3, [r3, #5]
 80080a6:	3b01      	subs	r3, #1
 80080a8:	041b      	lsls	r3, r3, #16
 80080aa:	431a      	orrs	r2, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	635a      	str	r2, [r3, #52]	; 0x34
 80080b0:	e008      	b.n	80080c4 <XMC_UART_CH_Init+0x88>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	791b      	ldrb	r3, [r3, #4]
 80080ba:	3b01      	subs	r3, #1
 80080bc:	041b      	lsls	r3, r3, #16
 80080be:	431a      	orrs	r2, r3
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80080ca:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80080d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	891b      	ldrh	r3, [r3, #8]
 80080d8:	461a      	mov	r2, r3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	641a      	str	r2, [r3, #64]	; 0x40
}
 80080de:	bf00      	nop
 80080e0:	3710      	adds	r7, #16
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <XMC_UART_CH_Transmit>:
  } 
  return status;
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b082      	sub	sp, #8
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
 80080ee:	460b      	mov	r3, r1
 80080f0:	807b      	strh	r3, [r7, #2]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80080f8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d110      	bne.n	8008122 <XMC_UART_CH_Transmit+0x3c>
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8008100:	bf00      	nop
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f7ff ff7e 	bl	8008004 <XMC_USIC_CH_GetTransmitBufferStatus>
 8008108:	4603      	mov	r3, r0
 800810a:	2b80      	cmp	r3, #128	; 0x80
 800810c:	d0f9      	beq.n	8008102 <XMC_UART_CH_Transmit+0x1c>
    {
    }
  
    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 800810e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f7ff ff85 	bl	8008022 <XMC_UART_CH_ClearStatusFlag>
  
    /*Transmit data */
    channel->TBUF[0U] = data;
 8008118:	887a      	ldrh	r2, [r7, #2]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = data;
  }
}
 8008120:	e003      	b.n	800812a <XMC_UART_CH_Transmit+0x44>
    channel->IN[0U] = data;
 8008122:	887a      	ldrh	r2, [r7, #2]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
 800812a:	bf00      	nop
 800812c:	3708      	adds	r7, #8
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <XMC_UART_CH_GetReceivedData>:

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8008132:	b480      	push	{r7}
 8008134:	b085      	sub	sp, #20
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8008140:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008144:	2b00      	cmp	r3, #0
 8008146:	d103      	bne.n	8008150 <XMC_UART_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800814c:	81fb      	strh	r3, [r7, #14]
 800814e:	e003      	b.n	8008158 <XMC_UART_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8008156:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 8008158:	89fb      	ldrh	r3, [r7, #14]
}
 800815a:	4618      	mov	r0, r3
 800815c:	3714      	adds	r7, #20
 800815e:	46bd      	mov	sp, r7
 8008160:	bc80      	pop	{r7}
 8008162:	4770      	bx	lr

08008164 <XMC_UART_CH_EnableEvent>:
  }
  return status;
}

void XMC_UART_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8008164:	b480      	push	{r7}
 8008166:	b083      	sub	sp, #12
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
  if ((event & 0x80000000U) != 0U)
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	2b00      	cmp	r3, #0
 8008172:	da08      	bge.n	8008186 <XMC_UART_CH_EnableEvent+0x22>
  {
    /* USIC module event */
    channel->CCR |= event & 0x7fffffffU;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800817e:	431a      	orrs	r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	641a      	str	r2, [r3, #64]	; 0x40
  else
  {
    /* Protocol event */
    channel->PCR_ASCMode |= event;
  }
}
 8008184:	e005      	b.n	8008192 <XMC_UART_CH_EnableEvent+0x2e>
    channel->PCR_ASCMode |= event;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	431a      	orrs	r2, r3
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008192:	bf00      	nop
 8008194:	370c      	adds	r7, #12
 8008196:	46bd      	mov	sp, r7
 8008198:	bc80      	pop	{r7}
 800819a:	4770      	bx	lr

0800819c <XMC_USIC_CH_GetTransmitBufferStatus>:
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80081ae:	b2db      	uxtb	r3, r3
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bc80      	pop	{r7}
 80081b8:	4770      	bx	lr

080081ba <XMC_USIC_CH_GetReceiveBufferStatus>:
{
 80081ba:	b480      	push	{r7}
 80081bc:	b083      	sub	sp, #12
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081c6:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	370c      	adds	r7, #12
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bc80      	pop	{r7}
 80081d2:	4770      	bx	lr

080081d4 <XMC_SPI_CH_ClearStatusFlag>:
{
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	431a      	orrs	r2, r3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80081ea:	bf00      	nop
 80081ec:	370c      	adds	r7, #12
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bc80      	pop	{r7}
 80081f2:	4770      	bx	lr

080081f4 <XMC_SPI_CH_Init>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* Initializes the selected SPI channel with the config structure. */
void XMC_SPI_CH_Init(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
  XMC_USIC_CH_Enable(channel);
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 f91a 	bl	8008438 <XMC_USIC_CH_Enable>

  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	791b      	ldrb	r3, [r3, #4]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d106      	bne.n	800821a <XMC_SPI_CH_Init+0x26>
  {
    /* Configure baud rate */
    (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING);
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2202      	movs	r2, #2
 8008212:	4619      	mov	r1, r3
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 f95d 	bl	80084d4 <XMC_USIC_CH_SetBaudrate>

  /* Configuration of USIC Shift Control */
  /* Transmission Mode (TRM) = 1  */
  /* Passive Data Level (PDL) = 1 */
  /* FHTW: SDIR-Bit (Bit 0 of SCTR) to 1 in order to send MSB first */
  channel->SCTR = USIC_CH_SCTR_PDL_Msk |
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4a0f      	ldr	r2, [pc, #60]	; (800825c <XMC_SPI_CH_Init+0x68>)
 800821e:	635a      	str	r2, [r3, #52]	; 0x34
				  (0x1UL << USIC_CH_SCTR_SDIR_Pos);

  /* Configuration of USIC Transmit Control/Status Register */
  /* TBUF Data Enable (TDEN) = 1 */
  /* TBUF Data Single Shot Mode (TDSSM) = 1 */
  channel->TCSR = (uint32_t)(USIC_CH_TCSR_HPCMD_Msk |
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 8008226:	639a      	str	r2, [r3, #56]	; 0x38
                  (0x01UL  << USIC_CH_TCSR_TDEN_Pos) |
                  USIC_CH_TCSR_TDSSM_Msk);

  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	791b      	ldrb	r3, [r3, #4]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d107      	bne.n	8008240 <XMC_SPI_CH_Init+0x4c>
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
                           USIC_CH_PCR_SSCMode_SELCTR_Msk |
                           (uint32_t)config->selo_inversion |
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	795b      	ldrb	r3, [r3, #5]
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
 8008234:	f043 030b 	orr.w	r3, r3, #11
 8008238:	b2db      	uxtb	r3, r3
 800823a:	461a      	mov	r2, r3
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	63da      	str	r2, [r3, #60]	; 0x3c
                           USIC_CH_PCR_SSCMode_FEM_Msk);
  }

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008246:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	88db      	ldrh	r3, [r3, #6]
 800824c:	461a      	mov	r2, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	641a      	str	r2, [r3, #64]	; 0x40
}
 8008252:	bf00      	nop
 8008254:	3708      	adds	r7, #8
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	073f0103 	.word	0x073f0103

08008260 <XMC_SPI_CH_Transmit>:
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SELO_Msk;
}

/* Puts the data into FIFO if FIFO mode is enabled or else into standard buffers, by setting the proper mode. */
void XMC_SPI_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data, const XMC_SPI_CH_MODE_t mode)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	460b      	mov	r3, r1
 800826a:	807b      	strh	r3, [r7, #2]
 800826c:	4613      	mov	r3, r2
 800826e:	707b      	strb	r3, [r7, #1]

  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008274:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
                 (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 8008278:	787b      	ldrb	r3, [r7, #1]
 800827a:	019b      	lsls	r3, r3, #6
 800827c:	b2db      	uxtb	r3, r3
  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 800827e:	431a      	orrs	r2, r3
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	641a      	str	r2, [r3, #64]	; 0x40


  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800828a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800828e:	2b00      	cmp	r3, #0
 8008290:	d113      	bne.n	80082ba <XMC_SPI_CH_Transmit+0x5a>
  {
    while((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(channel) & (uint32_t)XMC_USIC_CH_TBUF_STATUS_BUSY)
 8008292:	bf00      	nop
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f7ff ff81 	bl	800819c <XMC_USIC_CH_GetTransmitBufferStatus>
 800829a:	4603      	mov	r3, r0
 800829c:	b25b      	sxtb	r3, r3
 800829e:	2b00      	cmp	r3, #0
 80082a0:	dbf8      	blt.n	8008294 <XMC_SPI_CH_Transmit+0x34>
    {
    }

    XMC_SPI_CH_ClearStatusFlag(channel, (uint32_t)XMC_SPI_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80082a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f7ff ff94 	bl	80081d4 <XMC_SPI_CH_ClearStatusFlag>

    channel->TBUF[mode] = data;
 80082ac:	787a      	ldrb	r2, [r7, #1]
 80082ae:	8879      	ldrh	r1, [r7, #2]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	3220      	adds	r2, #32
 80082b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  else
  {
    channel->IN[mode] = data;
  }
}
 80082b8:	e005      	b.n	80082c6 <XMC_SPI_CH_Transmit+0x66>
    channel->IN[mode] = data;
 80082ba:	787a      	ldrb	r2, [r7, #1]
 80082bc:	8879      	ldrh	r1, [r7, #2]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	3260      	adds	r2, #96	; 0x60
 80082c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80082c6:	bf00      	nop
 80082c8:	3708      	adds	r7, #8
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <XMC_SPI_CH_GetReceivedData>:

/* Reads the data from the buffers based on the FIFO mode selection. */
uint16_t XMC_SPI_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b084      	sub	sp, #16
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80082dc:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d112      	bne.n	800830a <XMC_SPI_CH_GetReceivedData+0x3c>
  {
  /*FHTW: check ReceiveBuffer Status added */
  while(((uint32_t)XMC_USIC_CH_GetReceiveBufferStatus(channel) != (uint32_t)XMC_USIC_CH_RBUF_STATUS_DATA_VALID1)&&((uint32_t)XMC_USIC_CH_GetReceiveBufferStatus(channel) != (uint32_t)XMC_USIC_CH_RBUF_STATUS_DATA_VALID0))
 80082e4:	bf00      	nop
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f7ff ff67 	bl	80081ba <XMC_USIC_CH_GetReceiveBufferStatus>
 80082ec:	4603      	mov	r3, r0
 80082ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082f2:	d006      	beq.n	8008302 <XMC_SPI_CH_GetReceivedData+0x34>
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f7ff ff60 	bl	80081ba <XMC_USIC_CH_GetReceiveBufferStatus>
 80082fa:	4603      	mov	r3, r0
 80082fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008300:	d1f1      	bne.n	80082e6 <XMC_SPI_CH_GetReceivedData+0x18>
  {
  }
    retval = (uint16_t)channel->RBUF;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008306:	81fb      	strh	r3, [r7, #14]
 8008308:	e003      	b.n	8008312 <XMC_SPI_CH_GetReceivedData+0x44>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8008310:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 8008312:	89fb      	ldrh	r3, [r7, #14]
}
 8008314:	4618      	mov	r0, r3
 8008316:	3710      	adds	r7, #16
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <XMC_SPI_CH_EnableEvent>:

  return status;
}

void XMC_SPI_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  if ((event & 0x80000000U) != 0U)
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	2b00      	cmp	r3, #0
 800832a:	da08      	bge.n	800833e <XMC_SPI_CH_EnableEvent+0x22>
  {
    channel->CCR |= event & 0x7fffffffU;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008336:	431a      	orrs	r2, r3
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	641a      	str	r2, [r3, #64]	; 0x40
  }
  else
  {
    channel->PCR_SSCMode |= event;
  }
}
 800833c:	e005      	b.n	800834a <XMC_SPI_CH_EnableEvent+0x2e>
    channel->PCR_SSCMode |= event;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	431a      	orrs	r2, r3
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800834a:	bf00      	nop
 800834c:	370c      	adds	r7, #12
 800834e:	46bd      	mov	sp, r7
 8008350:	bc80      	pop	{r7}
 8008352:	4770      	bx	lr

08008354 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 8008354:	b480      	push	{r7}
 8008356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008358:	4b02      	ldr	r3, [pc, #8]	; (8008364 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x10>)
 800835a:	681b      	ldr	r3, [r3, #0]
}
 800835c:	4618      	mov	r0, r3
 800835e:	46bd      	mov	sp, r7
 8008360:	bc80      	pop	{r7}
 8008362:	4770      	bx	lr
 8008364:	20000034 	.word	0x20000034

08008368 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *set_peripheral_reset[index] |= (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8008368:	b480      	push	{r7}
 800836a:	b085      	sub	sp, #20
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	0f1b      	lsrs	r3, r3, #28
 8008374:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800837c:	60bb      	str	r3, [r7, #8]
  static __O uint32_t *const clear_peripheral_reset[] = {&(SCU_RESET->PRCLR0),
                                                         &(SCU_RESET->PRCLR1),
                                                         &(SCU_RESET->PRCLR2)};
#endif

  *clear_peripheral_reset[index] |= (uint32_t)mask;
 800837e:	4a08      	ldr	r2, [pc, #32]	; (80083a0 <XMC_SCU_RESET_DeassertPeripheralReset+0x38>)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008386:	6819      	ldr	r1, [r3, #0]
 8008388:	4a05      	ldr	r2, [pc, #20]	; (80083a0 <XMC_SCU_RESET_DeassertPeripheralReset+0x38>)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008390:	68ba      	ldr	r2, [r7, #8]
 8008392:	430a      	orrs	r2, r1
 8008394:	601a      	str	r2, [r3, #0]
}
 8008396:	bf00      	nop
 8008398:	3714      	adds	r7, #20
 800839a:	46bd      	mov	sp, r7
 800839c:	bc80      	pop	{r7}
 800839e:	4770      	bx	lr
 80083a0:	0800eb1c 	.word	0x0800eb1c

080083a4 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80083a8:	f7ff ffd4 	bl	8008354 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 80083ac:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 80083ae:	4b04      	ldr	r3, [pc, #16]	; (80083c0 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 80083b0:	695b      	ldr	r3, [r3, #20]
 80083b2:	f003 0301 	and.w	r3, r3, #1
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80083b6:	fa22 f303 	lsr.w	r3, r2, r3
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop
 80083c0:	50004600 	.word	0x50004600

080083c4 <XMC_SCU_CLOCK_EnableClock>:
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EXTCLKCR_ECKDIV_Pos);
}

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	4603      	mov	r3, r0
 80083cc:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 80083ce:	4a04      	ldr	r2, [pc, #16]	; (80083e0 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 80083d0:	79fb      	ldrb	r3, [r7, #7]
 80083d2:	6053      	str	r3, [r2, #4]
}
 80083d4:	bf00      	nop
 80083d6:	370c      	adds	r7, #12
 80083d8:	46bd      	mov	sp, r7
 80083da:	bc80      	pop	{r7}
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop
 80083e0:	50004600 	.word	0x50004600

080083e4 <XMC_USIC_Enable>:
 * @brief API to enable the USIC driver
 * @retval void
 *
 */
void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4a0d      	ldr	r2, [pc, #52]	; (8008424 <XMC_USIC_Enable+0x40>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d104      	bne.n	80083fe <XMC_USIC_Enable+0x1a>
  {
#if(UC_SERIES != XMC45)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 80083f4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80083f8:	f7ff ffb6 	bl	8008368 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 80083fc:	e00e      	b.n	800841c <XMC_USIC_Enable+0x38>
  else if (usic == USIC1)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	4a09      	ldr	r2, [pc, #36]	; (8008428 <XMC_USIC_Enable+0x44>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d103      	bne.n	800840e <XMC_USIC_Enable+0x2a>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 8008406:	4809      	ldr	r0, [pc, #36]	; (800842c <XMC_USIC_Enable+0x48>)
 8008408:	f7ff ffae 	bl	8008368 <XMC_SCU_RESET_DeassertPeripheralReset>
}
 800840c:	e006      	b.n	800841c <XMC_USIC_Enable+0x38>
  else if (usic == USIC2)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4a07      	ldr	r2, [pc, #28]	; (8008430 <XMC_USIC_Enable+0x4c>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d102      	bne.n	800841c <XMC_USIC_Enable+0x38>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 8008416:	4807      	ldr	r0, [pc, #28]	; (8008434 <XMC_USIC_Enable+0x50>)
 8008418:	f7ff ffa6 	bl	8008368 <XMC_SCU_RESET_DeassertPeripheralReset>
}
 800841c:	bf00      	nop
 800841e:	3708      	adds	r7, #8
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}
 8008424:	40030008 	.word	0x40030008
 8008428:	48020008 	.word	0x48020008
 800842c:	10000080 	.word	0x10000080
 8008430:	48024008 	.word	0x48024008
 8008434:	10000100 	.word	0x10000100

08008438 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_CHECK_CH(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	4a1b      	ldr	r2, [pc, #108]	; (80084b0 <XMC_USIC_CH_Enable+0x78>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d003      	beq.n	8008450 <XMC_USIC_CH_Enable+0x18>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	4a1a      	ldr	r2, [pc, #104]	; (80084b4 <XMC_USIC_CH_Enable+0x7c>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d103      	bne.n	8008458 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 8008450:	4819      	ldr	r0, [pc, #100]	; (80084b8 <XMC_USIC_CH_Enable+0x80>)
 8008452:	f7ff ffc7 	bl	80083e4 <XMC_USIC_Enable>
 8008456:	e016      	b.n	8008486 <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4a18      	ldr	r2, [pc, #96]	; (80084bc <XMC_USIC_CH_Enable+0x84>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d003      	beq.n	8008468 <XMC_USIC_CH_Enable+0x30>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	4a17      	ldr	r2, [pc, #92]	; (80084c0 <XMC_USIC_CH_Enable+0x88>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d103      	bne.n	8008470 <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 8008468:	4816      	ldr	r0, [pc, #88]	; (80084c4 <XMC_USIC_CH_Enable+0x8c>)
 800846a:	f7ff ffbb 	bl	80083e4 <XMC_USIC_Enable>
 800846e:	e00a      	b.n	8008486 <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a15      	ldr	r2, [pc, #84]	; (80084c8 <XMC_USIC_CH_Enable+0x90>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d003      	beq.n	8008480 <XMC_USIC_CH_Enable+0x48>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4a14      	ldr	r2, [pc, #80]	; (80084cc <XMC_USIC_CH_Enable+0x94>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d102      	bne.n	8008486 <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 8008480:	4813      	ldr	r0, [pc, #76]	; (80084d0 <XMC_USIC_CH_Enable+0x98>)
 8008482:	f7ff ffaf 	bl	80083e4 <XMC_USIC_Enable>
  else
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }
  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2203      	movs	r2, #3
 800848a:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 800848c:	bf00      	nop
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	f003 0301 	and.w	r3, r3, #1
 8008496:	2b00      	cmp	r3, #0
 8008498:	d0f9      	beq.n	800848e <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800849e:	f023 020f 	bic.w	r2, r3, #15
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80084a6:	bf00      	nop
 80084a8:	3708      	adds	r7, #8
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	40030000 	.word	0x40030000
 80084b4:	40030200 	.word	0x40030200
 80084b8:	40030008 	.word	0x40030008
 80084bc:	48020000 	.word	0x48020000
 80084c0:	48020200 	.word	0x48020200
 80084c4:	48020008 	.word	0x48020008
 80084c8:	48024000 	.word	0x48024000
 80084cc:	48024200 	.word	0x48024200
 80084d0:	48024008 	.word	0x48024008

080084d4 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b08e      	sub	sp, #56	; 0x38
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	607a      	str	r2, [r7, #4]

  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	2b63      	cmp	r3, #99	; 0x63
 80084e4:	d95a      	bls.n	800859c <XMC_USIC_CH_SetBaudrate+0xc8>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d057      	beq.n	800859c <XMC_USIC_CH_SetBaudrate+0xc8>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 80084ec:	f7ff ff5a 	bl	80083a4 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 80084f0:	4602      	mov	r2, r0
 80084f2:	4b2f      	ldr	r3, [pc, #188]	; (80085b0 <XMC_USIC_CH_SetBaudrate+0xdc>)
 80084f4:	fba3 2302 	umull	r2, r3, r3, r2
 80084f8:	095b      	lsrs	r3, r3, #5
 80084fa:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	4a2c      	ldr	r2, [pc, #176]	; (80085b0 <XMC_USIC_CH_SetBaudrate+0xdc>)
 8008500:	fba2 2303 	umull	r2, r3, r2, r3
 8008504:	095b      	lsrs	r3, r3, #5
 8008506:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
 8008508:	2301      	movs	r3, #1
 800850a:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 800850c:	2301      	movs	r3, #1
 800850e:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 8008510:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8008514:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8008516:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800851a:	633b      	str	r3, [r7, #48]	; 0x30
 800851c:	e022      	b.n	8008564 <XMC_USIC_CH_SetBaudrate+0x90>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 800851e:	6a3b      	ldr	r3, [r7, #32]
 8008520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008522:	fb02 f203 	mul.w	r2, r2, r3
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	6879      	ldr	r1, [r7, #4]
 800852a:	fb01 f303 	mul.w	r3, r1, r3
 800852e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008532:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 8008534:	69fb      	ldr	r3, [r7, #28]
 8008536:	0a9b      	lsrs	r3, r3, #10
 8008538:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008540:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 8008542:	69bb      	ldr	r3, [r7, #24]
 8008544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008548:	d209      	bcs.n	800855e <XMC_USIC_CH_SetBaudrate+0x8a>
 800854a:	697a      	ldr	r2, [r7, #20]
 800854c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854e:	429a      	cmp	r2, r3
 8008550:	d205      	bcs.n	800855e <XMC_USIC_CH_SetBaudrate+0x8a>
      {
        pdiv_frac_min = pdiv_frac;
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 8008556:	69bb      	ldr	r3, [r7, #24]
 8008558:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 800855a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800855c:	62fb      	str	r3, [r7, #44]	; 0x2c
    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 800855e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008560:	3b01      	subs	r3, #1
 8008562:	633b      	str	r3, [r7, #48]	; 0x30
 8008564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1d9      	bne.n	800851e <XMC_USIC_CH_SetBaudrate+0x4a>
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 800856a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800856c:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	695a      	ldr	r2, [r3, #20]
 8008578:	4b0e      	ldr	r3, [pc, #56]	; (80085b4 <XMC_USIC_CH_SetBaudrate+0xe0>)
 800857a:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	3a01      	subs	r2, #1
 8008580:	0292      	lsls	r2, r2, #10
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8008582:	431a      	orrs	r2, r3
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos)|(0x1UL<<USIC_CH_BRG_SCLKCFG_Pos);
 8008584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008586:	3b01      	subs	r3, #1
 8008588:	041b      	lsls	r3, r3, #16
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 800858a:	4313      	orrs	r3, r2
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos)|(0x1UL<<USIC_CH_BRG_SCLKCFG_Pos);
 800858c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	615a      	str	r2, [r3, #20]

    status = XMC_USIC_CH_STATUS_OK;
 8008594:	2300      	movs	r3, #0
 8008596:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800859a:	e002      	b.n	80085a2 <XMC_USIC_CH_SetBaudrate+0xce>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 800859c:	2301      	movs	r3, #1
 800859e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  return status;
 80085a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3738      	adds	r7, #56	; 0x38
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop
 80085b0:	51eb851f 	.word	0x51eb851f
 80085b4:	fc0080ef 	.word	0xfc0080ef

080085b8 <XMC_USIC_CH_SetInterruptNodePointer>:


void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b085      	sub	sp, #20
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	460b      	mov	r3, r1
 80085c2:	607a      	str	r2, [r7, #4]
 80085c4:	72fb      	strb	r3, [r7, #11]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	699a      	ldr	r2, [r3, #24]
 80085ca:	7afb      	ldrb	r3, [r7, #11]
 80085cc:	2107      	movs	r1, #7
 80085ce:	fa01 f303 	lsl.w	r3, r1, r3
 80085d2:	43db      	mvns	r3, r3
 80085d4:	401a      	ands	r2, r3
                  (service_request << (uint32_t)interrupt_node));
 80085d6:	7afb      	ldrb	r3, [r7, #11]
 80085d8:	6879      	ldr	r1, [r7, #4]
 80085da:	fa01 f303 	lsl.w	r3, r1, r3
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80085de:	431a      	orrs	r2, r3
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	619a      	str	r2, [r3, #24]
}
 80085e4:	bf00      	nop
 80085e6:	3714      	adds	r7, #20
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bc80      	pop	{r7}
 80085ec:	4770      	bx	lr
	...

080085f0 <Reset_Handler>:
    .section  .text.Reset_Handler
    .weak  Reset_Handler
    .type  Reset_Handler, %function
Reset_Handler:
                                            @ Disable Branch prediction.
    ldr r0,=PREF_PCON
 80085f0:	4817      	ldr	r0, [pc, #92]	; (8008650 <LoopForever+0x2>)
    ldr r1,[r0]
 80085f2:	6801      	ldr	r1, [r0, #0]
    orr r1,r1,#0x00010000
 80085f4:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
    str r1,[r0]
 80085f8:	6001      	str	r1, [r0, #0]

                                            @ Clear existing parity errors if any.
    ldr r0,=SCU_GCU_PEFLAG
 80085fa:	4816      	ldr	r0, [pc, #88]	; (8008654 <LoopForever+0x6>)
    ldr r1,=0xFFFFFFFF
 80085fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    str r1,[r0]
 8008600:	6001      	str	r1, [r0, #0]

                                            @ Disable parity.
    ldr r0,=SCU_GCU_PEEN
 8008602:	4815      	ldr	r0, [pc, #84]	; (8008658 <LoopForever+0xa>)
    mov r1,#0
 8008604:	f04f 0100 	mov.w	r1, #0
    str r1,[R0]
 8008608:	6001      	str	r1, [r0, #0]
    AND     R1,  R1, #(0x3FFFFFFF)          @ Clear the LSPEN and ASPEN bits
    STR     R1, [R0]
    ISB                                     @ Reset pipeline now the FPU is enabled
#endif

    LDR     R1, =0xE000ED14                 @ Load address to CCR register
 800860a:	4914      	ldr	r1, [pc, #80]	; (800865c <LoopForever+0xe>)
    LDR.W   R0, [R1, #0x0]
 800860c:	f8d1 0000 	ldr.w	r0, [r1]
    BIC     R0,  R0, #0x8                   @ Enable unaligned memory access
 8008610:	f020 0008 	bic.w	r0, r0, #8
    STR.W   R0, [R1, #0x0]
 8008614:	f8c1 0000 	str.w	r0, [r1]

    ldr sp, =_estack                        @ set stack pointer.
 8008618:	f8df d044 	ldr.w	sp, [pc, #68]	; 8008660 <LoopForever+0x12>

                                            @ a) copy .data section (Copy from ROM to RAM).
    movs r1, #0
 800861c:	2100      	movs	r1, #0
    b LoopCopyDataInit
 800861e:	e003      	b.n	8008628 <LoopCopyDataInit>

08008620 <CopyDataInit>:

CopyDataInit:
    ldr r3, =_sidata
 8008620:	4b10      	ldr	r3, [pc, #64]	; (8008664 <LoopForever+0x16>)
    ldr r3, [r3, r1]
 8008622:	585b      	ldr	r3, [r3, r1]
    str r3, [r0, r1]
 8008624:	5043      	str	r3, [r0, r1]
    adds r1, r1, #4
 8008626:	3104      	adds	r1, #4

08008628 <LoopCopyDataInit>:

LoopCopyDataInit:
    ldr r0, =_sdata
 8008628:	480f      	ldr	r0, [pc, #60]	; (8008668 <LoopForever+0x1a>)
    ldr r3, =_edata
 800862a:	4b10      	ldr	r3, [pc, #64]	; (800866c <LoopForever+0x1e>)
    adds r2, r0, r1
 800862c:	1842      	adds	r2, r0, r1
    cmp r2, r3
 800862e:	429a      	cmp	r2, r3
    bcc CopyDataInit
 8008630:	d3f6      	bcc.n	8008620 <CopyDataInit>
    ldr r2, =_sbss
 8008632:	4a0f      	ldr	r2, [pc, #60]	; (8008670 <LoopForever+0x22>)
    b LoopFillZerobss
 8008634:	e002      	b.n	800863c <LoopFillZerobss>

08008636 <FillZerobss>:

                                            @ b) Clear .bss section (Zero init).
FillZerobss:
    movs r3, #0
 8008636:	2300      	movs	r3, #0
    str r3, [r2], #4
 8008638:	f842 3b04 	str.w	r3, [r2], #4

0800863c <LoopFillZerobss>:

LoopFillZerobss:
    ldr r3, = _ebss
 800863c:	4b0d      	ldr	r3, [pc, #52]	; (8008674 <LoopForever+0x26>)
    cmp r2, r3
 800863e:	429a      	cmp	r2, r3
    bcc FillZerobss
 8008640:	d3f9      	bcc.n	8008636 <FillZerobss>

    bl BSP_LowLevelInit                     @ c) Call system initialzation routine.
 8008642:	f7fd fead 	bl	80063a0 <BSP_LowLevelInit>

    bl __libc_init_array                    @ d) Run static constructors.
 8008646:	f000 f823 	bl	8008690 <__libc_init_array>

    bl main                                 @ e) Enter main.
 800864a:	f7f8 fddf 	bl	800120c <main>

0800864e <LoopForever>:

                                            @ f) Loop forever if returning from main.
LoopForever:
    b LoopForever
 800864e:	e7fe      	b.n	800864e <LoopForever>
    ldr r0,=PREF_PCON
 8008650:	58004000 	.word	0x58004000
    ldr r0,=SCU_GCU_PEFLAG
 8008654:	50004150 	.word	0x50004150
    ldr r0,=SCU_GCU_PEEN
 8008658:	5000413c 	.word	0x5000413c
    LDR     R1, =0xE000ED14                 @ Load address to CCR register
 800865c:	e000ed14 	.word	0xe000ed14
    ldr sp, =_estack                        @ set stack pointer.
 8008660:	20010000 	.word	0x20010000
    ldr r3, =_sidata
 8008664:	0800ede0 	.word	0x0800ede0
    ldr r0, =_sdata
 8008668:	20000000 	.word	0x20000000
    ldr r3, =_edata
 800866c:	200009e4 	.word	0x200009e4
    ldr r2, =_sbss
 8008670:	200009e4 	.word	0x200009e4
    ldr r3, = _ebss
 8008674:	20003348 	.word	0x20003348

08008678 <App_NMI_ISR>:

@ Dummy Exception Handlers (infinite loops which can be modified)

    .section	.text.App_NMI_ISR
App_NMI_ISR:
	b	App_NMI_ISR
 8008678:	e7fe      	b.n	8008678 <App_NMI_ISR>

0800867a <App_Fault_ISR>:
	.size	App_NMI_ISR, .-App_NMI_ISR


    .section	.text.App_Fault_ISR
App_Fault_ISR:
	b	App_Fault_ISR
 800867a:	e7fe      	b.n	800867a <App_Fault_ISR>

0800867c <App_MemFault_ISR>:
	.size	App_Fault_ISR, .-App_Fault_ISR


    .section	.text.App_MemFault_ISR
App_MemFault_ISR:
	b	App_MemFault_ISR
 800867c:	e7fe      	b.n	800867c <App_MemFault_ISR>

0800867e <App_BusFault_ISR>:
	.size	App_MemFault_ISR, .-App_MemFault_ISR


    .section	.text.App_BusFault_ISR
App_BusFault_ISR:
	b	App_BusFault_ISR
 800867e:	e7fe      	b.n	800867e <App_BusFault_ISR>

08008680 <App_UsageFault_ISR>:
	.size	App_BusFault_ISR, .-App_BusFault_ISR


    .section	.text.App_UsageFault_ISR
App_UsageFault_ISR:
	b	App_UsageFault_ISR
 8008680:	e7fe      	b.n	8008680 <App_UsageFault_ISR>

08008682 <App_Spurious_ISR>:
	.size	App_UsageFault_ISR, .-App_UsageFault_ISR

    .section	.text.App_Spurious_ISR
App_Spurious_ISR:
	b	App_Spurious_ISR
 8008682:	e7fe      	b.n	8008682 <App_Spurious_ISR>

08008684 <__errno>:
 8008684:	4b01      	ldr	r3, [pc, #4]	; (800868c <__errno+0x8>)
 8008686:	6818      	ldr	r0, [r3, #0]
 8008688:	4770      	bx	lr
 800868a:	bf00      	nop
 800868c:	20000038 	.word	0x20000038

08008690 <__libc_init_array>:
 8008690:	b570      	push	{r4, r5, r6, lr}
 8008692:	4e0d      	ldr	r6, [pc, #52]	; (80086c8 <__libc_init_array+0x38>)
 8008694:	4d0d      	ldr	r5, [pc, #52]	; (80086cc <__libc_init_array+0x3c>)
 8008696:	1b76      	subs	r6, r6, r5
 8008698:	10b6      	asrs	r6, r6, #2
 800869a:	d006      	beq.n	80086aa <__libc_init_array+0x1a>
 800869c:	2400      	movs	r4, #0
 800869e:	3401      	adds	r4, #1
 80086a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80086a4:	4798      	blx	r3
 80086a6:	42a6      	cmp	r6, r4
 80086a8:	d1f9      	bne.n	800869e <__libc_init_array+0xe>
 80086aa:	4e09      	ldr	r6, [pc, #36]	; (80086d0 <__libc_init_array+0x40>)
 80086ac:	4d09      	ldr	r5, [pc, #36]	; (80086d4 <__libc_init_array+0x44>)
 80086ae:	1b76      	subs	r6, r6, r5
 80086b0:	f7ff f8d2 	bl	8007858 <_init>
 80086b4:	10b6      	asrs	r6, r6, #2
 80086b6:	d006      	beq.n	80086c6 <__libc_init_array+0x36>
 80086b8:	2400      	movs	r4, #0
 80086ba:	3401      	adds	r4, #1
 80086bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80086c0:	4798      	blx	r3
 80086c2:	42a6      	cmp	r6, r4
 80086c4:	d1f9      	bne.n	80086ba <__libc_init_array+0x2a>
 80086c6:	bd70      	pop	{r4, r5, r6, pc}
 80086c8:	0800ede0 	.word	0x0800ede0
 80086cc:	0800ede0 	.word	0x0800ede0
 80086d0:	0800ede0 	.word	0x0800ede0
 80086d4:	0800ede0 	.word	0x0800ede0

080086d8 <memset>:
 80086d8:	b4f0      	push	{r4, r5, r6, r7}
 80086da:	0786      	lsls	r6, r0, #30
 80086dc:	d043      	beq.n	8008766 <memset+0x8e>
 80086de:	1e54      	subs	r4, r2, #1
 80086e0:	2a00      	cmp	r2, #0
 80086e2:	d03e      	beq.n	8008762 <memset+0x8a>
 80086e4:	b2ca      	uxtb	r2, r1
 80086e6:	4603      	mov	r3, r0
 80086e8:	e002      	b.n	80086f0 <memset+0x18>
 80086ea:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 80086ee:	d338      	bcc.n	8008762 <memset+0x8a>
 80086f0:	f803 2b01 	strb.w	r2, [r3], #1
 80086f4:	079d      	lsls	r5, r3, #30
 80086f6:	d1f8      	bne.n	80086ea <memset+0x12>
 80086f8:	2c03      	cmp	r4, #3
 80086fa:	d92b      	bls.n	8008754 <memset+0x7c>
 80086fc:	b2cd      	uxtb	r5, r1
 80086fe:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8008702:	2c0f      	cmp	r4, #15
 8008704:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8008708:	d916      	bls.n	8008738 <memset+0x60>
 800870a:	f1a4 0710 	sub.w	r7, r4, #16
 800870e:	093f      	lsrs	r7, r7, #4
 8008710:	f103 0620 	add.w	r6, r3, #32
 8008714:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 8008718:	f103 0210 	add.w	r2, r3, #16
 800871c:	e942 5504 	strd	r5, r5, [r2, #-16]
 8008720:	e942 5502 	strd	r5, r5, [r2, #-8]
 8008724:	3210      	adds	r2, #16
 8008726:	42b2      	cmp	r2, r6
 8008728:	d1f8      	bne.n	800871c <memset+0x44>
 800872a:	f004 040f 	and.w	r4, r4, #15
 800872e:	3701      	adds	r7, #1
 8008730:	2c03      	cmp	r4, #3
 8008732:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 8008736:	d90d      	bls.n	8008754 <memset+0x7c>
 8008738:	461e      	mov	r6, r3
 800873a:	4622      	mov	r2, r4
 800873c:	3a04      	subs	r2, #4
 800873e:	2a03      	cmp	r2, #3
 8008740:	f846 5b04 	str.w	r5, [r6], #4
 8008744:	d8fa      	bhi.n	800873c <memset+0x64>
 8008746:	1f22      	subs	r2, r4, #4
 8008748:	f022 0203 	bic.w	r2, r2, #3
 800874c:	3204      	adds	r2, #4
 800874e:	4413      	add	r3, r2
 8008750:	f004 0403 	and.w	r4, r4, #3
 8008754:	b12c      	cbz	r4, 8008762 <memset+0x8a>
 8008756:	b2c9      	uxtb	r1, r1
 8008758:	441c      	add	r4, r3
 800875a:	f803 1b01 	strb.w	r1, [r3], #1
 800875e:	429c      	cmp	r4, r3
 8008760:	d1fb      	bne.n	800875a <memset+0x82>
 8008762:	bcf0      	pop	{r4, r5, r6, r7}
 8008764:	4770      	bx	lr
 8008766:	4614      	mov	r4, r2
 8008768:	4603      	mov	r3, r0
 800876a:	e7c5      	b.n	80086f8 <memset+0x20>

0800876c <printf>:
 800876c:	b40f      	push	{r0, r1, r2, r3}
 800876e:	b500      	push	{lr}
 8008770:	4907      	ldr	r1, [pc, #28]	; (8008790 <printf+0x24>)
 8008772:	b083      	sub	sp, #12
 8008774:	ab04      	add	r3, sp, #16
 8008776:	6808      	ldr	r0, [r1, #0]
 8008778:	f853 2b04 	ldr.w	r2, [r3], #4
 800877c:	6881      	ldr	r1, [r0, #8]
 800877e:	9301      	str	r3, [sp, #4]
 8008780:	f001 fbfe 	bl	8009f80 <_vfprintf_r>
 8008784:	b003      	add	sp, #12
 8008786:	f85d eb04 	ldr.w	lr, [sp], #4
 800878a:	b004      	add	sp, #16
 800878c:	4770      	bx	lr
 800878e:	bf00      	nop
 8008790:	20000038 	.word	0x20000038

08008794 <_puts_r>:
 8008794:	b570      	push	{r4, r5, r6, lr}
 8008796:	4605      	mov	r5, r0
 8008798:	b088      	sub	sp, #32
 800879a:	4608      	mov	r0, r1
 800879c:	460c      	mov	r4, r1
 800879e:	f7f7 ffcf 	bl	8000740 <strlen>
 80087a2:	4a22      	ldr	r2, [pc, #136]	; (800882c <_puts_r+0x98>)
 80087a4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80087a6:	9404      	str	r4, [sp, #16]
 80087a8:	2601      	movs	r6, #1
 80087aa:	1c44      	adds	r4, r0, #1
 80087ac:	a904      	add	r1, sp, #16
 80087ae:	9206      	str	r2, [sp, #24]
 80087b0:	2202      	movs	r2, #2
 80087b2:	9403      	str	r4, [sp, #12]
 80087b4:	9005      	str	r0, [sp, #20]
 80087b6:	68ac      	ldr	r4, [r5, #8]
 80087b8:	9607      	str	r6, [sp, #28]
 80087ba:	e9cd 1201 	strd	r1, r2, [sp, #4]
 80087be:	b31b      	cbz	r3, 8008808 <_puts_r+0x74>
 80087c0:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80087c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087c6:	07ce      	lsls	r6, r1, #31
 80087c8:	b29a      	uxth	r2, r3
 80087ca:	d401      	bmi.n	80087d0 <_puts_r+0x3c>
 80087cc:	0590      	lsls	r0, r2, #22
 80087ce:	d525      	bpl.n	800881c <_puts_r+0x88>
 80087d0:	0491      	lsls	r1, r2, #18
 80087d2:	d406      	bmi.n	80087e2 <_puts_r+0x4e>
 80087d4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80087d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80087da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80087de:	81a3      	strh	r3, [r4, #12]
 80087e0:	6662      	str	r2, [r4, #100]	; 0x64
 80087e2:	4628      	mov	r0, r5
 80087e4:	aa01      	add	r2, sp, #4
 80087e6:	4621      	mov	r1, r4
 80087e8:	f004 f902 	bl	800c9f0 <__sfvwrite_r>
 80087ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087ee:	2800      	cmp	r0, #0
 80087f0:	bf0c      	ite	eq
 80087f2:	250a      	moveq	r5, #10
 80087f4:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 80087f8:	07da      	lsls	r2, r3, #31
 80087fa:	d402      	bmi.n	8008802 <_puts_r+0x6e>
 80087fc:	89a3      	ldrh	r3, [r4, #12]
 80087fe:	059b      	lsls	r3, r3, #22
 8008800:	d506      	bpl.n	8008810 <_puts_r+0x7c>
 8008802:	4628      	mov	r0, r5
 8008804:	b008      	add	sp, #32
 8008806:	bd70      	pop	{r4, r5, r6, pc}
 8008808:	4628      	mov	r0, r5
 800880a:	f003 ff75 	bl	800c6f8 <__sinit>
 800880e:	e7d7      	b.n	80087c0 <_puts_r+0x2c>
 8008810:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008812:	f004 fabb 	bl	800cd8c <__retarget_lock_release_recursive>
 8008816:	4628      	mov	r0, r5
 8008818:	b008      	add	sp, #32
 800881a:	bd70      	pop	{r4, r5, r6, pc}
 800881c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800881e:	f004 fab3 	bl	800cd88 <__retarget_lock_acquire_recursive>
 8008822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008826:	b29a      	uxth	r2, r3
 8008828:	e7d2      	b.n	80087d0 <_puts_r+0x3c>
 800882a:	bf00      	nop
 800882c:	0800eb2c 	.word	0x0800eb2c

08008830 <puts>:
 8008830:	4b02      	ldr	r3, [pc, #8]	; (800883c <puts+0xc>)
 8008832:	4601      	mov	r1, r0
 8008834:	6818      	ldr	r0, [r3, #0]
 8008836:	f7ff bfad 	b.w	8008794 <_puts_r>
 800883a:	bf00      	nop
 800883c:	20000038 	.word	0x20000038

08008840 <sprintf>:
 8008840:	b40e      	push	{r1, r2, r3}
 8008842:	b530      	push	{r4, r5, lr}
 8008844:	b09c      	sub	sp, #112	; 0x70
 8008846:	ab1f      	add	r3, sp, #124	; 0x7c
 8008848:	4c0c      	ldr	r4, [pc, #48]	; (800887c <sprintf+0x3c>)
 800884a:	4d0d      	ldr	r5, [pc, #52]	; (8008880 <sprintf+0x40>)
 800884c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008850:	9301      	str	r3, [sp, #4]
 8008852:	4601      	mov	r1, r0
 8008854:	9102      	str	r1, [sp, #8]
 8008856:	9106      	str	r1, [sp, #24]
 8008858:	6820      	ldr	r0, [r4, #0]
 800885a:	a902      	add	r1, sp, #8
 800885c:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8008860:	9407      	str	r4, [sp, #28]
 8008862:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8008866:	f000 f93b 	bl	8008ae0 <_svfprintf_r>
 800886a:	9b02      	ldr	r3, [sp, #8]
 800886c:	2200      	movs	r2, #0
 800886e:	701a      	strb	r2, [r3, #0]
 8008870:	b01c      	add	sp, #112	; 0x70
 8008872:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008876:	b003      	add	sp, #12
 8008878:	4770      	bx	lr
 800887a:	bf00      	nop
 800887c:	20000038 	.word	0x20000038
 8008880:	ffff0208 	.word	0xffff0208

08008884 <strncmp>:
 8008884:	2a00      	cmp	r2, #0
 8008886:	d041      	beq.n	800890c <strncmp+0x88>
 8008888:	ea40 0301 	orr.w	r3, r0, r1
 800888c:	f013 0303 	ands.w	r3, r3, #3
 8008890:	b4f0      	push	{r4, r5, r6, r7}
 8008892:	d125      	bne.n	80088e0 <strncmp+0x5c>
 8008894:	2a03      	cmp	r2, #3
 8008896:	d923      	bls.n	80088e0 <strncmp+0x5c>
 8008898:	6804      	ldr	r4, [r0, #0]
 800889a:	680d      	ldr	r5, [r1, #0]
 800889c:	42ac      	cmp	r4, r5
 800889e:	d11f      	bne.n	80088e0 <strncmp+0x5c>
 80088a0:	3a04      	subs	r2, #4
 80088a2:	d035      	beq.n	8008910 <strncmp+0x8c>
 80088a4:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 80088a8:	ea25 0404 	bic.w	r4, r5, r4
 80088ac:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 80088b0:	d131      	bne.n	8008916 <strncmp+0x92>
 80088b2:	1d07      	adds	r7, r0, #4
 80088b4:	1d0d      	adds	r5, r1, #4
 80088b6:	e00d      	b.n	80088d4 <strncmp+0x50>
 80088b8:	f857 3b04 	ldr.w	r3, [r7], #4
 80088bc:	680e      	ldr	r6, [r1, #0]
 80088be:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
 80088c2:	42b3      	cmp	r3, r6
 80088c4:	ea24 0403 	bic.w	r4, r4, r3
 80088c8:	d10a      	bne.n	80088e0 <strncmp+0x5c>
 80088ca:	3a04      	subs	r2, #4
 80088cc:	d020      	beq.n	8008910 <strncmp+0x8c>
 80088ce:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 80088d2:	d11d      	bne.n	8008910 <strncmp+0x8c>
 80088d4:	2a03      	cmp	r2, #3
 80088d6:	4629      	mov	r1, r5
 80088d8:	4638      	mov	r0, r7
 80088da:	f105 0504 	add.w	r5, r5, #4
 80088de:	d8eb      	bhi.n	80088b8 <strncmp+0x34>
 80088e0:	7803      	ldrb	r3, [r0, #0]
 80088e2:	780c      	ldrb	r4, [r1, #0]
 80088e4:	429c      	cmp	r4, r3
 80088e6:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80088ea:	d10c      	bne.n	8008906 <strncmp+0x82>
 80088ec:	b182      	cbz	r2, 8008910 <strncmp+0x8c>
 80088ee:	b914      	cbnz	r4, 80088f6 <strncmp+0x72>
 80088f0:	e00e      	b.n	8008910 <strncmp+0x8c>
 80088f2:	b16a      	cbz	r2, 8008910 <strncmp+0x8c>
 80088f4:	b17b      	cbz	r3, 8008916 <strncmp+0x92>
 80088f6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80088fa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80088fe:	42a3      	cmp	r3, r4
 8008900:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8008904:	d0f5      	beq.n	80088f2 <strncmp+0x6e>
 8008906:	1b18      	subs	r0, r3, r4
 8008908:	bcf0      	pop	{r4, r5, r6, r7}
 800890a:	4770      	bx	lr
 800890c:	4610      	mov	r0, r2
 800890e:	4770      	bx	lr
 8008910:	2000      	movs	r0, #0
 8008912:	bcf0      	pop	{r4, r5, r6, r7}
 8008914:	4770      	bx	lr
 8008916:	4618      	mov	r0, r3
 8008918:	e7f6      	b.n	8008908 <strncmp+0x84>
 800891a:	bf00      	nop

0800891c <strtok>:
 800891c:	4b02      	ldr	r3, [pc, #8]	; (8008928 <strtok+0xc>)
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	2301      	movs	r3, #1
 8008922:	325c      	adds	r2, #92	; 0x5c
 8008924:	f000 b802 	b.w	800892c <__strtok_r>
 8008928:	20000038 	.word	0x20000038

0800892c <__strtok_r>:
 800892c:	b4f0      	push	{r4, r5, r6, r7}
 800892e:	b320      	cbz	r0, 800897a <__strtok_r+0x4e>
 8008930:	4607      	mov	r7, r0
 8008932:	460d      	mov	r5, r1
 8008934:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008938:	e001      	b.n	800893e <__strtok_r+0x12>
 800893a:	42a6      	cmp	r6, r4
 800893c:	d016      	beq.n	800896c <__strtok_r+0x40>
 800893e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008942:	2c00      	cmp	r4, #0
 8008944:	d1f9      	bne.n	800893a <__strtok_r+0xe>
 8008946:	b1ee      	cbz	r6, 8008984 <__strtok_r+0x58>
 8008948:	463e      	mov	r6, r7
 800894a:	460c      	mov	r4, r1
 800894c:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008950:	e000      	b.n	8008954 <__strtok_r+0x28>
 8008952:	b173      	cbz	r3, 8008972 <__strtok_r+0x46>
 8008954:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008958:	429d      	cmp	r5, r3
 800895a:	d1fa      	bne.n	8008952 <__strtok_r+0x26>
 800895c:	b15d      	cbz	r5, 8008976 <__strtok_r+0x4a>
 800895e:	2300      	movs	r3, #0
 8008960:	703b      	strb	r3, [r7, #0]
 8008962:	6016      	str	r6, [r2, #0]
 8008964:	4606      	mov	r6, r0
 8008966:	4630      	mov	r0, r6
 8008968:	bcf0      	pop	{r4, r5, r6, r7}
 800896a:	4770      	bx	lr
 800896c:	b163      	cbz	r3, 8008988 <__strtok_r+0x5c>
 800896e:	4638      	mov	r0, r7
 8008970:	e7de      	b.n	8008930 <__strtok_r+0x4>
 8008972:	4637      	mov	r7, r6
 8008974:	e7e8      	b.n	8008948 <__strtok_r+0x1c>
 8008976:	462e      	mov	r6, r5
 8008978:	e7f3      	b.n	8008962 <__strtok_r+0x36>
 800897a:	6810      	ldr	r0, [r2, #0]
 800897c:	2800      	cmp	r0, #0
 800897e:	d1d7      	bne.n	8008930 <__strtok_r+0x4>
 8008980:	4606      	mov	r6, r0
 8008982:	e7f0      	b.n	8008966 <__strtok_r+0x3a>
 8008984:	6016      	str	r6, [r2, #0]
 8008986:	e7ee      	b.n	8008966 <__strtok_r+0x3a>
 8008988:	6017      	str	r7, [r2, #0]
 800898a:	4606      	mov	r6, r0
 800898c:	7003      	strb	r3, [r0, #0]
 800898e:	e7ea      	b.n	8008966 <__strtok_r+0x3a>

08008990 <_strtol_l.isra.0>:
 8008990:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008994:	460e      	mov	r6, r1
 8008996:	4680      	mov	r8, r0
 8008998:	4617      	mov	r7, r2
 800899a:	4699      	mov	r9, r3
 800899c:	460d      	mov	r5, r1
 800899e:	e000      	b.n	80089a2 <_strtol_l.isra.0+0x12>
 80089a0:	4625      	mov	r5, r4
 80089a2:	462c      	mov	r4, r5
 80089a4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80089a6:	f814 bb01 	ldrb.w	fp, [r4], #1
 80089aa:	f004 f9d7 	bl	800cd5c <__locale_ctype_ptr_l>
 80089ae:	4458      	add	r0, fp
 80089b0:	7841      	ldrb	r1, [r0, #1]
 80089b2:	f011 0108 	ands.w	r1, r1, #8
 80089b6:	d1f3      	bne.n	80089a0 <_strtol_l.isra.0+0x10>
 80089b8:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
 80089bc:	d057      	beq.n	8008a6e <_strtol_l.isra.0+0xde>
 80089be:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 80089c2:	bf04      	itt	eq
 80089c4:	f895 b001 	ldrbeq.w	fp, [r5, #1]
 80089c8:	1cac      	addeq	r4, r5, #2
 80089ca:	f1b9 0f00 	cmp.w	r9, #0
 80089ce:	d004      	beq.n	80089da <_strtol_l.isra.0+0x4a>
 80089d0:	f1b9 0f10 	cmp.w	r9, #16
 80089d4:	d050      	beq.n	8008a78 <_strtol_l.isra.0+0xe8>
 80089d6:	46cc      	mov	ip, r9
 80089d8:	e005      	b.n	80089e6 <_strtol_l.isra.0+0x56>
 80089da:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 80089de:	d055      	beq.n	8008a8c <_strtol_l.isra.0+0xfc>
 80089e0:	f04f 090a 	mov.w	r9, #10
 80089e4:	46cc      	mov	ip, r9
 80089e6:	2900      	cmp	r1, #0
 80089e8:	bf0c      	ite	eq
 80089ea:	f06f 4e00 	mvneq.w	lr, #2147483648	; 0x80000000
 80089ee:	f04f 4e00 	movne.w	lr, #2147483648	; 0x80000000
 80089f2:	2500      	movs	r5, #0
 80089f4:	fbbe f3fc 	udiv	r3, lr, ip
 80089f8:	4628      	mov	r0, r5
 80089fa:	fb0c ea13 	mls	sl, ip, r3, lr
 80089fe:	e005      	b.n	8008a0c <_strtol_l.isra.0+0x7c>
 8008a00:	d029      	beq.n	8008a56 <_strtol_l.isra.0+0xc6>
 8008a02:	fb0c 2000 	mla	r0, ip, r0, r2
 8008a06:	2501      	movs	r5, #1
 8008a08:	f814 bb01 	ldrb.w	fp, [r4], #1
 8008a0c:	f1ab 0230 	sub.w	r2, fp, #48	; 0x30
 8008a10:	2a09      	cmp	r2, #9
 8008a12:	d905      	bls.n	8008a20 <_strtol_l.isra.0+0x90>
 8008a14:	f1ab 0241 	sub.w	r2, fp, #65	; 0x41
 8008a18:	2a19      	cmp	r2, #25
 8008a1a:	d80b      	bhi.n	8008a34 <_strtol_l.isra.0+0xa4>
 8008a1c:	f1ab 0237 	sub.w	r2, fp, #55	; 0x37
 8008a20:	4591      	cmp	r9, r2
 8008a22:	dd0f      	ble.n	8008a44 <_strtol_l.isra.0+0xb4>
 8008a24:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8008a28:	d0ee      	beq.n	8008a08 <_strtol_l.isra.0+0x78>
 8008a2a:	4283      	cmp	r3, r0
 8008a2c:	d2e8      	bcs.n	8008a00 <_strtol_l.isra.0+0x70>
 8008a2e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008a32:	e7e9      	b.n	8008a08 <_strtol_l.isra.0+0x78>
 8008a34:	f1ab 0261 	sub.w	r2, fp, #97	; 0x61
 8008a38:	2a19      	cmp	r2, #25
 8008a3a:	d803      	bhi.n	8008a44 <_strtol_l.isra.0+0xb4>
 8008a3c:	f1ab 0257 	sub.w	r2, fp, #87	; 0x57
 8008a40:	4591      	cmp	r9, r2
 8008a42:	dcef      	bgt.n	8008a24 <_strtol_l.isra.0+0x94>
 8008a44:	1c6b      	adds	r3, r5, #1
 8008a46:	d00b      	beq.n	8008a60 <_strtol_l.isra.0+0xd0>
 8008a48:	b101      	cbz	r1, 8008a4c <_strtol_l.isra.0+0xbc>
 8008a4a:	4240      	negs	r0, r0
 8008a4c:	b10f      	cbz	r7, 8008a52 <_strtol_l.isra.0+0xc2>
 8008a4e:	bb4d      	cbnz	r5, 8008aa4 <_strtol_l.isra.0+0x114>
 8008a50:	603e      	str	r6, [r7, #0]
 8008a52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a56:	4592      	cmp	sl, r2
 8008a58:	dad3      	bge.n	8008a02 <_strtol_l.isra.0+0x72>
 8008a5a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008a5e:	e7d3      	b.n	8008a08 <_strtol_l.isra.0+0x78>
 8008a60:	2322      	movs	r3, #34	; 0x22
 8008a62:	f8c8 3000 	str.w	r3, [r8]
 8008a66:	b1ff      	cbz	r7, 8008aa8 <_strtol_l.isra.0+0x118>
 8008a68:	1e66      	subs	r6, r4, #1
 8008a6a:	4670      	mov	r0, lr
 8008a6c:	e7f0      	b.n	8008a50 <_strtol_l.isra.0+0xc0>
 8008a6e:	1cac      	adds	r4, r5, #2
 8008a70:	f895 b001 	ldrb.w	fp, [r5, #1]
 8008a74:	2101      	movs	r1, #1
 8008a76:	e7a8      	b.n	80089ca <_strtol_l.isra.0+0x3a>
 8008a78:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 8008a7c:	d1ab      	bne.n	80089d6 <_strtol_l.isra.0+0x46>
 8008a7e:	7823      	ldrb	r3, [r4, #0]
 8008a80:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008a84:	2b58      	cmp	r3, #88	; 0x58
 8008a86:	d006      	beq.n	8008a96 <_strtol_l.isra.0+0x106>
 8008a88:	46cc      	mov	ip, r9
 8008a8a:	e7ac      	b.n	80089e6 <_strtol_l.isra.0+0x56>
 8008a8c:	7823      	ldrb	r3, [r4, #0]
 8008a8e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008a92:	2b58      	cmp	r3, #88	; 0x58
 8008a94:	d10a      	bne.n	8008aac <_strtol_l.isra.0+0x11c>
 8008a96:	f04f 0c10 	mov.w	ip, #16
 8008a9a:	f894 b001 	ldrb.w	fp, [r4, #1]
 8008a9e:	46e1      	mov	r9, ip
 8008aa0:	3402      	adds	r4, #2
 8008aa2:	e7a0      	b.n	80089e6 <_strtol_l.isra.0+0x56>
 8008aa4:	4686      	mov	lr, r0
 8008aa6:	e7df      	b.n	8008a68 <_strtol_l.isra.0+0xd8>
 8008aa8:	4670      	mov	r0, lr
 8008aaa:	e7d2      	b.n	8008a52 <_strtol_l.isra.0+0xc2>
 8008aac:	f04f 0908 	mov.w	r9, #8
 8008ab0:	46cc      	mov	ip, r9
 8008ab2:	e798      	b.n	80089e6 <_strtol_l.isra.0+0x56>

08008ab4 <strtol>:
 8008ab4:	b530      	push	{r4, r5, lr}
 8008ab6:	4c08      	ldr	r4, [pc, #32]	; (8008ad8 <strtol+0x24>)
 8008ab8:	4b08      	ldr	r3, [pc, #32]	; (8008adc <strtol+0x28>)
 8008aba:	6825      	ldr	r5, [r4, #0]
 8008abc:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8008abe:	b083      	sub	sp, #12
 8008ac0:	2c00      	cmp	r4, #0
 8008ac2:	bf08      	it	eq
 8008ac4:	461c      	moveq	r4, r3
 8008ac6:	9400      	str	r4, [sp, #0]
 8008ac8:	4613      	mov	r3, r2
 8008aca:	460a      	mov	r2, r1
 8008acc:	4601      	mov	r1, r0
 8008ace:	4628      	mov	r0, r5
 8008ad0:	f7ff ff5e 	bl	8008990 <_strtol_l.isra.0>
 8008ad4:	b003      	add	sp, #12
 8008ad6:	bd30      	pop	{r4, r5, pc}
 8008ad8:	20000038 	.word	0x20000038
 8008adc:	20000468 	.word	0x20000468

08008ae0 <_svfprintf_r>:
 8008ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae4:	b0c3      	sub	sp, #268	; 0x10c
 8008ae6:	460c      	mov	r4, r1
 8008ae8:	910c      	str	r1, [sp, #48]	; 0x30
 8008aea:	4691      	mov	r9, r2
 8008aec:	930f      	str	r3, [sp, #60]	; 0x3c
 8008aee:	900d      	str	r0, [sp, #52]	; 0x34
 8008af0:	f004 f938 	bl	800cd64 <_localeconv_r>
 8008af4:	6803      	ldr	r3, [r0, #0]
 8008af6:	931a      	str	r3, [sp, #104]	; 0x68
 8008af8:	4618      	mov	r0, r3
 8008afa:	f7f7 fe21 	bl	8000740 <strlen>
 8008afe:	89a3      	ldrh	r3, [r4, #12]
 8008b00:	9019      	str	r0, [sp, #100]	; 0x64
 8008b02:	061d      	lsls	r5, r3, #24
 8008b04:	d503      	bpl.n	8008b0e <_svfprintf_r+0x2e>
 8008b06:	6923      	ldr	r3, [r4, #16]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	f000 8739 	beq.w	8009980 <_svfprintf_r+0xea0>
 8008b0e:	2300      	movs	r3, #0
 8008b10:	e9cd 3326 	strd	r3, r3, [sp, #152]	; 0x98
 8008b14:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
 8008b18:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8008b1c:	9313      	str	r3, [sp, #76]	; 0x4c
 8008b1e:	9315      	str	r3, [sp, #84]	; 0x54
 8008b20:	9314      	str	r3, [sp, #80]	; 0x50
 8008b22:	9318      	str	r3, [sp, #96]	; 0x60
 8008b24:	931b      	str	r3, [sp, #108]	; 0x6c
 8008b26:	930a      	str	r3, [sp, #40]	; 0x28
 8008b28:	f8cd 8094 	str.w	r8, [sp, #148]	; 0x94
 8008b2c:	46c2      	mov	sl, r8
 8008b2e:	46cb      	mov	fp, r9
 8008b30:	f89b 3000 	ldrb.w	r3, [fp]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	f000 8099 	beq.w	8008c6c <_svfprintf_r+0x18c>
 8008b3a:	2b25      	cmp	r3, #37	; 0x25
 8008b3c:	465c      	mov	r4, fp
 8008b3e:	d102      	bne.n	8008b46 <_svfprintf_r+0x66>
 8008b40:	e01c      	b.n	8008b7c <_svfprintf_r+0x9c>
 8008b42:	2b25      	cmp	r3, #37	; 0x25
 8008b44:	d003      	beq.n	8008b4e <_svfprintf_r+0x6e>
 8008b46:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d1f9      	bne.n	8008b42 <_svfprintf_r+0x62>
 8008b4e:	eba4 050b 	sub.w	r5, r4, fp
 8008b52:	b185      	cbz	r5, 8008b76 <_svfprintf_r+0x96>
 8008b54:	e9dd 3226 	ldrd	r3, r2, [sp, #152]	; 0x98
 8008b58:	3301      	adds	r3, #1
 8008b5a:	442a      	add	r2, r5
 8008b5c:	2b07      	cmp	r3, #7
 8008b5e:	f8ca b000 	str.w	fp, [sl]
 8008b62:	f8ca 5004 	str.w	r5, [sl, #4]
 8008b66:	e9cd 3226 	strd	r3, r2, [sp, #152]	; 0x98
 8008b6a:	dc77      	bgt.n	8008c5c <_svfprintf_r+0x17c>
 8008b6c:	f10a 0a08 	add.w	sl, sl, #8
 8008b70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b72:	442b      	add	r3, r5
 8008b74:	930a      	str	r3, [sp, #40]	; 0x28
 8008b76:	7823      	ldrb	r3, [r4, #0]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d077      	beq.n	8008c6c <_svfprintf_r+0x18c>
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	461a      	mov	r2, r3
 8008b80:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 8008b84:	4619      	mov	r1, r3
 8008b86:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b88:	4699      	mov	r9, r3
 8008b8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b8e:	7863      	ldrb	r3, [r4, #1]
 8008b90:	9009      	str	r0, [sp, #36]	; 0x24
 8008b92:	f104 0b01 	add.w	fp, r4, #1
 8008b96:	f10b 0b01 	add.w	fp, fp, #1
 8008b9a:	461f      	mov	r7, r3
 8008b9c:	f1a7 0320 	sub.w	r3, r7, #32
 8008ba0:	2b58      	cmp	r3, #88	; 0x58
 8008ba2:	f200 8374 	bhi.w	800928e <_svfprintf_r+0x7ae>
 8008ba6:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008baa:	02d2      	.short	0x02d2
 8008bac:	03720372 	.word	0x03720372
 8008bb0:	037202cd 	.word	0x037202cd
 8008bb4:	03720372 	.word	0x03720372
 8008bb8:	03720372 	.word	0x03720372
 8008bbc:	02c10372 	.word	0x02c10372
 8008bc0:	037202bc 	.word	0x037202bc
 8008bc4:	034c0366 	.word	0x034c0366
 8008bc8:	036b0372 	.word	0x036b0372
 8008bcc:	00b700b7 	.word	0x00b700b7
 8008bd0:	00b700b7 	.word	0x00b700b7
 8008bd4:	00b700b7 	.word	0x00b700b7
 8008bd8:	00b700b7 	.word	0x00b700b7
 8008bdc:	037200b7 	.word	0x037200b7
 8008be0:	03720372 	.word	0x03720372
 8008be4:	03720372 	.word	0x03720372
 8008be8:	03720372 	.word	0x03720372
 8008bec:	03720372 	.word	0x03720372
 8008bf0:	03340372 	.word	0x03340372
 8008bf4:	037202f6 	.word	0x037202f6
 8008bf8:	037202f6 	.word	0x037202f6
 8008bfc:	03720372 	.word	0x03720372
 8008c00:	02f10372 	.word	0x02f10372
 8008c04:	03720372 	.word	0x03720372
 8008c08:	037200a6 	.word	0x037200a6
 8008c0c:	03720372 	.word	0x03720372
 8008c10:	03720372 	.word	0x03720372
 8008c14:	03720075 	.word	0x03720075
 8008c18:	029a0372 	.word	0x029a0372
 8008c1c:	03720372 	.word	0x03720372
 8008c20:	03720372 	.word	0x03720372
 8008c24:	03720372 	.word	0x03720372
 8008c28:	03720372 	.word	0x03720372
 8008c2c:	03720372 	.word	0x03720372
 8008c30:	012d017b 	.word	0x012d017b
 8008c34:	02f602f6 	.word	0x02f602f6
 8008c38:	012802f6 	.word	0x012802f6
 8008c3c:	0372012d 	.word	0x0372012d
 8008c40:	011b0372 	.word	0x011b0372
 8008c44:	01040372 	.word	0x01040372
 8008c48:	00cb00a8 	.word	0x00cb00a8
 8008c4c:	037200c6 	.word	0x037200c6
 8008c50:	037200db 	.word	0x037200db
 8008c54:	03720077 	.word	0x03720077
 8008c58:	02da0372 	.word	0x02da0372
 8008c5c:	aa25      	add	r2, sp, #148	; 0x94
 8008c5e:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 8008c62:	f005 f93b 	bl	800dedc <__ssprint_r>
 8008c66:	b940      	cbnz	r0, 8008c7a <_svfprintf_r+0x19a>
 8008c68:	46c2      	mov	sl, r8
 8008c6a:	e781      	b.n	8008b70 <_svfprintf_r+0x90>
 8008c6c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8008c6e:	b123      	cbz	r3, 8008c7a <_svfprintf_r+0x19a>
 8008c70:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008c72:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008c74:	aa25      	add	r2, sp, #148	; 0x94
 8008c76:	f005 f931 	bl	800dedc <__ssprint_r>
 8008c7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c7c:	899b      	ldrh	r3, [r3, #12]
 8008c7e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008c82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c84:	bf18      	it	ne
 8008c86:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8008c8a:	930a      	str	r3, [sp, #40]	; 0x28
 8008c8c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008c8e:	b043      	add	sp, #268	; 0x10c
 8008c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c94:	f049 0910 	orr.w	r9, r9, #16
 8008c98:	f019 0f20 	tst.w	r9, #32
 8008c9c:	f000 853b 	beq.w	8009716 <_svfprintf_r+0xc36>
 8008ca0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008ca2:	3507      	adds	r5, #7
 8008ca4:	f025 0307 	bic.w	r3, r5, #7
 8008ca8:	f103 0208 	add.w	r2, r3, #8
 8008cac:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008cb0:	920f      	str	r2, [sp, #60]	; 0x3c
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cb6:	2600      	movs	r6, #0
 8008cb8:	3201      	adds	r2, #1
 8008cba:	f88d 6077 	strb.w	r6, [sp, #119]	; 0x77
 8008cbe:	f000 843c 	beq.w	800953a <_svfprintf_r+0xa5a>
 8008cc2:	f029 0280 	bic.w	r2, r9, #128	; 0x80
 8008cc6:	9207      	str	r2, [sp, #28]
 8008cc8:	ea54 0205 	orrs.w	r2, r4, r5
 8008ccc:	f040 80be 	bne.w	8008e4c <_svfprintf_r+0x36c>
 8008cd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cd2:	2a00      	cmp	r2, #0
 8008cd4:	f040 86cf 	bne.w	8009a76 <_svfprintf_r+0xf96>
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	f040 84eb 	bne.w	80096b4 <_svfprintf_r+0xbd4>
 8008cde:	f019 0301 	ands.w	r3, r9, #1
 8008ce2:	930e      	str	r3, [sp, #56]	; 0x38
 8008ce4:	f000 855d 	beq.w	80097a2 <_svfprintf_r+0xcc2>
 8008ce8:	ab42      	add	r3, sp, #264	; 0x108
 8008cea:	461a      	mov	r2, r3
 8008cec:	2330      	movs	r3, #48	; 0x30
 8008cee:	f802 3d41 	strb.w	r3, [r2, #-65]!
 8008cf2:	9211      	str	r2, [sp, #68]	; 0x44
 8008cf4:	e0cb      	b.n	8008e8e <_svfprintf_r+0x3ae>
 8008cf6:	f049 0910 	orr.w	r9, r9, #16
 8008cfa:	f019 0320 	ands.w	r3, r9, #32
 8008cfe:	f000 8515 	beq.w	800972c <_svfprintf_r+0xc4c>
 8008d02:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008d04:	3507      	adds	r5, #7
 8008d06:	f025 0307 	bic.w	r3, r5, #7
 8008d0a:	f103 0208 	add.w	r2, r3, #8
 8008d0e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008d12:	920f      	str	r2, [sp, #60]	; 0x3c
 8008d14:	2300      	movs	r3, #0
 8008d16:	e7cd      	b.n	8008cb4 <_svfprintf_r+0x1d4>
 8008d18:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008d1c:	2000      	movs	r0, #0
 8008d1e:	f81b 7b01 	ldrb.w	r7, [fp], #1
 8008d22:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008d26:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8008d2a:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008d2e:	2b09      	cmp	r3, #9
 8008d30:	d9f5      	bls.n	8008d1e <_svfprintf_r+0x23e>
 8008d32:	900b      	str	r0, [sp, #44]	; 0x2c
 8008d34:	e732      	b.n	8008b9c <_svfprintf_r+0xbc>
 8008d36:	f049 0920 	orr.w	r9, r9, #32
 8008d3a:	f89b 3000 	ldrb.w	r3, [fp]
 8008d3e:	e72a      	b.n	8008b96 <_svfprintf_r+0xb6>
 8008d40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008d42:	4ba2      	ldr	r3, [pc, #648]	; (8008fcc <_svfprintf_r+0x4ec>)
 8008d44:	6814      	ldr	r4, [r2, #0]
 8008d46:	9318      	str	r3, [sp, #96]	; 0x60
 8008d48:	3204      	adds	r2, #4
 8008d4a:	f647 0330 	movw	r3, #30768	; 0x7830
 8008d4e:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
 8008d52:	f049 0902 	orr.w	r9, r9, #2
 8008d56:	920f      	str	r2, [sp, #60]	; 0x3c
 8008d58:	2500      	movs	r5, #0
 8008d5a:	2302      	movs	r3, #2
 8008d5c:	2778      	movs	r7, #120	; 0x78
 8008d5e:	e7a9      	b.n	8008cb4 <_svfprintf_r+0x1d4>
 8008d60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008d62:	6813      	ldr	r3, [r2, #0]
 8008d64:	9311      	str	r3, [sp, #68]	; 0x44
 8008d66:	2400      	movs	r4, #0
 8008d68:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
 8008d6c:	1d15      	adds	r5, r2, #4
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	f000 8630 	beq.w	80099d4 <_svfprintf_r+0xef4>
 8008d74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d76:	1c53      	adds	r3, r2, #1
 8008d78:	f000 86d8 	beq.w	8009b2c <_svfprintf_r+0x104c>
 8008d7c:	4621      	mov	r1, r4
 8008d7e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8008d80:	f7f7 fd4e 	bl	8000820 <memchr>
 8008d84:	2800      	cmp	r0, #0
 8008d86:	f000 87b9 	beq.w	8009cfc <_svfprintf_r+0x121c>
 8008d8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d8c:	9409      	str	r4, [sp, #36]	; 0x24
 8008d8e:	1ac3      	subs	r3, r0, r3
 8008d90:	930e      	str	r3, [sp, #56]	; 0x38
 8008d92:	950f      	str	r5, [sp, #60]	; 0x3c
 8008d94:	f8cd 901c 	str.w	r9, [sp, #28]
 8008d98:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008d9c:	f89d 6077 	ldrb.w	r6, [sp, #119]	; 0x77
 8008da0:	9308      	str	r3, [sp, #32]
 8008da2:	9412      	str	r4, [sp, #72]	; 0x48
 8008da4:	2e00      	cmp	r6, #0
 8008da6:	f000 808d 	beq.w	8008ec4 <_svfprintf_r+0x3e4>
 8008daa:	9b08      	ldr	r3, [sp, #32]
 8008dac:	3301      	adds	r3, #1
 8008dae:	9308      	str	r3, [sp, #32]
 8008db0:	e088      	b.n	8008ec4 <_svfprintf_r+0x3e4>
 8008db2:	2a00      	cmp	r2, #0
 8008db4:	f041 80d7 	bne.w	8009f66 <_svfprintf_r+0x1486>
 8008db8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008dba:	f019 0f20 	tst.w	r9, #32
 8008dbe:	f852 3b04 	ldr.w	r3, [r2], #4
 8008dc2:	920f      	str	r2, [sp, #60]	; 0x3c
 8008dc4:	f040 852f 	bne.w	8009826 <_svfprintf_r+0xd46>
 8008dc8:	f019 0f10 	tst.w	r9, #16
 8008dcc:	f040 8629 	bne.w	8009a22 <_svfprintf_r+0xf42>
 8008dd0:	f019 0f40 	tst.w	r9, #64	; 0x40
 8008dd4:	f000 8625 	beq.w	8009a22 <_svfprintf_r+0xf42>
 8008dd8:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8008ddc:	801a      	strh	r2, [r3, #0]
 8008dde:	e6a7      	b.n	8008b30 <_svfprintf_r+0x50>
 8008de0:	f89b 3000 	ldrb.w	r3, [fp]
 8008de4:	2b6c      	cmp	r3, #108	; 0x6c
 8008de6:	bf03      	ittte	eq
 8008de8:	f89b 3001 	ldrbeq.w	r3, [fp, #1]
 8008dec:	f049 0920 	orreq.w	r9, r9, #32
 8008df0:	f10b 0b01 	addeq.w	fp, fp, #1
 8008df4:	f049 0910 	orrne.w	r9, r9, #16
 8008df8:	e6cd      	b.n	8008b96 <_svfprintf_r+0xb6>
 8008dfa:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 8008dfe:	f89b 3000 	ldrb.w	r3, [fp]
 8008e02:	e6c8      	b.n	8008b96 <_svfprintf_r+0xb6>
 8008e04:	2a00      	cmp	r2, #0
 8008e06:	f041 809a 	bne.w	8009f3e <_svfprintf_r+0x145e>
 8008e0a:	f019 0f20 	tst.w	r9, #32
 8008e0e:	f000 8209 	beq.w	8009224 <_svfprintf_r+0x744>
 8008e12:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008e14:	3507      	adds	r5, #7
 8008e16:	f025 0307 	bic.w	r3, r5, #7
 8008e1a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008e1e:	f103 0208 	add.w	r2, r3, #8
 8008e22:	920f      	str	r2, [sp, #60]	; 0x3c
 8008e24:	2c00      	cmp	r4, #0
 8008e26:	f175 0300 	sbcs.w	r3, r5, #0
 8008e2a:	f2c0 84c6 	blt.w	80097ba <_svfprintf_r+0xcda>
 8008e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e30:	f89d 6077 	ldrb.w	r6, [sp, #119]	; 0x77
 8008e34:	3301      	adds	r3, #1
 8008e36:	f000 84cb 	beq.w	80097d0 <_svfprintf_r+0xcf0>
 8008e3a:	f029 0280 	bic.w	r2, r9, #128	; 0x80
 8008e3e:	9207      	str	r2, [sp, #28]
 8008e40:	ea54 0205 	orrs.w	r2, r4, r5
 8008e44:	f04f 0301 	mov.w	r3, #1
 8008e48:	f43f af42 	beq.w	8008cd0 <_svfprintf_r+0x1f0>
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	f000 8379 	beq.w	8009544 <_svfprintf_r+0xa64>
 8008e52:	2b02      	cmp	r3, #2
 8008e54:	f000 8399 	beq.w	800958a <_svfprintf_r+0xaaa>
 8008e58:	4641      	mov	r1, r8
 8008e5a:	e000      	b.n	8008e5e <_svfprintf_r+0x37e>
 8008e5c:	4611      	mov	r1, r2
 8008e5e:	08e2      	lsrs	r2, r4, #3
 8008e60:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 8008e64:	08e8      	lsrs	r0, r5, #3
 8008e66:	f004 0307 	and.w	r3, r4, #7
 8008e6a:	4605      	mov	r5, r0
 8008e6c:	4614      	mov	r4, r2
 8008e6e:	3330      	adds	r3, #48	; 0x30
 8008e70:	ea54 0005 	orrs.w	r0, r4, r5
 8008e74:	f801 3c01 	strb.w	r3, [r1, #-1]
 8008e78:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 8008e7c:	d1ee      	bne.n	8008e5c <_svfprintf_r+0x37c>
 8008e7e:	9807      	ldr	r0, [sp, #28]
 8008e80:	9211      	str	r2, [sp, #68]	; 0x44
 8008e82:	07c0      	lsls	r0, r0, #31
 8008e84:	f100 8470 	bmi.w	8009768 <_svfprintf_r+0xc88>
 8008e88:	eba8 0302 	sub.w	r3, r8, r2
 8008e8c:	930e      	str	r3, [sp, #56]	; 0x38
 8008e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e92:	4293      	cmp	r3, r2
 8008e94:	bfb8      	it	lt
 8008e96:	4613      	movlt	r3, r2
 8008e98:	9308      	str	r3, [sp, #32]
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	9312      	str	r3, [sp, #72]	; 0x48
 8008e9e:	e781      	b.n	8008da4 <_svfprintf_r+0x2c4>
 8008ea0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	680a      	ldr	r2, [r1, #0]
 8008ea6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 8008eaa:	461e      	mov	r6, r3
 8008eac:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	1d0a      	adds	r2, r1, #4
 8008eb4:	e9cd 9307 	strd	r9, r3, [sp, #28]
 8008eb8:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
 8008ebc:	ab28      	add	r3, sp, #160	; 0xa0
 8008ebe:	9609      	str	r6, [sp, #36]	; 0x24
 8008ec0:	9612      	str	r6, [sp, #72]	; 0x48
 8008ec2:	9311      	str	r3, [sp, #68]	; 0x44
 8008ec4:	9b07      	ldr	r3, [sp, #28]
 8008ec6:	f013 0302 	ands.w	r3, r3, #2
 8008eca:	9310      	str	r3, [sp, #64]	; 0x40
 8008ecc:	d002      	beq.n	8008ed4 <_svfprintf_r+0x3f4>
 8008ece:	9b08      	ldr	r3, [sp, #32]
 8008ed0:	3302      	adds	r3, #2
 8008ed2:	9308      	str	r3, [sp, #32]
 8008ed4:	9b07      	ldr	r3, [sp, #28]
 8008ed6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8008ed8:	f013 0984 	ands.w	r9, r3, #132	; 0x84
 8008edc:	d13f      	bne.n	8008f5e <_svfprintf_r+0x47e>
 8008ede:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ee0:	9a08      	ldr	r2, [sp, #32]
 8008ee2:	1a9d      	subs	r5, r3, r2
 8008ee4:	2d00      	cmp	r5, #0
 8008ee6:	dd3a      	ble.n	8008f5e <_svfprintf_r+0x47e>
 8008ee8:	2d10      	cmp	r5, #16
 8008eea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008eec:	dd29      	ble.n	8008f42 <_svfprintf_r+0x462>
 8008eee:	4652      	mov	r2, sl
 8008ef0:	4621      	mov	r1, r4
 8008ef2:	46aa      	mov	sl, r5
 8008ef4:	2610      	movs	r6, #16
 8008ef6:	e9dd 540c 	ldrd	r5, r4, [sp, #48]	; 0x30
 8008efa:	e006      	b.n	8008f0a <_svfprintf_r+0x42a>
 8008efc:	f1aa 0a10 	sub.w	sl, sl, #16
 8008f00:	f1ba 0f10 	cmp.w	sl, #16
 8008f04:	f102 0208 	add.w	r2, r2, #8
 8008f08:	dd18      	ble.n	8008f3c <_svfprintf_r+0x45c>
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	4830      	ldr	r0, [pc, #192]	; (8008fd0 <_svfprintf_r+0x4f0>)
 8008f0e:	3110      	adds	r1, #16
 8008f10:	2b07      	cmp	r3, #7
 8008f12:	e9cd 3126 	strd	r3, r1, [sp, #152]	; 0x98
 8008f16:	e9c2 0600 	strd	r0, r6, [r2]
 8008f1a:	ddef      	ble.n	8008efc <_svfprintf_r+0x41c>
 8008f1c:	aa25      	add	r2, sp, #148	; 0x94
 8008f1e:	4629      	mov	r1, r5
 8008f20:	4620      	mov	r0, r4
 8008f22:	f004 ffdb 	bl	800dedc <__ssprint_r>
 8008f26:	2800      	cmp	r0, #0
 8008f28:	f47f aea7 	bne.w	8008c7a <_svfprintf_r+0x19a>
 8008f2c:	f1aa 0a10 	sub.w	sl, sl, #16
 8008f30:	f1ba 0f10 	cmp.w	sl, #16
 8008f34:	e9dd 3126 	ldrd	r3, r1, [sp, #152]	; 0x98
 8008f38:	4642      	mov	r2, r8
 8008f3a:	dce6      	bgt.n	8008f0a <_svfprintf_r+0x42a>
 8008f3c:	4655      	mov	r5, sl
 8008f3e:	460c      	mov	r4, r1
 8008f40:	4692      	mov	sl, r2
 8008f42:	3301      	adds	r3, #1
 8008f44:	4a22      	ldr	r2, [pc, #136]	; (8008fd0 <_svfprintf_r+0x4f0>)
 8008f46:	442c      	add	r4, r5
 8008f48:	2b07      	cmp	r3, #7
 8008f4a:	e9cd 3426 	strd	r3, r4, [sp, #152]	; 0x98
 8008f4e:	e9ca 2500 	strd	r2, r5, [sl]
 8008f52:	f300 856a 	bgt.w	8009a2a <_svfprintf_r+0xf4a>
 8008f56:	f89d 6077 	ldrb.w	r6, [sp, #119]	; 0x77
 8008f5a:	f10a 0a08 	add.w	sl, sl, #8
 8008f5e:	b176      	cbz	r6, 8008f7e <_svfprintf_r+0x49e>
 8008f60:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008f62:	3301      	adds	r3, #1
 8008f64:	3401      	adds	r4, #1
 8008f66:	f10d 0177 	add.w	r1, sp, #119	; 0x77
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	2b07      	cmp	r3, #7
 8008f6e:	e9cd 3426 	strd	r3, r4, [sp, #152]	; 0x98
 8008f72:	e9ca 1200 	strd	r1, r2, [sl]
 8008f76:	f300 82f2 	bgt.w	800955e <_svfprintf_r+0xa7e>
 8008f7a:	f10a 0a08 	add.w	sl, sl, #8
 8008f7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f80:	b16b      	cbz	r3, 8008f9e <_svfprintf_r+0x4be>
 8008f82:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008f84:	3301      	adds	r3, #1
 8008f86:	3402      	adds	r4, #2
 8008f88:	a91e      	add	r1, sp, #120	; 0x78
 8008f8a:	2202      	movs	r2, #2
 8008f8c:	2b07      	cmp	r3, #7
 8008f8e:	e9cd 3426 	strd	r3, r4, [sp, #152]	; 0x98
 8008f92:	e9ca 1200 	strd	r1, r2, [sl]
 8008f96:	f300 82ed 	bgt.w	8009574 <_svfprintf_r+0xa94>
 8008f9a:	f10a 0a08 	add.w	sl, sl, #8
 8008f9e:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 8008fa2:	f000 81e8 	beq.w	8009376 <_svfprintf_r+0x896>
 8008fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fa8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008faa:	1a9d      	subs	r5, r3, r2
 8008fac:	2d00      	cmp	r5, #0
 8008fae:	dd3e      	ble.n	800902e <_svfprintf_r+0x54e>
 8008fb0:	2d10      	cmp	r5, #16
 8008fb2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008fb4:	f8df 901c 	ldr.w	r9, [pc, #28]	; 8008fd4 <_svfprintf_r+0x4f4>
 8008fb8:	dd2e      	ble.n	8009018 <_svfprintf_r+0x538>
 8008fba:	4648      	mov	r0, r9
 8008fbc:	4653      	mov	r3, sl
 8008fbe:	4621      	mov	r1, r4
 8008fc0:	46b9      	mov	r9, r7
 8008fc2:	2610      	movs	r6, #16
 8008fc4:	e9dd a40c 	ldrd	sl, r4, [sp, #48]	; 0x30
 8008fc8:	4607      	mov	r7, r0
 8008fca:	e00a      	b.n	8008fe2 <_svfprintf_r+0x502>
 8008fcc:	0800eb54 	.word	0x0800eb54
 8008fd0:	0800eb74 	.word	0x0800eb74
 8008fd4:	0800eb84 	.word	0x0800eb84
 8008fd8:	3d10      	subs	r5, #16
 8008fda:	2d10      	cmp	r5, #16
 8008fdc:	f103 0308 	add.w	r3, r3, #8
 8008fe0:	dd15      	ble.n	800900e <_svfprintf_r+0x52e>
 8008fe2:	3201      	adds	r2, #1
 8008fe4:	3110      	adds	r1, #16
 8008fe6:	2a07      	cmp	r2, #7
 8008fe8:	e9cd 2126 	strd	r2, r1, [sp, #152]	; 0x98
 8008fec:	e9c3 7600 	strd	r7, r6, [r3]
 8008ff0:	ddf2      	ble.n	8008fd8 <_svfprintf_r+0x4f8>
 8008ff2:	aa25      	add	r2, sp, #148	; 0x94
 8008ff4:	4651      	mov	r1, sl
 8008ff6:	4620      	mov	r0, r4
 8008ff8:	f004 ff70 	bl	800dedc <__ssprint_r>
 8008ffc:	2800      	cmp	r0, #0
 8008ffe:	f47f ae3c 	bne.w	8008c7a <_svfprintf_r+0x19a>
 8009002:	3d10      	subs	r5, #16
 8009004:	2d10      	cmp	r5, #16
 8009006:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 800900a:	4643      	mov	r3, r8
 800900c:	dce9      	bgt.n	8008fe2 <_svfprintf_r+0x502>
 800900e:	469a      	mov	sl, r3
 8009010:	463b      	mov	r3, r7
 8009012:	460c      	mov	r4, r1
 8009014:	464f      	mov	r7, r9
 8009016:	4699      	mov	r9, r3
 8009018:	3201      	adds	r2, #1
 800901a:	442c      	add	r4, r5
 800901c:	2a07      	cmp	r2, #7
 800901e:	e9cd 2426 	strd	r2, r4, [sp, #152]	; 0x98
 8009022:	e9ca 9500 	strd	r9, r5, [sl]
 8009026:	f300 82c7 	bgt.w	80095b8 <_svfprintf_r+0xad8>
 800902a:	f10a 0a08 	add.w	sl, sl, #8
 800902e:	9b07      	ldr	r3, [sp, #28]
 8009030:	05de      	lsls	r6, r3, #23
 8009032:	f100 8142 	bmi.w	80092ba <_svfprintf_r+0x7da>
 8009036:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009038:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800903a:	f8ca 2000 	str.w	r2, [sl]
 800903e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009040:	f8ca 2004 	str.w	r2, [sl, #4]
 8009044:	3301      	adds	r3, #1
 8009046:	4414      	add	r4, r2
 8009048:	2b07      	cmp	r3, #7
 800904a:	9427      	str	r4, [sp, #156]	; 0x9c
 800904c:	9326      	str	r3, [sp, #152]	; 0x98
 800904e:	f300 821a 	bgt.w	8009486 <_svfprintf_r+0x9a6>
 8009052:	f10a 0a08 	add.w	sl, sl, #8
 8009056:	9b07      	ldr	r3, [sp, #28]
 8009058:	075b      	lsls	r3, r3, #29
 800905a:	d531      	bpl.n	80090c0 <_svfprintf_r+0x5e0>
 800905c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800905e:	9a08      	ldr	r2, [sp, #32]
 8009060:	1a9d      	subs	r5, r3, r2
 8009062:	2d00      	cmp	r5, #0
 8009064:	dd2c      	ble.n	80090c0 <_svfprintf_r+0x5e0>
 8009066:	2d10      	cmp	r5, #16
 8009068:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800906a:	dd1f      	ble.n	80090ac <_svfprintf_r+0x5cc>
 800906c:	2610      	movs	r6, #16
 800906e:	e9dd 970c 	ldrd	r9, r7, [sp, #48]	; 0x30
 8009072:	e004      	b.n	800907e <_svfprintf_r+0x59e>
 8009074:	3d10      	subs	r5, #16
 8009076:	2d10      	cmp	r5, #16
 8009078:	f10a 0a08 	add.w	sl, sl, #8
 800907c:	dd16      	ble.n	80090ac <_svfprintf_r+0x5cc>
 800907e:	3301      	adds	r3, #1
 8009080:	4ac7      	ldr	r2, [pc, #796]	; (80093a0 <_svfprintf_r+0x8c0>)
 8009082:	3410      	adds	r4, #16
 8009084:	2b07      	cmp	r3, #7
 8009086:	e9cd 3426 	strd	r3, r4, [sp, #152]	; 0x98
 800908a:	e9ca 2600 	strd	r2, r6, [sl]
 800908e:	ddf1      	ble.n	8009074 <_svfprintf_r+0x594>
 8009090:	aa25      	add	r2, sp, #148	; 0x94
 8009092:	4649      	mov	r1, r9
 8009094:	4638      	mov	r0, r7
 8009096:	f004 ff21 	bl	800dedc <__ssprint_r>
 800909a:	2800      	cmp	r0, #0
 800909c:	f47f aded 	bne.w	8008c7a <_svfprintf_r+0x19a>
 80090a0:	3d10      	subs	r5, #16
 80090a2:	2d10      	cmp	r5, #16
 80090a4:	e9dd 3426 	ldrd	r3, r4, [sp, #152]	; 0x98
 80090a8:	46c2      	mov	sl, r8
 80090aa:	dce8      	bgt.n	800907e <_svfprintf_r+0x59e>
 80090ac:	3301      	adds	r3, #1
 80090ae:	4abc      	ldr	r2, [pc, #752]	; (80093a0 <_svfprintf_r+0x8c0>)
 80090b0:	442c      	add	r4, r5
 80090b2:	2b07      	cmp	r3, #7
 80090b4:	e9cd 3426 	strd	r3, r4, [sp, #152]	; 0x98
 80090b8:	e9ca 2500 	strd	r2, r5, [sl]
 80090bc:	f300 8367 	bgt.w	800978e <_svfprintf_r+0xcae>
 80090c0:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
 80090c4:	9908      	ldr	r1, [sp, #32]
 80090c6:	428a      	cmp	r2, r1
 80090c8:	bfac      	ite	ge
 80090ca:	189b      	addge	r3, r3, r2
 80090cc:	185b      	addlt	r3, r3, r1
 80090ce:	930a      	str	r3, [sp, #40]	; 0x28
 80090d0:	2c00      	cmp	r4, #0
 80090d2:	f040 81a1 	bne.w	8009418 <_svfprintf_r+0x938>
 80090d6:	2300      	movs	r3, #0
 80090d8:	9326      	str	r3, [sp, #152]	; 0x98
 80090da:	46c2      	mov	sl, r8
 80090dc:	e528      	b.n	8008b30 <_svfprintf_r+0x50>
 80090de:	2a00      	cmp	r2, #0
 80090e0:	f040 8731 	bne.w	8009f46 <_svfprintf_r+0x1466>
 80090e4:	4baf      	ldr	r3, [pc, #700]	; (80093a4 <_svfprintf_r+0x8c4>)
 80090e6:	9318      	str	r3, [sp, #96]	; 0x60
 80090e8:	f019 0f20 	tst.w	r9, #32
 80090ec:	d03f      	beq.n	800916e <_svfprintf_r+0x68e>
 80090ee:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80090f0:	3507      	adds	r5, #7
 80090f2:	f025 0307 	bic.w	r3, r5, #7
 80090f6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80090fa:	f103 0208 	add.w	r2, r3, #8
 80090fe:	920f      	str	r2, [sp, #60]	; 0x3c
 8009100:	f019 0f01 	tst.w	r9, #1
 8009104:	f000 80c1 	beq.w	800928a <_svfprintf_r+0x7aa>
 8009108:	ea54 0305 	orrs.w	r3, r4, r5
 800910c:	f000 80bd 	beq.w	800928a <_svfprintf_r+0x7aa>
 8009110:	2330      	movs	r3, #48	; 0x30
 8009112:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
 8009116:	f88d 7079 	strb.w	r7, [sp, #121]	; 0x79
 800911a:	f049 0902 	orr.w	r9, r9, #2
 800911e:	2302      	movs	r3, #2
 8009120:	e5c8      	b.n	8008cb4 <_svfprintf_r+0x1d4>
 8009122:	f89b 3000 	ldrb.w	r3, [fp]
 8009126:	2201      	movs	r2, #1
 8009128:	212b      	movs	r1, #43	; 0x2b
 800912a:	e534      	b.n	8008b96 <_svfprintf_r+0xb6>
 800912c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800912e:	f89b 3000 	ldrb.w	r3, [fp]
 8009132:	6804      	ldr	r4, [r0, #0]
 8009134:	940b      	str	r4, [sp, #44]	; 0x2c
 8009136:	2c00      	cmp	r4, #0
 8009138:	f100 0004 	add.w	r0, r0, #4
 800913c:	f2c0 841c 	blt.w	8009978 <_svfprintf_r+0xe98>
 8009140:	900f      	str	r0, [sp, #60]	; 0x3c
 8009142:	e528      	b.n	8008b96 <_svfprintf_r+0xb6>
 8009144:	f049 0901 	orr.w	r9, r9, #1
 8009148:	f89b 3000 	ldrb.w	r3, [fp]
 800914c:	e523      	b.n	8008b96 <_svfprintf_r+0xb6>
 800914e:	f89b 3000 	ldrb.w	r3, [fp]
 8009152:	2900      	cmp	r1, #0
 8009154:	f47f ad1f 	bne.w	8008b96 <_svfprintf_r+0xb6>
 8009158:	2201      	movs	r2, #1
 800915a:	2120      	movs	r1, #32
 800915c:	e51b      	b.n	8008b96 <_svfprintf_r+0xb6>
 800915e:	2a00      	cmp	r2, #0
 8009160:	f040 86e1 	bne.w	8009f26 <_svfprintf_r+0x1446>
 8009164:	4b90      	ldr	r3, [pc, #576]	; (80093a8 <_svfprintf_r+0x8c8>)
 8009166:	9318      	str	r3, [sp, #96]	; 0x60
 8009168:	f019 0f20 	tst.w	r9, #32
 800916c:	d1bf      	bne.n	80090ee <_svfprintf_r+0x60e>
 800916e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009170:	f019 0f10 	tst.w	r9, #16
 8009174:	f853 4b04 	ldr.w	r4, [r3], #4
 8009178:	930f      	str	r3, [sp, #60]	; 0x3c
 800917a:	f040 8316 	bne.w	80097aa <_svfprintf_r+0xcca>
 800917e:	f019 0f40 	tst.w	r9, #64	; 0x40
 8009182:	f000 8312 	beq.w	80097aa <_svfprintf_r+0xcca>
 8009186:	b2a4      	uxth	r4, r4
 8009188:	2500      	movs	r5, #0
 800918a:	e7b9      	b.n	8009100 <_svfprintf_r+0x620>
 800918c:	f049 0908 	orr.w	r9, r9, #8
 8009190:	f89b 3000 	ldrb.w	r3, [fp]
 8009194:	e4ff      	b.n	8008b96 <_svfprintf_r+0xb6>
 8009196:	2a00      	cmp	r2, #0
 8009198:	f040 86d9 	bne.w	8009f4e <_svfprintf_r+0x146e>
 800919c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800919e:	4b83      	ldr	r3, [pc, #524]	; (80093ac <_svfprintf_r+0x8cc>)
 80091a0:	3507      	adds	r5, #7
 80091a2:	f025 0607 	bic.w	r6, r5, #7
 80091a6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80091aa:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80091ae:	9114      	str	r1, [sp, #80]	; 0x50
 80091b0:	3608      	adds	r6, #8
 80091b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091b6:	4621      	mov	r1, r4
 80091b8:	9015      	str	r0, [sp, #84]	; 0x54
 80091ba:	4605      	mov	r5, r0
 80091bc:	960f      	str	r6, [sp, #60]	; 0x3c
 80091be:	f7f7 ffd5 	bl	800116c <__aeabi_dcmpun>
 80091c2:	2800      	cmp	r0, #0
 80091c4:	f040 833e 	bne.w	8009844 <_svfprintf_r+0xd64>
 80091c8:	4628      	mov	r0, r5
 80091ca:	4621      	mov	r1, r4
 80091cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091d0:	4b76      	ldr	r3, [pc, #472]	; (80093ac <_svfprintf_r+0x8cc>)
 80091d2:	f7f7 ffad 	bl	8001130 <__aeabi_dcmple>
 80091d6:	2800      	cmp	r0, #0
 80091d8:	f040 8334 	bne.w	8009844 <_svfprintf_r+0xd64>
 80091dc:	e9dd 0215 	ldrd	r0, r2, [sp, #84]	; 0x54
 80091e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80091e2:	9914      	ldr	r1, [sp, #80]	; 0x50
 80091e4:	f7f7 ff9a 	bl	800111c <__aeabi_dcmplt>
 80091e8:	2800      	cmp	r0, #0
 80091ea:	f040 853a 	bne.w	8009c62 <_svfprintf_r+0x1182>
 80091ee:	f89d 6077 	ldrb.w	r6, [sp, #119]	; 0x77
 80091f2:	4a6f      	ldr	r2, [pc, #444]	; (80093b0 <_svfprintf_r+0x8d0>)
 80091f4:	4b6f      	ldr	r3, [pc, #444]	; (80093b4 <_svfprintf_r+0x8d4>)
 80091f6:	2103      	movs	r1, #3
 80091f8:	2000      	movs	r0, #0
 80091fa:	f029 0480 	bic.w	r4, r9, #128	; 0x80
 80091fe:	2f47      	cmp	r7, #71	; 0x47
 8009200:	bfd8      	it	le
 8009202:	461a      	movle	r2, r3
 8009204:	e9cd 1008 	strd	r1, r0, [sp, #32]
 8009208:	9407      	str	r4, [sp, #28]
 800920a:	9211      	str	r2, [sp, #68]	; 0x44
 800920c:	910e      	str	r1, [sp, #56]	; 0x38
 800920e:	9012      	str	r0, [sp, #72]	; 0x48
 8009210:	e5c8      	b.n	8008da4 <_svfprintf_r+0x2c4>
 8009212:	2a00      	cmp	r2, #0
 8009214:	f040 869f 	bne.w	8009f56 <_svfprintf_r+0x1476>
 8009218:	f049 0910 	orr.w	r9, r9, #16
 800921c:	f019 0f20 	tst.w	r9, #32
 8009220:	f47f adf7 	bne.w	8008e12 <_svfprintf_r+0x332>
 8009224:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009226:	f019 0f10 	tst.w	r9, #16
 800922a:	f853 4b04 	ldr.w	r4, [r3], #4
 800922e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009230:	f040 82bd 	bne.w	80097ae <_svfprintf_r+0xcce>
 8009234:	f019 0f40 	tst.w	r9, #64	; 0x40
 8009238:	f000 82b9 	beq.w	80097ae <_svfprintf_r+0xcce>
 800923c:	b224      	sxth	r4, r4
 800923e:	17e5      	asrs	r5, r4, #31
 8009240:	e5f0      	b.n	8008e24 <_svfprintf_r+0x344>
 8009242:	f89b 7000 	ldrb.w	r7, [fp]
 8009246:	2f2a      	cmp	r7, #42	; 0x2a
 8009248:	f10b 0001 	add.w	r0, fp, #1
 800924c:	f000 8640 	beq.w	8009ed0 <_svfprintf_r+0x13f0>
 8009250:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8009254:	2b09      	cmp	r3, #9
 8009256:	4683      	mov	fp, r0
 8009258:	f200 854c 	bhi.w	8009cf4 <_svfprintf_r+0x1214>
 800925c:	2000      	movs	r0, #0
 800925e:	f81b 7b01 	ldrb.w	r7, [fp], #1
 8009262:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009266:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800926a:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800926e:	2b09      	cmp	r3, #9
 8009270:	d9f5      	bls.n	800925e <_svfprintf_r+0x77e>
 8009272:	9009      	str	r0, [sp, #36]	; 0x24
 8009274:	e492      	b.n	8008b9c <_svfprintf_r+0xbc>
 8009276:	f89b 3000 	ldrb.w	r3, [fp]
 800927a:	f049 0904 	orr.w	r9, r9, #4
 800927e:	e48a      	b.n	8008b96 <_svfprintf_r+0xb6>
 8009280:	f049 0980 	orr.w	r9, r9, #128	; 0x80
 8009284:	f89b 3000 	ldrb.w	r3, [fp]
 8009288:	e485      	b.n	8008b96 <_svfprintf_r+0xb6>
 800928a:	2302      	movs	r3, #2
 800928c:	e512      	b.n	8008cb4 <_svfprintf_r+0x1d4>
 800928e:	2a00      	cmp	r2, #0
 8009290:	f040 8665 	bne.w	8009f5e <_svfprintf_r+0x147e>
 8009294:	2f00      	cmp	r7, #0
 8009296:	f43f ace9 	beq.w	8008c6c <_svfprintf_r+0x18c>
 800929a:	2300      	movs	r3, #0
 800929c:	2201      	movs	r2, #1
 800929e:	461e      	mov	r6, r3
 80092a0:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 80092a4:	9309      	str	r3, [sp, #36]	; 0x24
 80092a6:	9312      	str	r3, [sp, #72]	; 0x48
 80092a8:	ab28      	add	r3, sp, #160	; 0xa0
 80092aa:	9208      	str	r2, [sp, #32]
 80092ac:	f88d 70a0 	strb.w	r7, [sp, #160]	; 0xa0
 80092b0:	f8cd 901c 	str.w	r9, [sp, #28]
 80092b4:	920e      	str	r2, [sp, #56]	; 0x38
 80092b6:	9311      	str	r3, [sp, #68]	; 0x44
 80092b8:	e604      	b.n	8008ec4 <_svfprintf_r+0x3e4>
 80092ba:	2f65      	cmp	r7, #101	; 0x65
 80092bc:	f340 80ee 	ble.w	800949c <_svfprintf_r+0x9bc>
 80092c0:	e9dd 0215 	ldrd	r0, r2, [sp, #84]	; 0x54
 80092c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80092c6:	9914      	ldr	r1, [sp, #80]	; 0x50
 80092c8:	f7f7 ff1e 	bl	8001108 <__aeabi_dcmpeq>
 80092cc:	2800      	cmp	r0, #0
 80092ce:	f000 817e 	beq.w	80095ce <_svfprintf_r+0xaee>
 80092d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80092d4:	4a38      	ldr	r2, [pc, #224]	; (80093b8 <_svfprintf_r+0x8d8>)
 80092d6:	f8ca 2000 	str.w	r2, [sl]
 80092da:	3301      	adds	r3, #1
 80092dc:	3401      	adds	r4, #1
 80092de:	2201      	movs	r2, #1
 80092e0:	2b07      	cmp	r3, #7
 80092e2:	e9cd 3426 	strd	r3, r4, [sp, #152]	; 0x98
 80092e6:	f8ca 2004 	str.w	r2, [sl, #4]
 80092ea:	f300 83f1 	bgt.w	8009ad0 <_svfprintf_r+0xff0>
 80092ee:	f10a 0a08 	add.w	sl, sl, #8
 80092f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80092f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80092f6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80092f8:	4293      	cmp	r3, r2
 80092fa:	f280 8243 	bge.w	8009784 <_svfprintf_r+0xca4>
 80092fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009300:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009302:	f8ca 2000 	str.w	r2, [sl]
 8009306:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009308:	f8ca 2004 	str.w	r2, [sl, #4]
 800930c:	3301      	adds	r3, #1
 800930e:	4414      	add	r4, r2
 8009310:	2b07      	cmp	r3, #7
 8009312:	e9cd 3426 	strd	r3, r4, [sp, #152]	; 0x98
 8009316:	f300 8352 	bgt.w	80099be <_svfprintf_r+0xede>
 800931a:	f10a 0a08 	add.w	sl, sl, #8
 800931e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009320:	1e5d      	subs	r5, r3, #1
 8009322:	2d00      	cmp	r5, #0
 8009324:	f77f ae97 	ble.w	8009056 <_svfprintf_r+0x576>
 8009328:	2d10      	cmp	r5, #16
 800932a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800932c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80093bc <_svfprintf_r+0x8dc>
 8009330:	f340 83a7 	ble.w	8009a82 <_svfprintf_r+0xfa2>
 8009334:	4623      	mov	r3, r4
 8009336:	2610      	movs	r6, #16
 8009338:	464c      	mov	r4, r9
 800933a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800933c:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8009340:	e005      	b.n	800934e <_svfprintf_r+0x86e>
 8009342:	f10a 0a08 	add.w	sl, sl, #8
 8009346:	3d10      	subs	r5, #16
 8009348:	2d10      	cmp	r5, #16
 800934a:	f340 8398 	ble.w	8009a7e <_svfprintf_r+0xf9e>
 800934e:	3201      	adds	r2, #1
 8009350:	3310      	adds	r3, #16
 8009352:	2a07      	cmp	r2, #7
 8009354:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
 8009358:	e9ca 4600 	strd	r4, r6, [sl]
 800935c:	ddf1      	ble.n	8009342 <_svfprintf_r+0x862>
 800935e:	aa25      	add	r2, sp, #148	; 0x94
 8009360:	4649      	mov	r1, r9
 8009362:	4638      	mov	r0, r7
 8009364:	f004 fdba 	bl	800dedc <__ssprint_r>
 8009368:	2800      	cmp	r0, #0
 800936a:	f47f ac86 	bne.w	8008c7a <_svfprintf_r+0x19a>
 800936e:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 8009372:	46c2      	mov	sl, r8
 8009374:	e7e7      	b.n	8009346 <_svfprintf_r+0x866>
 8009376:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009378:	9a08      	ldr	r2, [sp, #32]
 800937a:	1a9d      	subs	r5, r3, r2
 800937c:	2d00      	cmp	r5, #0
 800937e:	f77f ae12 	ble.w	8008fa6 <_svfprintf_r+0x4c6>
 8009382:	2d10      	cmp	r5, #16
 8009384:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009386:	f8df 9034 	ldr.w	r9, [pc, #52]	; 80093bc <_svfprintf_r+0x8dc>
 800938a:	dd39      	ble.n	8009400 <_svfprintf_r+0x920>
 800938c:	4648      	mov	r0, r9
 800938e:	4653      	mov	r3, sl
 8009390:	4621      	mov	r1, r4
 8009392:	46b9      	mov	r9, r7
 8009394:	2610      	movs	r6, #16
 8009396:	e9dd a40c 	ldrd	sl, r4, [sp, #48]	; 0x30
 800939a:	4607      	mov	r7, r0
 800939c:	e015      	b.n	80093ca <_svfprintf_r+0x8ea>
 800939e:	bf00      	nop
 80093a0:	0800eb74 	.word	0x0800eb74
 80093a4:	0800eb40 	.word	0x0800eb40
 80093a8:	0800eb54 	.word	0x0800eb54
 80093ac:	7fefffff 	.word	0x7fefffff
 80093b0:	0800eb34 	.word	0x0800eb34
 80093b4:	0800eb30 	.word	0x0800eb30
 80093b8:	0800eb70 	.word	0x0800eb70
 80093bc:	0800eb84 	.word	0x0800eb84
 80093c0:	3d10      	subs	r5, #16
 80093c2:	2d10      	cmp	r5, #16
 80093c4:	f103 0308 	add.w	r3, r3, #8
 80093c8:	dd15      	ble.n	80093f6 <_svfprintf_r+0x916>
 80093ca:	3201      	adds	r2, #1
 80093cc:	3110      	adds	r1, #16
 80093ce:	2a07      	cmp	r2, #7
 80093d0:	e9cd 2126 	strd	r2, r1, [sp, #152]	; 0x98
 80093d4:	e9c3 7600 	strd	r7, r6, [r3]
 80093d8:	ddf2      	ble.n	80093c0 <_svfprintf_r+0x8e0>
 80093da:	aa25      	add	r2, sp, #148	; 0x94
 80093dc:	4651      	mov	r1, sl
 80093de:	4620      	mov	r0, r4
 80093e0:	f004 fd7c 	bl	800dedc <__ssprint_r>
 80093e4:	2800      	cmp	r0, #0
 80093e6:	f47f ac48 	bne.w	8008c7a <_svfprintf_r+0x19a>
 80093ea:	3d10      	subs	r5, #16
 80093ec:	2d10      	cmp	r5, #16
 80093ee:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 80093f2:	4643      	mov	r3, r8
 80093f4:	dce9      	bgt.n	80093ca <_svfprintf_r+0x8ea>
 80093f6:	469a      	mov	sl, r3
 80093f8:	463b      	mov	r3, r7
 80093fa:	460c      	mov	r4, r1
 80093fc:	464f      	mov	r7, r9
 80093fe:	4699      	mov	r9, r3
 8009400:	3201      	adds	r2, #1
 8009402:	442c      	add	r4, r5
 8009404:	2a07      	cmp	r2, #7
 8009406:	e9cd 2426 	strd	r2, r4, [sp, #152]	; 0x98
 800940a:	e9ca 9500 	strd	r9, r5, [sl]
 800940e:	f300 8342 	bgt.w	8009a96 <_svfprintf_r+0xfb6>
 8009412:	f10a 0a08 	add.w	sl, sl, #8
 8009416:	e5c6      	b.n	8008fa6 <_svfprintf_r+0x4c6>
 8009418:	aa25      	add	r2, sp, #148	; 0x94
 800941a:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 800941e:	f004 fd5d 	bl	800dedc <__ssprint_r>
 8009422:	2800      	cmp	r0, #0
 8009424:	f43f ae57 	beq.w	80090d6 <_svfprintf_r+0x5f6>
 8009428:	e427      	b.n	8008c7a <_svfprintf_r+0x19a>
 800942a:	aa25      	add	r2, sp, #148	; 0x94
 800942c:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 8009430:	f004 fd54 	bl	800dedc <__ssprint_r>
 8009434:	2800      	cmp	r0, #0
 8009436:	f47f ac20 	bne.w	8008c7a <_svfprintf_r+0x19a>
 800943a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800943c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 800943e:	46c2      	mov	sl, r8
 8009440:	b91b      	cbnz	r3, 800944a <_svfprintf_r+0x96a>
 8009442:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009444:	2a00      	cmp	r2, #0
 8009446:	f000 837c 	beq.w	8009b42 <_svfprintf_r+0x1062>
 800944a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800944c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800944e:	f8ca 1000 	str.w	r1, [sl]
 8009452:	9919      	ldr	r1, [sp, #100]	; 0x64
 8009454:	f8ca 1004 	str.w	r1, [sl, #4]
 8009458:	3201      	adds	r2, #1
 800945a:	440c      	add	r4, r1
 800945c:	2a07      	cmp	r2, #7
 800945e:	9427      	str	r4, [sp, #156]	; 0x9c
 8009460:	9226      	str	r2, [sp, #152]	; 0x98
 8009462:	f300 8457 	bgt.w	8009d14 <_svfprintf_r+0x1234>
 8009466:	f10a 0a08 	add.w	sl, sl, #8
 800946a:	2b00      	cmp	r3, #0
 800946c:	f2c0 8490 	blt.w	8009d90 <_svfprintf_r+0x12b0>
 8009470:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009472:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009474:	3201      	adds	r2, #1
 8009476:	441c      	add	r4, r3
 8009478:	2a07      	cmp	r2, #7
 800947a:	e9cd 2426 	strd	r2, r4, [sp, #152]	; 0x98
 800947e:	e9ca 1300 	strd	r1, r3, [sl]
 8009482:	f77f ade6 	ble.w	8009052 <_svfprintf_r+0x572>
 8009486:	aa25      	add	r2, sp, #148	; 0x94
 8009488:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 800948c:	f004 fd26 	bl	800dedc <__ssprint_r>
 8009490:	2800      	cmp	r0, #0
 8009492:	f47f abf2 	bne.w	8008c7a <_svfprintf_r+0x19a>
 8009496:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8009498:	46c2      	mov	sl, r8
 800949a:	e5dc      	b.n	8009056 <_svfprintf_r+0x576>
 800949c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800949e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80094a0:	2a01      	cmp	r2, #1
 80094a2:	f104 0401 	add.w	r4, r4, #1
 80094a6:	f103 0501 	add.w	r5, r3, #1
 80094aa:	f10a 0608 	add.w	r6, sl, #8
 80094ae:	f340 8147 	ble.w	8009740 <_svfprintf_r+0xc60>
 80094b2:	2301      	movs	r3, #1
 80094b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80094b6:	f8ca 2000 	str.w	r2, [sl]
 80094ba:	2d07      	cmp	r5, #7
 80094bc:	e9cd 5426 	strd	r5, r4, [sp, #152]	; 0x98
 80094c0:	f8ca 3004 	str.w	r3, [sl, #4]
 80094c4:	f300 82bf 	bgt.w	8009a46 <_svfprintf_r+0xf66>
 80094c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80094ca:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80094cc:	3501      	adds	r5, #1
 80094ce:	441c      	add	r4, r3
 80094d0:	2d07      	cmp	r5, #7
 80094d2:	e9cd 5426 	strd	r5, r4, [sp, #152]	; 0x98
 80094d6:	e9c6 2300 	strd	r2, r3, [r6]
 80094da:	f300 82c0 	bgt.w	8009a5e <_svfprintf_r+0xf7e>
 80094de:	3608      	adds	r6, #8
 80094e0:	1c6f      	adds	r7, r5, #1
 80094e2:	970e      	str	r7, [sp, #56]	; 0x38
 80094e4:	9709      	str	r7, [sp, #36]	; 0x24
 80094e6:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80094e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80094ea:	9914      	ldr	r1, [sp, #80]	; 0x50
 80094ec:	e9dd 0215 	ldrd	r0, r2, [sp, #84]	; 0x54
 80094f0:	3f01      	subs	r7, #1
 80094f2:	f106 0a08 	add.w	sl, r6, #8
 80094f6:	f7f7 fe07 	bl	8001108 <__aeabi_dcmpeq>
 80094fa:	2800      	cmp	r0, #0
 80094fc:	f040 80e0 	bne.w	80096c0 <_svfprintf_r+0xbe0>
 8009500:	443c      	add	r4, r7
 8009502:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009504:	6077      	str	r7, [r6, #4]
 8009506:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009508:	9427      	str	r4, [sp, #156]	; 0x9c
 800950a:	3301      	adds	r3, #1
 800950c:	2f07      	cmp	r7, #7
 800950e:	6033      	str	r3, [r6, #0]
 8009510:	9726      	str	r7, [sp, #152]	; 0x98
 8009512:	f300 8244 	bgt.w	800999e <_svfprintf_r+0xebe>
 8009516:	f106 0310 	add.w	r3, r6, #16
 800951a:	1caa      	adds	r2, r5, #2
 800951c:	4656      	mov	r6, sl
 800951e:	9209      	str	r2, [sp, #36]	; 0x24
 8009520:	469a      	mov	sl, r3
 8009522:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009524:	6072      	str	r2, [r6, #4]
 8009526:	4414      	add	r4, r2
 8009528:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800952a:	9427      	str	r4, [sp, #156]	; 0x9c
 800952c:	ab21      	add	r3, sp, #132	; 0x84
 800952e:	2a07      	cmp	r2, #7
 8009530:	9226      	str	r2, [sp, #152]	; 0x98
 8009532:	6033      	str	r3, [r6, #0]
 8009534:	f77f ad8f 	ble.w	8009056 <_svfprintf_r+0x576>
 8009538:	e7a5      	b.n	8009486 <_svfprintf_r+0x9a6>
 800953a:	2b01      	cmp	r3, #1
 800953c:	f8cd 901c 	str.w	r9, [sp, #28]
 8009540:	f47f ac87 	bne.w	8008e52 <_svfprintf_r+0x372>
 8009544:	2d00      	cmp	r5, #0
 8009546:	bf08      	it	eq
 8009548:	2c0a      	cmpeq	r4, #10
 800954a:	f080 8148 	bcs.w	80097de <_svfprintf_r+0xcfe>
 800954e:	ab42      	add	r3, sp, #264	; 0x108
 8009550:	3430      	adds	r4, #48	; 0x30
 8009552:	f803 4d41 	strb.w	r4, [r3, #-65]!
 8009556:	9311      	str	r3, [sp, #68]	; 0x44
 8009558:	2301      	movs	r3, #1
 800955a:	930e      	str	r3, [sp, #56]	; 0x38
 800955c:	e497      	b.n	8008e8e <_svfprintf_r+0x3ae>
 800955e:	aa25      	add	r2, sp, #148	; 0x94
 8009560:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 8009564:	f004 fcba 	bl	800dedc <__ssprint_r>
 8009568:	2800      	cmp	r0, #0
 800956a:	f47f ab86 	bne.w	8008c7a <_svfprintf_r+0x19a>
 800956e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8009570:	46c2      	mov	sl, r8
 8009572:	e504      	b.n	8008f7e <_svfprintf_r+0x49e>
 8009574:	aa25      	add	r2, sp, #148	; 0x94
 8009576:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 800957a:	f004 fcaf 	bl	800dedc <__ssprint_r>
 800957e:	2800      	cmp	r0, #0
 8009580:	f47f ab7b 	bne.w	8008c7a <_svfprintf_r+0x19a>
 8009584:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8009586:	46c2      	mov	sl, r8
 8009588:	e509      	b.n	8008f9e <_svfprintf_r+0x4be>
 800958a:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 800958e:	4642      	mov	r2, r8
 8009590:	0923      	lsrs	r3, r4, #4
 8009592:	f004 000f 	and.w	r0, r4, #15
 8009596:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 800959a:	0929      	lsrs	r1, r5, #4
 800959c:	461c      	mov	r4, r3
 800959e:	460d      	mov	r5, r1
 80095a0:	f81c 3000 	ldrb.w	r3, [ip, r0]
 80095a4:	f802 3d01 	strb.w	r3, [r2, #-1]!
 80095a8:	ea54 0305 	orrs.w	r3, r4, r5
 80095ac:	d1f0      	bne.n	8009590 <_svfprintf_r+0xab0>
 80095ae:	eba8 0302 	sub.w	r3, r8, r2
 80095b2:	9211      	str	r2, [sp, #68]	; 0x44
 80095b4:	930e      	str	r3, [sp, #56]	; 0x38
 80095b6:	e46a      	b.n	8008e8e <_svfprintf_r+0x3ae>
 80095b8:	aa25      	add	r2, sp, #148	; 0x94
 80095ba:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 80095be:	f004 fc8d 	bl	800dedc <__ssprint_r>
 80095c2:	2800      	cmp	r0, #0
 80095c4:	f47f ab59 	bne.w	8008c7a <_svfprintf_r+0x19a>
 80095c8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80095ca:	46c2      	mov	sl, r8
 80095cc:	e52f      	b.n	800902e <_svfprintf_r+0x54e>
 80095ce:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	f340 826c 	ble.w	8009aae <_svfprintf_r+0xfce>
 80095d6:	e9dd 3212 	ldrd	r3, r2, [sp, #72]	; 0x48
 80095da:	4293      	cmp	r3, r2
 80095dc:	bfa8      	it	ge
 80095de:	4613      	movge	r3, r2
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	461d      	mov	r5, r3
 80095e4:	dd0e      	ble.n	8009604 <_svfprintf_r+0xb24>
 80095e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80095e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80095ea:	f8ca 2000 	str.w	r2, [sl]
 80095ee:	3301      	adds	r3, #1
 80095f0:	442c      	add	r4, r5
 80095f2:	2b07      	cmp	r3, #7
 80095f4:	9427      	str	r4, [sp, #156]	; 0x9c
 80095f6:	f8ca 5004 	str.w	r5, [sl, #4]
 80095fa:	9326      	str	r3, [sp, #152]	; 0x98
 80095fc:	f300 8326 	bgt.w	8009c4c <_svfprintf_r+0x116c>
 8009600:	f10a 0a08 	add.w	sl, sl, #8
 8009604:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009606:	2d00      	cmp	r5, #0
 8009608:	bfa8      	it	ge
 800960a:	1b5b      	subge	r3, r3, r5
 800960c:	2b00      	cmp	r3, #0
 800960e:	461d      	mov	r5, r3
 8009610:	f300 818b 	bgt.w	800992a <_svfprintf_r+0xe4a>
 8009614:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009616:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009618:	4293      	cmp	r3, r2
 800961a:	f2c0 81f1 	blt.w	8009a00 <_svfprintf_r+0xf20>
 800961e:	9a07      	ldr	r2, [sp, #28]
 8009620:	07d1      	lsls	r1, r2, #31
 8009622:	f100 81ed 	bmi.w	8009a00 <_svfprintf_r+0xf20>
 8009626:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009628:	9812      	ldr	r0, [sp, #72]	; 0x48
 800962a:	1ad3      	subs	r3, r2, r3
 800962c:	1a15      	subs	r5, r2, r0
 800962e:	429d      	cmp	r5, r3
 8009630:	bfa8      	it	ge
 8009632:	461d      	movge	r5, r3
 8009634:	2d00      	cmp	r5, #0
 8009636:	dd0f      	ble.n	8009658 <_svfprintf_r+0xb78>
 8009638:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800963a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800963c:	f8ca 5004 	str.w	r5, [sl, #4]
 8009640:	3201      	adds	r2, #1
 8009642:	4401      	add	r1, r0
 8009644:	442c      	add	r4, r5
 8009646:	2a07      	cmp	r2, #7
 8009648:	f8ca 1000 	str.w	r1, [sl]
 800964c:	e9cd 2426 	strd	r2, r4, [sp, #152]	; 0x98
 8009650:	f300 8342 	bgt.w	8009cd8 <_svfprintf_r+0x11f8>
 8009654:	f10a 0a08 	add.w	sl, sl, #8
 8009658:	2d00      	cmp	r5, #0
 800965a:	bfac      	ite	ge
 800965c:	1b5d      	subge	r5, r3, r5
 800965e:	461d      	movlt	r5, r3
 8009660:	2d00      	cmp	r5, #0
 8009662:	f77f acf8 	ble.w	8009056 <_svfprintf_r+0x576>
 8009666:	2d10      	cmp	r5, #16
 8009668:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800966a:	f8df 9668 	ldr.w	r9, [pc, #1640]	; 8009cd4 <_svfprintf_r+0x11f4>
 800966e:	f340 8208 	ble.w	8009a82 <_svfprintf_r+0xfa2>
 8009672:	4623      	mov	r3, r4
 8009674:	2610      	movs	r6, #16
 8009676:	464c      	mov	r4, r9
 8009678:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800967a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800967e:	e005      	b.n	800968c <_svfprintf_r+0xbac>
 8009680:	f10a 0a08 	add.w	sl, sl, #8
 8009684:	3d10      	subs	r5, #16
 8009686:	2d10      	cmp	r5, #16
 8009688:	f340 81f9 	ble.w	8009a7e <_svfprintf_r+0xf9e>
 800968c:	3201      	adds	r2, #1
 800968e:	3310      	adds	r3, #16
 8009690:	2a07      	cmp	r2, #7
 8009692:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
 8009696:	e9ca 4600 	strd	r4, r6, [sl]
 800969a:	ddf1      	ble.n	8009680 <_svfprintf_r+0xba0>
 800969c:	aa25      	add	r2, sp, #148	; 0x94
 800969e:	4649      	mov	r1, r9
 80096a0:	4638      	mov	r0, r7
 80096a2:	f004 fc1b 	bl	800dedc <__ssprint_r>
 80096a6:	2800      	cmp	r0, #0
 80096a8:	f47f aae7 	bne.w	8008c7a <_svfprintf_r+0x19a>
 80096ac:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 80096b0:	46c2      	mov	sl, r8
 80096b2:	e7e7      	b.n	8009684 <_svfprintf_r+0xba4>
 80096b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096b6:	930e      	str	r3, [sp, #56]	; 0x38
 80096b8:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 80096bc:	f7ff bbe7 	b.w	8008e8e <_svfprintf_r+0x3ae>
 80096c0:	2f00      	cmp	r7, #0
 80096c2:	f77f af2e 	ble.w	8009522 <_svfprintf_r+0xa42>
 80096c6:	2f10      	cmp	r7, #16
 80096c8:	f8df 9608 	ldr.w	r9, [pc, #1544]	; 8009cd4 <_svfprintf_r+0x11f4>
 80096cc:	f340 83fb 	ble.w	8009ec6 <_svfprintf_r+0x13e6>
 80096d0:	4633      	mov	r3, r6
 80096d2:	4622      	mov	r2, r4
 80096d4:	464e      	mov	r6, r9
 80096d6:	f04f 0a10 	mov.w	sl, #16
 80096da:	e9dd 450d 	ldrd	r4, r5, [sp, #52]	; 0x34
 80096de:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80096e2:	e005      	b.n	80096f0 <_svfprintf_r+0xc10>
 80096e4:	3308      	adds	r3, #8
 80096e6:	3f10      	subs	r7, #16
 80096e8:	2f10      	cmp	r7, #16
 80096ea:	f340 81fb 	ble.w	8009ae4 <_svfprintf_r+0x1004>
 80096ee:	3501      	adds	r5, #1
 80096f0:	3210      	adds	r2, #16
 80096f2:	2d07      	cmp	r5, #7
 80096f4:	e9cd 5226 	strd	r5, r2, [sp, #152]	; 0x98
 80096f8:	e9c3 6a00 	strd	r6, sl, [r3]
 80096fc:	ddf2      	ble.n	80096e4 <_svfprintf_r+0xc04>
 80096fe:	aa25      	add	r2, sp, #148	; 0x94
 8009700:	4649      	mov	r1, r9
 8009702:	4620      	mov	r0, r4
 8009704:	f004 fbea 	bl	800dedc <__ssprint_r>
 8009708:	2800      	cmp	r0, #0
 800970a:	f47f aab6 	bne.w	8008c7a <_svfprintf_r+0x19a>
 800970e:	e9dd 5226 	ldrd	r5, r2, [sp, #152]	; 0x98
 8009712:	4643      	mov	r3, r8
 8009714:	e7e7      	b.n	80096e6 <_svfprintf_r+0xc06>
 8009716:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009718:	f019 0f10 	tst.w	r9, #16
 800971c:	f853 4b04 	ldr.w	r4, [r3], #4
 8009720:	930f      	str	r3, [sp, #60]	; 0x3c
 8009722:	d078      	beq.n	8009816 <_svfprintf_r+0xd36>
 8009724:	2500      	movs	r5, #0
 8009726:	2301      	movs	r3, #1
 8009728:	f7ff bac4 	b.w	8008cb4 <_svfprintf_r+0x1d4>
 800972c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800972e:	f852 4b04 	ldr.w	r4, [r2], #4
 8009732:	920f      	str	r2, [sp, #60]	; 0x3c
 8009734:	f019 0210 	ands.w	r2, r9, #16
 8009738:	d07c      	beq.n	8009834 <_svfprintf_r+0xd54>
 800973a:	2500      	movs	r5, #0
 800973c:	f7ff baba 	b.w	8008cb4 <_svfprintf_r+0x1d4>
 8009740:	9a07      	ldr	r2, [sp, #28]
 8009742:	07d2      	lsls	r2, r2, #31
 8009744:	f53f aeb5 	bmi.w	80094b2 <_svfprintf_r+0x9d2>
 8009748:	2201      	movs	r2, #1
 800974a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800974c:	f8ca 1000 	str.w	r1, [sl]
 8009750:	2d07      	cmp	r5, #7
 8009752:	e9cd 5426 	strd	r5, r4, [sp, #152]	; 0x98
 8009756:	f8ca 2004 	str.w	r2, [sl, #4]
 800975a:	f300 8120 	bgt.w	800999e <_svfprintf_r+0xebe>
 800975e:	3302      	adds	r3, #2
 8009760:	9309      	str	r3, [sp, #36]	; 0x24
 8009762:	f10a 0a10 	add.w	sl, sl, #16
 8009766:	e6dc      	b.n	8009522 <_svfprintf_r+0xa42>
 8009768:	2b30      	cmp	r3, #48	; 0x30
 800976a:	f000 8143 	beq.w	80099f4 <_svfprintf_r+0xf14>
 800976e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009770:	3902      	subs	r1, #2
 8009772:	2330      	movs	r3, #48	; 0x30
 8009774:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009778:	eba8 0301 	sub.w	r3, r8, r1
 800977c:	930e      	str	r3, [sp, #56]	; 0x38
 800977e:	9111      	str	r1, [sp, #68]	; 0x44
 8009780:	f7ff bb85 	b.w	8008e8e <_svfprintf_r+0x3ae>
 8009784:	9b07      	ldr	r3, [sp, #28]
 8009786:	07dd      	lsls	r5, r3, #31
 8009788:	f53f adb9 	bmi.w	80092fe <_svfprintf_r+0x81e>
 800978c:	e463      	b.n	8009056 <_svfprintf_r+0x576>
 800978e:	aa25      	add	r2, sp, #148	; 0x94
 8009790:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 8009794:	f004 fba2 	bl	800dedc <__ssprint_r>
 8009798:	2800      	cmp	r0, #0
 800979a:	f47f aa6e 	bne.w	8008c7a <_svfprintf_r+0x19a>
 800979e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80097a0:	e48e      	b.n	80090c0 <_svfprintf_r+0x5e0>
 80097a2:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 80097a6:	f7ff bb72 	b.w	8008e8e <_svfprintf_r+0x3ae>
 80097aa:	2500      	movs	r5, #0
 80097ac:	e4a8      	b.n	8009100 <_svfprintf_r+0x620>
 80097ae:	17e5      	asrs	r5, r4, #31
 80097b0:	2c00      	cmp	r4, #0
 80097b2:	f175 0300 	sbcs.w	r3, r5, #0
 80097b6:	f6bf ab3a 	bge.w	8008e2e <_svfprintf_r+0x34e>
 80097ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097bc:	4264      	negs	r4, r4
 80097be:	f04f 062d 	mov.w	r6, #45	; 0x2d
 80097c2:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 80097c6:	3301      	adds	r3, #1
 80097c8:	f88d 6077 	strb.w	r6, [sp, #119]	; 0x77
 80097cc:	f47f ab35 	bne.w	8008e3a <_svfprintf_r+0x35a>
 80097d0:	2d00      	cmp	r5, #0
 80097d2:	bf08      	it	eq
 80097d4:	2c0a      	cmpeq	r4, #10
 80097d6:	f8cd 901c 	str.w	r9, [sp, #28]
 80097da:	f4ff aeb8 	bcc.w	800954e <_svfprintf_r+0xa6e>
 80097de:	46c1      	mov	r9, r8
 80097e0:	4620      	mov	r0, r4
 80097e2:	4629      	mov	r1, r5
 80097e4:	220a      	movs	r2, #10
 80097e6:	2300      	movs	r3, #0
 80097e8:	f7f6 fd90 	bl	800030c <__aeabi_uldivmod>
 80097ec:	3230      	adds	r2, #48	; 0x30
 80097ee:	f809 2d01 	strb.w	r2, [r9, #-1]!
 80097f2:	4620      	mov	r0, r4
 80097f4:	4629      	mov	r1, r5
 80097f6:	2300      	movs	r3, #0
 80097f8:	220a      	movs	r2, #10
 80097fa:	f7f6 fd87 	bl	800030c <__aeabi_uldivmod>
 80097fe:	4604      	mov	r4, r0
 8009800:	460d      	mov	r5, r1
 8009802:	ea54 0305 	orrs.w	r3, r4, r5
 8009806:	d1eb      	bne.n	80097e0 <_svfprintf_r+0xd00>
 8009808:	eba8 0309 	sub.w	r3, r8, r9
 800980c:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
 8009810:	930e      	str	r3, [sp, #56]	; 0x38
 8009812:	f7ff bb3c 	b.w	8008e8e <_svfprintf_r+0x3ae>
 8009816:	f019 0f40 	tst.w	r9, #64	; 0x40
 800981a:	bf18      	it	ne
 800981c:	b2a4      	uxthne	r4, r4
 800981e:	2500      	movs	r5, #0
 8009820:	2301      	movs	r3, #1
 8009822:	f7ff ba47 	b.w	8008cb4 <_svfprintf_r+0x1d4>
 8009826:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009828:	4610      	mov	r0, r2
 800982a:	17d1      	asrs	r1, r2, #31
 800982c:	e9c3 0100 	strd	r0, r1, [r3]
 8009830:	f7ff b97e 	b.w	8008b30 <_svfprintf_r+0x50>
 8009834:	f019 0340 	ands.w	r3, r9, #64	; 0x40
 8009838:	bf1c      	itt	ne
 800983a:	4613      	movne	r3, r2
 800983c:	b2a4      	uxthne	r4, r4
 800983e:	2500      	movs	r5, #0
 8009840:	f7ff ba38 	b.w	8008cb4 <_svfprintf_r+0x1d4>
 8009844:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8009846:	4622      	mov	r2, r4
 8009848:	4620      	mov	r0, r4
 800984a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800984c:	4623      	mov	r3, r4
 800984e:	4621      	mov	r1, r4
 8009850:	f7f7 fc8c 	bl	800116c <__aeabi_dcmpun>
 8009854:	2800      	cmp	r0, #0
 8009856:	f040 8322 	bne.w	8009e9e <_svfprintf_r+0x13be>
 800985a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800985c:	f027 0320 	bic.w	r3, r7, #32
 8009860:	1c54      	adds	r4, r2, #1
 8009862:	9308      	str	r3, [sp, #32]
 8009864:	f000 821a 	beq.w	8009c9c <_svfprintf_r+0x11bc>
 8009868:	2b47      	cmp	r3, #71	; 0x47
 800986a:	f000 816f 	beq.w	8009b4c <_svfprintf_r+0x106c>
 800986e:	f449 7380 	orr.w	r3, r9, #256	; 0x100
 8009872:	9307      	str	r3, [sp, #28]
 8009874:	e9dd 3614 	ldrd	r3, r6, [sp, #80]	; 0x50
 8009878:	1e1d      	subs	r5, r3, #0
 800987a:	bfb6      	itet	lt
 800987c:	f103 4500 	addlt.w	r5, r3, #2147483648	; 0x80000000
 8009880:	2300      	movge	r3, #0
 8009882:	232d      	movlt	r3, #45	; 0x2d
 8009884:	2f66      	cmp	r7, #102	; 0x66
 8009886:	9310      	str	r3, [sp, #64]	; 0x40
 8009888:	f000 820b 	beq.w	8009ca2 <_svfprintf_r+0x11c2>
 800988c:	2f46      	cmp	r7, #70	; 0x46
 800988e:	f000 8262 	beq.w	8009d56 <_svfprintf_r+0x1276>
 8009892:	9b08      	ldr	r3, [sp, #32]
 8009894:	2b45      	cmp	r3, #69	; 0x45
 8009896:	4632      	mov	r2, r6
 8009898:	462b      	mov	r3, r5
 800989a:	f000 815d 	beq.w	8009b58 <_svfprintf_r+0x1078>
 800989e:	a823      	add	r0, sp, #140	; 0x8c
 80098a0:	a920      	add	r1, sp, #128	; 0x80
 80098a2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80098a4:	9004      	str	r0, [sp, #16]
 80098a6:	9103      	str	r1, [sp, #12]
 80098a8:	a81f      	add	r0, sp, #124	; 0x7c
 80098aa:	2102      	movs	r1, #2
 80098ac:	9002      	str	r0, [sp, #8]
 80098ae:	9401      	str	r4, [sp, #4]
 80098b0:	9100      	str	r1, [sp, #0]
 80098b2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80098b4:	f001 ff20 	bl	800b6f8 <_dtoa_r>
 80098b8:	2f67      	cmp	r7, #103	; 0x67
 80098ba:	9011      	str	r0, [sp, #68]	; 0x44
 80098bc:	f040 8330 	bne.w	8009f20 <_svfprintf_r+0x1440>
 80098c0:	f019 0f01 	tst.w	r9, #1
 80098c4:	f000 816f 	beq.w	8009ba6 <_svfprintf_r+0x10c6>
 80098c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80098ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098cc:	189c      	adds	r4, r3, r2
 80098ce:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80098d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80098d2:	4630      	mov	r0, r6
 80098d4:	4629      	mov	r1, r5
 80098d6:	f7f7 fc17 	bl	8001108 <__aeabi_dcmpeq>
 80098da:	2800      	cmp	r0, #0
 80098dc:	f000 81d2 	beq.w	8009c84 <_svfprintf_r+0x11a4>
 80098e0:	4623      	mov	r3, r4
 80098e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80098e4:	1a9b      	subs	r3, r3, r2
 80098e6:	9313      	str	r3, [sp, #76]	; 0x4c
 80098e8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80098ea:	9312      	str	r3, [sp, #72]	; 0x48
 80098ec:	9b08      	ldr	r3, [sp, #32]
 80098ee:	2b47      	cmp	r3, #71	; 0x47
 80098f0:	f000 8162 	beq.w	8009bb8 <_svfprintf_r+0x10d8>
 80098f4:	2f66      	cmp	r7, #102	; 0x66
 80098f6:	f040 8166 	bne.w	8009bc6 <_svfprintf_r+0x10e6>
 80098fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009900:	f340 82d9 	ble.w	8009eb6 <_svfprintf_r+0x13d6>
 8009904:	2b00      	cmp	r3, #0
 8009906:	f040 82c0 	bne.w	8009e8a <_svfprintf_r+0x13aa>
 800990a:	f019 0f01 	tst.w	r9, #1
 800990e:	f040 82bc 	bne.w	8009e8a <_svfprintf_r+0x13aa>
 8009912:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009914:	9308      	str	r3, [sp, #32]
 8009916:	930e      	str	r3, [sp, #56]	; 0x38
 8009918:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800991a:	2b00      	cmp	r3, #0
 800991c:	f040 817e 	bne.w	8009c1c <_svfprintf_r+0x113c>
 8009920:	9309      	str	r3, [sp, #36]	; 0x24
 8009922:	f89d 6077 	ldrb.w	r6, [sp, #119]	; 0x77
 8009926:	f7ff ba3d 	b.w	8008da4 <_svfprintf_r+0x2c4>
 800992a:	2b10      	cmp	r3, #16
 800992c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800992e:	f8df 93a4 	ldr.w	r9, [pc, #932]	; 8009cd4 <_svfprintf_r+0x11f4>
 8009932:	f340 80ef 	ble.w	8009b14 <_svfprintf_r+0x1034>
 8009936:	4623      	mov	r3, r4
 8009938:	2610      	movs	r6, #16
 800993a:	464c      	mov	r4, r9
 800993c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800993e:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8009942:	e005      	b.n	8009950 <_svfprintf_r+0xe70>
 8009944:	f10a 0a08 	add.w	sl, sl, #8
 8009948:	3d10      	subs	r5, #16
 800994a:	2d10      	cmp	r5, #16
 800994c:	f340 80e0 	ble.w	8009b10 <_svfprintf_r+0x1030>
 8009950:	3201      	adds	r2, #1
 8009952:	3310      	adds	r3, #16
 8009954:	2a07      	cmp	r2, #7
 8009956:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
 800995a:	e9ca 4600 	strd	r4, r6, [sl]
 800995e:	ddf1      	ble.n	8009944 <_svfprintf_r+0xe64>
 8009960:	aa25      	add	r2, sp, #148	; 0x94
 8009962:	4649      	mov	r1, r9
 8009964:	4638      	mov	r0, r7
 8009966:	f004 fab9 	bl	800dedc <__ssprint_r>
 800996a:	2800      	cmp	r0, #0
 800996c:	f47f a985 	bne.w	8008c7a <_svfprintf_r+0x19a>
 8009970:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 8009974:	46c2      	mov	sl, r8
 8009976:	e7e7      	b.n	8009948 <_svfprintf_r+0xe68>
 8009978:	4264      	negs	r4, r4
 800997a:	940b      	str	r4, [sp, #44]	; 0x2c
 800997c:	900f      	str	r0, [sp, #60]	; 0x3c
 800997e:	e47c      	b.n	800927a <_svfprintf_r+0x79a>
 8009980:	2140      	movs	r1, #64	; 0x40
 8009982:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009984:	f003 fa7c 	bl	800ce80 <_malloc_r>
 8009988:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800998a:	6018      	str	r0, [r3, #0]
 800998c:	6118      	str	r0, [r3, #16]
 800998e:	2800      	cmp	r0, #0
 8009990:	f000 82cd 	beq.w	8009f2e <_svfprintf_r+0x144e>
 8009994:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009996:	2340      	movs	r3, #64	; 0x40
 8009998:	6153      	str	r3, [r2, #20]
 800999a:	f7ff b8b8 	b.w	8008b0e <_svfprintf_r+0x2e>
 800999e:	aa25      	add	r2, sp, #148	; 0x94
 80099a0:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 80099a4:	f004 fa9a 	bl	800dedc <__ssprint_r>
 80099a8:	2800      	cmp	r0, #0
 80099aa:	f47f a966 	bne.w	8008c7a <_svfprintf_r+0x19a>
 80099ae:	e9dd 3426 	ldrd	r3, r4, [sp, #152]	; 0x98
 80099b2:	3301      	adds	r3, #1
 80099b4:	9309      	str	r3, [sp, #36]	; 0x24
 80099b6:	f10d 0ad0 	add.w	sl, sp, #208	; 0xd0
 80099ba:	4646      	mov	r6, r8
 80099bc:	e5b1      	b.n	8009522 <_svfprintf_r+0xa42>
 80099be:	aa25      	add	r2, sp, #148	; 0x94
 80099c0:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 80099c4:	f004 fa8a 	bl	800dedc <__ssprint_r>
 80099c8:	2800      	cmp	r0, #0
 80099ca:	f47f a956 	bne.w	8008c7a <_svfprintf_r+0x19a>
 80099ce:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80099d0:	46c2      	mov	sl, r8
 80099d2:	e4a4      	b.n	800931e <_svfprintf_r+0x83e>
 80099d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099d6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80099d8:	9609      	str	r6, [sp, #36]	; 0x24
 80099da:	2b06      	cmp	r3, #6
 80099dc:	bf28      	it	cs
 80099de:	2306      	movcs	r3, #6
 80099e0:	9308      	str	r3, [sp, #32]
 80099e2:	930e      	str	r3, [sp, #56]	; 0x38
 80099e4:	4bb9      	ldr	r3, [pc, #740]	; (8009ccc <_svfprintf_r+0x11ec>)
 80099e6:	950f      	str	r5, [sp, #60]	; 0x3c
 80099e8:	f8cd 901c 	str.w	r9, [sp, #28]
 80099ec:	9612      	str	r6, [sp, #72]	; 0x48
 80099ee:	9311      	str	r3, [sp, #68]	; 0x44
 80099f0:	f7ff b9d8 	b.w	8008da4 <_svfprintf_r+0x2c4>
 80099f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80099f6:	eba8 0303 	sub.w	r3, r8, r3
 80099fa:	930e      	str	r3, [sp, #56]	; 0x38
 80099fc:	f7ff ba47 	b.w	8008e8e <_svfprintf_r+0x3ae>
 8009a00:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009a02:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009a04:	f8ca 1000 	str.w	r1, [sl]
 8009a08:	9919      	ldr	r1, [sp, #100]	; 0x64
 8009a0a:	f8ca 1004 	str.w	r1, [sl, #4]
 8009a0e:	3201      	adds	r2, #1
 8009a10:	440c      	add	r4, r1
 8009a12:	2a07      	cmp	r2, #7
 8009a14:	9427      	str	r4, [sp, #156]	; 0x9c
 8009a16:	9226      	str	r2, [sp, #152]	; 0x98
 8009a18:	f300 8128 	bgt.w	8009c6c <_svfprintf_r+0x118c>
 8009a1c:	f10a 0a08 	add.w	sl, sl, #8
 8009a20:	e601      	b.n	8009626 <_svfprintf_r+0xb46>
 8009a22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a24:	601a      	str	r2, [r3, #0]
 8009a26:	f7ff b883 	b.w	8008b30 <_svfprintf_r+0x50>
 8009a2a:	aa25      	add	r2, sp, #148	; 0x94
 8009a2c:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 8009a30:	f004 fa54 	bl	800dedc <__ssprint_r>
 8009a34:	2800      	cmp	r0, #0
 8009a36:	f47f a920 	bne.w	8008c7a <_svfprintf_r+0x19a>
 8009a3a:	f89d 6077 	ldrb.w	r6, [sp, #119]	; 0x77
 8009a3e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8009a40:	46c2      	mov	sl, r8
 8009a42:	f7ff ba8c 	b.w	8008f5e <_svfprintf_r+0x47e>
 8009a46:	aa25      	add	r2, sp, #148	; 0x94
 8009a48:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 8009a4c:	f004 fa46 	bl	800dedc <__ssprint_r>
 8009a50:	2800      	cmp	r0, #0
 8009a52:	f47f a912 	bne.w	8008c7a <_svfprintf_r+0x19a>
 8009a56:	e9dd 5426 	ldrd	r5, r4, [sp, #152]	; 0x98
 8009a5a:	4646      	mov	r6, r8
 8009a5c:	e534      	b.n	80094c8 <_svfprintf_r+0x9e8>
 8009a5e:	aa25      	add	r2, sp, #148	; 0x94
 8009a60:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 8009a64:	f004 fa3a 	bl	800dedc <__ssprint_r>
 8009a68:	2800      	cmp	r0, #0
 8009a6a:	f47f a906 	bne.w	8008c7a <_svfprintf_r+0x19a>
 8009a6e:	e9dd 5426 	ldrd	r5, r4, [sp, #152]	; 0x98
 8009a72:	4646      	mov	r6, r8
 8009a74:	e534      	b.n	80094e0 <_svfprintf_r+0xa00>
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	f47f a9eb 	bne.w	8008e52 <_svfprintf_r+0x372>
 8009a7c:	e567      	b.n	800954e <_svfprintf_r+0xa6e>
 8009a7e:	46a1      	mov	r9, r4
 8009a80:	461c      	mov	r4, r3
 8009a82:	3201      	adds	r2, #1
 8009a84:	442c      	add	r4, r5
 8009a86:	2a07      	cmp	r2, #7
 8009a88:	e9cd 2426 	strd	r2, r4, [sp, #152]	; 0x98
 8009a8c:	e9ca 9500 	strd	r9, r5, [sl]
 8009a90:	f77f aadf 	ble.w	8009052 <_svfprintf_r+0x572>
 8009a94:	e4f7      	b.n	8009486 <_svfprintf_r+0x9a6>
 8009a96:	aa25      	add	r2, sp, #148	; 0x94
 8009a98:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 8009a9c:	f004 fa1e 	bl	800dedc <__ssprint_r>
 8009aa0:	2800      	cmp	r0, #0
 8009aa2:	f47f a8ea 	bne.w	8008c7a <_svfprintf_r+0x19a>
 8009aa6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8009aa8:	46c2      	mov	sl, r8
 8009aaa:	f7ff ba7c 	b.w	8008fa6 <_svfprintf_r+0x4c6>
 8009aae:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009ab0:	4987      	ldr	r1, [pc, #540]	; (8009cd0 <_svfprintf_r+0x11f0>)
 8009ab2:	f8ca 1000 	str.w	r1, [sl]
 8009ab6:	3201      	adds	r2, #1
 8009ab8:	3401      	adds	r4, #1
 8009aba:	2101      	movs	r1, #1
 8009abc:	2a07      	cmp	r2, #7
 8009abe:	e9cd 2426 	strd	r2, r4, [sp, #152]	; 0x98
 8009ac2:	f8ca 1004 	str.w	r1, [sl, #4]
 8009ac6:	f73f acb0 	bgt.w	800942a <_svfprintf_r+0x94a>
 8009aca:	f10a 0a08 	add.w	sl, sl, #8
 8009ace:	e4b7      	b.n	8009440 <_svfprintf_r+0x960>
 8009ad0:	aa25      	add	r2, sp, #148	; 0x94
 8009ad2:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 8009ad6:	f004 fa01 	bl	800dedc <__ssprint_r>
 8009ada:	2800      	cmp	r0, #0
 8009adc:	f47f a8cd 	bne.w	8008c7a <_svfprintf_r+0x19a>
 8009ae0:	46c2      	mov	sl, r8
 8009ae2:	e406      	b.n	80092f2 <_svfprintf_r+0x812>
 8009ae4:	46b1      	mov	r9, r6
 8009ae6:	461e      	mov	r6, r3
 8009ae8:	1c6b      	adds	r3, r5, #1
 8009aea:	4614      	mov	r4, r2
 8009aec:	9309      	str	r3, [sp, #36]	; 0x24
 8009aee:	f106 0208 	add.w	r2, r6, #8
 8009af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009af4:	9326      	str	r3, [sp, #152]	; 0x98
 8009af6:	443c      	add	r4, r7
 8009af8:	2b07      	cmp	r3, #7
 8009afa:	9427      	str	r4, [sp, #156]	; 0x9c
 8009afc:	e9c6 9700 	strd	r9, r7, [r6]
 8009b00:	f73f af4d 	bgt.w	800999e <_svfprintf_r+0xebe>
 8009b04:	3301      	adds	r3, #1
 8009b06:	9309      	str	r3, [sp, #36]	; 0x24
 8009b08:	f102 0a08 	add.w	sl, r2, #8
 8009b0c:	4616      	mov	r6, r2
 8009b0e:	e508      	b.n	8009522 <_svfprintf_r+0xa42>
 8009b10:	46a1      	mov	r9, r4
 8009b12:	461c      	mov	r4, r3
 8009b14:	3201      	adds	r2, #1
 8009b16:	442c      	add	r4, r5
 8009b18:	2a07      	cmp	r2, #7
 8009b1a:	e9cd 2426 	strd	r2, r4, [sp, #152]	; 0x98
 8009b1e:	e9ca 9500 	strd	r9, r5, [sl]
 8009b22:	f300 812a 	bgt.w	8009d7a <_svfprintf_r+0x129a>
 8009b26:	f10a 0a08 	add.w	sl, sl, #8
 8009b2a:	e573      	b.n	8009614 <_svfprintf_r+0xb34>
 8009b2c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8009b2e:	9409      	str	r4, [sp, #36]	; 0x24
 8009b30:	f7f6 fe06 	bl	8000740 <strlen>
 8009b34:	f8cd 901c 	str.w	r9, [sp, #28]
 8009b38:	e9cd 050e 	strd	r0, r5, [sp, #56]	; 0x38
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	f7ff b92b 	b.w	8008d98 <_svfprintf_r+0x2b8>
 8009b42:	9a07      	ldr	r2, [sp, #28]
 8009b44:	07d0      	lsls	r0, r2, #31
 8009b46:	f57f aa86 	bpl.w	8009056 <_svfprintf_r+0x576>
 8009b4a:	e47e      	b.n	800944a <_svfprintf_r+0x96a>
 8009b4c:	2a00      	cmp	r2, #0
 8009b4e:	4613      	mov	r3, r2
 8009b50:	bf08      	it	eq
 8009b52:	2301      	moveq	r3, #1
 8009b54:	9309      	str	r3, [sp, #36]	; 0x24
 8009b56:	e68a      	b.n	800986e <_svfprintf_r+0xd8e>
 8009b58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b5a:	3101      	adds	r1, #1
 8009b5c:	460c      	mov	r4, r1
 8009b5e:	910e      	str	r1, [sp, #56]	; 0x38
 8009b60:	a823      	add	r0, sp, #140	; 0x8c
 8009b62:	a920      	add	r1, sp, #128	; 0x80
 8009b64:	9004      	str	r0, [sp, #16]
 8009b66:	9103      	str	r1, [sp, #12]
 8009b68:	a81f      	add	r0, sp, #124	; 0x7c
 8009b6a:	2102      	movs	r1, #2
 8009b6c:	9002      	str	r0, [sp, #8]
 8009b6e:	9401      	str	r4, [sp, #4]
 8009b70:	9100      	str	r1, [sp, #0]
 8009b72:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009b74:	f001 fdc0 	bl	800b6f8 <_dtoa_r>
 8009b78:	9011      	str	r0, [sp, #68]	; 0x44
 8009b7a:	2f47      	cmp	r7, #71	; 0x47
 8009b7c:	f040 81c8 	bne.w	8009f10 <_svfprintf_r+0x1430>
 8009b80:	f019 0f01 	tst.w	r9, #1
 8009b84:	f000 81bd 	beq.w	8009f02 <_svfprintf_r+0x1422>
 8009b88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009b8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b8c:	2f46      	cmp	r7, #70	; 0x46
 8009b8e:	eb03 0402 	add.w	r4, r3, r2
 8009b92:	f47f ae9c 	bne.w	80098ce <_svfprintf_r+0xdee>
 8009b96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	2b30      	cmp	r3, #48	; 0x30
 8009b9c:	f000 815c 	beq.w	8009e58 <_svfprintf_r+0x1378>
 8009ba0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009ba2:	441c      	add	r4, r3
 8009ba4:	e693      	b.n	80098ce <_svfprintf_r+0xdee>
 8009ba6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009ba8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009baa:	9212      	str	r2, [sp, #72]	; 0x48
 8009bac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009bae:	1a9b      	subs	r3, r3, r2
 8009bb0:	9313      	str	r3, [sp, #76]	; 0x4c
 8009bb2:	9b08      	ldr	r3, [sp, #32]
 8009bb4:	2b47      	cmp	r3, #71	; 0x47
 8009bb6:	d106      	bne.n	8009bc6 <_svfprintf_r+0x10e6>
 8009bb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009bba:	1cda      	adds	r2, r3, #3
 8009bbc:	db02      	blt.n	8009bc4 <_svfprintf_r+0x10e4>
 8009bbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	da32      	bge.n	8009c2a <_svfprintf_r+0x114a>
 8009bc4:	3f02      	subs	r7, #2
 8009bc6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009bc8:	f88d 7084 	strb.w	r7, [sp, #132]	; 0x84
 8009bcc:	3b01      	subs	r3, #1
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	931f      	str	r3, [sp, #124]	; 0x7c
 8009bd2:	bfbd      	ittte	lt
 8009bd4:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8009bd6:	f1c3 0301 	rsblt	r3, r3, #1
 8009bda:	222d      	movlt	r2, #45	; 0x2d
 8009bdc:	222b      	movge	r2, #43	; 0x2b
 8009bde:	2b09      	cmp	r3, #9
 8009be0:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
 8009be4:	f300 8105 	bgt.w	8009df2 <_svfprintf_r+0x1312>
 8009be8:	3330      	adds	r3, #48	; 0x30
 8009bea:	2230      	movs	r2, #48	; 0x30
 8009bec:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
 8009bf0:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
 8009bf4:	ab22      	add	r3, sp, #136	; 0x88
 8009bf6:	aa21      	add	r2, sp, #132	; 0x84
 8009bf8:	1a9b      	subs	r3, r3, r2
 8009bfa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009bfc:	931b      	str	r3, [sp, #108]	; 0x6c
 8009bfe:	2a01      	cmp	r2, #1
 8009c00:	4413      	add	r3, r2
 8009c02:	930e      	str	r3, [sp, #56]	; 0x38
 8009c04:	f340 8137 	ble.w	8009e76 <_svfprintf_r+0x1396>
 8009c08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c0a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009c0c:	4413      	add	r3, r2
 8009c0e:	930e      	str	r3, [sp, #56]	; 0x38
 8009c10:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009c14:	9308      	str	r3, [sp, #32]
 8009c16:	2300      	movs	r3, #0
 8009c18:	9312      	str	r3, [sp, #72]	; 0x48
 8009c1a:	e67d      	b.n	8009918 <_svfprintf_r+0xe38>
 8009c1c:	262d      	movs	r6, #45	; 0x2d
 8009c1e:	2300      	movs	r3, #0
 8009c20:	f88d 6077 	strb.w	r6, [sp, #119]	; 0x77
 8009c24:	9309      	str	r3, [sp, #36]	; 0x24
 8009c26:	f7ff b8c0 	b.w	8008daa <_svfprintf_r+0x2ca>
 8009c2a:	e9dd 3112 	ldrd	r3, r1, [sp, #72]	; 0x48
 8009c2e:	428b      	cmp	r3, r1
 8009c30:	db7e      	blt.n	8009d30 <_svfprintf_r+0x1250>
 8009c32:	f019 0f01 	tst.w	r9, #1
 8009c36:	f000 8109 	beq.w	8009e4c <_svfprintf_r+0x136c>
 8009c3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c3c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009c3e:	4413      	add	r3, r2
 8009c40:	930e      	str	r3, [sp, #56]	; 0x38
 8009c42:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009c46:	9308      	str	r3, [sp, #32]
 8009c48:	2767      	movs	r7, #103	; 0x67
 8009c4a:	e665      	b.n	8009918 <_svfprintf_r+0xe38>
 8009c4c:	aa25      	add	r2, sp, #148	; 0x94
 8009c4e:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 8009c52:	f004 f943 	bl	800dedc <__ssprint_r>
 8009c56:	2800      	cmp	r0, #0
 8009c58:	f47f a80f 	bne.w	8008c7a <_svfprintf_r+0x19a>
 8009c5c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8009c5e:	46c2      	mov	sl, r8
 8009c60:	e4d0      	b.n	8009604 <_svfprintf_r+0xb24>
 8009c62:	262d      	movs	r6, #45	; 0x2d
 8009c64:	f88d 6077 	strb.w	r6, [sp, #119]	; 0x77
 8009c68:	f7ff bac3 	b.w	80091f2 <_svfprintf_r+0x712>
 8009c6c:	aa25      	add	r2, sp, #148	; 0x94
 8009c6e:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 8009c72:	f004 f933 	bl	800dedc <__ssprint_r>
 8009c76:	2800      	cmp	r0, #0
 8009c78:	f47e afff 	bne.w	8008c7a <_svfprintf_r+0x19a>
 8009c7c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009c7e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8009c80:	46c2      	mov	sl, r8
 8009c82:	e4d0      	b.n	8009626 <_svfprintf_r+0xb46>
 8009c84:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009c86:	42a3      	cmp	r3, r4
 8009c88:	f4bf ae2b 	bcs.w	80098e2 <_svfprintf_r+0xe02>
 8009c8c:	2130      	movs	r1, #48	; 0x30
 8009c8e:	1c5a      	adds	r2, r3, #1
 8009c90:	9223      	str	r2, [sp, #140]	; 0x8c
 8009c92:	7019      	strb	r1, [r3, #0]
 8009c94:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009c96:	429c      	cmp	r4, r3
 8009c98:	d8f9      	bhi.n	8009c8e <_svfprintf_r+0x11ae>
 8009c9a:	e622      	b.n	80098e2 <_svfprintf_r+0xe02>
 8009c9c:	2306      	movs	r3, #6
 8009c9e:	9309      	str	r3, [sp, #36]	; 0x24
 8009ca0:	e5e5      	b.n	800986e <_svfprintf_r+0xd8e>
 8009ca2:	a823      	add	r0, sp, #140	; 0x8c
 8009ca4:	a920      	add	r1, sp, #128	; 0x80
 8009ca6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009ca8:	9004      	str	r0, [sp, #16]
 8009caa:	9103      	str	r1, [sp, #12]
 8009cac:	a81f      	add	r0, sp, #124	; 0x7c
 8009cae:	2103      	movs	r1, #3
 8009cb0:	462b      	mov	r3, r5
 8009cb2:	9401      	str	r4, [sp, #4]
 8009cb4:	9002      	str	r0, [sp, #8]
 8009cb6:	4632      	mov	r2, r6
 8009cb8:	9100      	str	r1, [sp, #0]
 8009cba:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009cbc:	f001 fd1c 	bl	800b6f8 <_dtoa_r>
 8009cc0:	4623      	mov	r3, r4
 8009cc2:	9011      	str	r0, [sp, #68]	; 0x44
 8009cc4:	1904      	adds	r4, r0, r4
 8009cc6:	930e      	str	r3, [sp, #56]	; 0x38
 8009cc8:	e765      	b.n	8009b96 <_svfprintf_r+0x10b6>
 8009cca:	bf00      	nop
 8009ccc:	0800eb68 	.word	0x0800eb68
 8009cd0:	0800eb70 	.word	0x0800eb70
 8009cd4:	0800eb84 	.word	0x0800eb84
 8009cd8:	aa25      	add	r2, sp, #148	; 0x94
 8009cda:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 8009cde:	f004 f8fd 	bl	800dedc <__ssprint_r>
 8009ce2:	2800      	cmp	r0, #0
 8009ce4:	f47e afc9 	bne.w	8008c7a <_svfprintf_r+0x19a>
 8009ce8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009cea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009cec:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8009cee:	1ad3      	subs	r3, r2, r3
 8009cf0:	46c2      	mov	sl, r8
 8009cf2:	e4b1      	b.n	8009658 <_svfprintf_r+0xb78>
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8009cf8:	f7fe bf50 	b.w	8008b9c <_svfprintf_r+0xbc>
 8009cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cfe:	9308      	str	r3, [sp, #32]
 8009d00:	930e      	str	r3, [sp, #56]	; 0x38
 8009d02:	9009      	str	r0, [sp, #36]	; 0x24
 8009d04:	950f      	str	r5, [sp, #60]	; 0x3c
 8009d06:	f8cd 901c 	str.w	r9, [sp, #28]
 8009d0a:	9012      	str	r0, [sp, #72]	; 0x48
 8009d0c:	f89d 6077 	ldrb.w	r6, [sp, #119]	; 0x77
 8009d10:	f7ff b848 	b.w	8008da4 <_svfprintf_r+0x2c4>
 8009d14:	aa25      	add	r2, sp, #148	; 0x94
 8009d16:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 8009d1a:	f004 f8df 	bl	800dedc <__ssprint_r>
 8009d1e:	2800      	cmp	r0, #0
 8009d20:	f47e afab 	bne.w	8008c7a <_svfprintf_r+0x19a>
 8009d24:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009d26:	e9dd 2426 	ldrd	r2, r4, [sp, #152]	; 0x98
 8009d2a:	46c2      	mov	sl, r8
 8009d2c:	f7ff bb9d 	b.w	800946a <_svfprintf_r+0x98a>
 8009d30:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009d32:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009d34:	4413      	add	r3, r2
 8009d36:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009d38:	930e      	str	r3, [sp, #56]	; 0x38
 8009d3a:	2a00      	cmp	r2, #0
 8009d3c:	dc06      	bgt.n	8009d4c <_svfprintf_r+0x126c>
 8009d3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d42:	f1c3 0301 	rsb	r3, r3, #1
 8009d46:	441a      	add	r2, r3
 8009d48:	4613      	mov	r3, r2
 8009d4a:	920e      	str	r2, [sp, #56]	; 0x38
 8009d4c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009d50:	9308      	str	r3, [sp, #32]
 8009d52:	2767      	movs	r7, #103	; 0x67
 8009d54:	e5e0      	b.n	8009918 <_svfprintf_r+0xe38>
 8009d56:	a823      	add	r0, sp, #140	; 0x8c
 8009d58:	a920      	add	r1, sp, #128	; 0x80
 8009d5a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009d5c:	9004      	str	r0, [sp, #16]
 8009d5e:	9103      	str	r1, [sp, #12]
 8009d60:	a81f      	add	r0, sp, #124	; 0x7c
 8009d62:	2103      	movs	r1, #3
 8009d64:	9002      	str	r0, [sp, #8]
 8009d66:	4632      	mov	r2, r6
 8009d68:	462b      	mov	r3, r5
 8009d6a:	9401      	str	r4, [sp, #4]
 8009d6c:	9100      	str	r1, [sp, #0]
 8009d6e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009d70:	f001 fcc2 	bl	800b6f8 <_dtoa_r>
 8009d74:	940e      	str	r4, [sp, #56]	; 0x38
 8009d76:	9011      	str	r0, [sp, #68]	; 0x44
 8009d78:	e706      	b.n	8009b88 <_svfprintf_r+0x10a8>
 8009d7a:	aa25      	add	r2, sp, #148	; 0x94
 8009d7c:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 8009d80:	f004 f8ac 	bl	800dedc <__ssprint_r>
 8009d84:	2800      	cmp	r0, #0
 8009d86:	f47e af78 	bne.w	8008c7a <_svfprintf_r+0x19a>
 8009d8a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8009d8c:	46c2      	mov	sl, r8
 8009d8e:	e441      	b.n	8009614 <_svfprintf_r+0xb34>
 8009d90:	425d      	negs	r5, r3
 8009d92:	3310      	adds	r3, #16
 8009d94:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 8009f7c <_svfprintf_r+0x149c>
 8009d98:	da1f      	bge.n	8009dda <_svfprintf_r+0x12fa>
 8009d9a:	4623      	mov	r3, r4
 8009d9c:	2610      	movs	r6, #16
 8009d9e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009da0:	464c      	mov	r4, r9
 8009da2:	e004      	b.n	8009dae <_svfprintf_r+0x12ce>
 8009da4:	f10a 0a08 	add.w	sl, sl, #8
 8009da8:	3d10      	subs	r5, #16
 8009daa:	2d10      	cmp	r5, #16
 8009dac:	dd13      	ble.n	8009dd6 <_svfprintf_r+0x12f6>
 8009dae:	3201      	adds	r2, #1
 8009db0:	3310      	adds	r3, #16
 8009db2:	2a07      	cmp	r2, #7
 8009db4:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
 8009db8:	e9ca 4600 	strd	r4, r6, [sl]
 8009dbc:	ddf2      	ble.n	8009da4 <_svfprintf_r+0x12c4>
 8009dbe:	aa25      	add	r2, sp, #148	; 0x94
 8009dc0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009dc2:	4638      	mov	r0, r7
 8009dc4:	f004 f88a 	bl	800dedc <__ssprint_r>
 8009dc8:	2800      	cmp	r0, #0
 8009dca:	f47e af56 	bne.w	8008c7a <_svfprintf_r+0x19a>
 8009dce:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 8009dd2:	46c2      	mov	sl, r8
 8009dd4:	e7e8      	b.n	8009da8 <_svfprintf_r+0x12c8>
 8009dd6:	46a1      	mov	r9, r4
 8009dd8:	461c      	mov	r4, r3
 8009dda:	3201      	adds	r2, #1
 8009ddc:	442c      	add	r4, r5
 8009dde:	2a07      	cmp	r2, #7
 8009de0:	e9cd 2426 	strd	r2, r4, [sp, #152]	; 0x98
 8009de4:	e9ca 9500 	strd	r9, r5, [sl]
 8009de8:	dc7e      	bgt.n	8009ee8 <_svfprintf_r+0x1408>
 8009dea:	f10a 0a08 	add.w	sl, sl, #8
 8009dee:	f7ff bb3f 	b.w	8009470 <_svfprintf_r+0x990>
 8009df2:	f10d 0493 	add.w	r4, sp, #147	; 0x93
 8009df6:	4620      	mov	r0, r4
 8009df8:	4d5d      	ldr	r5, [pc, #372]	; (8009f70 <_svfprintf_r+0x1490>)
 8009dfa:	e000      	b.n	8009dfe <_svfprintf_r+0x131e>
 8009dfc:	4610      	mov	r0, r2
 8009dfe:	fba5 1203 	umull	r1, r2, r5, r3
 8009e02:	08d2      	lsrs	r2, r2, #3
 8009e04:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8009e08:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8009e0c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009e10:	4613      	mov	r3, r2
 8009e12:	2b09      	cmp	r3, #9
 8009e14:	f800 1c01 	strb.w	r1, [r0, #-1]
 8009e18:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8009e1c:	dcee      	bgt.n	8009dfc <_svfprintf_r+0x131c>
 8009e1e:	3330      	adds	r3, #48	; 0x30
 8009e20:	3802      	subs	r0, #2
 8009e22:	b2d9      	uxtb	r1, r3
 8009e24:	4284      	cmp	r4, r0
 8009e26:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009e2a:	d976      	bls.n	8009f1a <_svfprintf_r+0x143a>
 8009e2c:	f10d 0086 	add.w	r0, sp, #134	; 0x86
 8009e30:	4613      	mov	r3, r2
 8009e32:	e001      	b.n	8009e38 <_svfprintf_r+0x1358>
 8009e34:	f813 1b01 	ldrb.w	r1, [r3], #1
 8009e38:	f800 1b01 	strb.w	r1, [r0], #1
 8009e3c:	429c      	cmp	r4, r3
 8009e3e:	d1f9      	bne.n	8009e34 <_svfprintf_r+0x1354>
 8009e40:	ab25      	add	r3, sp, #148	; 0x94
 8009e42:	1a9b      	subs	r3, r3, r2
 8009e44:	f10d 0286 	add.w	r2, sp, #134	; 0x86
 8009e48:	4413      	add	r3, r2
 8009e4a:	e6d4      	b.n	8009bf6 <_svfprintf_r+0x1116>
 8009e4c:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8009e50:	9208      	str	r2, [sp, #32]
 8009e52:	930e      	str	r3, [sp, #56]	; 0x38
 8009e54:	2767      	movs	r7, #103	; 0x67
 8009e56:	e55f      	b.n	8009918 <_svfprintf_r+0xe38>
 8009e58:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009e5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009e5c:	4630      	mov	r0, r6
 8009e5e:	4629      	mov	r1, r5
 8009e60:	f7f7 f952 	bl	8001108 <__aeabi_dcmpeq>
 8009e64:	2800      	cmp	r0, #0
 8009e66:	f47f ae9b 	bne.w	8009ba0 <_svfprintf_r+0x10c0>
 8009e6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e6c:	f1c3 0301 	rsb	r3, r3, #1
 8009e70:	931f      	str	r3, [sp, #124]	; 0x7c
 8009e72:	441c      	add	r4, r3
 8009e74:	e52b      	b.n	80098ce <_svfprintf_r+0xdee>
 8009e76:	f019 0301 	ands.w	r3, r9, #1
 8009e7a:	9312      	str	r3, [sp, #72]	; 0x48
 8009e7c:	f47f aec4 	bne.w	8009c08 <_svfprintf_r+0x1128>
 8009e80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e82:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009e86:	9308      	str	r3, [sp, #32]
 8009e88:	e546      	b.n	8009918 <_svfprintf_r+0xe38>
 8009e8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e8c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009e8e:	4413      	add	r3, r2
 8009e90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e92:	441a      	add	r2, r3
 8009e94:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009e98:	920e      	str	r2, [sp, #56]	; 0x38
 8009e9a:	9308      	str	r3, [sp, #32]
 8009e9c:	e53c      	b.n	8009918 <_svfprintf_r+0xe38>
 8009e9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009ea0:	4a34      	ldr	r2, [pc, #208]	; (8009f74 <_svfprintf_r+0x1494>)
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	bfb6      	itet	lt
 8009ea6:	262d      	movlt	r6, #45	; 0x2d
 8009ea8:	f89d 6077 	ldrbge.w	r6, [sp, #119]	; 0x77
 8009eac:	f88d 6077 	strblt.w	r6, [sp, #119]	; 0x77
 8009eb0:	4b31      	ldr	r3, [pc, #196]	; (8009f78 <_svfprintf_r+0x1498>)
 8009eb2:	f7ff b9a0 	b.w	80091f6 <_svfprintf_r+0x716>
 8009eb6:	b943      	cbnz	r3, 8009eca <_svfprintf_r+0x13ea>
 8009eb8:	f019 0f01 	tst.w	r9, #1
 8009ebc:	d105      	bne.n	8009eca <_svfprintf_r+0x13ea>
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	9308      	str	r3, [sp, #32]
 8009ec2:	930e      	str	r3, [sp, #56]	; 0x38
 8009ec4:	e528      	b.n	8009918 <_svfprintf_r+0xe38>
 8009ec6:	4652      	mov	r2, sl
 8009ec8:	e613      	b.n	8009af2 <_svfprintf_r+0x1012>
 8009eca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009ecc:	3301      	adds	r3, #1
 8009ece:	e7df      	b.n	8009e90 <_svfprintf_r+0x13b0>
 8009ed0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009ed2:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8009ed6:	682c      	ldr	r4, [r5, #0]
 8009ed8:	4683      	mov	fp, r0
 8009eda:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 8009ede:	1d28      	adds	r0, r5, #4
 8009ee0:	9409      	str	r4, [sp, #36]	; 0x24
 8009ee2:	900f      	str	r0, [sp, #60]	; 0x3c
 8009ee4:	f7fe be57 	b.w	8008b96 <_svfprintf_r+0xb6>
 8009ee8:	aa25      	add	r2, sp, #148	; 0x94
 8009eea:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 8009eee:	f003 fff5 	bl	800dedc <__ssprint_r>
 8009ef2:	2800      	cmp	r0, #0
 8009ef4:	f47e aec1 	bne.w	8008c7a <_svfprintf_r+0x19a>
 8009ef8:	e9dd 2426 	ldrd	r2, r4, [sp, #152]	; 0x98
 8009efc:	46c2      	mov	sl, r8
 8009efe:	f7ff bab7 	b.w	8009470 <_svfprintf_r+0x990>
 8009f02:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009f04:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009f06:	9212      	str	r2, [sp, #72]	; 0x48
 8009f08:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009f0a:	1a9b      	subs	r3, r3, r2
 8009f0c:	9313      	str	r3, [sp, #76]	; 0x4c
 8009f0e:	e653      	b.n	8009bb8 <_svfprintf_r+0x10d8>
 8009f10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f12:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009f14:	4413      	add	r3, r2
 8009f16:	461c      	mov	r4, r3
 8009f18:	e4d9      	b.n	80098ce <_svfprintf_r+0xdee>
 8009f1a:	f10d 0386 	add.w	r3, sp, #134	; 0x86
 8009f1e:	e66a      	b.n	8009bf6 <_svfprintf_r+0x1116>
 8009f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f22:	930e      	str	r3, [sp, #56]	; 0x38
 8009f24:	e629      	b.n	8009b7a <_svfprintf_r+0x109a>
 8009f26:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
 8009f2a:	f7ff b91b 	b.w	8009164 <_svfprintf_r+0x684>
 8009f2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f30:	230c      	movs	r3, #12
 8009f32:	6013      	str	r3, [r2, #0]
 8009f34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f38:	930a      	str	r3, [sp, #40]	; 0x28
 8009f3a:	f7fe bea7 	b.w	8008c8c <_svfprintf_r+0x1ac>
 8009f3e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
 8009f42:	f7fe bf62 	b.w	8008e0a <_svfprintf_r+0x32a>
 8009f46:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
 8009f4a:	f7ff b8cb 	b.w	80090e4 <_svfprintf_r+0x604>
 8009f4e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
 8009f52:	f7ff b923 	b.w	800919c <_svfprintf_r+0x6bc>
 8009f56:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
 8009f5a:	f7ff b95d 	b.w	8009218 <_svfprintf_r+0x738>
 8009f5e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
 8009f62:	f7ff b997 	b.w	8009294 <_svfprintf_r+0x7b4>
 8009f66:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
 8009f6a:	f7fe bf25 	b.w	8008db8 <_svfprintf_r+0x2d8>
 8009f6e:	bf00      	nop
 8009f70:	cccccccd 	.word	0xcccccccd
 8009f74:	0800eb3c 	.word	0x0800eb3c
 8009f78:	0800eb38 	.word	0x0800eb38
 8009f7c:	0800eb84 	.word	0x0800eb84

08009f80 <_vfprintf_r>:
 8009f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f84:	b0c1      	sub	sp, #260	; 0x104
 8009f86:	461c      	mov	r4, r3
 8009f88:	4688      	mov	r8, r1
 8009f8a:	4692      	mov	sl, r2
 8009f8c:	4605      	mov	r5, r0
 8009f8e:	900a      	str	r0, [sp, #40]	; 0x28
 8009f90:	f002 fee8 	bl	800cd64 <_localeconv_r>
 8009f94:	6803      	ldr	r3, [r0, #0]
 8009f96:	9313      	str	r3, [sp, #76]	; 0x4c
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f7f6 fbd1 	bl	8000740 <strlen>
 8009f9e:	940d      	str	r4, [sp, #52]	; 0x34
 8009fa0:	9011      	str	r0, [sp, #68]	; 0x44
 8009fa2:	b11d      	cbz	r5, 8009fac <_vfprintf_r+0x2c>
 8009fa4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	f000 8100 	beq.w	800a1ac <_vfprintf_r+0x22c>
 8009fac:	f8d8 1064 	ldr.w	r1, [r8, #100]	; 0x64
 8009fb0:	f9b8 200c 	ldrsh.w	r2, [r8, #12]
 8009fb4:	07cd      	lsls	r5, r1, #31
 8009fb6:	b293      	uxth	r3, r2
 8009fb8:	d402      	bmi.n	8009fc0 <_vfprintf_r+0x40>
 8009fba:	0598      	lsls	r0, r3, #22
 8009fbc:	f140 8140 	bpl.w	800a240 <_vfprintf_r+0x2c0>
 8009fc0:	0499      	lsls	r1, r3, #18
 8009fc2:	d40a      	bmi.n	8009fda <_vfprintf_r+0x5a>
 8009fc4:	f8d8 1064 	ldr.w	r1, [r8, #100]	; 0x64
 8009fc8:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 8009fcc:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8009fd0:	f8a8 300c 	strh.w	r3, [r8, #12]
 8009fd4:	f8c8 1064 	str.w	r1, [r8, #100]	; 0x64
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	071a      	lsls	r2, r3, #28
 8009fdc:	f140 80b0 	bpl.w	800a140 <_vfprintf_r+0x1c0>
 8009fe0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009fe4:	2a00      	cmp	r2, #0
 8009fe6:	f000 80ab 	beq.w	800a140 <_vfprintf_r+0x1c0>
 8009fea:	f003 021a 	and.w	r2, r3, #26
 8009fee:	2a0a      	cmp	r2, #10
 8009ff0:	f000 80c2 	beq.w	800a178 <_vfprintf_r+0x1f8>
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	e9cd 0015 	strd	r0, r0, [sp, #84]	; 0x54
 8009ffc:	9310      	str	r3, [sp, #64]	; 0x40
 8009ffe:	9314      	str	r3, [sp, #80]	; 0x50
 800a000:	9312      	str	r3, [sp, #72]	; 0x48
 800a002:	e9cd 3324 	strd	r3, r3, [sp, #144]	; 0x90
 800a006:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 800a00a:	9309      	str	r3, [sp, #36]	; 0x24
 800a00c:	ab30      	add	r3, sp, #192	; 0xc0
 800a00e:	9323      	str	r3, [sp, #140]	; 0x8c
 800a010:	4699      	mov	r9, r3
 800a012:	f89a 3000 	ldrb.w	r3, [sl]
 800a016:	2b00      	cmp	r3, #0
 800a018:	f000 80fd 	beq.w	800a216 <_vfprintf_r+0x296>
 800a01c:	2b25      	cmp	r3, #37	; 0x25
 800a01e:	4654      	mov	r4, sl
 800a020:	d102      	bne.n	800a028 <_vfprintf_r+0xa8>
 800a022:	e01e      	b.n	800a062 <_vfprintf_r+0xe2>
 800a024:	2b25      	cmp	r3, #37	; 0x25
 800a026:	d003      	beq.n	800a030 <_vfprintf_r+0xb0>
 800a028:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d1f9      	bne.n	800a024 <_vfprintf_r+0xa4>
 800a030:	eba4 050a 	sub.w	r5, r4, sl
 800a034:	b18d      	cbz	r5, 800a05a <_vfprintf_r+0xda>
 800a036:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	; 0x90
 800a03a:	3301      	adds	r3, #1
 800a03c:	442a      	add	r2, r5
 800a03e:	2b07      	cmp	r3, #7
 800a040:	f8c9 a000 	str.w	sl, [r9]
 800a044:	f8c9 5004 	str.w	r5, [r9, #4]
 800a048:	e9cd 3224 	strd	r3, r2, [sp, #144]	; 0x90
 800a04c:	f300 80da 	bgt.w	800a204 <_vfprintf_r+0x284>
 800a050:	f109 0908 	add.w	r9, r9, #8
 800a054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a056:	442b      	add	r3, r5
 800a058:	9309      	str	r3, [sp, #36]	; 0x24
 800a05a:	7823      	ldrb	r3, [r4, #0]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	f000 80da 	beq.w	800a216 <_vfprintf_r+0x296>
 800a062:	2300      	movs	r3, #0
 800a064:	461a      	mov	r2, r3
 800a066:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800a06a:	4619      	mov	r1, r3
 800a06c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a06e:	469b      	mov	fp, r3
 800a070:	7866      	ldrb	r6, [r4, #1]
 800a072:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a076:	f104 0a01 	add.w	sl, r4, #1
 800a07a:	9308      	str	r3, [sp, #32]
 800a07c:	f10a 0a01 	add.w	sl, sl, #1
 800a080:	f1a6 0320 	sub.w	r3, r6, #32
 800a084:	2b58      	cmp	r3, #88	; 0x58
 800a086:	f200 83e4 	bhi.w	800a852 <_vfprintf_r+0x8d2>
 800a08a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a08e:	02bc      	.short	0x02bc
 800a090:	03e203e2 	.word	0x03e203e2
 800a094:	03e202c4 	.word	0x03e202c4
 800a098:	03e203e2 	.word	0x03e203e2
 800a09c:	03e203e2 	.word	0x03e203e2
 800a0a0:	031d03e2 	.word	0x031d03e2
 800a0a4:	03e20329 	.word	0x03e20329
 800a0a8:	038603b8 	.word	0x038603b8
 800a0ac:	024f03e2 	.word	0x024f03e2
 800a0b0:	00e100e1 	.word	0x00e100e1
 800a0b4:	00e100e1 	.word	0x00e100e1
 800a0b8:	00e100e1 	.word	0x00e100e1
 800a0bc:	00e100e1 	.word	0x00e100e1
 800a0c0:	03e200e1 	.word	0x03e200e1
 800a0c4:	03e203e2 	.word	0x03e203e2
 800a0c8:	03e203e2 	.word	0x03e203e2
 800a0cc:	03e203e2 	.word	0x03e203e2
 800a0d0:	03e203e2 	.word	0x03e203e2
 800a0d4:	03a003e2 	.word	0x03a003e2
 800a0d8:	03e2032e 	.word	0x03e2032e
 800a0dc:	03e2032e 	.word	0x03e2032e
 800a0e0:	03e203e2 	.word	0x03e203e2
 800a0e4:	038103e2 	.word	0x038103e2
 800a0e8:	03e203e2 	.word	0x03e203e2
 800a0ec:	03e20093 	.word	0x03e20093
 800a0f0:	03e203e2 	.word	0x03e203e2
 800a0f4:	03e203e2 	.word	0x03e203e2
 800a0f8:	03e200a7 	.word	0x03e200a7
 800a0fc:	025403e2 	.word	0x025403e2
 800a100:	03e203e2 	.word	0x03e203e2
 800a104:	03e203e2 	.word	0x03e203e2
 800a108:	03e203e2 	.word	0x03e203e2
 800a10c:	03e203e2 	.word	0x03e203e2
 800a110:	03e203e2 	.word	0x03e203e2
 800a114:	00f002a9 	.word	0x00f002a9
 800a118:	032e032e 	.word	0x032e032e
 800a11c:	023d032e 	.word	0x023d032e
 800a120:	03e200f0 	.word	0x03e200f0
 800a124:	024203e2 	.word	0x024203e2
 800a128:	030c03e2 	.word	0x030c03e2
 800a12c:	036c0095 	.word	0x036c0095
 800a130:	03e2037c 	.word	0x03e2037c
 800a134:	03e202e9 	.word	0x03e202e9
 800a138:	03e200a9 	.word	0x03e200a9
 800a13c:	02c903e2 	.word	0x02c903e2
 800a140:	4641      	mov	r1, r8
 800a142:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a144:	f001 f9e0 	bl	800b508 <__swsetup_r>
 800a148:	b178      	cbz	r0, 800a16a <_vfprintf_r+0x1ea>
 800a14a:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 800a14e:	07db      	lsls	r3, r3, #31
 800a150:	d404      	bmi.n	800a15c <_vfprintf_r+0x1dc>
 800a152:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800a156:	059f      	lsls	r7, r3, #22
 800a158:	f140 8373 	bpl.w	800a842 <_vfprintf_r+0x8c2>
 800a15c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a160:	9309      	str	r3, [sp, #36]	; 0x24
 800a162:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a164:	b041      	add	sp, #260	; 0x104
 800a166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a16a:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800a16e:	f003 021a 	and.w	r2, r3, #26
 800a172:	2a0a      	cmp	r2, #10
 800a174:	f47f af3e 	bne.w	8009ff4 <_vfprintf_r+0x74>
 800a178:	f9b8 200e 	ldrsh.w	r2, [r8, #14]
 800a17c:	2a00      	cmp	r2, #0
 800a17e:	f6ff af39 	blt.w	8009ff4 <_vfprintf_r+0x74>
 800a182:	f8d8 2064 	ldr.w	r2, [r8, #100]	; 0x64
 800a186:	07d6      	lsls	r6, r2, #31
 800a188:	d405      	bmi.n	800a196 <_vfprintf_r+0x216>
 800a18a:	059d      	lsls	r5, r3, #22
 800a18c:	d403      	bmi.n	800a196 <_vfprintf_r+0x216>
 800a18e:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 800a192:	f002 fdfb 	bl	800cd8c <__retarget_lock_release_recursive>
 800a196:	4623      	mov	r3, r4
 800a198:	4652      	mov	r2, sl
 800a19a:	4641      	mov	r1, r8
 800a19c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a19e:	f001 f971 	bl	800b484 <__sbprintf>
 800a1a2:	9009      	str	r0, [sp, #36]	; 0x24
 800a1a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1a6:	b041      	add	sp, #260	; 0x104
 800a1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1ac:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a1ae:	f002 faa3 	bl	800c6f8 <__sinit>
 800a1b2:	e6fb      	b.n	8009fac <_vfprintf_r+0x2c>
 800a1b4:	f04b 0b10 	orr.w	fp, fp, #16
 800a1b8:	f01b 0320 	ands.w	r3, fp, #32
 800a1bc:	f040 8324 	bne.w	800a808 <_vfprintf_r+0x888>
 800a1c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a1c2:	f852 4b04 	ldr.w	r4, [r2], #4
 800a1c6:	920d      	str	r2, [sp, #52]	; 0x34
 800a1c8:	f01b 0210 	ands.w	r2, fp, #16
 800a1cc:	d104      	bne.n	800a1d8 <_vfprintf_r+0x258>
 800a1ce:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 800a1d2:	bf1c      	itt	ne
 800a1d4:	4613      	movne	r3, r2
 800a1d6:	b2a4      	uxthne	r4, r4
 800a1d8:	2500      	movs	r5, #0
 800a1da:	e1cd      	b.n	800a578 <_vfprintf_r+0x5f8>
 800a1dc:	f04b 0b10 	orr.w	fp, fp, #16
 800a1e0:	f01b 0f20 	tst.w	fp, #32
 800a1e4:	f040 831b 	bne.w	800a81e <_vfprintf_r+0x89e>
 800a1e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1ea:	f01b 0f10 	tst.w	fp, #16
 800a1ee:	f853 4b04 	ldr.w	r4, [r3], #4
 800a1f2:	930d      	str	r3, [sp, #52]	; 0x34
 800a1f4:	d103      	bne.n	800a1fe <_vfprintf_r+0x27e>
 800a1f6:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800a1fa:	bf18      	it	ne
 800a1fc:	b2a4      	uxthne	r4, r4
 800a1fe:	2500      	movs	r5, #0
 800a200:	2301      	movs	r3, #1
 800a202:	e1b9      	b.n	800a578 <_vfprintf_r+0x5f8>
 800a204:	aa23      	add	r2, sp, #140	; 0x8c
 800a206:	4641      	mov	r1, r8
 800a208:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a20a:	f003 ff1d 	bl	800e048 <__sprint_r>
 800a20e:	b940      	cbnz	r0, 800a222 <_vfprintf_r+0x2a2>
 800a210:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a214:	e71e      	b.n	800a054 <_vfprintf_r+0xd4>
 800a216:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800a218:	2b00      	cmp	r3, #0
 800a21a:	f041 803b 	bne.w	800b294 <_vfprintf_r+0x1314>
 800a21e:	2300      	movs	r3, #0
 800a220:	9324      	str	r3, [sp, #144]	; 0x90
 800a222:	f8d8 2064 	ldr.w	r2, [r8, #100]	; 0x64
 800a226:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800a22a:	07d1      	lsls	r1, r2, #31
 800a22c:	d402      	bmi.n	800a234 <_vfprintf_r+0x2b4>
 800a22e:	059a      	lsls	r2, r3, #22
 800a230:	f140 8300 	bpl.w	800a834 <_vfprintf_r+0x8b4>
 800a234:	065b      	lsls	r3, r3, #25
 800a236:	d491      	bmi.n	800a15c <_vfprintf_r+0x1dc>
 800a238:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a23a:	b041      	add	sp, #260	; 0x104
 800a23c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a240:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 800a244:	f002 fda0 	bl	800cd88 <__retarget_lock_acquire_recursive>
 800a248:	f9b8 200c 	ldrsh.w	r2, [r8, #12]
 800a24c:	b293      	uxth	r3, r2
 800a24e:	e6b7      	b.n	8009fc0 <_vfprintf_r+0x40>
 800a250:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a254:	2000      	movs	r0, #0
 800a256:	f81a 6b01 	ldrb.w	r6, [sl], #1
 800a25a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a25e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800a262:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a266:	2b09      	cmp	r3, #9
 800a268:	d9f5      	bls.n	800a256 <_vfprintf_r+0x2d6>
 800a26a:	900b      	str	r0, [sp, #44]	; 0x2c
 800a26c:	e708      	b.n	800a080 <_vfprintf_r+0x100>
 800a26e:	2a00      	cmp	r2, #0
 800a270:	f041 80f8 	bne.w	800b464 <_vfprintf_r+0x14e4>
 800a274:	f01b 0f20 	tst.w	fp, #32
 800a278:	f000 82b2 	beq.w	800a7e0 <_vfprintf_r+0x860>
 800a27c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800a27e:	3407      	adds	r4, #7
 800a280:	f024 0307 	bic.w	r3, r4, #7
 800a284:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a288:	f103 0208 	add.w	r2, r3, #8
 800a28c:	920d      	str	r2, [sp, #52]	; 0x34
 800a28e:	2c00      	cmp	r4, #0
 800a290:	f175 0300 	sbcs.w	r3, r5, #0
 800a294:	f2c0 84cd 	blt.w	800ac32 <_vfprintf_r+0xcb2>
 800a298:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800a29c:	9b08      	ldr	r3, [sp, #32]
 800a29e:	3301      	adds	r3, #1
 800a2a0:	f000 8429 	beq.w	800aaf6 <_vfprintf_r+0xb76>
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
 800a2aa:	9206      	str	r2, [sp, #24]
 800a2ac:	ea54 0205 	orrs.w	r2, r4, r5
 800a2b0:	f040 816b 	bne.w	800a58a <_vfprintf_r+0x60a>
 800a2b4:	9a08      	ldr	r2, [sp, #32]
 800a2b6:	2a00      	cmp	r2, #0
 800a2b8:	f040 8575 	bne.w	800ada6 <_vfprintf_r+0xe26>
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	f040 8481 	bne.w	800abc4 <_vfprintf_r+0xc44>
 800a2c2:	f01b 0301 	ands.w	r3, fp, #1
 800a2c6:	930c      	str	r3, [sp, #48]	; 0x30
 800a2c8:	f000 859a 	beq.w	800ae00 <_vfprintf_r+0xe80>
 800a2cc:	ab40      	add	r3, sp, #256	; 0x100
 800a2ce:	461a      	mov	r2, r3
 800a2d0:	2330      	movs	r3, #48	; 0x30
 800a2d2:	f802 3d41 	strb.w	r3, [r2, #-65]!
 800a2d6:	920e      	str	r2, [sp, #56]	; 0x38
 800a2d8:	9b08      	ldr	r3, [sp, #32]
 800a2da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	bfb8      	it	lt
 800a2e0:	4613      	movlt	r3, r2
 800a2e2:	9307      	str	r3, [sp, #28]
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2e8:	b117      	cbz	r7, 800a2f0 <_vfprintf_r+0x370>
 800a2ea:	9b07      	ldr	r3, [sp, #28]
 800a2ec:	3301      	adds	r3, #1
 800a2ee:	9307      	str	r3, [sp, #28]
 800a2f0:	9b06      	ldr	r3, [sp, #24]
 800a2f2:	f013 0302 	ands.w	r3, r3, #2
 800a2f6:	d002      	beq.n	800a2fe <_vfprintf_r+0x37e>
 800a2f8:	9a07      	ldr	r2, [sp, #28]
 800a2fa:	3202      	adds	r2, #2
 800a2fc:	9207      	str	r2, [sp, #28]
 800a2fe:	9a06      	ldr	r2, [sp, #24]
 800a300:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800a302:	f012 0b84 	ands.w	fp, r2, #132	; 0x84
 800a306:	d142      	bne.n	800a38e <_vfprintf_r+0x40e>
 800a308:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a30a:	9907      	ldr	r1, [sp, #28]
 800a30c:	1a55      	subs	r5, r2, r1
 800a30e:	2d00      	cmp	r5, #0
 800a310:	dd3d      	ble.n	800a38e <_vfprintf_r+0x40e>
 800a312:	2d10      	cmp	r5, #16
 800a314:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a316:	dd2c      	ble.n	800a372 <_vfprintf_r+0x3f2>
 800a318:	4648      	mov	r0, r9
 800a31a:	4621      	mov	r1, r4
 800a31c:	46a9      	mov	r9, r5
 800a31e:	2710      	movs	r7, #16
 800a320:	461d      	mov	r5, r3
 800a322:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a324:	4603      	mov	r3, r0
 800a326:	e006      	b.n	800a336 <_vfprintf_r+0x3b6>
 800a328:	f1a9 0910 	sub.w	r9, r9, #16
 800a32c:	f1b9 0f10 	cmp.w	r9, #16
 800a330:	f103 0308 	add.w	r3, r3, #8
 800a334:	dd18      	ble.n	800a368 <_vfprintf_r+0x3e8>
 800a336:	3201      	adds	r2, #1
 800a338:	48c5      	ldr	r0, [pc, #788]	; (800a650 <_vfprintf_r+0x6d0>)
 800a33a:	3110      	adds	r1, #16
 800a33c:	2a07      	cmp	r2, #7
 800a33e:	e9cd 2124 	strd	r2, r1, [sp, #144]	; 0x90
 800a342:	e9c3 0700 	strd	r0, r7, [r3]
 800a346:	ddef      	ble.n	800a328 <_vfprintf_r+0x3a8>
 800a348:	aa23      	add	r2, sp, #140	; 0x8c
 800a34a:	4641      	mov	r1, r8
 800a34c:	4620      	mov	r0, r4
 800a34e:	f003 fe7b 	bl	800e048 <__sprint_r>
 800a352:	2800      	cmp	r0, #0
 800a354:	f47f af65 	bne.w	800a222 <_vfprintf_r+0x2a2>
 800a358:	f1a9 0910 	sub.w	r9, r9, #16
 800a35c:	f1b9 0f10 	cmp.w	r9, #16
 800a360:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 800a364:	ab30      	add	r3, sp, #192	; 0xc0
 800a366:	dce6      	bgt.n	800a336 <_vfprintf_r+0x3b6>
 800a368:	4618      	mov	r0, r3
 800a36a:	460c      	mov	r4, r1
 800a36c:	462b      	mov	r3, r5
 800a36e:	464d      	mov	r5, r9
 800a370:	4681      	mov	r9, r0
 800a372:	3201      	adds	r2, #1
 800a374:	49b6      	ldr	r1, [pc, #728]	; (800a650 <_vfprintf_r+0x6d0>)
 800a376:	442c      	add	r4, r5
 800a378:	2a07      	cmp	r2, #7
 800a37a:	e9cd 2424 	strd	r2, r4, [sp, #144]	; 0x90
 800a37e:	e9c9 1500 	strd	r1, r5, [r9]
 800a382:	f300 8481 	bgt.w	800ac88 <_vfprintf_r+0xd08>
 800a386:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800a38a:	f109 0908 	add.w	r9, r9, #8
 800a38e:	b177      	cbz	r7, 800a3ae <_vfprintf_r+0x42e>
 800a390:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a392:	3201      	adds	r2, #1
 800a394:	3401      	adds	r4, #1
 800a396:	f10d 006f 	add.w	r0, sp, #111	; 0x6f
 800a39a:	2101      	movs	r1, #1
 800a39c:	2a07      	cmp	r2, #7
 800a39e:	e9cd 2424 	strd	r2, r4, [sp, #144]	; 0x90
 800a3a2:	e9c9 0100 	strd	r0, r1, [r9]
 800a3a6:	f300 838c 	bgt.w	800aac2 <_vfprintf_r+0xb42>
 800a3aa:	f109 0908 	add.w	r9, r9, #8
 800a3ae:	b16b      	cbz	r3, 800a3cc <_vfprintf_r+0x44c>
 800a3b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a3b2:	3301      	adds	r3, #1
 800a3b4:	3402      	adds	r4, #2
 800a3b6:	a91c      	add	r1, sp, #112	; 0x70
 800a3b8:	2202      	movs	r2, #2
 800a3ba:	2b07      	cmp	r3, #7
 800a3bc:	e9cd 3424 	strd	r3, r4, [sp, #144]	; 0x90
 800a3c0:	e9c9 1200 	strd	r1, r2, [r9]
 800a3c4:	f300 838b 	bgt.w	800aade <_vfprintf_r+0xb5e>
 800a3c8:	f109 0908 	add.w	r9, r9, #8
 800a3cc:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
 800a3d0:	f000 82b5 	beq.w	800a93e <_vfprintf_r+0x9be>
 800a3d4:	9b08      	ldr	r3, [sp, #32]
 800a3d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3d8:	1a9d      	subs	r5, r3, r2
 800a3da:	2d00      	cmp	r5, #0
 800a3dc:	dd33      	ble.n	800a446 <_vfprintf_r+0x4c6>
 800a3de:	2d10      	cmp	r5, #16
 800a3e0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a3e2:	f8df b278 	ldr.w	fp, [pc, #632]	; 800a65c <_vfprintf_r+0x6dc>
 800a3e6:	dd23      	ble.n	800a430 <_vfprintf_r+0x4b0>
 800a3e8:	4623      	mov	r3, r4
 800a3ea:	2710      	movs	r7, #16
 800a3ec:	465c      	mov	r4, fp
 800a3ee:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800a3f2:	e004      	b.n	800a3fe <_vfprintf_r+0x47e>
 800a3f4:	3d10      	subs	r5, #16
 800a3f6:	2d10      	cmp	r5, #16
 800a3f8:	f109 0908 	add.w	r9, r9, #8
 800a3fc:	dd16      	ble.n	800a42c <_vfprintf_r+0x4ac>
 800a3fe:	3201      	adds	r2, #1
 800a400:	3310      	adds	r3, #16
 800a402:	2a07      	cmp	r2, #7
 800a404:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
 800a408:	e9c9 4700 	strd	r4, r7, [r9]
 800a40c:	ddf2      	ble.n	800a3f4 <_vfprintf_r+0x474>
 800a40e:	aa23      	add	r2, sp, #140	; 0x8c
 800a410:	4641      	mov	r1, r8
 800a412:	4658      	mov	r0, fp
 800a414:	f003 fe18 	bl	800e048 <__sprint_r>
 800a418:	2800      	cmp	r0, #0
 800a41a:	f47f af02 	bne.w	800a222 <_vfprintf_r+0x2a2>
 800a41e:	3d10      	subs	r5, #16
 800a420:	2d10      	cmp	r5, #16
 800a422:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 800a426:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a42a:	dce8      	bgt.n	800a3fe <_vfprintf_r+0x47e>
 800a42c:	46a3      	mov	fp, r4
 800a42e:	461c      	mov	r4, r3
 800a430:	3201      	adds	r2, #1
 800a432:	442c      	add	r4, r5
 800a434:	2a07      	cmp	r2, #7
 800a436:	e9cd 2424 	strd	r2, r4, [sp, #144]	; 0x90
 800a43a:	e9c9 b500 	strd	fp, r5, [r9]
 800a43e:	f300 836c 	bgt.w	800ab1a <_vfprintf_r+0xb9a>
 800a442:	f109 0908 	add.w	r9, r9, #8
 800a446:	9b06      	ldr	r3, [sp, #24]
 800a448:	05dd      	lsls	r5, r3, #23
 800a44a:	f100 8218 	bmi.w	800a87e <_vfprintf_r+0x8fe>
 800a44e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a450:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a452:	f8c9 2000 	str.w	r2, [r9]
 800a456:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a458:	f8c9 2004 	str.w	r2, [r9, #4]
 800a45c:	3301      	adds	r3, #1
 800a45e:	4414      	add	r4, r2
 800a460:	2b07      	cmp	r3, #7
 800a462:	9425      	str	r4, [sp, #148]	; 0x94
 800a464:	9324      	str	r3, [sp, #144]	; 0x90
 800a466:	f300 8309 	bgt.w	800aa7c <_vfprintf_r+0xafc>
 800a46a:	f109 0908 	add.w	r9, r9, #8
 800a46e:	9b06      	ldr	r3, [sp, #24]
 800a470:	0758      	lsls	r0, r3, #29
 800a472:	d539      	bpl.n	800a4e8 <_vfprintf_r+0x568>
 800a474:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a476:	9a07      	ldr	r2, [sp, #28]
 800a478:	1a9d      	subs	r5, r3, r2
 800a47a:	2d00      	cmp	r5, #0
 800a47c:	dd34      	ble.n	800a4e8 <_vfprintf_r+0x568>
 800a47e:	2d10      	cmp	r5, #16
 800a480:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a482:	dd1f      	ble.n	800a4c4 <_vfprintf_r+0x544>
 800a484:	2610      	movs	r6, #16
 800a486:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800a488:	e004      	b.n	800a494 <_vfprintf_r+0x514>
 800a48a:	3d10      	subs	r5, #16
 800a48c:	2d10      	cmp	r5, #16
 800a48e:	f109 0908 	add.w	r9, r9, #8
 800a492:	dd17      	ble.n	800a4c4 <_vfprintf_r+0x544>
 800a494:	3301      	adds	r3, #1
 800a496:	4a6e      	ldr	r2, [pc, #440]	; (800a650 <_vfprintf_r+0x6d0>)
 800a498:	3410      	adds	r4, #16
 800a49a:	2b07      	cmp	r3, #7
 800a49c:	e9cd 3424 	strd	r3, r4, [sp, #144]	; 0x90
 800a4a0:	e9c9 2600 	strd	r2, r6, [r9]
 800a4a4:	ddf1      	ble.n	800a48a <_vfprintf_r+0x50a>
 800a4a6:	aa23      	add	r2, sp, #140	; 0x8c
 800a4a8:	4641      	mov	r1, r8
 800a4aa:	4638      	mov	r0, r7
 800a4ac:	f003 fdcc 	bl	800e048 <__sprint_r>
 800a4b0:	2800      	cmp	r0, #0
 800a4b2:	f47f aeb6 	bne.w	800a222 <_vfprintf_r+0x2a2>
 800a4b6:	3d10      	subs	r5, #16
 800a4b8:	2d10      	cmp	r5, #16
 800a4ba:	e9dd 3424 	ldrd	r3, r4, [sp, #144]	; 0x90
 800a4be:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a4c2:	dce7      	bgt.n	800a494 <_vfprintf_r+0x514>
 800a4c4:	3301      	adds	r3, #1
 800a4c6:	4a62      	ldr	r2, [pc, #392]	; (800a650 <_vfprintf_r+0x6d0>)
 800a4c8:	442c      	add	r4, r5
 800a4ca:	2b07      	cmp	r3, #7
 800a4cc:	e9cd 3424 	strd	r3, r4, [sp, #144]	; 0x90
 800a4d0:	e9c9 2500 	strd	r2, r5, [r9]
 800a4d4:	dd08      	ble.n	800a4e8 <_vfprintf_r+0x568>
 800a4d6:	aa23      	add	r2, sp, #140	; 0x8c
 800a4d8:	4641      	mov	r1, r8
 800a4da:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a4dc:	f003 fdb4 	bl	800e048 <__sprint_r>
 800a4e0:	2800      	cmp	r0, #0
 800a4e2:	f47f ae9e 	bne.w	800a222 <_vfprintf_r+0x2a2>
 800a4e6:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800a4e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a4ec:	9907      	ldr	r1, [sp, #28]
 800a4ee:	428a      	cmp	r2, r1
 800a4f0:	bfac      	ite	ge
 800a4f2:	189b      	addge	r3, r3, r2
 800a4f4:	185b      	addlt	r3, r3, r1
 800a4f6:	9309      	str	r3, [sp, #36]	; 0x24
 800a4f8:	2c00      	cmp	r4, #0
 800a4fa:	f040 825b 	bne.w	800a9b4 <_vfprintf_r+0xa34>
 800a4fe:	2300      	movs	r3, #0
 800a500:	9324      	str	r3, [sp, #144]	; 0x90
 800a502:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a506:	e584      	b.n	800a012 <_vfprintf_r+0x92>
 800a508:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
 800a50c:	f89a 6000 	ldrb.w	r6, [sl]
 800a510:	e5b4      	b.n	800a07c <_vfprintf_r+0xfc>
 800a512:	f89a 6000 	ldrb.w	r6, [sl]
 800a516:	2e6c      	cmp	r6, #108	; 0x6c
 800a518:	bf03      	ittte	eq
 800a51a:	f89a 6001 	ldrbeq.w	r6, [sl, #1]
 800a51e:	f04b 0b20 	orreq.w	fp, fp, #32
 800a522:	f10a 0a01 	addeq.w	sl, sl, #1
 800a526:	f04b 0b10 	orrne.w	fp, fp, #16
 800a52a:	e5a7      	b.n	800a07c <_vfprintf_r+0xfc>
 800a52c:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 800a530:	f89a 6000 	ldrb.w	r6, [sl]
 800a534:	e5a2      	b.n	800a07c <_vfprintf_r+0xfc>
 800a536:	2a00      	cmp	r2, #0
 800a538:	f040 8798 	bne.w	800b46c <_vfprintf_r+0x14ec>
 800a53c:	4b45      	ldr	r3, [pc, #276]	; (800a654 <_vfprintf_r+0x6d4>)
 800a53e:	9317      	str	r3, [sp, #92]	; 0x5c
 800a540:	f01b 0f20 	tst.w	fp, #32
 800a544:	d074      	beq.n	800a630 <_vfprintf_r+0x6b0>
 800a546:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800a548:	3407      	adds	r4, #7
 800a54a:	f024 0307 	bic.w	r3, r4, #7
 800a54e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a552:	f103 0208 	add.w	r2, r3, #8
 800a556:	920d      	str	r2, [sp, #52]	; 0x34
 800a558:	f01b 0f01 	tst.w	fp, #1
 800a55c:	f000 82db 	beq.w	800ab16 <_vfprintf_r+0xb96>
 800a560:	ea54 0305 	orrs.w	r3, r4, r5
 800a564:	f000 82d7 	beq.w	800ab16 <_vfprintf_r+0xb96>
 800a568:	2330      	movs	r3, #48	; 0x30
 800a56a:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 800a56e:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
 800a572:	f04b 0b02 	orr.w	fp, fp, #2
 800a576:	2302      	movs	r3, #2
 800a578:	9a08      	ldr	r2, [sp, #32]
 800a57a:	2700      	movs	r7, #0
 800a57c:	3201      	adds	r2, #1
 800a57e:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800a582:	f47f ae90 	bne.w	800a2a6 <_vfprintf_r+0x326>
 800a586:	f8cd b018 	str.w	fp, [sp, #24]
 800a58a:	2b01      	cmp	r3, #1
 800a58c:	f000 82b5 	beq.w	800aafa <_vfprintf_r+0xb7a>
 800a590:	2b02      	cmp	r3, #2
 800a592:	f000 827f 	beq.w	800aa94 <_vfprintf_r+0xb14>
 800a596:	a930      	add	r1, sp, #192	; 0xc0
 800a598:	e000      	b.n	800a59c <_vfprintf_r+0x61c>
 800a59a:	4611      	mov	r1, r2
 800a59c:	08e2      	lsrs	r2, r4, #3
 800a59e:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 800a5a2:	08e8      	lsrs	r0, r5, #3
 800a5a4:	f004 0307 	and.w	r3, r4, #7
 800a5a8:	4605      	mov	r5, r0
 800a5aa:	4614      	mov	r4, r2
 800a5ac:	3330      	adds	r3, #48	; 0x30
 800a5ae:	ea54 0005 	orrs.w	r0, r4, r5
 800a5b2:	f801 3c01 	strb.w	r3, [r1, #-1]
 800a5b6:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 800a5ba:	d1ee      	bne.n	800a59a <_vfprintf_r+0x61a>
 800a5bc:	9806      	ldr	r0, [sp, #24]
 800a5be:	920e      	str	r2, [sp, #56]	; 0x38
 800a5c0:	07c0      	lsls	r0, r0, #31
 800a5c2:	f140 827a 	bpl.w	800aaba <_vfprintf_r+0xb3a>
 800a5c6:	2b30      	cmp	r3, #48	; 0x30
 800a5c8:	f000 8563 	beq.w	800b092 <_vfprintf_r+0x1112>
 800a5cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a5ce:	2330      	movs	r3, #48	; 0x30
 800a5d0:	3902      	subs	r1, #2
 800a5d2:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a5d6:	ab30      	add	r3, sp, #192	; 0xc0
 800a5d8:	1a5b      	subs	r3, r3, r1
 800a5da:	930c      	str	r3, [sp, #48]	; 0x30
 800a5dc:	910e      	str	r1, [sp, #56]	; 0x38
 800a5de:	e67b      	b.n	800a2d8 <_vfprintf_r+0x358>
 800a5e0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	680a      	ldr	r2, [r1, #0]
 800a5e6:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800a5ea:	461f      	mov	r7, r3
 800a5ec:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	1d0a      	adds	r2, r1, #4
 800a5f4:	e9cd b306 	strd	fp, r3, [sp, #24]
 800a5f8:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
 800a5fc:	ab26      	add	r3, sp, #152	; 0x98
 800a5fe:	9708      	str	r7, [sp, #32]
 800a600:	970f      	str	r7, [sp, #60]	; 0x3c
 800a602:	930e      	str	r3, [sp, #56]	; 0x38
 800a604:	e674      	b.n	800a2f0 <_vfprintf_r+0x370>
 800a606:	f89a 6000 	ldrb.w	r6, [sl]
 800a60a:	2900      	cmp	r1, #0
 800a60c:	f47f ad36 	bne.w	800a07c <_vfprintf_r+0xfc>
 800a610:	2201      	movs	r2, #1
 800a612:	2120      	movs	r1, #32
 800a614:	e532      	b.n	800a07c <_vfprintf_r+0xfc>
 800a616:	f04b 0b01 	orr.w	fp, fp, #1
 800a61a:	f89a 6000 	ldrb.w	r6, [sl]
 800a61e:	e52d      	b.n	800a07c <_vfprintf_r+0xfc>
 800a620:	2a00      	cmp	r2, #0
 800a622:	f040 871b 	bne.w	800b45c <_vfprintf_r+0x14dc>
 800a626:	4b0c      	ldr	r3, [pc, #48]	; (800a658 <_vfprintf_r+0x6d8>)
 800a628:	9317      	str	r3, [sp, #92]	; 0x5c
 800a62a:	f01b 0f20 	tst.w	fp, #32
 800a62e:	d18a      	bne.n	800a546 <_vfprintf_r+0x5c6>
 800a630:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a632:	f01b 0f10 	tst.w	fp, #16
 800a636:	f853 4b04 	ldr.w	r4, [r3], #4
 800a63a:	930d      	str	r3, [sp, #52]	; 0x34
 800a63c:	f040 82f1 	bne.w	800ac22 <_vfprintf_r+0xca2>
 800a640:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800a644:	f000 82ed 	beq.w	800ac22 <_vfprintf_r+0xca2>
 800a648:	b2a4      	uxth	r4, r4
 800a64a:	2500      	movs	r5, #0
 800a64c:	e784      	b.n	800a558 <_vfprintf_r+0x5d8>
 800a64e:	bf00      	nop
 800a650:	0800eb94 	.word	0x0800eb94
 800a654:	0800eb40 	.word	0x0800eb40
 800a658:	0800eb54 	.word	0x0800eb54
 800a65c:	0800eba4 	.word	0x0800eba4
 800a660:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a662:	6813      	ldr	r3, [r2, #0]
 800a664:	930e      	str	r3, [sp, #56]	; 0x38
 800a666:	2500      	movs	r5, #0
 800a668:	f88d 506f 	strb.w	r5, [sp, #111]	; 0x6f
 800a66c:	1d14      	adds	r4, r2, #4
 800a66e:	2b00      	cmp	r3, #0
 800a670:	f000 84ff 	beq.w	800b072 <_vfprintf_r+0x10f2>
 800a674:	9a08      	ldr	r2, [sp, #32]
 800a676:	1c53      	adds	r3, r2, #1
 800a678:	f000 854c 	beq.w	800b114 <_vfprintf_r+0x1194>
 800a67c:	4629      	mov	r1, r5
 800a67e:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a680:	f7f6 f8ce 	bl	8000820 <memchr>
 800a684:	2800      	cmp	r0, #0
 800a686:	f000 84ba 	beq.w	800affe <_vfprintf_r+0x107e>
 800a68a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a68c:	9508      	str	r5, [sp, #32]
 800a68e:	1ac3      	subs	r3, r0, r3
 800a690:	930c      	str	r3, [sp, #48]	; 0x30
 800a692:	940d      	str	r4, [sp, #52]	; 0x34
 800a694:	f8cd b018 	str.w	fp, [sp, #24]
 800a698:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a69c:	9307      	str	r3, [sp, #28]
 800a69e:	950f      	str	r5, [sp, #60]	; 0x3c
 800a6a0:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800a6a4:	e620      	b.n	800a2e8 <_vfprintf_r+0x368>
 800a6a6:	2a00      	cmp	r2, #0
 800a6a8:	f040 86c5 	bne.w	800b436 <_vfprintf_r+0x14b6>
 800a6ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a6ae:	f01b 0f20 	tst.w	fp, #32
 800a6b2:	f852 3b04 	ldr.w	r3, [r2], #4
 800a6b6:	920d      	str	r2, [sp, #52]	; 0x34
 800a6b8:	f000 83a6 	beq.w	800ae08 <_vfprintf_r+0xe88>
 800a6bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6be:	4610      	mov	r0, r2
 800a6c0:	17d1      	asrs	r1, r2, #31
 800a6c2:	e9c3 0100 	strd	r0, r1, [r3]
 800a6c6:	e4a4      	b.n	800a012 <_vfprintf_r+0x92>
 800a6c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6ca:	f89a 6000 	ldrb.w	r6, [sl]
 800a6ce:	6818      	ldr	r0, [r3, #0]
 800a6d0:	900b      	str	r0, [sp, #44]	; 0x2c
 800a6d2:	2800      	cmp	r0, #0
 800a6d4:	f103 0304 	add.w	r3, r3, #4
 800a6d8:	f2c0 8469 	blt.w	800afae <_vfprintf_r+0x102e>
 800a6dc:	930d      	str	r3, [sp, #52]	; 0x34
 800a6de:	e4cd      	b.n	800a07c <_vfprintf_r+0xfc>
 800a6e0:	f89a 6000 	ldrb.w	r6, [sl]
 800a6e4:	2201      	movs	r2, #1
 800a6e6:	212b      	movs	r1, #43	; 0x2b
 800a6e8:	e4c8      	b.n	800a07c <_vfprintf_r+0xfc>
 800a6ea:	2a00      	cmp	r2, #0
 800a6ec:	f040 86ab 	bne.w	800b446 <_vfprintf_r+0x14c6>
 800a6f0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800a6f2:	4bb5      	ldr	r3, [pc, #724]	; (800a9c8 <_vfprintf_r+0xa48>)
 800a6f4:	3407      	adds	r4, #7
 800a6f6:	f024 0707 	bic.w	r7, r4, #7
 800a6fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a6fe:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800a702:	9112      	str	r1, [sp, #72]	; 0x48
 800a704:	3708      	adds	r7, #8
 800a706:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a70a:	4621      	mov	r1, r4
 800a70c:	9014      	str	r0, [sp, #80]	; 0x50
 800a70e:	4605      	mov	r5, r0
 800a710:	970d      	str	r7, [sp, #52]	; 0x34
 800a712:	f7f6 fd2b 	bl	800116c <__aeabi_dcmpun>
 800a716:	2800      	cmp	r0, #0
 800a718:	f040 8385 	bne.w	800ae26 <_vfprintf_r+0xea6>
 800a71c:	4628      	mov	r0, r5
 800a71e:	4621      	mov	r1, r4
 800a720:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a724:	4ba8      	ldr	r3, [pc, #672]	; (800a9c8 <_vfprintf_r+0xa48>)
 800a726:	f7f6 fd03 	bl	8001130 <__aeabi_dcmple>
 800a72a:	2800      	cmp	r0, #0
 800a72c:	f040 837b 	bne.w	800ae26 <_vfprintf_r+0xea6>
 800a730:	e9dd 0214 	ldrd	r0, r2, [sp, #80]	; 0x50
 800a734:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a736:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a738:	f7f6 fcf0 	bl	800111c <__aeabi_dcmplt>
 800a73c:	2800      	cmp	r0, #0
 800a73e:	f040 843a 	bne.w	800afb6 <_vfprintf_r+0x1036>
 800a742:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800a746:	4aa1      	ldr	r2, [pc, #644]	; (800a9cc <_vfprintf_r+0xa4c>)
 800a748:	4ba1      	ldr	r3, [pc, #644]	; (800a9d0 <_vfprintf_r+0xa50>)
 800a74a:	2103      	movs	r1, #3
 800a74c:	2000      	movs	r0, #0
 800a74e:	f02b 0480 	bic.w	r4, fp, #128	; 0x80
 800a752:	2e47      	cmp	r6, #71	; 0x47
 800a754:	bfd8      	it	le
 800a756:	461a      	movle	r2, r3
 800a758:	e9cd 1007 	strd	r1, r0, [sp, #28]
 800a75c:	9406      	str	r4, [sp, #24]
 800a75e:	920e      	str	r2, [sp, #56]	; 0x38
 800a760:	910c      	str	r1, [sp, #48]	; 0x30
 800a762:	900f      	str	r0, [sp, #60]	; 0x3c
 800a764:	e5c0      	b.n	800a2e8 <_vfprintf_r+0x368>
 800a766:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a768:	4b9a      	ldr	r3, [pc, #616]	; (800a9d4 <_vfprintf_r+0xa54>)
 800a76a:	6814      	ldr	r4, [r2, #0]
 800a76c:	9317      	str	r3, [sp, #92]	; 0x5c
 800a76e:	3204      	adds	r2, #4
 800a770:	f647 0330 	movw	r3, #30768	; 0x7830
 800a774:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
 800a778:	f04b 0b02 	orr.w	fp, fp, #2
 800a77c:	920d      	str	r2, [sp, #52]	; 0x34
 800a77e:	2500      	movs	r5, #0
 800a780:	2302      	movs	r3, #2
 800a782:	2678      	movs	r6, #120	; 0x78
 800a784:	e6f8      	b.n	800a578 <_vfprintf_r+0x5f8>
 800a786:	f04b 0b20 	orr.w	fp, fp, #32
 800a78a:	f89a 6000 	ldrb.w	r6, [sl]
 800a78e:	e475      	b.n	800a07c <_vfprintf_r+0xfc>
 800a790:	f04b 0b08 	orr.w	fp, fp, #8
 800a794:	f89a 6000 	ldrb.w	r6, [sl]
 800a798:	e470      	b.n	800a07c <_vfprintf_r+0xfc>
 800a79a:	f89a 6000 	ldrb.w	r6, [sl]
 800a79e:	2e2a      	cmp	r6, #42	; 0x2a
 800a7a0:	f10a 0001 	add.w	r0, sl, #1
 800a7a4:	f000 861f 	beq.w	800b3e6 <_vfprintf_r+0x1466>
 800a7a8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a7ac:	2b09      	cmp	r3, #9
 800a7ae:	4682      	mov	sl, r0
 800a7b0:	f200 8513 	bhi.w	800b1da <_vfprintf_r+0x125a>
 800a7b4:	2000      	movs	r0, #0
 800a7b6:	f81a 6b01 	ldrb.w	r6, [sl], #1
 800a7ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a7be:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800a7c2:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a7c6:	2b09      	cmp	r3, #9
 800a7c8:	d9f5      	bls.n	800a7b6 <_vfprintf_r+0x836>
 800a7ca:	9008      	str	r0, [sp, #32]
 800a7cc:	e458      	b.n	800a080 <_vfprintf_r+0x100>
 800a7ce:	2a00      	cmp	r2, #0
 800a7d0:	f040 8635 	bne.w	800b43e <_vfprintf_r+0x14be>
 800a7d4:	f04b 0b10 	orr.w	fp, fp, #16
 800a7d8:	f01b 0f20 	tst.w	fp, #32
 800a7dc:	f47f ad4e 	bne.w	800a27c <_vfprintf_r+0x2fc>
 800a7e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7e2:	f01b 0f10 	tst.w	fp, #16
 800a7e6:	f853 4b04 	ldr.w	r4, [r3], #4
 800a7ea:	930d      	str	r3, [sp, #52]	; 0x34
 800a7ec:	f040 821b 	bne.w	800ac26 <_vfprintf_r+0xca6>
 800a7f0:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800a7f4:	f000 8217 	beq.w	800ac26 <_vfprintf_r+0xca6>
 800a7f8:	b224      	sxth	r4, r4
 800a7fa:	17e5      	asrs	r5, r4, #31
 800a7fc:	e547      	b.n	800a28e <_vfprintf_r+0x30e>
 800a7fe:	f89a 6000 	ldrb.w	r6, [sl]
 800a802:	f04b 0b04 	orr.w	fp, fp, #4
 800a806:	e439      	b.n	800a07c <_vfprintf_r+0xfc>
 800a808:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800a80a:	3407      	adds	r4, #7
 800a80c:	f024 0307 	bic.w	r3, r4, #7
 800a810:	f103 0208 	add.w	r2, r3, #8
 800a814:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a818:	920d      	str	r2, [sp, #52]	; 0x34
 800a81a:	2300      	movs	r3, #0
 800a81c:	e6ac      	b.n	800a578 <_vfprintf_r+0x5f8>
 800a81e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800a820:	3407      	adds	r4, #7
 800a822:	f024 0307 	bic.w	r3, r4, #7
 800a826:	f103 0208 	add.w	r2, r3, #8
 800a82a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a82e:	920d      	str	r2, [sp, #52]	; 0x34
 800a830:	2301      	movs	r3, #1
 800a832:	e6a1      	b.n	800a578 <_vfprintf_r+0x5f8>
 800a834:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 800a838:	f002 faa8 	bl	800cd8c <__retarget_lock_release_recursive>
 800a83c:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800a840:	e4f8      	b.n	800a234 <_vfprintf_r+0x2b4>
 800a842:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 800a846:	f002 faa1 	bl	800cd8c <__retarget_lock_release_recursive>
 800a84a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a84e:	9309      	str	r3, [sp, #36]	; 0x24
 800a850:	e4f2      	b.n	800a238 <_vfprintf_r+0x2b8>
 800a852:	2a00      	cmp	r2, #0
 800a854:	f040 85fb 	bne.w	800b44e <_vfprintf_r+0x14ce>
 800a858:	2e00      	cmp	r6, #0
 800a85a:	f43f acdc 	beq.w	800a216 <_vfprintf_r+0x296>
 800a85e:	2300      	movs	r3, #0
 800a860:	2201      	movs	r2, #1
 800a862:	461f      	mov	r7, r3
 800a864:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800a868:	9308      	str	r3, [sp, #32]
 800a86a:	930f      	str	r3, [sp, #60]	; 0x3c
 800a86c:	ab26      	add	r3, sp, #152	; 0x98
 800a86e:	9207      	str	r2, [sp, #28]
 800a870:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
 800a874:	f8cd b018 	str.w	fp, [sp, #24]
 800a878:	920c      	str	r2, [sp, #48]	; 0x30
 800a87a:	930e      	str	r3, [sp, #56]	; 0x38
 800a87c:	e538      	b.n	800a2f0 <_vfprintf_r+0x370>
 800a87e:	2e65      	cmp	r6, #101	; 0x65
 800a880:	f340 80ae 	ble.w	800a9e0 <_vfprintf_r+0xa60>
 800a884:	e9dd 0214 	ldrd	r0, r2, [sp, #80]	; 0x50
 800a888:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a88a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a88c:	f7f6 fc3c 	bl	8001108 <__aeabi_dcmpeq>
 800a890:	2800      	cmp	r0, #0
 800a892:	f000 814e 	beq.w	800ab32 <_vfprintf_r+0xbb2>
 800a896:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a898:	4a4f      	ldr	r2, [pc, #316]	; (800a9d8 <_vfprintf_r+0xa58>)
 800a89a:	f8c9 2000 	str.w	r2, [r9]
 800a89e:	3301      	adds	r3, #1
 800a8a0:	3401      	adds	r4, #1
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	2b07      	cmp	r3, #7
 800a8a6:	e9cd 3424 	strd	r3, r4, [sp, #144]	; 0x90
 800a8aa:	f8c9 2004 	str.w	r2, [r9, #4]
 800a8ae:	f300 8373 	bgt.w	800af98 <_vfprintf_r+0x1018>
 800a8b2:	f109 0908 	add.w	r9, r9, #8
 800a8b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a8b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a8ba:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	db03      	blt.n	800a8c8 <_vfprintf_r+0x948>
 800a8c0:	9b06      	ldr	r3, [sp, #24]
 800a8c2:	07d8      	lsls	r0, r3, #31
 800a8c4:	f57f add3 	bpl.w	800a46e <_vfprintf_r+0x4ee>
 800a8c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a8ca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a8cc:	f8c9 2000 	str.w	r2, [r9]
 800a8d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a8d2:	f8c9 2004 	str.w	r2, [r9, #4]
 800a8d6:	3301      	adds	r3, #1
 800a8d8:	4414      	add	r4, r2
 800a8da:	2b07      	cmp	r3, #7
 800a8dc:	e9cd 3424 	strd	r3, r4, [sp, #144]	; 0x90
 800a8e0:	f300 83ae 	bgt.w	800b040 <_vfprintf_r+0x10c0>
 800a8e4:	f109 0908 	add.w	r9, r9, #8
 800a8e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a8ea:	1e5d      	subs	r5, r3, #1
 800a8ec:	2d00      	cmp	r5, #0
 800a8ee:	f77f adbe 	ble.w	800a46e <_vfprintf_r+0x4ee>
 800a8f2:	2d10      	cmp	r5, #16
 800a8f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a8f6:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 800a9dc <_vfprintf_r+0xa5c>
 800a8fa:	f340 8259 	ble.w	800adb0 <_vfprintf_r+0xe30>
 800a8fe:	465f      	mov	r7, fp
 800a900:	2610      	movs	r6, #16
 800a902:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800a906:	e005      	b.n	800a914 <_vfprintf_r+0x994>
 800a908:	f109 0908 	add.w	r9, r9, #8
 800a90c:	3d10      	subs	r5, #16
 800a90e:	2d10      	cmp	r5, #16
 800a910:	f340 824d 	ble.w	800adae <_vfprintf_r+0xe2e>
 800a914:	3201      	adds	r2, #1
 800a916:	3410      	adds	r4, #16
 800a918:	2a07      	cmp	r2, #7
 800a91a:	e9cd 2424 	strd	r2, r4, [sp, #144]	; 0x90
 800a91e:	e9c9 7600 	strd	r7, r6, [r9]
 800a922:	ddf1      	ble.n	800a908 <_vfprintf_r+0x988>
 800a924:	aa23      	add	r2, sp, #140	; 0x8c
 800a926:	4641      	mov	r1, r8
 800a928:	4658      	mov	r0, fp
 800a92a:	f003 fb8d 	bl	800e048 <__sprint_r>
 800a92e:	2800      	cmp	r0, #0
 800a930:	f47f ac77 	bne.w	800a222 <_vfprintf_r+0x2a2>
 800a934:	e9dd 2424 	ldrd	r2, r4, [sp, #144]	; 0x90
 800a938:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a93c:	e7e6      	b.n	800a90c <_vfprintf_r+0x98c>
 800a93e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a940:	9a07      	ldr	r2, [sp, #28]
 800a942:	1a9d      	subs	r5, r3, r2
 800a944:	2d00      	cmp	r5, #0
 800a946:	f77f ad45 	ble.w	800a3d4 <_vfprintf_r+0x454>
 800a94a:	2d10      	cmp	r5, #16
 800a94c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a94e:	f8df b08c 	ldr.w	fp, [pc, #140]	; 800a9dc <_vfprintf_r+0xa5c>
 800a952:	dd23      	ble.n	800a99c <_vfprintf_r+0xa1c>
 800a954:	4623      	mov	r3, r4
 800a956:	2710      	movs	r7, #16
 800a958:	465c      	mov	r4, fp
 800a95a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800a95e:	e004      	b.n	800a96a <_vfprintf_r+0x9ea>
 800a960:	3d10      	subs	r5, #16
 800a962:	2d10      	cmp	r5, #16
 800a964:	f109 0908 	add.w	r9, r9, #8
 800a968:	dd16      	ble.n	800a998 <_vfprintf_r+0xa18>
 800a96a:	3201      	adds	r2, #1
 800a96c:	3310      	adds	r3, #16
 800a96e:	2a07      	cmp	r2, #7
 800a970:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
 800a974:	e9c9 4700 	strd	r4, r7, [r9]
 800a978:	ddf2      	ble.n	800a960 <_vfprintf_r+0x9e0>
 800a97a:	aa23      	add	r2, sp, #140	; 0x8c
 800a97c:	4641      	mov	r1, r8
 800a97e:	4658      	mov	r0, fp
 800a980:	f003 fb62 	bl	800e048 <__sprint_r>
 800a984:	2800      	cmp	r0, #0
 800a986:	f47f ac4c 	bne.w	800a222 <_vfprintf_r+0x2a2>
 800a98a:	3d10      	subs	r5, #16
 800a98c:	2d10      	cmp	r5, #16
 800a98e:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 800a992:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a996:	dce8      	bgt.n	800a96a <_vfprintf_r+0x9ea>
 800a998:	46a3      	mov	fp, r4
 800a99a:	461c      	mov	r4, r3
 800a99c:	3201      	adds	r2, #1
 800a99e:	442c      	add	r4, r5
 800a9a0:	2a07      	cmp	r2, #7
 800a9a2:	e9cd 2424 	strd	r2, r4, [sp, #144]	; 0x90
 800a9a6:	e9c9 b500 	strd	fp, r5, [r9]
 800a9aa:	f300 82b3 	bgt.w	800af14 <_vfprintf_r+0xf94>
 800a9ae:	f109 0908 	add.w	r9, r9, #8
 800a9b2:	e50f      	b.n	800a3d4 <_vfprintf_r+0x454>
 800a9b4:	aa23      	add	r2, sp, #140	; 0x8c
 800a9b6:	4641      	mov	r1, r8
 800a9b8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a9ba:	f003 fb45 	bl	800e048 <__sprint_r>
 800a9be:	2800      	cmp	r0, #0
 800a9c0:	f43f ad9d 	beq.w	800a4fe <_vfprintf_r+0x57e>
 800a9c4:	e42d      	b.n	800a222 <_vfprintf_r+0x2a2>
 800a9c6:	bf00      	nop
 800a9c8:	7fefffff 	.word	0x7fefffff
 800a9cc:	0800eb34 	.word	0x0800eb34
 800a9d0:	0800eb30 	.word	0x0800eb30
 800a9d4:	0800eb54 	.word	0x0800eb54
 800a9d8:	0800eb70 	.word	0x0800eb70
 800a9dc:	0800eba4 	.word	0x0800eba4
 800a9e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a9e2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a9e4:	2a01      	cmp	r2, #1
 800a9e6:	f104 0401 	add.w	r4, r4, #1
 800a9ea:	f103 0501 	add.w	r5, r3, #1
 800a9ee:	f109 0608 	add.w	r6, r9, #8
 800a9f2:	f340 8126 	ble.w	800ac42 <_vfprintf_r+0xcc2>
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a9fa:	f8c9 2000 	str.w	r2, [r9]
 800a9fe:	2d07      	cmp	r5, #7
 800aa00:	e9cd 5424 	strd	r5, r4, [sp, #144]	; 0x90
 800aa04:	f8c9 3004 	str.w	r3, [r9, #4]
 800aa08:	f300 81b5 	bgt.w	800ad76 <_vfprintf_r+0xdf6>
 800aa0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aa0e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800aa10:	3501      	adds	r5, #1
 800aa12:	441c      	add	r4, r3
 800aa14:	2d07      	cmp	r5, #7
 800aa16:	e9cd 5424 	strd	r5, r4, [sp, #144]	; 0x90
 800aa1a:	e9c6 2300 	strd	r2, r3, [r6]
 800aa1e:	f300 81b6 	bgt.w	800ad8e <_vfprintf_r+0xe0e>
 800aa22:	3608      	adds	r6, #8
 800aa24:	1c6f      	adds	r7, r5, #1
 800aa26:	970c      	str	r7, [sp, #48]	; 0x30
 800aa28:	9708      	str	r7, [sp, #32]
 800aa2a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800aa2c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800aa2e:	9912      	ldr	r1, [sp, #72]	; 0x48
 800aa30:	e9dd 0214 	ldrd	r0, r2, [sp, #80]	; 0x50
 800aa34:	3f01      	subs	r7, #1
 800aa36:	f106 0908 	add.w	r9, r6, #8
 800aa3a:	f7f6 fb65 	bl	8001108 <__aeabi_dcmpeq>
 800aa3e:	2800      	cmp	r0, #0
 800aa40:	f040 80c6 	bne.w	800abd0 <_vfprintf_r+0xc50>
 800aa44:	443c      	add	r4, r7
 800aa46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa48:	6077      	str	r7, [r6, #4]
 800aa4a:	9f08      	ldr	r7, [sp, #32]
 800aa4c:	9425      	str	r4, [sp, #148]	; 0x94
 800aa4e:	3301      	adds	r3, #1
 800aa50:	2f07      	cmp	r7, #7
 800aa52:	6033      	str	r3, [r6, #0]
 800aa54:	9724      	str	r7, [sp, #144]	; 0x90
 800aa56:	f300 8107 	bgt.w	800ac68 <_vfprintf_r+0xce8>
 800aa5a:	f106 0310 	add.w	r3, r6, #16
 800aa5e:	1caa      	adds	r2, r5, #2
 800aa60:	464e      	mov	r6, r9
 800aa62:	9208      	str	r2, [sp, #32]
 800aa64:	4699      	mov	r9, r3
 800aa66:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800aa68:	6072      	str	r2, [r6, #4]
 800aa6a:	4414      	add	r4, r2
 800aa6c:	9a08      	ldr	r2, [sp, #32]
 800aa6e:	9425      	str	r4, [sp, #148]	; 0x94
 800aa70:	ab1f      	add	r3, sp, #124	; 0x7c
 800aa72:	2a07      	cmp	r2, #7
 800aa74:	9224      	str	r2, [sp, #144]	; 0x90
 800aa76:	6033      	str	r3, [r6, #0]
 800aa78:	f77f acf9 	ble.w	800a46e <_vfprintf_r+0x4ee>
 800aa7c:	aa23      	add	r2, sp, #140	; 0x8c
 800aa7e:	4641      	mov	r1, r8
 800aa80:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aa82:	f003 fae1 	bl	800e048 <__sprint_r>
 800aa86:	2800      	cmp	r0, #0
 800aa88:	f47f abcb 	bne.w	800a222 <_vfprintf_r+0x2a2>
 800aa8c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800aa8e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800aa92:	e4ec      	b.n	800a46e <_vfprintf_r+0x4ee>
 800aa94:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
 800aa98:	aa30      	add	r2, sp, #192	; 0xc0
 800aa9a:	0923      	lsrs	r3, r4, #4
 800aa9c:	f004 000f 	and.w	r0, r4, #15
 800aaa0:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 800aaa4:	0929      	lsrs	r1, r5, #4
 800aaa6:	461c      	mov	r4, r3
 800aaa8:	460d      	mov	r5, r1
 800aaaa:	f81c 3000 	ldrb.w	r3, [ip, r0]
 800aaae:	f802 3d01 	strb.w	r3, [r2, #-1]!
 800aab2:	ea54 0305 	orrs.w	r3, r4, r5
 800aab6:	d1f0      	bne.n	800aa9a <_vfprintf_r+0xb1a>
 800aab8:	920e      	str	r2, [sp, #56]	; 0x38
 800aaba:	ab30      	add	r3, sp, #192	; 0xc0
 800aabc:	1a9b      	subs	r3, r3, r2
 800aabe:	930c      	str	r3, [sp, #48]	; 0x30
 800aac0:	e40a      	b.n	800a2d8 <_vfprintf_r+0x358>
 800aac2:	aa23      	add	r2, sp, #140	; 0x8c
 800aac4:	4641      	mov	r1, r8
 800aac6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aac8:	9319      	str	r3, [sp, #100]	; 0x64
 800aaca:	f003 fabd 	bl	800e048 <__sprint_r>
 800aace:	2800      	cmp	r0, #0
 800aad0:	f47f aba7 	bne.w	800a222 <_vfprintf_r+0x2a2>
 800aad4:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800aad6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aad8:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800aadc:	e467      	b.n	800a3ae <_vfprintf_r+0x42e>
 800aade:	aa23      	add	r2, sp, #140	; 0x8c
 800aae0:	4641      	mov	r1, r8
 800aae2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aae4:	f003 fab0 	bl	800e048 <__sprint_r>
 800aae8:	2800      	cmp	r0, #0
 800aaea:	f47f ab9a 	bne.w	800a222 <_vfprintf_r+0x2a2>
 800aaee:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800aaf0:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800aaf4:	e46a      	b.n	800a3cc <_vfprintf_r+0x44c>
 800aaf6:	f8cd b018 	str.w	fp, [sp, #24]
 800aafa:	2d00      	cmp	r5, #0
 800aafc:	bf08      	it	eq
 800aafe:	2c0a      	cmpeq	r4, #10
 800ab00:	f080 8160 	bcs.w	800adc4 <_vfprintf_r+0xe44>
 800ab04:	ab40      	add	r3, sp, #256	; 0x100
 800ab06:	3430      	adds	r4, #48	; 0x30
 800ab08:	f803 4d41 	strb.w	r4, [r3, #-65]!
 800ab0c:	930e      	str	r3, [sp, #56]	; 0x38
 800ab0e:	2301      	movs	r3, #1
 800ab10:	930c      	str	r3, [sp, #48]	; 0x30
 800ab12:	f7ff bbe1 	b.w	800a2d8 <_vfprintf_r+0x358>
 800ab16:	2302      	movs	r3, #2
 800ab18:	e52e      	b.n	800a578 <_vfprintf_r+0x5f8>
 800ab1a:	aa23      	add	r2, sp, #140	; 0x8c
 800ab1c:	4641      	mov	r1, r8
 800ab1e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ab20:	f003 fa92 	bl	800e048 <__sprint_r>
 800ab24:	2800      	cmp	r0, #0
 800ab26:	f47f ab7c 	bne.w	800a222 <_vfprintf_r+0x2a2>
 800ab2a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800ab2c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800ab30:	e489      	b.n	800a446 <_vfprintf_r+0x4c6>
 800ab32:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	f340 81fa 	ble.w	800af2e <_vfprintf_r+0xfae>
 800ab3a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	bfa8      	it	ge
 800ab42:	4613      	movge	r3, r2
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	461d      	mov	r5, r3
 800ab48:	dd0e      	ble.n	800ab68 <_vfprintf_r+0xbe8>
 800ab4a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ab4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab4e:	f8c9 2000 	str.w	r2, [r9]
 800ab52:	3301      	adds	r3, #1
 800ab54:	442c      	add	r4, r5
 800ab56:	2b07      	cmp	r3, #7
 800ab58:	9425      	str	r4, [sp, #148]	; 0x94
 800ab5a:	f8c9 5004 	str.w	r5, [r9, #4]
 800ab5e:	9324      	str	r3, [sp, #144]	; 0x90
 800ab60:	f300 82fb 	bgt.w	800b15a <_vfprintf_r+0x11da>
 800ab64:	f109 0908 	add.w	r9, r9, #8
 800ab68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ab6a:	2d00      	cmp	r5, #0
 800ab6c:	bfa8      	it	ge
 800ab6e:	1b5b      	subge	r3, r3, r5
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	461d      	mov	r5, r3
 800ab74:	f340 80a4 	ble.w	800acc0 <_vfprintf_r+0xd40>
 800ab78:	2b10      	cmp	r3, #16
 800ab7a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ab7c:	f8df b66c 	ldr.w	fp, [pc, #1644]	; 800b1ec <_vfprintf_r+0x126c>
 800ab80:	f340 826b 	ble.w	800b05a <_vfprintf_r+0x10da>
 800ab84:	465f      	mov	r7, fp
 800ab86:	2610      	movs	r6, #16
 800ab88:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800ab8c:	e005      	b.n	800ab9a <_vfprintf_r+0xc1a>
 800ab8e:	f109 0908 	add.w	r9, r9, #8
 800ab92:	3d10      	subs	r5, #16
 800ab94:	2d10      	cmp	r5, #16
 800ab96:	f340 825f 	ble.w	800b058 <_vfprintf_r+0x10d8>
 800ab9a:	3201      	adds	r2, #1
 800ab9c:	3410      	adds	r4, #16
 800ab9e:	2a07      	cmp	r2, #7
 800aba0:	e9cd 2424 	strd	r2, r4, [sp, #144]	; 0x90
 800aba4:	e9c9 7600 	strd	r7, r6, [r9]
 800aba8:	ddf1      	ble.n	800ab8e <_vfprintf_r+0xc0e>
 800abaa:	aa23      	add	r2, sp, #140	; 0x8c
 800abac:	4641      	mov	r1, r8
 800abae:	4658      	mov	r0, fp
 800abb0:	f003 fa4a 	bl	800e048 <__sprint_r>
 800abb4:	2800      	cmp	r0, #0
 800abb6:	f47f ab34 	bne.w	800a222 <_vfprintf_r+0x2a2>
 800abba:	e9dd 2424 	ldrd	r2, r4, [sp, #144]	; 0x90
 800abbe:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800abc2:	e7e6      	b.n	800ab92 <_vfprintf_r+0xc12>
 800abc4:	9b08      	ldr	r3, [sp, #32]
 800abc6:	930c      	str	r3, [sp, #48]	; 0x30
 800abc8:	ab30      	add	r3, sp, #192	; 0xc0
 800abca:	930e      	str	r3, [sp, #56]	; 0x38
 800abcc:	f7ff bb84 	b.w	800a2d8 <_vfprintf_r+0x358>
 800abd0:	2f00      	cmp	r7, #0
 800abd2:	f77f af48 	ble.w	800aa66 <_vfprintf_r+0xae6>
 800abd6:	2f10      	cmp	r7, #16
 800abd8:	f8df b610 	ldr.w	fp, [pc, #1552]	; 800b1ec <_vfprintf_r+0x126c>
 800abdc:	f340 83fe 	ble.w	800b3dc <_vfprintf_r+0x145c>
 800abe0:	4623      	mov	r3, r4
 800abe2:	f04f 0910 	mov.w	r9, #16
 800abe6:	465c      	mov	r4, fp
 800abe8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800abea:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800abee:	e005      	b.n	800abfc <_vfprintf_r+0xc7c>
 800abf0:	3608      	adds	r6, #8
 800abf2:	3f10      	subs	r7, #16
 800abf4:	2f10      	cmp	r7, #16
 800abf6:	f340 820e 	ble.w	800b016 <_vfprintf_r+0x1096>
 800abfa:	3501      	adds	r5, #1
 800abfc:	3310      	adds	r3, #16
 800abfe:	2d07      	cmp	r5, #7
 800ac00:	e9cd 5324 	strd	r5, r3, [sp, #144]	; 0x90
 800ac04:	e9c6 4900 	strd	r4, r9, [r6]
 800ac08:	ddf2      	ble.n	800abf0 <_vfprintf_r+0xc70>
 800ac0a:	aa23      	add	r2, sp, #140	; 0x8c
 800ac0c:	4641      	mov	r1, r8
 800ac0e:	4658      	mov	r0, fp
 800ac10:	f003 fa1a 	bl	800e048 <__sprint_r>
 800ac14:	2800      	cmp	r0, #0
 800ac16:	f47f ab04 	bne.w	800a222 <_vfprintf_r+0x2a2>
 800ac1a:	e9dd 5324 	ldrd	r5, r3, [sp, #144]	; 0x90
 800ac1e:	ae30      	add	r6, sp, #192	; 0xc0
 800ac20:	e7e7      	b.n	800abf2 <_vfprintf_r+0xc72>
 800ac22:	2500      	movs	r5, #0
 800ac24:	e498      	b.n	800a558 <_vfprintf_r+0x5d8>
 800ac26:	17e5      	asrs	r5, r4, #31
 800ac28:	2c00      	cmp	r4, #0
 800ac2a:	f175 0300 	sbcs.w	r3, r5, #0
 800ac2e:	f6bf ab33 	bge.w	800a298 <_vfprintf_r+0x318>
 800ac32:	272d      	movs	r7, #45	; 0x2d
 800ac34:	4264      	negs	r4, r4
 800ac36:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800ac3a:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800ac3e:	f7ff bb2d 	b.w	800a29c <_vfprintf_r+0x31c>
 800ac42:	9a06      	ldr	r2, [sp, #24]
 800ac44:	07d7      	lsls	r7, r2, #31
 800ac46:	f53f aed6 	bmi.w	800a9f6 <_vfprintf_r+0xa76>
 800ac4a:	2201      	movs	r2, #1
 800ac4c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ac4e:	f8c9 1000 	str.w	r1, [r9]
 800ac52:	2d07      	cmp	r5, #7
 800ac54:	e9cd 5424 	strd	r5, r4, [sp, #144]	; 0x90
 800ac58:	f8c9 2004 	str.w	r2, [r9, #4]
 800ac5c:	dc04      	bgt.n	800ac68 <_vfprintf_r+0xce8>
 800ac5e:	3302      	adds	r3, #2
 800ac60:	9308      	str	r3, [sp, #32]
 800ac62:	f109 0910 	add.w	r9, r9, #16
 800ac66:	e6fe      	b.n	800aa66 <_vfprintf_r+0xae6>
 800ac68:	aa23      	add	r2, sp, #140	; 0x8c
 800ac6a:	4641      	mov	r1, r8
 800ac6c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ac6e:	f003 f9eb 	bl	800e048 <__sprint_r>
 800ac72:	2800      	cmp	r0, #0
 800ac74:	f47f aad5 	bne.w	800a222 <_vfprintf_r+0x2a2>
 800ac78:	e9dd 3424 	ldrd	r3, r4, [sp, #144]	; 0x90
 800ac7c:	3301      	adds	r3, #1
 800ac7e:	9308      	str	r3, [sp, #32]
 800ac80:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
 800ac84:	ae30      	add	r6, sp, #192	; 0xc0
 800ac86:	e6ee      	b.n	800aa66 <_vfprintf_r+0xae6>
 800ac88:	aa23      	add	r2, sp, #140	; 0x8c
 800ac8a:	4641      	mov	r1, r8
 800ac8c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ac8e:	9319      	str	r3, [sp, #100]	; 0x64
 800ac90:	f003 f9da 	bl	800e048 <__sprint_r>
 800ac94:	2800      	cmp	r0, #0
 800ac96:	f47f aac4 	bne.w	800a222 <_vfprintf_r+0x2a2>
 800ac9a:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800ac9e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800aca0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aca2:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800aca6:	f7ff bb72 	b.w	800a38e <_vfprintf_r+0x40e>
 800acaa:	aa23      	add	r2, sp, #140	; 0x8c
 800acac:	4641      	mov	r1, r8
 800acae:	980a      	ldr	r0, [sp, #40]	; 0x28
 800acb0:	f003 f9ca 	bl	800e048 <__sprint_r>
 800acb4:	2800      	cmp	r0, #0
 800acb6:	f47f aab4 	bne.w	800a222 <_vfprintf_r+0x2a2>
 800acba:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800acbc:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800acc0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800acc2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800acc4:	4293      	cmp	r3, r2
 800acc6:	db02      	blt.n	800acce <_vfprintf_r+0xd4e>
 800acc8:	9a06      	ldr	r2, [sp, #24]
 800acca:	07d2      	lsls	r2, r2, #31
 800accc:	d50f      	bpl.n	800acee <_vfprintf_r+0xd6e>
 800acce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800acd0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800acd2:	f8c9 1000 	str.w	r1, [r9]
 800acd6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800acd8:	f8c9 1004 	str.w	r1, [r9, #4]
 800acdc:	3201      	adds	r2, #1
 800acde:	440c      	add	r4, r1
 800ace0:	2a07      	cmp	r2, #7
 800ace2:	9425      	str	r4, [sp, #148]	; 0x94
 800ace4:	9224      	str	r2, [sp, #144]	; 0x90
 800ace6:	f300 8244 	bgt.w	800b172 <_vfprintf_r+0x11f2>
 800acea:	f109 0908 	add.w	r9, r9, #8
 800acee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800acf0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800acf2:	1ad3      	subs	r3, r2, r3
 800acf4:	1a15      	subs	r5, r2, r0
 800acf6:	429d      	cmp	r5, r3
 800acf8:	bfa8      	it	ge
 800acfa:	461d      	movge	r5, r3
 800acfc:	2d00      	cmp	r5, #0
 800acfe:	dd0f      	ble.n	800ad20 <_vfprintf_r+0xda0>
 800ad00:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ad02:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ad04:	f8c9 5004 	str.w	r5, [r9, #4]
 800ad08:	3201      	adds	r2, #1
 800ad0a:	4401      	add	r1, r0
 800ad0c:	442c      	add	r4, r5
 800ad0e:	2a07      	cmp	r2, #7
 800ad10:	f8c9 1000 	str.w	r1, [r9]
 800ad14:	e9cd 2424 	strd	r2, r4, [sp, #144]	; 0x90
 800ad18:	f300 815f 	bgt.w	800afda <_vfprintf_r+0x105a>
 800ad1c:	f109 0908 	add.w	r9, r9, #8
 800ad20:	2d00      	cmp	r5, #0
 800ad22:	bfac      	ite	ge
 800ad24:	1b5d      	subge	r5, r3, r5
 800ad26:	461d      	movlt	r5, r3
 800ad28:	2d00      	cmp	r5, #0
 800ad2a:	f77f aba0 	ble.w	800a46e <_vfprintf_r+0x4ee>
 800ad2e:	2d10      	cmp	r5, #16
 800ad30:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ad32:	f8df b4b8 	ldr.w	fp, [pc, #1208]	; 800b1ec <_vfprintf_r+0x126c>
 800ad36:	dd3b      	ble.n	800adb0 <_vfprintf_r+0xe30>
 800ad38:	465f      	mov	r7, fp
 800ad3a:	2610      	movs	r6, #16
 800ad3c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800ad40:	e004      	b.n	800ad4c <_vfprintf_r+0xdcc>
 800ad42:	f109 0908 	add.w	r9, r9, #8
 800ad46:	3d10      	subs	r5, #16
 800ad48:	2d10      	cmp	r5, #16
 800ad4a:	dd30      	ble.n	800adae <_vfprintf_r+0xe2e>
 800ad4c:	3201      	adds	r2, #1
 800ad4e:	3410      	adds	r4, #16
 800ad50:	2a07      	cmp	r2, #7
 800ad52:	e9cd 2424 	strd	r2, r4, [sp, #144]	; 0x90
 800ad56:	e9c9 7600 	strd	r7, r6, [r9]
 800ad5a:	ddf2      	ble.n	800ad42 <_vfprintf_r+0xdc2>
 800ad5c:	aa23      	add	r2, sp, #140	; 0x8c
 800ad5e:	4641      	mov	r1, r8
 800ad60:	4658      	mov	r0, fp
 800ad62:	f003 f971 	bl	800e048 <__sprint_r>
 800ad66:	2800      	cmp	r0, #0
 800ad68:	f47f aa5b 	bne.w	800a222 <_vfprintf_r+0x2a2>
 800ad6c:	e9dd 2424 	ldrd	r2, r4, [sp, #144]	; 0x90
 800ad70:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800ad74:	e7e7      	b.n	800ad46 <_vfprintf_r+0xdc6>
 800ad76:	aa23      	add	r2, sp, #140	; 0x8c
 800ad78:	4641      	mov	r1, r8
 800ad7a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ad7c:	f003 f964 	bl	800e048 <__sprint_r>
 800ad80:	2800      	cmp	r0, #0
 800ad82:	f47f aa4e 	bne.w	800a222 <_vfprintf_r+0x2a2>
 800ad86:	e9dd 5424 	ldrd	r5, r4, [sp, #144]	; 0x90
 800ad8a:	ae30      	add	r6, sp, #192	; 0xc0
 800ad8c:	e63e      	b.n	800aa0c <_vfprintf_r+0xa8c>
 800ad8e:	aa23      	add	r2, sp, #140	; 0x8c
 800ad90:	4641      	mov	r1, r8
 800ad92:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ad94:	f003 f958 	bl	800e048 <__sprint_r>
 800ad98:	2800      	cmp	r0, #0
 800ad9a:	f47f aa42 	bne.w	800a222 <_vfprintf_r+0x2a2>
 800ad9e:	e9dd 5424 	ldrd	r5, r4, [sp, #144]	; 0x90
 800ada2:	ae30      	add	r6, sp, #192	; 0xc0
 800ada4:	e63e      	b.n	800aa24 <_vfprintf_r+0xaa4>
 800ada6:	2b01      	cmp	r3, #1
 800ada8:	f47f abf2 	bne.w	800a590 <_vfprintf_r+0x610>
 800adac:	e6aa      	b.n	800ab04 <_vfprintf_r+0xb84>
 800adae:	46bb      	mov	fp, r7
 800adb0:	3201      	adds	r2, #1
 800adb2:	442c      	add	r4, r5
 800adb4:	2a07      	cmp	r2, #7
 800adb6:	e9cd 2424 	strd	r2, r4, [sp, #144]	; 0x90
 800adba:	e9c9 b500 	strd	fp, r5, [r9]
 800adbe:	f77f ab54 	ble.w	800a46a <_vfprintf_r+0x4ea>
 800adc2:	e65b      	b.n	800aa7c <_vfprintf_r+0xafc>
 800adc4:	ab30      	add	r3, sp, #192	; 0xc0
 800adc6:	469b      	mov	fp, r3
 800adc8:	4620      	mov	r0, r4
 800adca:	4629      	mov	r1, r5
 800adcc:	220a      	movs	r2, #10
 800adce:	2300      	movs	r3, #0
 800add0:	f7f5 fa9c 	bl	800030c <__aeabi_uldivmod>
 800add4:	3230      	adds	r2, #48	; 0x30
 800add6:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 800adda:	4620      	mov	r0, r4
 800addc:	4629      	mov	r1, r5
 800adde:	2300      	movs	r3, #0
 800ade0:	220a      	movs	r2, #10
 800ade2:	f7f5 fa93 	bl	800030c <__aeabi_uldivmod>
 800ade6:	4604      	mov	r4, r0
 800ade8:	460d      	mov	r5, r1
 800adea:	ea54 0305 	orrs.w	r3, r4, r5
 800adee:	d1eb      	bne.n	800adc8 <_vfprintf_r+0xe48>
 800adf0:	465a      	mov	r2, fp
 800adf2:	ab30      	add	r3, sp, #192	; 0xc0
 800adf4:	1a9b      	subs	r3, r3, r2
 800adf6:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800adfa:	930c      	str	r3, [sp, #48]	; 0x30
 800adfc:	f7ff ba6c 	b.w	800a2d8 <_vfprintf_r+0x358>
 800ae00:	ab30      	add	r3, sp, #192	; 0xc0
 800ae02:	930e      	str	r3, [sp, #56]	; 0x38
 800ae04:	f7ff ba68 	b.w	800a2d8 <_vfprintf_r+0x358>
 800ae08:	f01b 0f10 	tst.w	fp, #16
 800ae0c:	d107      	bne.n	800ae1e <_vfprintf_r+0xe9e>
 800ae0e:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800ae12:	d004      	beq.n	800ae1e <_vfprintf_r+0xe9e>
 800ae14:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800ae18:	801a      	strh	r2, [r3, #0]
 800ae1a:	f7ff b8fa 	b.w	800a012 <_vfprintf_r+0x92>
 800ae1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae20:	601a      	str	r2, [r3, #0]
 800ae22:	f7ff b8f6 	b.w	800a012 <_vfprintf_r+0x92>
 800ae26:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800ae28:	4622      	mov	r2, r4
 800ae2a:	4620      	mov	r0, r4
 800ae2c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800ae2e:	4623      	mov	r3, r4
 800ae30:	4621      	mov	r1, r4
 800ae32:	f7f6 f99b 	bl	800116c <__aeabi_dcmpun>
 800ae36:	2800      	cmp	r0, #0
 800ae38:	f040 82a8 	bne.w	800b38c <_vfprintf_r+0x140c>
 800ae3c:	9a08      	ldr	r2, [sp, #32]
 800ae3e:	f026 0320 	bic.w	r3, r6, #32
 800ae42:	1c54      	adds	r4, r2, #1
 800ae44:	9307      	str	r3, [sp, #28]
 800ae46:	f000 80d7 	beq.w	800aff8 <_vfprintf_r+0x1078>
 800ae4a:	2b47      	cmp	r3, #71	; 0x47
 800ae4c:	d104      	bne.n	800ae58 <_vfprintf_r+0xed8>
 800ae4e:	2a00      	cmp	r2, #0
 800ae50:	4613      	mov	r3, r2
 800ae52:	bf08      	it	eq
 800ae54:	2301      	moveq	r3, #1
 800ae56:	9308      	str	r3, [sp, #32]
 800ae58:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 800ae5c:	9306      	str	r3, [sp, #24]
 800ae5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ae60:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800ae62:	1e1d      	subs	r5, r3, #0
 800ae64:	bfb6      	itet	lt
 800ae66:	f103 4500 	addlt.w	r5, r3, #2147483648	; 0x80000000
 800ae6a:	2300      	movge	r3, #0
 800ae6c:	232d      	movlt	r3, #45	; 0x2d
 800ae6e:	2e66      	cmp	r6, #102	; 0x66
 800ae70:	9319      	str	r3, [sp, #100]	; 0x64
 800ae72:	f000 8197 	beq.w	800b1a4 <_vfprintf_r+0x1224>
 800ae76:	2e46      	cmp	r6, #70	; 0x46
 800ae78:	f000 81fa 	beq.w	800b270 <_vfprintf_r+0x12f0>
 800ae7c:	9b07      	ldr	r3, [sp, #28]
 800ae7e:	2b45      	cmp	r3, #69	; 0x45
 800ae80:	463a      	mov	r2, r7
 800ae82:	462b      	mov	r3, r5
 800ae84:	f000 81d5 	beq.w	800b232 <_vfprintf_r+0x12b2>
 800ae88:	a821      	add	r0, sp, #132	; 0x84
 800ae8a:	a91e      	add	r1, sp, #120	; 0x78
 800ae8c:	9c08      	ldr	r4, [sp, #32]
 800ae8e:	9004      	str	r0, [sp, #16]
 800ae90:	9103      	str	r1, [sp, #12]
 800ae92:	a81d      	add	r0, sp, #116	; 0x74
 800ae94:	2102      	movs	r1, #2
 800ae96:	9002      	str	r0, [sp, #8]
 800ae98:	9401      	str	r4, [sp, #4]
 800ae9a:	9100      	str	r1, [sp, #0]
 800ae9c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ae9e:	f000 fc2b 	bl	800b6f8 <_dtoa_r>
 800aea2:	2e67      	cmp	r6, #103	; 0x67
 800aea4:	900e      	str	r0, [sp, #56]	; 0x38
 800aea6:	f040 82d6 	bne.w	800b456 <_vfprintf_r+0x14d6>
 800aeaa:	f01b 0f01 	tst.w	fp, #1
 800aeae:	f000 80f6 	beq.w	800b09e <_vfprintf_r+0x111e>
 800aeb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aeb4:	9a08      	ldr	r2, [sp, #32]
 800aeb6:	189c      	adds	r4, r3, r2
 800aeb8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800aeba:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800aebc:	4638      	mov	r0, r7
 800aebe:	4629      	mov	r1, r5
 800aec0:	f7f6 f922 	bl	8001108 <__aeabi_dcmpeq>
 800aec4:	2800      	cmp	r0, #0
 800aec6:	f000 8161 	beq.w	800b18c <_vfprintf_r+0x120c>
 800aeca:	4623      	mov	r3, r4
 800aecc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aece:	1a9b      	subs	r3, r3, r2
 800aed0:	9310      	str	r3, [sp, #64]	; 0x40
 800aed2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aed4:	930f      	str	r3, [sp, #60]	; 0x3c
 800aed6:	9b07      	ldr	r3, [sp, #28]
 800aed8:	2b47      	cmp	r3, #71	; 0x47
 800aeda:	f000 80e9 	beq.w	800b0b0 <_vfprintf_r+0x1130>
 800aede:	2e66      	cmp	r6, #102	; 0x66
 800aee0:	f040 80ed 	bne.w	800b0be <_vfprintf_r+0x113e>
 800aee4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	9b08      	ldr	r3, [sp, #32]
 800aeea:	f340 826f 	ble.w	800b3cc <_vfprintf_r+0x144c>
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	f040 8262 	bne.w	800b3b8 <_vfprintf_r+0x1438>
 800aef4:	f01b 0f01 	tst.w	fp, #1
 800aef8:	f040 825e 	bne.w	800b3b8 <_vfprintf_r+0x1438>
 800aefc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aefe:	9307      	str	r3, [sp, #28]
 800af00:	930c      	str	r3, [sp, #48]	; 0x30
 800af02:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800af04:	2b00      	cmp	r3, #0
 800af06:	f040 8110 	bne.w	800b12a <_vfprintf_r+0x11aa>
 800af0a:	9308      	str	r3, [sp, #32]
 800af0c:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800af10:	f7ff b9ea 	b.w	800a2e8 <_vfprintf_r+0x368>
 800af14:	aa23      	add	r2, sp, #140	; 0x8c
 800af16:	4641      	mov	r1, r8
 800af18:	980a      	ldr	r0, [sp, #40]	; 0x28
 800af1a:	f003 f895 	bl	800e048 <__sprint_r>
 800af1e:	2800      	cmp	r0, #0
 800af20:	f47f a97f 	bne.w	800a222 <_vfprintf_r+0x2a2>
 800af24:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800af26:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800af2a:	f7ff ba53 	b.w	800a3d4 <_vfprintf_r+0x454>
 800af2e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800af30:	49ac      	ldr	r1, [pc, #688]	; (800b1e4 <_vfprintf_r+0x1264>)
 800af32:	f8c9 1000 	str.w	r1, [r9]
 800af36:	3201      	adds	r2, #1
 800af38:	3401      	adds	r4, #1
 800af3a:	2101      	movs	r1, #1
 800af3c:	2a07      	cmp	r2, #7
 800af3e:	e9cd 2424 	strd	r2, r4, [sp, #144]	; 0x90
 800af42:	f8c9 1004 	str.w	r1, [r9, #4]
 800af46:	dc3b      	bgt.n	800afc0 <_vfprintf_r+0x1040>
 800af48:	f109 0908 	add.w	r9, r9, #8
 800af4c:	b92b      	cbnz	r3, 800af5a <_vfprintf_r+0xfda>
 800af4e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800af50:	b91a      	cbnz	r2, 800af5a <_vfprintf_r+0xfda>
 800af52:	9a06      	ldr	r2, [sp, #24]
 800af54:	07d1      	lsls	r1, r2, #31
 800af56:	f57f aa8a 	bpl.w	800a46e <_vfprintf_r+0x4ee>
 800af5a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800af5c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800af5e:	f8c9 1000 	str.w	r1, [r9]
 800af62:	9911      	ldr	r1, [sp, #68]	; 0x44
 800af64:	f8c9 1004 	str.w	r1, [r9, #4]
 800af68:	3201      	adds	r2, #1
 800af6a:	440c      	add	r4, r1
 800af6c:	2a07      	cmp	r2, #7
 800af6e:	9425      	str	r4, [sp, #148]	; 0x94
 800af70:	9224      	str	r2, [sp, #144]	; 0x90
 800af72:	f300 813d 	bgt.w	800b1f0 <_vfprintf_r+0x1270>
 800af76:	f109 0908 	add.w	r9, r9, #8
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	f2c0 8194 	blt.w	800b2a8 <_vfprintf_r+0x1328>
 800af80:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800af82:	990e      	ldr	r1, [sp, #56]	; 0x38
 800af84:	3201      	adds	r2, #1
 800af86:	441c      	add	r4, r3
 800af88:	2a07      	cmp	r2, #7
 800af8a:	e9cd 2424 	strd	r2, r4, [sp, #144]	; 0x90
 800af8e:	e9c9 1300 	strd	r1, r3, [r9]
 800af92:	f77f aa6a 	ble.w	800a46a <_vfprintf_r+0x4ea>
 800af96:	e571      	b.n	800aa7c <_vfprintf_r+0xafc>
 800af98:	aa23      	add	r2, sp, #140	; 0x8c
 800af9a:	4641      	mov	r1, r8
 800af9c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800af9e:	f003 f853 	bl	800e048 <__sprint_r>
 800afa2:	2800      	cmp	r0, #0
 800afa4:	f47f a93d 	bne.w	800a222 <_vfprintf_r+0x2a2>
 800afa8:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800afac:	e483      	b.n	800a8b6 <_vfprintf_r+0x936>
 800afae:	4240      	negs	r0, r0
 800afb0:	900b      	str	r0, [sp, #44]	; 0x2c
 800afb2:	930d      	str	r3, [sp, #52]	; 0x34
 800afb4:	e425      	b.n	800a802 <_vfprintf_r+0x882>
 800afb6:	272d      	movs	r7, #45	; 0x2d
 800afb8:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800afbc:	f7ff bbc3 	b.w	800a746 <_vfprintf_r+0x7c6>
 800afc0:	aa23      	add	r2, sp, #140	; 0x8c
 800afc2:	4641      	mov	r1, r8
 800afc4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800afc6:	f003 f83f 	bl	800e048 <__sprint_r>
 800afca:	2800      	cmp	r0, #0
 800afcc:	f47f a929 	bne.w	800a222 <_vfprintf_r+0x2a2>
 800afd0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800afd2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800afd4:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800afd8:	e7b8      	b.n	800af4c <_vfprintf_r+0xfcc>
 800afda:	aa23      	add	r2, sp, #140	; 0x8c
 800afdc:	4641      	mov	r1, r8
 800afde:	980a      	ldr	r0, [sp, #40]	; 0x28
 800afe0:	f003 f832 	bl	800e048 <__sprint_r>
 800afe4:	2800      	cmp	r0, #0
 800afe6:	f47f a91c 	bne.w	800a222 <_vfprintf_r+0x2a2>
 800afea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800afec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800afee:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800aff0:	1ad3      	subs	r3, r2, r3
 800aff2:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800aff6:	e693      	b.n	800ad20 <_vfprintf_r+0xda0>
 800aff8:	2306      	movs	r3, #6
 800affa:	9308      	str	r3, [sp, #32]
 800affc:	e72c      	b.n	800ae58 <_vfprintf_r+0xed8>
 800affe:	9b08      	ldr	r3, [sp, #32]
 800b000:	9307      	str	r3, [sp, #28]
 800b002:	930c      	str	r3, [sp, #48]	; 0x30
 800b004:	9008      	str	r0, [sp, #32]
 800b006:	940d      	str	r4, [sp, #52]	; 0x34
 800b008:	f8cd b018 	str.w	fp, [sp, #24]
 800b00c:	900f      	str	r0, [sp, #60]	; 0x3c
 800b00e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800b012:	f7ff b969 	b.w	800a2e8 <_vfprintf_r+0x368>
 800b016:	46a3      	mov	fp, r4
 800b018:	461c      	mov	r4, r3
 800b01a:	1c6b      	adds	r3, r5, #1
 800b01c:	9308      	str	r3, [sp, #32]
 800b01e:	f106 0208 	add.w	r2, r6, #8
 800b022:	9b08      	ldr	r3, [sp, #32]
 800b024:	9324      	str	r3, [sp, #144]	; 0x90
 800b026:	443c      	add	r4, r7
 800b028:	2b07      	cmp	r3, #7
 800b02a:	9425      	str	r4, [sp, #148]	; 0x94
 800b02c:	e9c6 b700 	strd	fp, r7, [r6]
 800b030:	f73f ae1a 	bgt.w	800ac68 <_vfprintf_r+0xce8>
 800b034:	3301      	adds	r3, #1
 800b036:	9308      	str	r3, [sp, #32]
 800b038:	f102 0908 	add.w	r9, r2, #8
 800b03c:	4616      	mov	r6, r2
 800b03e:	e512      	b.n	800aa66 <_vfprintf_r+0xae6>
 800b040:	aa23      	add	r2, sp, #140	; 0x8c
 800b042:	4641      	mov	r1, r8
 800b044:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b046:	f002 ffff 	bl	800e048 <__sprint_r>
 800b04a:	2800      	cmp	r0, #0
 800b04c:	f47f a8e9 	bne.w	800a222 <_vfprintf_r+0x2a2>
 800b050:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800b052:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b056:	e447      	b.n	800a8e8 <_vfprintf_r+0x968>
 800b058:	46bb      	mov	fp, r7
 800b05a:	3201      	adds	r2, #1
 800b05c:	442c      	add	r4, r5
 800b05e:	2a07      	cmp	r2, #7
 800b060:	e9cd 2424 	strd	r2, r4, [sp, #144]	; 0x90
 800b064:	e9c9 b500 	strd	fp, r5, [r9]
 800b068:	f73f ae1f 	bgt.w	800acaa <_vfprintf_r+0xd2a>
 800b06c:	f109 0908 	add.w	r9, r9, #8
 800b070:	e626      	b.n	800acc0 <_vfprintf_r+0xd40>
 800b072:	9b08      	ldr	r3, [sp, #32]
 800b074:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800b076:	9708      	str	r7, [sp, #32]
 800b078:	2b06      	cmp	r3, #6
 800b07a:	bf28      	it	cs
 800b07c:	2306      	movcs	r3, #6
 800b07e:	9307      	str	r3, [sp, #28]
 800b080:	930c      	str	r3, [sp, #48]	; 0x30
 800b082:	4b59      	ldr	r3, [pc, #356]	; (800b1e8 <_vfprintf_r+0x1268>)
 800b084:	940d      	str	r4, [sp, #52]	; 0x34
 800b086:	f8cd b018 	str.w	fp, [sp, #24]
 800b08a:	970f      	str	r7, [sp, #60]	; 0x3c
 800b08c:	930e      	str	r3, [sp, #56]	; 0x38
 800b08e:	f7ff b92b 	b.w	800a2e8 <_vfprintf_r+0x368>
 800b092:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b094:	ab30      	add	r3, sp, #192	; 0xc0
 800b096:	1a9b      	subs	r3, r3, r2
 800b098:	930c      	str	r3, [sp, #48]	; 0x30
 800b09a:	f7ff b91d 	b.w	800a2d8 <_vfprintf_r+0x358>
 800b09e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b0a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0a2:	920f      	str	r2, [sp, #60]	; 0x3c
 800b0a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b0a6:	1a9b      	subs	r3, r3, r2
 800b0a8:	9310      	str	r3, [sp, #64]	; 0x40
 800b0aa:	9b07      	ldr	r3, [sp, #28]
 800b0ac:	2b47      	cmp	r3, #71	; 0x47
 800b0ae:	d106      	bne.n	800b0be <_vfprintf_r+0x113e>
 800b0b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b0b2:	1cda      	adds	r2, r3, #3
 800b0b4:	db02      	blt.n	800b0bc <_vfprintf_r+0x113c>
 800b0b6:	9a08      	ldr	r2, [sp, #32]
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	da3d      	bge.n	800b138 <_vfprintf_r+0x11b8>
 800b0bc:	3e02      	subs	r6, #2
 800b0be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b0c0:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
 800b0c4:	3b01      	subs	r3, #1
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	931d      	str	r3, [sp, #116]	; 0x74
 800b0ca:	bfbd      	ittte	lt
 800b0cc:	9b0f      	ldrlt	r3, [sp, #60]	; 0x3c
 800b0ce:	f1c3 0301 	rsblt	r3, r3, #1
 800b0d2:	222d      	movlt	r2, #45	; 0x2d
 800b0d4:	222b      	movge	r2, #43	; 0x2b
 800b0d6:	2b09      	cmp	r3, #9
 800b0d8:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
 800b0dc:	f300 8114 	bgt.w	800b308 <_vfprintf_r+0x1388>
 800b0e0:	3330      	adds	r3, #48	; 0x30
 800b0e2:	2230      	movs	r2, #48	; 0x30
 800b0e4:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 800b0e8:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
 800b0ec:	ab20      	add	r3, sp, #128	; 0x80
 800b0ee:	aa1f      	add	r2, sp, #124	; 0x7c
 800b0f0:	1a9b      	subs	r3, r3, r2
 800b0f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b0f4:	9318      	str	r3, [sp, #96]	; 0x60
 800b0f6:	2a01      	cmp	r2, #1
 800b0f8:	4413      	add	r3, r2
 800b0fa:	930c      	str	r3, [sp, #48]	; 0x30
 800b0fc:	f340 8152 	ble.w	800b3a4 <_vfprintf_r+0x1424>
 800b100:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b102:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b104:	4413      	add	r3, r2
 800b106:	930c      	str	r3, [sp, #48]	; 0x30
 800b108:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b10c:	9307      	str	r3, [sp, #28]
 800b10e:	2300      	movs	r3, #0
 800b110:	930f      	str	r3, [sp, #60]	; 0x3c
 800b112:	e6f6      	b.n	800af02 <_vfprintf_r+0xf82>
 800b114:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b116:	9508      	str	r5, [sp, #32]
 800b118:	f7f5 fb12 	bl	8000740 <strlen>
 800b11c:	f8cd b018 	str.w	fp, [sp, #24]
 800b120:	e9cd 040c 	strd	r0, r4, [sp, #48]	; 0x30
 800b124:	4603      	mov	r3, r0
 800b126:	f7ff bab7 	b.w	800a698 <_vfprintf_r+0x718>
 800b12a:	272d      	movs	r7, #45	; 0x2d
 800b12c:	2300      	movs	r3, #0
 800b12e:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800b132:	9308      	str	r3, [sp, #32]
 800b134:	f7ff b8d9 	b.w	800a2ea <_vfprintf_r+0x36a>
 800b138:	e9dd 310f 	ldrd	r3, r1, [sp, #60]	; 0x3c
 800b13c:	428b      	cmp	r3, r1
 800b13e:	db65      	blt.n	800b20c <_vfprintf_r+0x128c>
 800b140:	f01b 0f01 	tst.w	fp, #1
 800b144:	f000 811c 	beq.w	800b380 <_vfprintf_r+0x1400>
 800b148:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b14a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b14c:	4413      	add	r3, r2
 800b14e:	930c      	str	r3, [sp, #48]	; 0x30
 800b150:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b154:	9307      	str	r3, [sp, #28]
 800b156:	2667      	movs	r6, #103	; 0x67
 800b158:	e6d3      	b.n	800af02 <_vfprintf_r+0xf82>
 800b15a:	aa23      	add	r2, sp, #140	; 0x8c
 800b15c:	4641      	mov	r1, r8
 800b15e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b160:	f002 ff72 	bl	800e048 <__sprint_r>
 800b164:	2800      	cmp	r0, #0
 800b166:	f47f a85c 	bne.w	800a222 <_vfprintf_r+0x2a2>
 800b16a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800b16c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b170:	e4fa      	b.n	800ab68 <_vfprintf_r+0xbe8>
 800b172:	aa23      	add	r2, sp, #140	; 0x8c
 800b174:	4641      	mov	r1, r8
 800b176:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b178:	f002 ff66 	bl	800e048 <__sprint_r>
 800b17c:	2800      	cmp	r0, #0
 800b17e:	f47f a850 	bne.w	800a222 <_vfprintf_r+0x2a2>
 800b182:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b184:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800b186:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b18a:	e5b0      	b.n	800acee <_vfprintf_r+0xd6e>
 800b18c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b18e:	42a3      	cmp	r3, r4
 800b190:	f4bf ae9c 	bcs.w	800aecc <_vfprintf_r+0xf4c>
 800b194:	2130      	movs	r1, #48	; 0x30
 800b196:	1c5a      	adds	r2, r3, #1
 800b198:	9221      	str	r2, [sp, #132]	; 0x84
 800b19a:	7019      	strb	r1, [r3, #0]
 800b19c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b19e:	429c      	cmp	r4, r3
 800b1a0:	d8f9      	bhi.n	800b196 <_vfprintf_r+0x1216>
 800b1a2:	e693      	b.n	800aecc <_vfprintf_r+0xf4c>
 800b1a4:	a821      	add	r0, sp, #132	; 0x84
 800b1a6:	a91e      	add	r1, sp, #120	; 0x78
 800b1a8:	9c08      	ldr	r4, [sp, #32]
 800b1aa:	9004      	str	r0, [sp, #16]
 800b1ac:	9103      	str	r1, [sp, #12]
 800b1ae:	a81d      	add	r0, sp, #116	; 0x74
 800b1b0:	2103      	movs	r1, #3
 800b1b2:	462b      	mov	r3, r5
 800b1b4:	9401      	str	r4, [sp, #4]
 800b1b6:	9002      	str	r0, [sp, #8]
 800b1b8:	463a      	mov	r2, r7
 800b1ba:	9100      	str	r1, [sp, #0]
 800b1bc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b1be:	f000 fa9b 	bl	800b6f8 <_dtoa_r>
 800b1c2:	4623      	mov	r3, r4
 800b1c4:	900e      	str	r0, [sp, #56]	; 0x38
 800b1c6:	1904      	adds	r4, r0, r4
 800b1c8:	930c      	str	r3, [sp, #48]	; 0x30
 800b1ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1cc:	781b      	ldrb	r3, [r3, #0]
 800b1ce:	2b30      	cmp	r3, #48	; 0x30
 800b1d0:	f000 80c7 	beq.w	800b362 <_vfprintf_r+0x13e2>
 800b1d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b1d6:	441c      	add	r4, r3
 800b1d8:	e66e      	b.n	800aeb8 <_vfprintf_r+0xf38>
 800b1da:	2300      	movs	r3, #0
 800b1dc:	9308      	str	r3, [sp, #32]
 800b1de:	f7fe bf4f 	b.w	800a080 <_vfprintf_r+0x100>
 800b1e2:	bf00      	nop
 800b1e4:	0800eb70 	.word	0x0800eb70
 800b1e8:	0800eb68 	.word	0x0800eb68
 800b1ec:	0800eba4 	.word	0x0800eba4
 800b1f0:	aa23      	add	r2, sp, #140	; 0x8c
 800b1f2:	4641      	mov	r1, r8
 800b1f4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b1f6:	f002 ff27 	bl	800e048 <__sprint_r>
 800b1fa:	2800      	cmp	r0, #0
 800b1fc:	f47f a811 	bne.w	800a222 <_vfprintf_r+0x2a2>
 800b200:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b202:	e9dd 2424 	ldrd	r2, r4, [sp, #144]	; 0x90
 800b206:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b20a:	e6b6      	b.n	800af7a <_vfprintf_r+0xffa>
 800b20c:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 800b210:	4413      	add	r3, r2
 800b212:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b214:	930c      	str	r3, [sp, #48]	; 0x30
 800b216:	2a00      	cmp	r2, #0
 800b218:	dc06      	bgt.n	800b228 <_vfprintf_r+0x12a8>
 800b21a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b21c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b21e:	f1c3 0301 	rsb	r3, r3, #1
 800b222:	441a      	add	r2, r3
 800b224:	4613      	mov	r3, r2
 800b226:	920c      	str	r2, [sp, #48]	; 0x30
 800b228:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b22c:	9307      	str	r3, [sp, #28]
 800b22e:	2667      	movs	r6, #103	; 0x67
 800b230:	e667      	b.n	800af02 <_vfprintf_r+0xf82>
 800b232:	9908      	ldr	r1, [sp, #32]
 800b234:	3101      	adds	r1, #1
 800b236:	460c      	mov	r4, r1
 800b238:	910c      	str	r1, [sp, #48]	; 0x30
 800b23a:	a821      	add	r0, sp, #132	; 0x84
 800b23c:	a91e      	add	r1, sp, #120	; 0x78
 800b23e:	9004      	str	r0, [sp, #16]
 800b240:	9103      	str	r1, [sp, #12]
 800b242:	a81d      	add	r0, sp, #116	; 0x74
 800b244:	2102      	movs	r1, #2
 800b246:	9002      	str	r0, [sp, #8]
 800b248:	9401      	str	r4, [sp, #4]
 800b24a:	9100      	str	r1, [sp, #0]
 800b24c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b24e:	f000 fa53 	bl	800b6f8 <_dtoa_r>
 800b252:	900e      	str	r0, [sp, #56]	; 0x38
 800b254:	2e47      	cmp	r6, #71	; 0x47
 800b256:	f040 80e6 	bne.w	800b426 <_vfprintf_r+0x14a6>
 800b25a:	f01b 0f01 	tst.w	fp, #1
 800b25e:	f000 80db 	beq.w	800b418 <_vfprintf_r+0x1498>
 800b262:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b264:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b266:	2e46      	cmp	r6, #70	; 0x46
 800b268:	eb03 0402 	add.w	r4, r3, r2
 800b26c:	d0ad      	beq.n	800b1ca <_vfprintf_r+0x124a>
 800b26e:	e623      	b.n	800aeb8 <_vfprintf_r+0xf38>
 800b270:	a821      	add	r0, sp, #132	; 0x84
 800b272:	a91e      	add	r1, sp, #120	; 0x78
 800b274:	9c08      	ldr	r4, [sp, #32]
 800b276:	9004      	str	r0, [sp, #16]
 800b278:	9103      	str	r1, [sp, #12]
 800b27a:	a81d      	add	r0, sp, #116	; 0x74
 800b27c:	2103      	movs	r1, #3
 800b27e:	9002      	str	r0, [sp, #8]
 800b280:	463a      	mov	r2, r7
 800b282:	462b      	mov	r3, r5
 800b284:	9401      	str	r4, [sp, #4]
 800b286:	9100      	str	r1, [sp, #0]
 800b288:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b28a:	f000 fa35 	bl	800b6f8 <_dtoa_r>
 800b28e:	940c      	str	r4, [sp, #48]	; 0x30
 800b290:	900e      	str	r0, [sp, #56]	; 0x38
 800b292:	e7e6      	b.n	800b262 <_vfprintf_r+0x12e2>
 800b294:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b296:	aa23      	add	r2, sp, #140	; 0x8c
 800b298:	4641      	mov	r1, r8
 800b29a:	f002 fed5 	bl	800e048 <__sprint_r>
 800b29e:	2800      	cmp	r0, #0
 800b2a0:	f43e afbd 	beq.w	800a21e <_vfprintf_r+0x29e>
 800b2a4:	f7fe bfbd 	b.w	800a222 <_vfprintf_r+0x2a2>
 800b2a8:	425d      	negs	r5, r3
 800b2aa:	3310      	adds	r3, #16
 800b2ac:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 800b480 <_vfprintf_r+0x1500>
 800b2b0:	da1f      	bge.n	800b2f2 <_vfprintf_r+0x1372>
 800b2b2:	465f      	mov	r7, fp
 800b2b4:	2610      	movs	r6, #16
 800b2b6:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800b2ba:	e004      	b.n	800b2c6 <_vfprintf_r+0x1346>
 800b2bc:	f109 0908 	add.w	r9, r9, #8
 800b2c0:	3d10      	subs	r5, #16
 800b2c2:	2d10      	cmp	r5, #16
 800b2c4:	dd14      	ble.n	800b2f0 <_vfprintf_r+0x1370>
 800b2c6:	3201      	adds	r2, #1
 800b2c8:	3410      	adds	r4, #16
 800b2ca:	2a07      	cmp	r2, #7
 800b2cc:	e9cd 2424 	strd	r2, r4, [sp, #144]	; 0x90
 800b2d0:	e9c9 7600 	strd	r7, r6, [r9]
 800b2d4:	ddf2      	ble.n	800b2bc <_vfprintf_r+0x133c>
 800b2d6:	aa23      	add	r2, sp, #140	; 0x8c
 800b2d8:	4641      	mov	r1, r8
 800b2da:	4658      	mov	r0, fp
 800b2dc:	f002 feb4 	bl	800e048 <__sprint_r>
 800b2e0:	2800      	cmp	r0, #0
 800b2e2:	f47e af9e 	bne.w	800a222 <_vfprintf_r+0x2a2>
 800b2e6:	e9dd 2424 	ldrd	r2, r4, [sp, #144]	; 0x90
 800b2ea:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b2ee:	e7e7      	b.n	800b2c0 <_vfprintf_r+0x1340>
 800b2f0:	46bb      	mov	fp, r7
 800b2f2:	3201      	adds	r2, #1
 800b2f4:	442c      	add	r4, r5
 800b2f6:	2a07      	cmp	r2, #7
 800b2f8:	e9cd 2424 	strd	r2, r4, [sp, #144]	; 0x90
 800b2fc:	e9c9 b500 	strd	fp, r5, [r9]
 800b300:	dc7d      	bgt.n	800b3fe <_vfprintf_r+0x147e>
 800b302:	f109 0908 	add.w	r9, r9, #8
 800b306:	e63b      	b.n	800af80 <_vfprintf_r+0x1000>
 800b308:	f10d 048b 	add.w	r4, sp, #139	; 0x8b
 800b30c:	4620      	mov	r0, r4
 800b30e:	4d59      	ldr	r5, [pc, #356]	; (800b474 <_vfprintf_r+0x14f4>)
 800b310:	e000      	b.n	800b314 <_vfprintf_r+0x1394>
 800b312:	4610      	mov	r0, r2
 800b314:	fba5 1203 	umull	r1, r2, r5, r3
 800b318:	08d2      	lsrs	r2, r2, #3
 800b31a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800b31e:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 800b322:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b326:	4613      	mov	r3, r2
 800b328:	2b09      	cmp	r3, #9
 800b32a:	f800 1c01 	strb.w	r1, [r0, #-1]
 800b32e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800b332:	dcee      	bgt.n	800b312 <_vfprintf_r+0x1392>
 800b334:	3330      	adds	r3, #48	; 0x30
 800b336:	3802      	subs	r0, #2
 800b338:	b2d9      	uxtb	r1, r3
 800b33a:	4284      	cmp	r4, r0
 800b33c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b340:	d976      	bls.n	800b430 <_vfprintf_r+0x14b0>
 800b342:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
 800b346:	4613      	mov	r3, r2
 800b348:	e001      	b.n	800b34e <_vfprintf_r+0x13ce>
 800b34a:	f813 1b01 	ldrb.w	r1, [r3], #1
 800b34e:	f800 1b01 	strb.w	r1, [r0], #1
 800b352:	429c      	cmp	r4, r3
 800b354:	d1f9      	bne.n	800b34a <_vfprintf_r+0x13ca>
 800b356:	ab23      	add	r3, sp, #140	; 0x8c
 800b358:	1a9b      	subs	r3, r3, r2
 800b35a:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
 800b35e:	4413      	add	r3, r2
 800b360:	e6c5      	b.n	800b0ee <_vfprintf_r+0x116e>
 800b362:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b364:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b366:	4638      	mov	r0, r7
 800b368:	4629      	mov	r1, r5
 800b36a:	f7f5 fecd 	bl	8001108 <__aeabi_dcmpeq>
 800b36e:	2800      	cmp	r0, #0
 800b370:	f47f af30 	bne.w	800b1d4 <_vfprintf_r+0x1254>
 800b374:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b376:	f1c3 0301 	rsb	r3, r3, #1
 800b37a:	931d      	str	r3, [sp, #116]	; 0x74
 800b37c:	441c      	add	r4, r3
 800b37e:	e59b      	b.n	800aeb8 <_vfprintf_r+0xf38>
 800b380:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800b384:	9207      	str	r2, [sp, #28]
 800b386:	930c      	str	r3, [sp, #48]	; 0x30
 800b388:	2667      	movs	r6, #103	; 0x67
 800b38a:	e5ba      	b.n	800af02 <_vfprintf_r+0xf82>
 800b38c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b38e:	4a3a      	ldr	r2, [pc, #232]	; (800b478 <_vfprintf_r+0x14f8>)
 800b390:	2b00      	cmp	r3, #0
 800b392:	bfb6      	itet	lt
 800b394:	272d      	movlt	r7, #45	; 0x2d
 800b396:	f89d 706f 	ldrbge.w	r7, [sp, #111]	; 0x6f
 800b39a:	f88d 706f 	strblt.w	r7, [sp, #111]	; 0x6f
 800b39e:	4b37      	ldr	r3, [pc, #220]	; (800b47c <_vfprintf_r+0x14fc>)
 800b3a0:	f7ff b9d3 	b.w	800a74a <_vfprintf_r+0x7ca>
 800b3a4:	f01b 0301 	ands.w	r3, fp, #1
 800b3a8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b3aa:	f47f aea9 	bne.w	800b100 <_vfprintf_r+0x1180>
 800b3ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b3b4:	9307      	str	r3, [sp, #28]
 800b3b6:	e5a4      	b.n	800af02 <_vfprintf_r+0xf82>
 800b3b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b3ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b3bc:	4413      	add	r3, r2
 800b3be:	9a08      	ldr	r2, [sp, #32]
 800b3c0:	441a      	add	r2, r3
 800b3c2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b3c6:	920c      	str	r2, [sp, #48]	; 0x30
 800b3c8:	9307      	str	r3, [sp, #28]
 800b3ca:	e59a      	b.n	800af02 <_vfprintf_r+0xf82>
 800b3cc:	b943      	cbnz	r3, 800b3e0 <_vfprintf_r+0x1460>
 800b3ce:	f01b 0f01 	tst.w	fp, #1
 800b3d2:	d105      	bne.n	800b3e0 <_vfprintf_r+0x1460>
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	9307      	str	r3, [sp, #28]
 800b3d8:	930c      	str	r3, [sp, #48]	; 0x30
 800b3da:	e592      	b.n	800af02 <_vfprintf_r+0xf82>
 800b3dc:	464a      	mov	r2, r9
 800b3de:	e620      	b.n	800b022 <_vfprintf_r+0x10a2>
 800b3e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b3e2:	3301      	adds	r3, #1
 800b3e4:	e7eb      	b.n	800b3be <_vfprintf_r+0x143e>
 800b3e6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800b3e8:	f89a 6001 	ldrb.w	r6, [sl, #1]
 800b3ec:	6823      	ldr	r3, [r4, #0]
 800b3ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b3f2:	9308      	str	r3, [sp, #32]
 800b3f4:	1d23      	adds	r3, r4, #4
 800b3f6:	4682      	mov	sl, r0
 800b3f8:	930d      	str	r3, [sp, #52]	; 0x34
 800b3fa:	f7fe be3f 	b.w	800a07c <_vfprintf_r+0xfc>
 800b3fe:	aa23      	add	r2, sp, #140	; 0x8c
 800b400:	4641      	mov	r1, r8
 800b402:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b404:	f002 fe20 	bl	800e048 <__sprint_r>
 800b408:	2800      	cmp	r0, #0
 800b40a:	f47e af0a 	bne.w	800a222 <_vfprintf_r+0x2a2>
 800b40e:	e9dd 2424 	ldrd	r2, r4, [sp, #144]	; 0x90
 800b412:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b416:	e5b3      	b.n	800af80 <_vfprintf_r+0x1000>
 800b418:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b41a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b41c:	920f      	str	r2, [sp, #60]	; 0x3c
 800b41e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b420:	1a9b      	subs	r3, r3, r2
 800b422:	9310      	str	r3, [sp, #64]	; 0x40
 800b424:	e644      	b.n	800b0b0 <_vfprintf_r+0x1130>
 800b426:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b428:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b42a:	4413      	add	r3, r2
 800b42c:	461c      	mov	r4, r3
 800b42e:	e543      	b.n	800aeb8 <_vfprintf_r+0xf38>
 800b430:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
 800b434:	e65b      	b.n	800b0ee <_vfprintf_r+0x116e>
 800b436:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800b43a:	f7ff b937 	b.w	800a6ac <_vfprintf_r+0x72c>
 800b43e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800b442:	f7ff b9c7 	b.w	800a7d4 <_vfprintf_r+0x854>
 800b446:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800b44a:	f7ff b951 	b.w	800a6f0 <_vfprintf_r+0x770>
 800b44e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800b452:	f7ff ba01 	b.w	800a858 <_vfprintf_r+0x8d8>
 800b456:	9b08      	ldr	r3, [sp, #32]
 800b458:	930c      	str	r3, [sp, #48]	; 0x30
 800b45a:	e6fb      	b.n	800b254 <_vfprintf_r+0x12d4>
 800b45c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800b460:	f7ff b8e1 	b.w	800a626 <_vfprintf_r+0x6a6>
 800b464:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800b468:	f7fe bf04 	b.w	800a274 <_vfprintf_r+0x2f4>
 800b46c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800b470:	f7ff b864 	b.w	800a53c <_vfprintf_r+0x5bc>
 800b474:	cccccccd 	.word	0xcccccccd
 800b478:	0800eb3c 	.word	0x0800eb3c
 800b47c:	0800eb38 	.word	0x0800eb38
 800b480:	0800eba4 	.word	0x0800eba4

0800b484 <__sbprintf>:
 800b484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b488:	460c      	mov	r4, r1
 800b48a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 800b48e:	8989      	ldrh	r1, [r1, #12]
 800b490:	6e66      	ldr	r6, [r4, #100]	; 0x64
 800b492:	89e5      	ldrh	r5, [r4, #14]
 800b494:	9619      	str	r6, [sp, #100]	; 0x64
 800b496:	f021 0102 	bic.w	r1, r1, #2
 800b49a:	4606      	mov	r6, r0
 800b49c:	69e0      	ldr	r0, [r4, #28]
 800b49e:	f8ad 100c 	strh.w	r1, [sp, #12]
 800b4a2:	4617      	mov	r7, r2
 800b4a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b4a8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b4aa:	f8ad 500e 	strh.w	r5, [sp, #14]
 800b4ae:	4698      	mov	r8, r3
 800b4b0:	ad1a      	add	r5, sp, #104	; 0x68
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	9007      	str	r0, [sp, #28]
 800b4b6:	a816      	add	r0, sp, #88	; 0x58
 800b4b8:	9209      	str	r2, [sp, #36]	; 0x24
 800b4ba:	9306      	str	r3, [sp, #24]
 800b4bc:	9500      	str	r5, [sp, #0]
 800b4be:	9504      	str	r5, [sp, #16]
 800b4c0:	9102      	str	r1, [sp, #8]
 800b4c2:	9105      	str	r1, [sp, #20]
 800b4c4:	f001 fc5c 	bl	800cd80 <__retarget_lock_init_recursive>
 800b4c8:	4643      	mov	r3, r8
 800b4ca:	463a      	mov	r2, r7
 800b4cc:	4669      	mov	r1, sp
 800b4ce:	4630      	mov	r0, r6
 800b4d0:	f7fe fd56 	bl	8009f80 <_vfprintf_r>
 800b4d4:	1e05      	subs	r5, r0, #0
 800b4d6:	db07      	blt.n	800b4e8 <__sbprintf+0x64>
 800b4d8:	4630      	mov	r0, r6
 800b4da:	4669      	mov	r1, sp
 800b4dc:	f001 f8b0 	bl	800c640 <_fflush_r>
 800b4e0:	2800      	cmp	r0, #0
 800b4e2:	bf18      	it	ne
 800b4e4:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800b4e8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800b4ec:	065b      	lsls	r3, r3, #25
 800b4ee:	d503      	bpl.n	800b4f8 <__sbprintf+0x74>
 800b4f0:	89a3      	ldrh	r3, [r4, #12]
 800b4f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4f6:	81a3      	strh	r3, [r4, #12]
 800b4f8:	9816      	ldr	r0, [sp, #88]	; 0x58
 800b4fa:	f001 fc43 	bl	800cd84 <__retarget_lock_close_recursive>
 800b4fe:	4628      	mov	r0, r5
 800b500:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 800b504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b508 <__swsetup_r>:
 800b508:	b538      	push	{r3, r4, r5, lr}
 800b50a:	4b31      	ldr	r3, [pc, #196]	; (800b5d0 <__swsetup_r+0xc8>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	4605      	mov	r5, r0
 800b510:	460c      	mov	r4, r1
 800b512:	b113      	cbz	r3, 800b51a <__swsetup_r+0x12>
 800b514:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b516:	2a00      	cmp	r2, #0
 800b518:	d03a      	beq.n	800b590 <__swsetup_r+0x88>
 800b51a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b51e:	b293      	uxth	r3, r2
 800b520:	0718      	lsls	r0, r3, #28
 800b522:	d50c      	bpl.n	800b53e <__swsetup_r+0x36>
 800b524:	6920      	ldr	r0, [r4, #16]
 800b526:	b1a8      	cbz	r0, 800b554 <__swsetup_r+0x4c>
 800b528:	f013 0201 	ands.w	r2, r3, #1
 800b52c:	d020      	beq.n	800b570 <__swsetup_r+0x68>
 800b52e:	6963      	ldr	r3, [r4, #20]
 800b530:	2200      	movs	r2, #0
 800b532:	425b      	negs	r3, r3
 800b534:	61a3      	str	r3, [r4, #24]
 800b536:	60a2      	str	r2, [r4, #8]
 800b538:	b300      	cbz	r0, 800b57c <__swsetup_r+0x74>
 800b53a:	2000      	movs	r0, #0
 800b53c:	bd38      	pop	{r3, r4, r5, pc}
 800b53e:	06d9      	lsls	r1, r3, #27
 800b540:	d53e      	bpl.n	800b5c0 <__swsetup_r+0xb8>
 800b542:	0758      	lsls	r0, r3, #29
 800b544:	d428      	bmi.n	800b598 <__swsetup_r+0x90>
 800b546:	6920      	ldr	r0, [r4, #16]
 800b548:	f042 0308 	orr.w	r3, r2, #8
 800b54c:	81a3      	strh	r3, [r4, #12]
 800b54e:	b29b      	uxth	r3, r3
 800b550:	2800      	cmp	r0, #0
 800b552:	d1e9      	bne.n	800b528 <__swsetup_r+0x20>
 800b554:	f403 7220 	and.w	r2, r3, #640	; 0x280
 800b558:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800b55c:	d0e4      	beq.n	800b528 <__swsetup_r+0x20>
 800b55e:	4628      	mov	r0, r5
 800b560:	4621      	mov	r1, r4
 800b562:	f001 fc43 	bl	800cdec <__smakebuf_r>
 800b566:	89a3      	ldrh	r3, [r4, #12]
 800b568:	6920      	ldr	r0, [r4, #16]
 800b56a:	f013 0201 	ands.w	r2, r3, #1
 800b56e:	d1de      	bne.n	800b52e <__swsetup_r+0x26>
 800b570:	0799      	lsls	r1, r3, #30
 800b572:	bf58      	it	pl
 800b574:	6962      	ldrpl	r2, [r4, #20]
 800b576:	60a2      	str	r2, [r4, #8]
 800b578:	2800      	cmp	r0, #0
 800b57a:	d1de      	bne.n	800b53a <__swsetup_r+0x32>
 800b57c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b580:	061a      	lsls	r2, r3, #24
 800b582:	d5db      	bpl.n	800b53c <__swsetup_r+0x34>
 800b584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b588:	81a3      	strh	r3, [r4, #12]
 800b58a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b58e:	bd38      	pop	{r3, r4, r5, pc}
 800b590:	4618      	mov	r0, r3
 800b592:	f001 f8b1 	bl	800c6f8 <__sinit>
 800b596:	e7c0      	b.n	800b51a <__swsetup_r+0x12>
 800b598:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b59a:	b151      	cbz	r1, 800b5b2 <__swsetup_r+0xaa>
 800b59c:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800b5a0:	4299      	cmp	r1, r3
 800b5a2:	d004      	beq.n	800b5ae <__swsetup_r+0xa6>
 800b5a4:	4628      	mov	r0, r5
 800b5a6:	f001 f92f 	bl	800c808 <_free_r>
 800b5aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	6323      	str	r3, [r4, #48]	; 0x30
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	6920      	ldr	r0, [r4, #16]
 800b5b6:	6063      	str	r3, [r4, #4]
 800b5b8:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 800b5bc:	6020      	str	r0, [r4, #0]
 800b5be:	e7c3      	b.n	800b548 <__swsetup_r+0x40>
 800b5c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b5c4:	2309      	movs	r3, #9
 800b5c6:	602b      	str	r3, [r5, #0]
 800b5c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b5cc:	81a2      	strh	r2, [r4, #12]
 800b5ce:	bd38      	pop	{r3, r4, r5, pc}
 800b5d0:	20000038 	.word	0x20000038

0800b5d4 <quorem>:
 800b5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5d8:	6903      	ldr	r3, [r0, #16]
 800b5da:	690f      	ldr	r7, [r1, #16]
 800b5dc:	42bb      	cmp	r3, r7
 800b5de:	b083      	sub	sp, #12
 800b5e0:	f2c0 8086 	blt.w	800b6f0 <quorem+0x11c>
 800b5e4:	3f01      	subs	r7, #1
 800b5e6:	f101 0914 	add.w	r9, r1, #20
 800b5ea:	f100 0a14 	add.w	sl, r0, #20
 800b5ee:	f859 2027 	ldr.w	r2, [r9, r7, lsl #2]
 800b5f2:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
 800b5f6:	00bc      	lsls	r4, r7, #2
 800b5f8:	3201      	adds	r2, #1
 800b5fa:	fbb3 f8f2 	udiv	r8, r3, r2
 800b5fe:	eb0a 0304 	add.w	r3, sl, r4
 800b602:	9400      	str	r4, [sp, #0]
 800b604:	eb09 0b04 	add.w	fp, r9, r4
 800b608:	9301      	str	r3, [sp, #4]
 800b60a:	f1b8 0f00 	cmp.w	r8, #0
 800b60e:	d038      	beq.n	800b682 <quorem+0xae>
 800b610:	2500      	movs	r5, #0
 800b612:	462e      	mov	r6, r5
 800b614:	46ce      	mov	lr, r9
 800b616:	46d4      	mov	ip, sl
 800b618:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b61c:	f8dc 3000 	ldr.w	r3, [ip]
 800b620:	b2a2      	uxth	r2, r4
 800b622:	fb08 5502 	mla	r5, r8, r2, r5
 800b626:	0c22      	lsrs	r2, r4, #16
 800b628:	0c2c      	lsrs	r4, r5, #16
 800b62a:	fb08 4202 	mla	r2, r8, r2, r4
 800b62e:	b2ad      	uxth	r5, r5
 800b630:	1b75      	subs	r5, r6, r5
 800b632:	b296      	uxth	r6, r2
 800b634:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
 800b638:	fa15 f383 	uxtah	r3, r5, r3
 800b63c:	eb06 4623 	add.w	r6, r6, r3, asr #16
 800b640:	b29b      	uxth	r3, r3
 800b642:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800b646:	45f3      	cmp	fp, lr
 800b648:	ea4f 4512 	mov.w	r5, r2, lsr #16
 800b64c:	f84c 3b04 	str.w	r3, [ip], #4
 800b650:	ea4f 4626 	mov.w	r6, r6, asr #16
 800b654:	d2e0      	bcs.n	800b618 <quorem+0x44>
 800b656:	9b00      	ldr	r3, [sp, #0]
 800b658:	f85a 3003 	ldr.w	r3, [sl, r3]
 800b65c:	b98b      	cbnz	r3, 800b682 <quorem+0xae>
 800b65e:	9a01      	ldr	r2, [sp, #4]
 800b660:	1f13      	subs	r3, r2, #4
 800b662:	459a      	cmp	sl, r3
 800b664:	d20c      	bcs.n	800b680 <quorem+0xac>
 800b666:	f852 3c04 	ldr.w	r3, [r2, #-4]
 800b66a:	b94b      	cbnz	r3, 800b680 <quorem+0xac>
 800b66c:	f1a2 0308 	sub.w	r3, r2, #8
 800b670:	e002      	b.n	800b678 <quorem+0xa4>
 800b672:	681a      	ldr	r2, [r3, #0]
 800b674:	3b04      	subs	r3, #4
 800b676:	b91a      	cbnz	r2, 800b680 <quorem+0xac>
 800b678:	459a      	cmp	sl, r3
 800b67a:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 800b67e:	d3f8      	bcc.n	800b672 <quorem+0x9e>
 800b680:	6107      	str	r7, [r0, #16]
 800b682:	4604      	mov	r4, r0
 800b684:	f002 f93c 	bl	800d900 <__mcmp>
 800b688:	2800      	cmp	r0, #0
 800b68a:	db2d      	blt.n	800b6e8 <quorem+0x114>
 800b68c:	f108 0801 	add.w	r8, r8, #1
 800b690:	4655      	mov	r5, sl
 800b692:	2300      	movs	r3, #0
 800b694:	f859 1b04 	ldr.w	r1, [r9], #4
 800b698:	6828      	ldr	r0, [r5, #0]
 800b69a:	b28a      	uxth	r2, r1
 800b69c:	1a9a      	subs	r2, r3, r2
 800b69e:	0c0b      	lsrs	r3, r1, #16
 800b6a0:	fa12 f280 	uxtah	r2, r2, r0
 800b6a4:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
 800b6a8:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800b6ac:	b292      	uxth	r2, r2
 800b6ae:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b6b2:	45cb      	cmp	fp, r9
 800b6b4:	f845 2b04 	str.w	r2, [r5], #4
 800b6b8:	ea4f 4323 	mov.w	r3, r3, asr #16
 800b6bc:	d2ea      	bcs.n	800b694 <quorem+0xc0>
 800b6be:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
 800b6c2:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
 800b6c6:	b97a      	cbnz	r2, 800b6e8 <quorem+0x114>
 800b6c8:	1f1a      	subs	r2, r3, #4
 800b6ca:	4592      	cmp	sl, r2
 800b6cc:	d20b      	bcs.n	800b6e6 <quorem+0x112>
 800b6ce:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800b6d2:	b942      	cbnz	r2, 800b6e6 <quorem+0x112>
 800b6d4:	3b08      	subs	r3, #8
 800b6d6:	e002      	b.n	800b6de <quorem+0x10a>
 800b6d8:	681a      	ldr	r2, [r3, #0]
 800b6da:	3b04      	subs	r3, #4
 800b6dc:	b91a      	cbnz	r2, 800b6e6 <quorem+0x112>
 800b6de:	459a      	cmp	sl, r3
 800b6e0:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 800b6e4:	d3f8      	bcc.n	800b6d8 <quorem+0x104>
 800b6e6:	6127      	str	r7, [r4, #16]
 800b6e8:	4640      	mov	r0, r8
 800b6ea:	b003      	add	sp, #12
 800b6ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6f0:	2000      	movs	r0, #0
 800b6f2:	b003      	add	sp, #12
 800b6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b6f8 <_dtoa_r>:
 800b6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6fc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800b6fe:	b097      	sub	sp, #92	; 0x5c
 800b700:	4614      	mov	r4, r2
 800b702:	461d      	mov	r5, r3
 800b704:	4683      	mov	fp, r0
 800b706:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b70a:	b149      	cbz	r1, 800b720 <_dtoa_r+0x28>
 800b70c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b70e:	604a      	str	r2, [r1, #4]
 800b710:	2301      	movs	r3, #1
 800b712:	4093      	lsls	r3, r2
 800b714:	608b      	str	r3, [r1, #8]
 800b716:	f001 ff03 	bl	800d520 <_Bfree>
 800b71a:	2300      	movs	r3, #0
 800b71c:	f8cb 3040 	str.w	r3, [fp, #64]	; 0x40
 800b720:	1e2e      	subs	r6, r5, #0
 800b722:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800b724:	bfb4      	ite	lt
 800b726:	2301      	movlt	r3, #1
 800b728:	2300      	movge	r3, #0
 800b72a:	6013      	str	r3, [r2, #0]
 800b72c:	4b78      	ldr	r3, [pc, #480]	; (800b910 <_dtoa_r+0x218>)
 800b72e:	bfbc      	itt	lt
 800b730:	f026 4600 	biclt.w	r6, r6, #2147483648	; 0x80000000
 800b734:	9603      	strlt	r6, [sp, #12]
 800b736:	43b3      	bics	r3, r6
 800b738:	f000 80a8 	beq.w	800b88c <_dtoa_r+0x194>
 800b73c:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b740:	2200      	movs	r2, #0
 800b742:	4640      	mov	r0, r8
 800b744:	4649      	mov	r1, r9
 800b746:	2300      	movs	r3, #0
 800b748:	f7f5 fcde 	bl	8001108 <__aeabi_dcmpeq>
 800b74c:	4605      	mov	r5, r0
 800b74e:	b178      	cbz	r0, 800b770 <_dtoa_r+0x78>
 800b750:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b752:	2301      	movs	r3, #1
 800b754:	6013      	str	r3, [r2, #0]
 800b756:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b758:	2b00      	cmp	r3, #0
 800b75a:	f000 80c4 	beq.w	800b8e6 <_dtoa_r+0x1ee>
 800b75e:	4b6d      	ldr	r3, [pc, #436]	; (800b914 <_dtoa_r+0x21c>)
 800b760:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b762:	6013      	str	r3, [r2, #0]
 800b764:	3b01      	subs	r3, #1
 800b766:	9304      	str	r3, [sp, #16]
 800b768:	9804      	ldr	r0, [sp, #16]
 800b76a:	b017      	add	sp, #92	; 0x5c
 800b76c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b770:	aa14      	add	r2, sp, #80	; 0x50
 800b772:	ab15      	add	r3, sp, #84	; 0x54
 800b774:	e9cd 3200 	strd	r3, r2, [sp]
 800b778:	4658      	mov	r0, fp
 800b77a:	4642      	mov	r2, r8
 800b77c:	464b      	mov	r3, r9
 800b77e:	f002 f951 	bl	800da24 <__d2b>
 800b782:	0d34      	lsrs	r4, r6, #20
 800b784:	4682      	mov	sl, r0
 800b786:	f040 80a3 	bne.w	800b8d0 <_dtoa_r+0x1d8>
 800b78a:	e9dd 5414 	ldrd	r5, r4, [sp, #80]	; 0x50
 800b78e:	442c      	add	r4, r5
 800b790:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800b794:	2b20      	cmp	r3, #32
 800b796:	f340 8417 	ble.w	800bfc8 <_dtoa_r+0x8d0>
 800b79a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800b79e:	409e      	lsls	r6, r3
 800b7a0:	9b02      	ldr	r3, [sp, #8]
 800b7a2:	f204 4012 	addw	r0, r4, #1042	; 0x412
 800b7a6:	fa23 f000 	lsr.w	r0, r3, r0
 800b7aa:	4330      	orrs	r0, r6
 800b7ac:	f7f5 f9ca 	bl	8000b44 <__aeabi_ui2d>
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	4680      	mov	r8, r0
 800b7b4:	3c01      	subs	r4, #1
 800b7b6:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800b7ba:	9312      	str	r3, [sp, #72]	; 0x48
 800b7bc:	2200      	movs	r2, #0
 800b7be:	4b56      	ldr	r3, [pc, #344]	; (800b918 <_dtoa_r+0x220>)
 800b7c0:	4640      	mov	r0, r8
 800b7c2:	4649      	mov	r1, r9
 800b7c4:	f7f5 f880 	bl	80008c8 <__aeabi_dsub>
 800b7c8:	a34b      	add	r3, pc, #300	; (adr r3, 800b8f8 <_dtoa_r+0x200>)
 800b7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ce:	f7f5 fa33 	bl	8000c38 <__aeabi_dmul>
 800b7d2:	a34b      	add	r3, pc, #300	; (adr r3, 800b900 <_dtoa_r+0x208>)
 800b7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d8:	f7f5 f878 	bl	80008cc <__adddf3>
 800b7dc:	4606      	mov	r6, r0
 800b7de:	4620      	mov	r0, r4
 800b7e0:	460f      	mov	r7, r1
 800b7e2:	f7f5 f9bf 	bl	8000b64 <__aeabi_i2d>
 800b7e6:	a348      	add	r3, pc, #288	; (adr r3, 800b908 <_dtoa_r+0x210>)
 800b7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ec:	f7f5 fa24 	bl	8000c38 <__aeabi_dmul>
 800b7f0:	4602      	mov	r2, r0
 800b7f2:	460b      	mov	r3, r1
 800b7f4:	4630      	mov	r0, r6
 800b7f6:	4639      	mov	r1, r7
 800b7f8:	f7f5 f868 	bl	80008cc <__adddf3>
 800b7fc:	4606      	mov	r6, r0
 800b7fe:	460f      	mov	r7, r1
 800b800:	f7f5 fcca 	bl	8001198 <__aeabi_d2iz>
 800b804:	2200      	movs	r2, #0
 800b806:	9005      	str	r0, [sp, #20]
 800b808:	2300      	movs	r3, #0
 800b80a:	4630      	mov	r0, r6
 800b80c:	4639      	mov	r1, r7
 800b80e:	f7f5 fc85 	bl	800111c <__aeabi_dcmplt>
 800b812:	2800      	cmp	r0, #0
 800b814:	f040 826e 	bne.w	800bcf4 <_dtoa_r+0x5fc>
 800b818:	9e05      	ldr	r6, [sp, #20]
 800b81a:	2e16      	cmp	r6, #22
 800b81c:	f200 825f 	bhi.w	800bcde <_dtoa_r+0x5e6>
 800b820:	4b3e      	ldr	r3, [pc, #248]	; (800b91c <_dtoa_r+0x224>)
 800b822:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b826:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b82a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b82e:	f7f5 fc93 	bl	8001158 <__aeabi_dcmpgt>
 800b832:	2800      	cmp	r0, #0
 800b834:	f000 83c4 	beq.w	800bfc0 <_dtoa_r+0x8c8>
 800b838:	1e73      	subs	r3, r6, #1
 800b83a:	9305      	str	r3, [sp, #20]
 800b83c:	2300      	movs	r3, #0
 800b83e:	930a      	str	r3, [sp, #40]	; 0x28
 800b840:	1b2c      	subs	r4, r5, r4
 800b842:	9b05      	ldr	r3, [sp, #20]
 800b844:	f1b4 0801 	subs.w	r8, r4, #1
 800b848:	bf46      	itte	mi
 800b84a:	f1c4 0901 	rsbmi	r9, r4, #1
 800b84e:	f04f 0800 	movmi.w	r8, #0
 800b852:	f04f 0900 	movpl.w	r9, #0
 800b856:	2b00      	cmp	r3, #0
 800b858:	f2c0 8244 	blt.w	800bce4 <_dtoa_r+0x5ec>
 800b85c:	4498      	add	r8, r3
 800b85e:	9309      	str	r3, [sp, #36]	; 0x24
 800b860:	2300      	movs	r3, #0
 800b862:	9308      	str	r3, [sp, #32]
 800b864:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b866:	2b09      	cmp	r3, #9
 800b868:	d860      	bhi.n	800b92c <_dtoa_r+0x234>
 800b86a:	2b05      	cmp	r3, #5
 800b86c:	f340 83aa 	ble.w	800bfc4 <_dtoa_r+0x8cc>
 800b870:	3b04      	subs	r3, #4
 800b872:	9320      	str	r3, [sp, #128]	; 0x80
 800b874:	2500      	movs	r5, #0
 800b876:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b878:	3b02      	subs	r3, #2
 800b87a:	2b03      	cmp	r3, #3
 800b87c:	f200 848d 	bhi.w	800c19a <_dtoa_r+0xaa2>
 800b880:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b884:	03a903c9 	.word	0x03a903c9
 800b888:	04ea03d3 	.word	0x04ea03d3
 800b88c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b88e:	f242 730f 	movw	r3, #9999	; 0x270f
 800b892:	6013      	str	r3, [r2, #0]
 800b894:	9b02      	ldr	r3, [sp, #8]
 800b896:	b97b      	cbnz	r3, 800b8b8 <_dtoa_r+0x1c0>
 800b898:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800b89c:	b966      	cbnz	r6, 800b8b8 <_dtoa_r+0x1c0>
 800b89e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	f000 8612 	beq.w	800c4ca <_dtoa_r+0xdd2>
 800b8a6:	4b1e      	ldr	r3, [pc, #120]	; (800b920 <_dtoa_r+0x228>)
 800b8a8:	9304      	str	r3, [sp, #16]
 800b8aa:	3308      	adds	r3, #8
 800b8ac:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b8ae:	9804      	ldr	r0, [sp, #16]
 800b8b0:	6013      	str	r3, [r2, #0]
 800b8b2:	b017      	add	sp, #92	; 0x5c
 800b8b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b8ba:	b92b      	cbnz	r3, 800b8c8 <_dtoa_r+0x1d0>
 800b8bc:	4b19      	ldr	r3, [pc, #100]	; (800b924 <_dtoa_r+0x22c>)
 800b8be:	9304      	str	r3, [sp, #16]
 800b8c0:	9804      	ldr	r0, [sp, #16]
 800b8c2:	b017      	add	sp, #92	; 0x5c
 800b8c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8c8:	4b16      	ldr	r3, [pc, #88]	; (800b924 <_dtoa_r+0x22c>)
 800b8ca:	9304      	str	r3, [sp, #16]
 800b8cc:	3303      	adds	r3, #3
 800b8ce:	e7ed      	b.n	800b8ac <_dtoa_r+0x1b4>
 800b8d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b8d4:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800b8d8:	9512      	str	r5, [sp, #72]	; 0x48
 800b8da:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b8de:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 800b8e2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800b8e4:	e76a      	b.n	800b7bc <_dtoa_r+0xc4>
 800b8e6:	4b10      	ldr	r3, [pc, #64]	; (800b928 <_dtoa_r+0x230>)
 800b8e8:	9304      	str	r3, [sp, #16]
 800b8ea:	9804      	ldr	r0, [sp, #16]
 800b8ec:	b017      	add	sp, #92	; 0x5c
 800b8ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8f2:	bf00      	nop
 800b8f4:	f3af 8000 	nop.w
 800b8f8:	636f4361 	.word	0x636f4361
 800b8fc:	3fd287a7 	.word	0x3fd287a7
 800b900:	8b60c8b3 	.word	0x8b60c8b3
 800b904:	3fc68a28 	.word	0x3fc68a28
 800b908:	509f79fb 	.word	0x509f79fb
 800b90c:	3fd34413 	.word	0x3fd34413
 800b910:	7ff00000 	.word	0x7ff00000
 800b914:	0800eb71 	.word	0x0800eb71
 800b918:	3ff80000 	.word	0x3ff80000
 800b91c:	0800ec00 	.word	0x0800ec00
 800b920:	0800ebb4 	.word	0x0800ebb4
 800b924:	0800ebc0 	.word	0x0800ebc0
 800b928:	0800eb70 	.word	0x0800eb70
 800b92c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b930:	2501      	movs	r5, #1
 800b932:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b936:	2300      	movs	r3, #0
 800b938:	9320      	str	r3, [sp, #128]	; 0x80
 800b93a:	9321      	str	r3, [sp, #132]	; 0x84
 800b93c:	2100      	movs	r1, #0
 800b93e:	f8cb 1044 	str.w	r1, [fp, #68]	; 0x44
 800b942:	940b      	str	r4, [sp, #44]	; 0x2c
 800b944:	4658      	mov	r0, fp
 800b946:	f001 fdc5 	bl	800d4d4 <_Balloc>
 800b94a:	2c0e      	cmp	r4, #14
 800b94c:	9004      	str	r0, [sp, #16]
 800b94e:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 800b952:	f200 80f9 	bhi.w	800bb48 <_dtoa_r+0x450>
 800b956:	2d00      	cmp	r5, #0
 800b958:	f000 80f6 	beq.w	800bb48 <_dtoa_r+0x450>
 800b95c:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 800b960:	9905      	ldr	r1, [sp, #20]
 800b962:	461d      	mov	r5, r3
 800b964:	4626      	mov	r6, r4
 800b966:	2900      	cmp	r1, #0
 800b968:	e9cd 560c 	strd	r5, r6, [sp, #48]	; 0x30
 800b96c:	f340 83d3 	ble.w	800c116 <_dtoa_r+0xa1e>
 800b970:	4b9a      	ldr	r3, [pc, #616]	; (800bbdc <_dtoa_r+0x4e4>)
 800b972:	f001 020f 	and.w	r2, r1, #15
 800b976:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b97e:	110c      	asrs	r4, r1, #4
 800b980:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b984:	06e3      	lsls	r3, r4, #27
 800b986:	f140 8488 	bpl.w	800c29a <_dtoa_r+0xba2>
 800b98a:	4b95      	ldr	r3, [pc, #596]	; (800bbe0 <_dtoa_r+0x4e8>)
 800b98c:	4631      	mov	r1, r6
 800b98e:	4628      	mov	r0, r5
 800b990:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b994:	f7f5 fa7a 	bl	8000e8c <__aeabi_ddiv>
 800b998:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b99c:	f004 040f 	and.w	r4, r4, #15
 800b9a0:	2603      	movs	r6, #3
 800b9a2:	b17c      	cbz	r4, 800b9c4 <_dtoa_r+0x2cc>
 800b9a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9a8:	4d8d      	ldr	r5, [pc, #564]	; (800bbe0 <_dtoa_r+0x4e8>)
 800b9aa:	07e7      	lsls	r7, r4, #31
 800b9ac:	d504      	bpl.n	800b9b8 <_dtoa_r+0x2c0>
 800b9ae:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b9b2:	3601      	adds	r6, #1
 800b9b4:	f7f5 f940 	bl	8000c38 <__aeabi_dmul>
 800b9b8:	1064      	asrs	r4, r4, #1
 800b9ba:	f105 0508 	add.w	r5, r5, #8
 800b9be:	d1f4      	bne.n	800b9aa <_dtoa_r+0x2b2>
 800b9c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b9c8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b9cc:	f7f5 fa5e 	bl	8000e8c <__aeabi_ddiv>
 800b9d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9d6:	b143      	cbz	r3, 800b9ea <_dtoa_r+0x2f2>
 800b9d8:	2200      	movs	r2, #0
 800b9da:	4b82      	ldr	r3, [pc, #520]	; (800bbe4 <_dtoa_r+0x4ec>)
 800b9dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9e0:	f7f5 fb9c 	bl	800111c <__aeabi_dcmplt>
 800b9e4:	2800      	cmp	r0, #0
 800b9e6:	f040 84eb 	bne.w	800c3c0 <_dtoa_r+0xcc8>
 800b9ea:	4630      	mov	r0, r6
 800b9ec:	f7f5 f8ba 	bl	8000b64 <__aeabi_i2d>
 800b9f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b9f4:	f7f5 f920 	bl	8000c38 <__aeabi_dmul>
 800b9f8:	4b7b      	ldr	r3, [pc, #492]	; (800bbe8 <_dtoa_r+0x4f0>)
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	f7f4 ff66 	bl	80008cc <__adddf3>
 800ba00:	9b06      	ldr	r3, [sp, #24]
 800ba02:	4606      	mov	r6, r0
 800ba04:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	f000 840a 	beq.w	800c222 <_dtoa_r+0xb2a>
 800ba0e:	9b05      	ldr	r3, [sp, #20]
 800ba10:	9313      	str	r3, [sp, #76]	; 0x4c
 800ba12:	9b06      	ldr	r3, [sp, #24]
 800ba14:	930e      	str	r3, [sp, #56]	; 0x38
 800ba16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba1a:	f7f5 fbbd 	bl	8001198 <__aeabi_d2iz>
 800ba1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ba20:	4b6e      	ldr	r3, [pc, #440]	; (800bbdc <_dtoa_r+0x4e4>)
 800ba22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba26:	e953 3402 	ldrd	r3, r4, [r3, #-8]
 800ba2a:	f100 0530 	add.w	r5, r0, #48	; 0x30
 800ba2e:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ba32:	f7f5 f897 	bl	8000b64 <__aeabi_i2d>
 800ba36:	4602      	mov	r2, r0
 800ba38:	460b      	mov	r3, r1
 800ba3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba3e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800ba42:	f7f4 ff41 	bl	80008c8 <__aeabi_dsub>
 800ba46:	9b04      	ldr	r3, [sp, #16]
 800ba48:	4606      	mov	r6, r0
 800ba4a:	9807      	ldr	r0, [sp, #28]
 800ba4c:	1c5c      	adds	r4, r3, #1
 800ba4e:	b2ed      	uxtb	r5, r5
 800ba50:	460f      	mov	r7, r1
 800ba52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ba56:	2800      	cmp	r0, #0
 800ba58:	f000 8445 	beq.w	800c2e6 <_dtoa_r+0xbee>
 800ba5c:	2000      	movs	r0, #0
 800ba5e:	4963      	ldr	r1, [pc, #396]	; (800bbec <_dtoa_r+0x4f4>)
 800ba60:	f7f5 fa14 	bl	8000e8c <__aeabi_ddiv>
 800ba64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba68:	f7f4 ff2e 	bl	80008c8 <__aeabi_dsub>
 800ba6c:	9a04      	ldr	r2, [sp, #16]
 800ba6e:	463b      	mov	r3, r7
 800ba70:	7015      	strb	r5, [r2, #0]
 800ba72:	4632      	mov	r2, r6
 800ba74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba78:	f7f5 fb6e 	bl	8001158 <__aeabi_dcmpgt>
 800ba7c:	2800      	cmp	r0, #0
 800ba7e:	f040 84ef 	bne.w	800c460 <_dtoa_r+0xd68>
 800ba82:	4632      	mov	r2, r6
 800ba84:	463b      	mov	r3, r7
 800ba86:	2000      	movs	r0, #0
 800ba88:	4956      	ldr	r1, [pc, #344]	; (800bbe4 <_dtoa_r+0x4ec>)
 800ba8a:	f7f4 ff1d 	bl	80008c8 <__aeabi_dsub>
 800ba8e:	4602      	mov	r2, r0
 800ba90:	460b      	mov	r3, r1
 800ba92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba96:	f7f5 fb5f 	bl	8001158 <__aeabi_dcmpgt>
 800ba9a:	2800      	cmp	r0, #0
 800ba9c:	f040 84e5 	bne.w	800c46a <_dtoa_r+0xd72>
 800baa0:	990e      	ldr	r1, [sp, #56]	; 0x38
 800baa2:	2901      	cmp	r1, #1
 800baa4:	d04c      	beq.n	800bb40 <_dtoa_r+0x448>
 800baa6:	9a04      	ldr	r2, [sp, #16]
 800baa8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800baac:	4411      	add	r1, r2
 800baae:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800bab2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bab6:	f8cd a008 	str.w	sl, [sp, #8]
 800baba:	468a      	mov	sl, r1
 800babc:	e00c      	b.n	800bad8 <_dtoa_r+0x3e0>
 800babe:	2000      	movs	r0, #0
 800bac0:	4948      	ldr	r1, [pc, #288]	; (800bbe4 <_dtoa_r+0x4ec>)
 800bac2:	f7f4 ff01 	bl	80008c8 <__aeabi_dsub>
 800bac6:	4642      	mov	r2, r8
 800bac8:	464b      	mov	r3, r9
 800baca:	f7f5 fb27 	bl	800111c <__aeabi_dcmplt>
 800bace:	2800      	cmp	r0, #0
 800bad0:	f040 84c9 	bne.w	800c466 <_dtoa_r+0xd6e>
 800bad4:	4554      	cmp	r4, sl
 800bad6:	d02d      	beq.n	800bb34 <_dtoa_r+0x43c>
 800bad8:	4640      	mov	r0, r8
 800bada:	4649      	mov	r1, r9
 800badc:	2200      	movs	r2, #0
 800bade:	4b44      	ldr	r3, [pc, #272]	; (800bbf0 <_dtoa_r+0x4f8>)
 800bae0:	f7f5 f8aa 	bl	8000c38 <__aeabi_dmul>
 800bae4:	2200      	movs	r2, #0
 800bae6:	4b42      	ldr	r3, [pc, #264]	; (800bbf0 <_dtoa_r+0x4f8>)
 800bae8:	4680      	mov	r8, r0
 800baea:	4689      	mov	r9, r1
 800baec:	4630      	mov	r0, r6
 800baee:	4639      	mov	r1, r7
 800baf0:	f7f5 f8a2 	bl	8000c38 <__aeabi_dmul>
 800baf4:	460f      	mov	r7, r1
 800baf6:	4606      	mov	r6, r0
 800baf8:	f7f5 fb4e 	bl	8001198 <__aeabi_d2iz>
 800bafc:	4605      	mov	r5, r0
 800bafe:	f7f5 f831 	bl	8000b64 <__aeabi_i2d>
 800bb02:	4602      	mov	r2, r0
 800bb04:	460b      	mov	r3, r1
 800bb06:	4630      	mov	r0, r6
 800bb08:	4639      	mov	r1, r7
 800bb0a:	f7f4 fedd 	bl	80008c8 <__aeabi_dsub>
 800bb0e:	3530      	adds	r5, #48	; 0x30
 800bb10:	b2ed      	uxtb	r5, r5
 800bb12:	4642      	mov	r2, r8
 800bb14:	464b      	mov	r3, r9
 800bb16:	f804 5b01 	strb.w	r5, [r4], #1
 800bb1a:	4606      	mov	r6, r0
 800bb1c:	460f      	mov	r7, r1
 800bb1e:	f7f5 fafd 	bl	800111c <__aeabi_dcmplt>
 800bb22:	4632      	mov	r2, r6
 800bb24:	463b      	mov	r3, r7
 800bb26:	2800      	cmp	r0, #0
 800bb28:	d0c9      	beq.n	800babe <_dtoa_r+0x3c6>
 800bb2a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bb2c:	f8dd a008 	ldr.w	sl, [sp, #8]
 800bb30:	9305      	str	r3, [sp, #20]
 800bb32:	e219      	b.n	800bf68 <_dtoa_r+0x870>
 800bb34:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800bb38:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800bb3c:	f8dd a008 	ldr.w	sl, [sp, #8]
 800bb40:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800bb44:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bb48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	f2c0 80ad 	blt.w	800bcaa <_dtoa_r+0x5b2>
 800bb50:	9a05      	ldr	r2, [sp, #20]
 800bb52:	2a0e      	cmp	r2, #14
 800bb54:	f300 80a9 	bgt.w	800bcaa <_dtoa_r+0x5b2>
 800bb58:	4b20      	ldr	r3, [pc, #128]	; (800bbdc <_dtoa_r+0x4e4>)
 800bb5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb5e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bb62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	f2c0 82b3 	blt.w	800c0d0 <_dtoa_r+0x9d8>
 800bb6a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bb6e:	4642      	mov	r2, r8
 800bb70:	464b      	mov	r3, r9
 800bb72:	4630      	mov	r0, r6
 800bb74:	4639      	mov	r1, r7
 800bb76:	f7f5 f989 	bl	8000e8c <__aeabi_ddiv>
 800bb7a:	f7f5 fb0d 	bl	8001198 <__aeabi_d2iz>
 800bb7e:	4605      	mov	r5, r0
 800bb80:	f7f4 fff0 	bl	8000b64 <__aeabi_i2d>
 800bb84:	4642      	mov	r2, r8
 800bb86:	464b      	mov	r3, r9
 800bb88:	f7f5 f856 	bl	8000c38 <__aeabi_dmul>
 800bb8c:	4602      	mov	r2, r0
 800bb8e:	460b      	mov	r3, r1
 800bb90:	4630      	mov	r0, r6
 800bb92:	4639      	mov	r1, r7
 800bb94:	f7f4 fe98 	bl	80008c8 <__aeabi_dsub>
 800bb98:	9a04      	ldr	r2, [sp, #16]
 800bb9a:	f105 0330 	add.w	r3, r5, #48	; 0x30
 800bb9e:	7013      	strb	r3, [r2, #0]
 800bba0:	9b06      	ldr	r3, [sp, #24]
 800bba2:	2b01      	cmp	r3, #1
 800bba4:	4606      	mov	r6, r0
 800bba6:	460f      	mov	r7, r1
 800bba8:	f102 0401 	add.w	r4, r2, #1
 800bbac:	d053      	beq.n	800bc56 <_dtoa_r+0x55e>
 800bbae:	2200      	movs	r2, #0
 800bbb0:	4b0f      	ldr	r3, [pc, #60]	; (800bbf0 <_dtoa_r+0x4f8>)
 800bbb2:	f7f5 f841 	bl	8000c38 <__aeabi_dmul>
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	2300      	movs	r3, #0
 800bbba:	4606      	mov	r6, r0
 800bbbc:	460f      	mov	r7, r1
 800bbbe:	f7f5 faa3 	bl	8001108 <__aeabi_dcmpeq>
 800bbc2:	2800      	cmp	r0, #0
 800bbc4:	f040 81d0 	bne.w	800bf68 <_dtoa_r+0x870>
 800bbc8:	f8cd a008 	str.w	sl, [sp, #8]
 800bbcc:	f8dd a018 	ldr.w	sl, [sp, #24]
 800bbd0:	f8cd b018 	str.w	fp, [sp, #24]
 800bbd4:	f8dd b010 	ldr.w	fp, [sp, #16]
 800bbd8:	e017      	b.n	800bc0a <_dtoa_r+0x512>
 800bbda:	bf00      	nop
 800bbdc:	0800ec00 	.word	0x0800ec00
 800bbe0:	0800ebd8 	.word	0x0800ebd8
 800bbe4:	3ff00000 	.word	0x3ff00000
 800bbe8:	401c0000 	.word	0x401c0000
 800bbec:	3fe00000 	.word	0x3fe00000
 800bbf0:	40240000 	.word	0x40240000
 800bbf4:	f7f5 f820 	bl	8000c38 <__aeabi_dmul>
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	4606      	mov	r6, r0
 800bbfe:	460f      	mov	r7, r1
 800bc00:	f7f5 fa82 	bl	8001108 <__aeabi_dcmpeq>
 800bc04:	2800      	cmp	r0, #0
 800bc06:	f040 8331 	bne.w	800c26c <_dtoa_r+0xb74>
 800bc0a:	4642      	mov	r2, r8
 800bc0c:	464b      	mov	r3, r9
 800bc0e:	4630      	mov	r0, r6
 800bc10:	4639      	mov	r1, r7
 800bc12:	f7f5 f93b 	bl	8000e8c <__aeabi_ddiv>
 800bc16:	f7f5 fabf 	bl	8001198 <__aeabi_d2iz>
 800bc1a:	4605      	mov	r5, r0
 800bc1c:	f7f4 ffa2 	bl	8000b64 <__aeabi_i2d>
 800bc20:	4642      	mov	r2, r8
 800bc22:	464b      	mov	r3, r9
 800bc24:	f7f5 f808 	bl	8000c38 <__aeabi_dmul>
 800bc28:	4602      	mov	r2, r0
 800bc2a:	460b      	mov	r3, r1
 800bc2c:	4630      	mov	r0, r6
 800bc2e:	4639      	mov	r1, r7
 800bc30:	f7f4 fe4a 	bl	80008c8 <__aeabi_dsub>
 800bc34:	f105 0c30 	add.w	ip, r5, #48	; 0x30
 800bc38:	f804 cb01 	strb.w	ip, [r4], #1
 800bc3c:	eba4 0c0b 	sub.w	ip, r4, fp
 800bc40:	45e2      	cmp	sl, ip
 800bc42:	4606      	mov	r6, r0
 800bc44:	460f      	mov	r7, r1
 800bc46:	f04f 0200 	mov.w	r2, #0
 800bc4a:	4bb8      	ldr	r3, [pc, #736]	; (800bf2c <_dtoa_r+0x834>)
 800bc4c:	d1d2      	bne.n	800bbf4 <_dtoa_r+0x4fc>
 800bc4e:	f8dd a008 	ldr.w	sl, [sp, #8]
 800bc52:	f8dd b018 	ldr.w	fp, [sp, #24]
 800bc56:	4632      	mov	r2, r6
 800bc58:	463b      	mov	r3, r7
 800bc5a:	4630      	mov	r0, r6
 800bc5c:	4639      	mov	r1, r7
 800bc5e:	f7f4 fe35 	bl	80008cc <__adddf3>
 800bc62:	4642      	mov	r2, r8
 800bc64:	464b      	mov	r3, r9
 800bc66:	4606      	mov	r6, r0
 800bc68:	460f      	mov	r7, r1
 800bc6a:	f7f5 fa75 	bl	8001158 <__aeabi_dcmpgt>
 800bc6e:	b958      	cbnz	r0, 800bc88 <_dtoa_r+0x590>
 800bc70:	4642      	mov	r2, r8
 800bc72:	464b      	mov	r3, r9
 800bc74:	4630      	mov	r0, r6
 800bc76:	4639      	mov	r1, r7
 800bc78:	f7f5 fa46 	bl	8001108 <__aeabi_dcmpeq>
 800bc7c:	2800      	cmp	r0, #0
 800bc7e:	f000 8173 	beq.w	800bf68 <_dtoa_r+0x870>
 800bc82:	07eb      	lsls	r3, r5, #31
 800bc84:	f140 8170 	bpl.w	800bf68 <_dtoa_r+0x870>
 800bc88:	f814 5c01 	ldrb.w	r5, [r4, #-1]
 800bc8c:	9a04      	ldr	r2, [sp, #16]
 800bc8e:	e005      	b.n	800bc9c <_dtoa_r+0x5a4>
 800bc90:	429a      	cmp	r2, r3
 800bc92:	f000 831e 	beq.w	800c2d2 <_dtoa_r+0xbda>
 800bc96:	f813 5c01 	ldrb.w	r5, [r3, #-1]
 800bc9a:	461c      	mov	r4, r3
 800bc9c:	2d39      	cmp	r5, #57	; 0x39
 800bc9e:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
 800bca2:	d0f5      	beq.n	800bc90 <_dtoa_r+0x598>
 800bca4:	3501      	adds	r5, #1
 800bca6:	701d      	strb	r5, [r3, #0]
 800bca8:	e15e      	b.n	800bf68 <_dtoa_r+0x870>
 800bcaa:	9a07      	ldr	r2, [sp, #28]
 800bcac:	b392      	cbz	r2, 800bd14 <_dtoa_r+0x61c>
 800bcae:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bcb0:	2a01      	cmp	r2, #1
 800bcb2:	f340 8202 	ble.w	800c0ba <_dtoa_r+0x9c2>
 800bcb6:	9b06      	ldr	r3, [sp, #24]
 800bcb8:	1e5f      	subs	r7, r3, #1
 800bcba:	9b08      	ldr	r3, [sp, #32]
 800bcbc:	42bb      	cmp	r3, r7
 800bcbe:	f2c0 82da 	blt.w	800c276 <_dtoa_r+0xb7e>
 800bcc2:	1bdf      	subs	r7, r3, r7
 800bcc4:	9b06      	ldr	r3, [sp, #24]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	f2c0 82f9 	blt.w	800c2be <_dtoa_r+0xbc6>
 800bccc:	464c      	mov	r4, r9
 800bcce:	4498      	add	r8, r3
 800bcd0:	4499      	add	r9, r3
 800bcd2:	2101      	movs	r1, #1
 800bcd4:	4658      	mov	r0, fp
 800bcd6:	f001 fcbd 	bl	800d654 <__i2b>
 800bcda:	4605      	mov	r5, r0
 800bcdc:	e01d      	b.n	800bd1a <_dtoa_r+0x622>
 800bcde:	2301      	movs	r3, #1
 800bce0:	930a      	str	r3, [sp, #40]	; 0x28
 800bce2:	e5ad      	b.n	800b840 <_dtoa_r+0x148>
 800bce4:	9b05      	ldr	r3, [sp, #20]
 800bce6:	eba9 0903 	sub.w	r9, r9, r3
 800bcea:	425b      	negs	r3, r3
 800bcec:	9308      	str	r3, [sp, #32]
 800bcee:	2300      	movs	r3, #0
 800bcf0:	9309      	str	r3, [sp, #36]	; 0x24
 800bcf2:	e5b7      	b.n	800b864 <_dtoa_r+0x16c>
 800bcf4:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800bcf8:	4640      	mov	r0, r8
 800bcfa:	f7f4 ff33 	bl	8000b64 <__aeabi_i2d>
 800bcfe:	4632      	mov	r2, r6
 800bd00:	463b      	mov	r3, r7
 800bd02:	f7f5 fa01 	bl	8001108 <__aeabi_dcmpeq>
 800bd06:	2800      	cmp	r0, #0
 800bd08:	f47f ad86 	bne.w	800b818 <_dtoa_r+0x120>
 800bd0c:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800bd10:	9305      	str	r3, [sp, #20]
 800bd12:	e581      	b.n	800b818 <_dtoa_r+0x120>
 800bd14:	9f08      	ldr	r7, [sp, #32]
 800bd16:	9d07      	ldr	r5, [sp, #28]
 800bd18:	464c      	mov	r4, r9
 800bd1a:	2c00      	cmp	r4, #0
 800bd1c:	dd0b      	ble.n	800bd36 <_dtoa_r+0x63e>
 800bd1e:	f1b8 0f00 	cmp.w	r8, #0
 800bd22:	dd08      	ble.n	800bd36 <_dtoa_r+0x63e>
 800bd24:	4544      	cmp	r4, r8
 800bd26:	4623      	mov	r3, r4
 800bd28:	bfa8      	it	ge
 800bd2a:	4643      	movge	r3, r8
 800bd2c:	eba9 0903 	sub.w	r9, r9, r3
 800bd30:	1ae4      	subs	r4, r4, r3
 800bd32:	eba8 0803 	sub.w	r8, r8, r3
 800bd36:	9b08      	ldr	r3, [sp, #32]
 800bd38:	b16b      	cbz	r3, 800bd56 <_dtoa_r+0x65e>
 800bd3a:	9a07      	ldr	r2, [sp, #28]
 800bd3c:	2a00      	cmp	r2, #0
 800bd3e:	f000 828e 	beq.w	800c25e <_dtoa_r+0xb66>
 800bd42:	1bde      	subs	r6, r3, r7
 800bd44:	2f00      	cmp	r7, #0
 800bd46:	f040 818e 	bne.w	800c066 <_dtoa_r+0x96e>
 800bd4a:	4651      	mov	r1, sl
 800bd4c:	4632      	mov	r2, r6
 800bd4e:	4658      	mov	r0, fp
 800bd50:	f001 fd30 	bl	800d7b4 <__pow5mult>
 800bd54:	4682      	mov	sl, r0
 800bd56:	2101      	movs	r1, #1
 800bd58:	4658      	mov	r0, fp
 800bd5a:	f001 fc7b 	bl	800d654 <__i2b>
 800bd5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd60:	4606      	mov	r6, r0
 800bd62:	2a00      	cmp	r2, #0
 800bd64:	f040 8118 	bne.w	800bf98 <_dtoa_r+0x8a0>
 800bd68:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800bd6a:	2b01      	cmp	r3, #1
 800bd6c:	f340 8160 	ble.w	800c030 <_dtoa_r+0x938>
 800bd70:	2001      	movs	r0, #1
 800bd72:	4440      	add	r0, r8
 800bd74:	f010 001f 	ands.w	r0, r0, #31
 800bd78:	f000 8109 	beq.w	800bf8e <_dtoa_r+0x896>
 800bd7c:	f1c0 0320 	rsb	r3, r0, #32
 800bd80:	2b04      	cmp	r3, #4
 800bd82:	f340 83a6 	ble.w	800c4d2 <_dtoa_r+0xdda>
 800bd86:	f1c0 001c 	rsb	r0, r0, #28
 800bd8a:	4481      	add	r9, r0
 800bd8c:	4404      	add	r4, r0
 800bd8e:	4480      	add	r8, r0
 800bd90:	f1b9 0f00 	cmp.w	r9, #0
 800bd94:	dd05      	ble.n	800bda2 <_dtoa_r+0x6aa>
 800bd96:	4651      	mov	r1, sl
 800bd98:	464a      	mov	r2, r9
 800bd9a:	4658      	mov	r0, fp
 800bd9c:	f001 fd5a 	bl	800d854 <__lshift>
 800bda0:	4682      	mov	sl, r0
 800bda2:	f1b8 0f00 	cmp.w	r8, #0
 800bda6:	dd05      	ble.n	800bdb4 <_dtoa_r+0x6bc>
 800bda8:	4631      	mov	r1, r6
 800bdaa:	4642      	mov	r2, r8
 800bdac:	4658      	mov	r0, fp
 800bdae:	f001 fd51 	bl	800d854 <__lshift>
 800bdb2:	4606      	mov	r6, r0
 800bdb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d173      	bne.n	800bea2 <_dtoa_r+0x7aa>
 800bdba:	9b06      	ldr	r3, [sp, #24]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	f340 8209 	ble.w	800c1d4 <_dtoa_r+0xadc>
 800bdc2:	9b07      	ldr	r3, [sp, #28]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	f000 8085 	beq.w	800bed4 <_dtoa_r+0x7dc>
 800bdca:	2c00      	cmp	r4, #0
 800bdcc:	f300 8160 	bgt.w	800c090 <_dtoa_r+0x998>
 800bdd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	f040 81c8 	bne.w	800c168 <_dtoa_r+0xa70>
 800bdd8:	46a8      	mov	r8, r5
 800bdda:	9a02      	ldr	r2, [sp, #8]
 800bddc:	9f04      	ldr	r7, [sp, #16]
 800bdde:	f002 0201 	and.w	r2, r2, #1
 800bde2:	9209      	str	r2, [sp, #36]	; 0x24
 800bde4:	9a06      	ldr	r2, [sp, #24]
 800bde6:	1e7b      	subs	r3, r7, #1
 800bde8:	441a      	add	r2, r3
 800bdea:	9207      	str	r2, [sp, #28]
 800bdec:	4631      	mov	r1, r6
 800bdee:	4650      	mov	r0, sl
 800bdf0:	f7ff fbf0 	bl	800b5d4 <quorem>
 800bdf4:	4629      	mov	r1, r5
 800bdf6:	4681      	mov	r9, r0
 800bdf8:	9008      	str	r0, [sp, #32]
 800bdfa:	4650      	mov	r0, sl
 800bdfc:	f001 fd80 	bl	800d900 <__mcmp>
 800be00:	4631      	mov	r1, r6
 800be02:	9002      	str	r0, [sp, #8]
 800be04:	4642      	mov	r2, r8
 800be06:	4658      	mov	r0, fp
 800be08:	f001 fd96 	bl	800d938 <__mdiff>
 800be0c:	68c3      	ldr	r3, [r0, #12]
 800be0e:	4604      	mov	r4, r0
 800be10:	f109 0930 	add.w	r9, r9, #48	; 0x30
 800be14:	4601      	mov	r1, r0
 800be16:	2b00      	cmp	r3, #0
 800be18:	f040 81d7 	bne.w	800c1ca <_dtoa_r+0xad2>
 800be1c:	4650      	mov	r0, sl
 800be1e:	f001 fd6f 	bl	800d900 <__mcmp>
 800be22:	4621      	mov	r1, r4
 800be24:	9006      	str	r0, [sp, #24]
 800be26:	4658      	mov	r0, fp
 800be28:	f001 fb7a 	bl	800d520 <_Bfree>
 800be2c:	9b06      	ldr	r3, [sp, #24]
 800be2e:	b933      	cbnz	r3, 800be3e <_dtoa_r+0x746>
 800be30:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800be32:	b922      	cbnz	r2, 800be3e <_dtoa_r+0x746>
 800be34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be36:	2b00      	cmp	r3, #0
 800be38:	f000 831b 	beq.w	800c472 <_dtoa_r+0xd7a>
 800be3c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800be3e:	9a02      	ldr	r2, [sp, #8]
 800be40:	2a00      	cmp	r2, #0
 800be42:	f2c0 8220 	blt.w	800c286 <_dtoa_r+0xb8e>
 800be46:	d105      	bne.n	800be54 <_dtoa_r+0x75c>
 800be48:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800be4a:	b91a      	cbnz	r2, 800be54 <_dtoa_r+0x75c>
 800be4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be4e:	2a00      	cmp	r2, #0
 800be50:	f000 8219 	beq.w	800c286 <_dtoa_r+0xb8e>
 800be54:	2b00      	cmp	r3, #0
 800be56:	f107 0401 	add.w	r4, r7, #1
 800be5a:	f300 8225 	bgt.w	800c2a8 <_dtoa_r+0xbb0>
 800be5e:	9b07      	ldr	r3, [sp, #28]
 800be60:	f887 9000 	strb.w	r9, [r7]
 800be64:	42bb      	cmp	r3, r7
 800be66:	f000 822e 	beq.w	800c2c6 <_dtoa_r+0xbce>
 800be6a:	4651      	mov	r1, sl
 800be6c:	2300      	movs	r3, #0
 800be6e:	220a      	movs	r2, #10
 800be70:	4658      	mov	r0, fp
 800be72:	f001 fb5f 	bl	800d534 <__multadd>
 800be76:	4545      	cmp	r5, r8
 800be78:	4682      	mov	sl, r0
 800be7a:	4629      	mov	r1, r5
 800be7c:	f04f 0300 	mov.w	r3, #0
 800be80:	f04f 020a 	mov.w	r2, #10
 800be84:	4658      	mov	r0, fp
 800be86:	f000 819a 	beq.w	800c1be <_dtoa_r+0xac6>
 800be8a:	f001 fb53 	bl	800d534 <__multadd>
 800be8e:	4641      	mov	r1, r8
 800be90:	4605      	mov	r5, r0
 800be92:	2300      	movs	r3, #0
 800be94:	220a      	movs	r2, #10
 800be96:	4658      	mov	r0, fp
 800be98:	f001 fb4c 	bl	800d534 <__multadd>
 800be9c:	4627      	mov	r7, r4
 800be9e:	4680      	mov	r8, r0
 800bea0:	e7a4      	b.n	800bdec <_dtoa_r+0x6f4>
 800bea2:	4631      	mov	r1, r6
 800bea4:	4650      	mov	r0, sl
 800bea6:	f001 fd2b 	bl	800d900 <__mcmp>
 800beaa:	2800      	cmp	r0, #0
 800beac:	da85      	bge.n	800bdba <_dtoa_r+0x6c2>
 800beae:	9f05      	ldr	r7, [sp, #20]
 800beb0:	4651      	mov	r1, sl
 800beb2:	2300      	movs	r3, #0
 800beb4:	220a      	movs	r2, #10
 800beb6:	4658      	mov	r0, fp
 800beb8:	3f01      	subs	r7, #1
 800beba:	9705      	str	r7, [sp, #20]
 800bebc:	f001 fb3a 	bl	800d534 <__multadd>
 800bec0:	9b07      	ldr	r3, [sp, #28]
 800bec2:	4682      	mov	sl, r0
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	f040 82e4 	bne.w	800c492 <_dtoa_r+0xd9a>
 800beca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800becc:	2b00      	cmp	r3, #0
 800bece:	f340 82ec 	ble.w	800c4aa <_dtoa_r+0xdb2>
 800bed2:	9306      	str	r3, [sp, #24]
 800bed4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800bed8:	9f06      	ldr	r7, [sp, #24]
 800beda:	4644      	mov	r4, r8
 800bedc:	e002      	b.n	800bee4 <_dtoa_r+0x7ec>
 800bede:	f001 fb29 	bl	800d534 <__multadd>
 800bee2:	4682      	mov	sl, r0
 800bee4:	4631      	mov	r1, r6
 800bee6:	4650      	mov	r0, sl
 800bee8:	f7ff fb74 	bl	800b5d4 <quorem>
 800beec:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bef0:	f804 9b01 	strb.w	r9, [r4], #1
 800bef4:	eba4 0308 	sub.w	r3, r4, r8
 800bef8:	429f      	cmp	r7, r3
 800befa:	f04f 020a 	mov.w	r2, #10
 800befe:	f04f 0300 	mov.w	r3, #0
 800bf02:	4651      	mov	r1, sl
 800bf04:	4658      	mov	r0, fp
 800bf06:	dcea      	bgt.n	800bede <_dtoa_r+0x7e6>
 800bf08:	2300      	movs	r3, #0
 800bf0a:	9302      	str	r3, [sp, #8]
 800bf0c:	4651      	mov	r1, sl
 800bf0e:	2201      	movs	r2, #1
 800bf10:	4658      	mov	r0, fp
 800bf12:	f001 fc9f 	bl	800d854 <__lshift>
 800bf16:	4631      	mov	r1, r6
 800bf18:	4682      	mov	sl, r0
 800bf1a:	f001 fcf1 	bl	800d900 <__mcmp>
 800bf1e:	2800      	cmp	r0, #0
 800bf20:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 800bf24:	f340 80bb 	ble.w	800c09e <_dtoa_r+0x9a6>
 800bf28:	9904      	ldr	r1, [sp, #16]
 800bf2a:	e007      	b.n	800bf3c <_dtoa_r+0x844>
 800bf2c:	40240000 	.word	0x40240000
 800bf30:	4299      	cmp	r1, r3
 800bf32:	f000 815c 	beq.w	800c1ee <_dtoa_r+0xaf6>
 800bf36:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 800bf3a:	461c      	mov	r4, r3
 800bf3c:	2a39      	cmp	r2, #57	; 0x39
 800bf3e:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
 800bf42:	d0f5      	beq.n	800bf30 <_dtoa_r+0x838>
 800bf44:	3201      	adds	r2, #1
 800bf46:	701a      	strb	r2, [r3, #0]
 800bf48:	4631      	mov	r1, r6
 800bf4a:	4658      	mov	r0, fp
 800bf4c:	f001 fae8 	bl	800d520 <_Bfree>
 800bf50:	b155      	cbz	r5, 800bf68 <_dtoa_r+0x870>
 800bf52:	9902      	ldr	r1, [sp, #8]
 800bf54:	b121      	cbz	r1, 800bf60 <_dtoa_r+0x868>
 800bf56:	42a9      	cmp	r1, r5
 800bf58:	d002      	beq.n	800bf60 <_dtoa_r+0x868>
 800bf5a:	4658      	mov	r0, fp
 800bf5c:	f001 fae0 	bl	800d520 <_Bfree>
 800bf60:	4629      	mov	r1, r5
 800bf62:	4658      	mov	r0, fp
 800bf64:	f001 fadc 	bl	800d520 <_Bfree>
 800bf68:	4651      	mov	r1, sl
 800bf6a:	4658      	mov	r0, fp
 800bf6c:	f001 fad8 	bl	800d520 <_Bfree>
 800bf70:	2200      	movs	r2, #0
 800bf72:	9b05      	ldr	r3, [sp, #20]
 800bf74:	7022      	strb	r2, [r4, #0]
 800bf76:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800bf78:	3301      	adds	r3, #1
 800bf7a:	6013      	str	r3, [r2, #0]
 800bf7c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	f43f abf2 	beq.w	800b768 <_dtoa_r+0x70>
 800bf84:	9804      	ldr	r0, [sp, #16]
 800bf86:	601c      	str	r4, [r3, #0]
 800bf88:	b017      	add	sp, #92	; 0x5c
 800bf8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf8e:	201c      	movs	r0, #28
 800bf90:	4481      	add	r9, r0
 800bf92:	4404      	add	r4, r0
 800bf94:	4480      	add	r8, r0
 800bf96:	e6fb      	b.n	800bd90 <_dtoa_r+0x698>
 800bf98:	4601      	mov	r1, r0
 800bf9a:	4658      	mov	r0, fp
 800bf9c:	f001 fc0a 	bl	800d7b4 <__pow5mult>
 800bfa0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800bfa2:	2b01      	cmp	r3, #1
 800bfa4:	4606      	mov	r6, r0
 800bfa6:	f340 80f3 	ble.w	800c190 <_dtoa_r+0xa98>
 800bfaa:	2300      	movs	r3, #0
 800bfac:	9309      	str	r3, [sp, #36]	; 0x24
 800bfae:	6933      	ldr	r3, [r6, #16]
 800bfb0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bfb4:	6918      	ldr	r0, [r3, #16]
 800bfb6:	f001 fafd 	bl	800d5b4 <__hi0bits>
 800bfba:	f1c0 0020 	rsb	r0, r0, #32
 800bfbe:	e6d8      	b.n	800bd72 <_dtoa_r+0x67a>
 800bfc0:	900a      	str	r0, [sp, #40]	; 0x28
 800bfc2:	e43d      	b.n	800b840 <_dtoa_r+0x148>
 800bfc4:	2501      	movs	r5, #1
 800bfc6:	e456      	b.n	800b876 <_dtoa_r+0x17e>
 800bfc8:	f1c3 0620 	rsb	r6, r3, #32
 800bfcc:	9b02      	ldr	r3, [sp, #8]
 800bfce:	fa03 f006 	lsl.w	r0, r3, r6
 800bfd2:	f7ff bbeb 	b.w	800b7ac <_dtoa_r+0xb4>
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	9307      	str	r3, [sp, #28]
 800bfda:	9b05      	ldr	r3, [sp, #20]
 800bfdc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bfde:	4413      	add	r3, r2
 800bfe0:	930b      	str	r3, [sp, #44]	; 0x2c
 800bfe2:	3301      	adds	r3, #1
 800bfe4:	2b01      	cmp	r3, #1
 800bfe6:	461e      	mov	r6, r3
 800bfe8:	9306      	str	r3, [sp, #24]
 800bfea:	bfb8      	it	lt
 800bfec:	2601      	movlt	r6, #1
 800bfee:	2100      	movs	r1, #0
 800bff0:	2e17      	cmp	r6, #23
 800bff2:	f8cb 1044 	str.w	r1, [fp, #68]	; 0x44
 800bff6:	9c06      	ldr	r4, [sp, #24]
 800bff8:	f77f aca4 	ble.w	800b944 <_dtoa_r+0x24c>
 800bffc:	2201      	movs	r2, #1
 800bffe:	2304      	movs	r3, #4
 800c000:	005b      	lsls	r3, r3, #1
 800c002:	f103 0014 	add.w	r0, r3, #20
 800c006:	42b0      	cmp	r0, r6
 800c008:	4611      	mov	r1, r2
 800c00a:	f102 0201 	add.w	r2, r2, #1
 800c00e:	d9f7      	bls.n	800c000 <_dtoa_r+0x908>
 800c010:	f8cb 1044 	str.w	r1, [fp, #68]	; 0x44
 800c014:	e496      	b.n	800b944 <_dtoa_r+0x24c>
 800c016:	2300      	movs	r3, #0
 800c018:	9307      	str	r3, [sp, #28]
 800c01a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	f340 80ed 	ble.w	800c1fc <_dtoa_r+0xb04>
 800c022:	930b      	str	r3, [sp, #44]	; 0x2c
 800c024:	9306      	str	r3, [sp, #24]
 800c026:	461e      	mov	r6, r3
 800c028:	e7e1      	b.n	800bfee <_dtoa_r+0x8f6>
 800c02a:	2301      	movs	r3, #1
 800c02c:	9307      	str	r3, [sp, #28]
 800c02e:	e7f4      	b.n	800c01a <_dtoa_r+0x922>
 800c030:	9b02      	ldr	r3, [sp, #8]
 800c032:	2b00      	cmp	r3, #0
 800c034:	f47f ae9c 	bne.w	800bd70 <_dtoa_r+0x678>
 800c038:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800c03c:	f3c2 0313 	ubfx	r3, r2, #0, #20
 800c040:	2b00      	cmp	r3, #0
 800c042:	f040 8199 	bne.w	800c378 <_dtoa_r+0xc80>
 800c046:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800c04a:	0d1b      	lsrs	r3, r3, #20
 800c04c:	051b      	lsls	r3, r3, #20
 800c04e:	b123      	cbz	r3, 800c05a <_dtoa_r+0x962>
 800c050:	f109 0901 	add.w	r9, r9, #1
 800c054:	f108 0801 	add.w	r8, r8, #1
 800c058:	2301      	movs	r3, #1
 800c05a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c05c:	9309      	str	r3, [sp, #36]	; 0x24
 800c05e:	2a00      	cmp	r2, #0
 800c060:	f43f ae86 	beq.w	800bd70 <_dtoa_r+0x678>
 800c064:	e7a3      	b.n	800bfae <_dtoa_r+0x8b6>
 800c066:	463a      	mov	r2, r7
 800c068:	4629      	mov	r1, r5
 800c06a:	4658      	mov	r0, fp
 800c06c:	f001 fba2 	bl	800d7b4 <__pow5mult>
 800c070:	4652      	mov	r2, sl
 800c072:	4601      	mov	r1, r0
 800c074:	4605      	mov	r5, r0
 800c076:	4658      	mov	r0, fp
 800c078:	f001 faf6 	bl	800d668 <__multiply>
 800c07c:	4651      	mov	r1, sl
 800c07e:	4607      	mov	r7, r0
 800c080:	4658      	mov	r0, fp
 800c082:	f001 fa4d 	bl	800d520 <_Bfree>
 800c086:	46ba      	mov	sl, r7
 800c088:	2e00      	cmp	r6, #0
 800c08a:	f43f ae64 	beq.w	800bd56 <_dtoa_r+0x65e>
 800c08e:	e65c      	b.n	800bd4a <_dtoa_r+0x652>
 800c090:	4629      	mov	r1, r5
 800c092:	4622      	mov	r2, r4
 800c094:	4658      	mov	r0, fp
 800c096:	f001 fbdd 	bl	800d854 <__lshift>
 800c09a:	4605      	mov	r5, r0
 800c09c:	e698      	b.n	800bdd0 <_dtoa_r+0x6d8>
 800c09e:	d107      	bne.n	800c0b0 <_dtoa_r+0x9b8>
 800c0a0:	f019 0f01 	tst.w	r9, #1
 800c0a4:	f47f af40 	bne.w	800bf28 <_dtoa_r+0x830>
 800c0a8:	e002      	b.n	800c0b0 <_dtoa_r+0x9b8>
 800c0aa:	f814 2c02 	ldrb.w	r2, [r4, #-2]
 800c0ae:	461c      	mov	r4, r3
 800c0b0:	2a30      	cmp	r2, #48	; 0x30
 800c0b2:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
 800c0b6:	d0f8      	beq.n	800c0aa <_dtoa_r+0x9b2>
 800c0b8:	e746      	b.n	800bf48 <_dtoa_r+0x850>
 800c0ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c0bc:	2a00      	cmp	r2, #0
 800c0be:	f000 8153 	beq.w	800c368 <_dtoa_r+0xc70>
 800c0c2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c0c6:	464c      	mov	r4, r9
 800c0c8:	4498      	add	r8, r3
 800c0ca:	4499      	add	r9, r3
 800c0cc:	9f08      	ldr	r7, [sp, #32]
 800c0ce:	e600      	b.n	800bcd2 <_dtoa_r+0x5da>
 800c0d0:	9b06      	ldr	r3, [sp, #24]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	f73f ad49 	bgt.w	800bb6a <_dtoa_r+0x472>
 800c0d8:	f040 80bb 	bne.w	800c252 <_dtoa_r+0xb5a>
 800c0dc:	2200      	movs	r2, #0
 800c0de:	4bb2      	ldr	r3, [pc, #712]	; (800c3a8 <_dtoa_r+0xcb0>)
 800c0e0:	4640      	mov	r0, r8
 800c0e2:	4649      	mov	r1, r9
 800c0e4:	f7f4 fda8 	bl	8000c38 <__aeabi_dmul>
 800c0e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c0ec:	f7f5 f82a 	bl	8001144 <__aeabi_dcmpge>
 800c0f0:	9e06      	ldr	r6, [sp, #24]
 800c0f2:	4635      	mov	r5, r6
 800c0f4:	2800      	cmp	r0, #0
 800c0f6:	d175      	bne.n	800c1e4 <_dtoa_r+0xaec>
 800c0f8:	9a05      	ldr	r2, [sp, #20]
 800c0fa:	3201      	adds	r2, #1
 800c0fc:	9205      	str	r2, [sp, #20]
 800c0fe:	9a04      	ldr	r2, [sp, #16]
 800c100:	2331      	movs	r3, #49	; 0x31
 800c102:	7013      	strb	r3, [r2, #0]
 800c104:	1c54      	adds	r4, r2, #1
 800c106:	4631      	mov	r1, r6
 800c108:	4658      	mov	r0, fp
 800c10a:	f001 fa09 	bl	800d520 <_Bfree>
 800c10e:	2d00      	cmp	r5, #0
 800c110:	f47f af26 	bne.w	800bf60 <_dtoa_r+0x868>
 800c114:	e728      	b.n	800bf68 <_dtoa_r+0x870>
 800c116:	f000 813f 	beq.w	800c398 <_dtoa_r+0xca0>
 800c11a:	9b05      	ldr	r3, [sp, #20]
 800c11c:	425c      	negs	r4, r3
 800c11e:	4ba3      	ldr	r3, [pc, #652]	; (800c3ac <_dtoa_r+0xcb4>)
 800c120:	f004 020f 	and.w	r2, r4, #15
 800c124:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c12c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c130:	f7f4 fd82 	bl	8000c38 <__aeabi_dmul>
 800c134:	1124      	asrs	r4, r4, #4
 800c136:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c13a:	f000 81bb 	beq.w	800c4b4 <_dtoa_r+0xdbc>
 800c13e:	4d9c      	ldr	r5, [pc, #624]	; (800c3b0 <_dtoa_r+0xcb8>)
 800c140:	2300      	movs	r3, #0
 800c142:	2602      	movs	r6, #2
 800c144:	07e2      	lsls	r2, r4, #31
 800c146:	d505      	bpl.n	800c154 <_dtoa_r+0xa5c>
 800c148:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c14c:	f7f4 fd74 	bl	8000c38 <__aeabi_dmul>
 800c150:	3601      	adds	r6, #1
 800c152:	2301      	movs	r3, #1
 800c154:	1064      	asrs	r4, r4, #1
 800c156:	f105 0508 	add.w	r5, r5, #8
 800c15a:	d1f3      	bne.n	800c144 <_dtoa_r+0xa4c>
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	f43f ac39 	beq.w	800b9d4 <_dtoa_r+0x2dc>
 800c162:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c166:	e435      	b.n	800b9d4 <_dtoa_r+0x2dc>
 800c168:	6869      	ldr	r1, [r5, #4]
 800c16a:	4658      	mov	r0, fp
 800c16c:	f001 f9b2 	bl	800d4d4 <_Balloc>
 800c170:	692b      	ldr	r3, [r5, #16]
 800c172:	3302      	adds	r3, #2
 800c174:	009a      	lsls	r2, r3, #2
 800c176:	4604      	mov	r4, r0
 800c178:	f105 010c 	add.w	r1, r5, #12
 800c17c:	300c      	adds	r0, #12
 800c17e:	f7f4 fa45 	bl	800060c <memcpy>
 800c182:	4621      	mov	r1, r4
 800c184:	2201      	movs	r2, #1
 800c186:	4658      	mov	r0, fp
 800c188:	f001 fb64 	bl	800d854 <__lshift>
 800c18c:	4680      	mov	r8, r0
 800c18e:	e624      	b.n	800bdda <_dtoa_r+0x6e2>
 800c190:	9b02      	ldr	r3, [sp, #8]
 800c192:	2b00      	cmp	r3, #0
 800c194:	f43f af50 	beq.w	800c038 <_dtoa_r+0x940>
 800c198:	e707      	b.n	800bfaa <_dtoa_r+0x8b2>
 800c19a:	2400      	movs	r4, #0
 800c19c:	f8cb 4044 	str.w	r4, [fp, #68]	; 0x44
 800c1a0:	4621      	mov	r1, r4
 800c1a2:	4658      	mov	r0, fp
 800c1a4:	f001 f996 	bl	800d4d4 <_Balloc>
 800c1a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c1ac:	930b      	str	r3, [sp, #44]	; 0x2c
 800c1ae:	9306      	str	r3, [sp, #24]
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	9004      	str	r0, [sp, #16]
 800c1b4:	9421      	str	r4, [sp, #132]	; 0x84
 800c1b6:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 800c1ba:	9307      	str	r3, [sp, #28]
 800c1bc:	e4c4      	b.n	800bb48 <_dtoa_r+0x450>
 800c1be:	f001 f9b9 	bl	800d534 <__multadd>
 800c1c2:	4627      	mov	r7, r4
 800c1c4:	4605      	mov	r5, r0
 800c1c6:	4680      	mov	r8, r0
 800c1c8:	e610      	b.n	800bdec <_dtoa_r+0x6f4>
 800c1ca:	4658      	mov	r0, fp
 800c1cc:	f001 f9a8 	bl	800d520 <_Bfree>
 800c1d0:	2301      	movs	r3, #1
 800c1d2:	e634      	b.n	800be3e <_dtoa_r+0x746>
 800c1d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c1d6:	2b02      	cmp	r3, #2
 800c1d8:	f77f adf3 	ble.w	800bdc2 <_dtoa_r+0x6ca>
 800c1dc:	9b06      	ldr	r3, [sp, #24]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	f000 80cc 	beq.w	800c37c <_dtoa_r+0xc84>
 800c1e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c1e6:	9c04      	ldr	r4, [sp, #16]
 800c1e8:	43db      	mvns	r3, r3
 800c1ea:	9305      	str	r3, [sp, #20]
 800c1ec:	e78b      	b.n	800c106 <_dtoa_r+0xa0e>
 800c1ee:	9a05      	ldr	r2, [sp, #20]
 800c1f0:	3201      	adds	r2, #1
 800c1f2:	9205      	str	r2, [sp, #20]
 800c1f4:	9a04      	ldr	r2, [sp, #16]
 800c1f6:	2331      	movs	r3, #49	; 0x31
 800c1f8:	7013      	strb	r3, [r2, #0]
 800c1fa:	e6a5      	b.n	800bf48 <_dtoa_r+0x850>
 800c1fc:	2401      	movs	r4, #1
 800c1fe:	9421      	str	r4, [sp, #132]	; 0x84
 800c200:	9406      	str	r4, [sp, #24]
 800c202:	f7ff bb9b 	b.w	800b93c <_dtoa_r+0x244>
 800c206:	4630      	mov	r0, r6
 800c208:	f7f4 fcac 	bl	8000b64 <__aeabi_i2d>
 800c20c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c210:	f7f4 fd12 	bl	8000c38 <__aeabi_dmul>
 800c214:	2200      	movs	r2, #0
 800c216:	4b67      	ldr	r3, [pc, #412]	; (800c3b4 <_dtoa_r+0xcbc>)
 800c218:	f7f4 fb58 	bl	80008cc <__adddf3>
 800c21c:	4606      	mov	r6, r0
 800c21e:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 800c222:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c226:	2200      	movs	r2, #0
 800c228:	4b5f      	ldr	r3, [pc, #380]	; (800c3a8 <_dtoa_r+0xcb0>)
 800c22a:	f7f4 fb4d 	bl	80008c8 <__aeabi_dsub>
 800c22e:	4632      	mov	r2, r6
 800c230:	463b      	mov	r3, r7
 800c232:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c236:	f7f4 ff8f 	bl	8001158 <__aeabi_dcmpgt>
 800c23a:	2800      	cmp	r0, #0
 800c23c:	d146      	bne.n	800c2cc <_dtoa_r+0xbd4>
 800c23e:	4632      	mov	r2, r6
 800c240:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c244:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c248:	f7f4 ff68 	bl	800111c <__aeabi_dcmplt>
 800c24c:	2800      	cmp	r0, #0
 800c24e:	f43f ac77 	beq.w	800bb40 <_dtoa_r+0x448>
 800c252:	2600      	movs	r6, #0
 800c254:	4635      	mov	r5, r6
 800c256:	e7c5      	b.n	800c1e4 <_dtoa_r+0xaec>
 800c258:	2301      	movs	r3, #1
 800c25a:	9307      	str	r3, [sp, #28]
 800c25c:	e6bd      	b.n	800bfda <_dtoa_r+0x8e2>
 800c25e:	4651      	mov	r1, sl
 800c260:	9a08      	ldr	r2, [sp, #32]
 800c262:	4658      	mov	r0, fp
 800c264:	f001 faa6 	bl	800d7b4 <__pow5mult>
 800c268:	4682      	mov	sl, r0
 800c26a:	e574      	b.n	800bd56 <_dtoa_r+0x65e>
 800c26c:	f8dd a008 	ldr.w	sl, [sp, #8]
 800c270:	f8dd b018 	ldr.w	fp, [sp, #24]
 800c274:	e678      	b.n	800bf68 <_dtoa_r+0x870>
 800c276:	9b08      	ldr	r3, [sp, #32]
 800c278:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c27a:	1afb      	subs	r3, r7, r3
 800c27c:	441a      	add	r2, r3
 800c27e:	e9cd 7208 	strd	r7, r2, [sp, #32]
 800c282:	2700      	movs	r7, #0
 800c284:	e51e      	b.n	800bcc4 <_dtoa_r+0x5cc>
 800c286:	2b00      	cmp	r3, #0
 800c288:	f107 0401 	add.w	r4, r7, #1
 800c28c:	f300 80bc 	bgt.w	800c408 <_dtoa_r+0xd10>
 800c290:	9502      	str	r5, [sp, #8]
 800c292:	f887 9000 	strb.w	r9, [r7]
 800c296:	4645      	mov	r5, r8
 800c298:	e656      	b.n	800bf48 <_dtoa_r+0x850>
 800c29a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c29e:	2602      	movs	r6, #2
 800c2a0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c2a4:	f7ff bb7d 	b.w	800b9a2 <_dtoa_r+0x2aa>
 800c2a8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c2ac:	f000 80be 	beq.w	800c42c <_dtoa_r+0xd34>
 800c2b0:	f109 0901 	add.w	r9, r9, #1
 800c2b4:	9502      	str	r5, [sp, #8]
 800c2b6:	f887 9000 	strb.w	r9, [r7]
 800c2ba:	4645      	mov	r5, r8
 800c2bc:	e644      	b.n	800bf48 <_dtoa_r+0x850>
 800c2be:	9b06      	ldr	r3, [sp, #24]
 800c2c0:	eba9 0403 	sub.w	r4, r9, r3
 800c2c4:	e505      	b.n	800bcd2 <_dtoa_r+0x5da>
 800c2c6:	9502      	str	r5, [sp, #8]
 800c2c8:	4645      	mov	r5, r8
 800c2ca:	e61f      	b.n	800bf0c <_dtoa_r+0x814>
 800c2cc:	2600      	movs	r6, #0
 800c2ce:	4635      	mov	r5, r6
 800c2d0:	e712      	b.n	800c0f8 <_dtoa_r+0xa00>
 800c2d2:	9a04      	ldr	r2, [sp, #16]
 800c2d4:	2330      	movs	r3, #48	; 0x30
 800c2d6:	7013      	strb	r3, [r2, #0]
 800c2d8:	9b05      	ldr	r3, [sp, #20]
 800c2da:	f814 5c01 	ldrb.w	r5, [r4, #-1]
 800c2de:	3301      	adds	r3, #1
 800c2e0:	9305      	str	r3, [sp, #20]
 800c2e2:	4613      	mov	r3, r2
 800c2e4:	e4de      	b.n	800bca4 <_dtoa_r+0x5ac>
 800c2e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2ea:	f7f4 fca5 	bl	8000c38 <__aeabi_dmul>
 800c2ee:	9b04      	ldr	r3, [sp, #16]
 800c2f0:	701d      	strb	r5, [r3, #0]
 800c2f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c2f4:	2b01      	cmp	r3, #1
 800c2f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2fa:	d023      	beq.n	800c344 <_dtoa_r+0xc4c>
 800c2fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c2fe:	9a04      	ldr	r2, [sp, #16]
 800c300:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c304:	4413      	add	r3, r2
 800c306:	46c1      	mov	r9, r8
 800c308:	4698      	mov	r8, r3
 800c30a:	2200      	movs	r2, #0
 800c30c:	4b2a      	ldr	r3, [pc, #168]	; (800c3b8 <_dtoa_r+0xcc0>)
 800c30e:	4630      	mov	r0, r6
 800c310:	4639      	mov	r1, r7
 800c312:	f7f4 fc91 	bl	8000c38 <__aeabi_dmul>
 800c316:	460f      	mov	r7, r1
 800c318:	4606      	mov	r6, r0
 800c31a:	f7f4 ff3d 	bl	8001198 <__aeabi_d2iz>
 800c31e:	4605      	mov	r5, r0
 800c320:	f7f4 fc20 	bl	8000b64 <__aeabi_i2d>
 800c324:	3530      	adds	r5, #48	; 0x30
 800c326:	4602      	mov	r2, r0
 800c328:	460b      	mov	r3, r1
 800c32a:	4630      	mov	r0, r6
 800c32c:	4639      	mov	r1, r7
 800c32e:	f7f4 facb 	bl	80008c8 <__aeabi_dsub>
 800c332:	f804 5b01 	strb.w	r5, [r4], #1
 800c336:	4544      	cmp	r4, r8
 800c338:	4606      	mov	r6, r0
 800c33a:	460f      	mov	r7, r1
 800c33c:	d1e5      	bne.n	800c30a <_dtoa_r+0xc12>
 800c33e:	46c8      	mov	r8, r9
 800c340:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800c344:	4b1d      	ldr	r3, [pc, #116]	; (800c3bc <_dtoa_r+0xcc4>)
 800c346:	2200      	movs	r2, #0
 800c348:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c34c:	f7f4 fabe 	bl	80008cc <__adddf3>
 800c350:	4632      	mov	r2, r6
 800c352:	463b      	mov	r3, r7
 800c354:	f7f4 fee2 	bl	800111c <__aeabi_dcmplt>
 800c358:	2800      	cmp	r0, #0
 800c35a:	d06d      	beq.n	800c438 <_dtoa_r+0xd40>
 800c35c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c35e:	9305      	str	r3, [sp, #20]
 800c360:	f814 5c01 	ldrb.w	r5, [r4, #-1]
 800c364:	9a04      	ldr	r2, [sp, #16]
 800c366:	e499      	b.n	800bc9c <_dtoa_r+0x5a4>
 800c368:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c36a:	9f08      	ldr	r7, [sp, #32]
 800c36c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c370:	464c      	mov	r4, r9
 800c372:	4498      	add	r8, r3
 800c374:	4499      	add	r9, r3
 800c376:	e4ac      	b.n	800bcd2 <_dtoa_r+0x5da>
 800c378:	2300      	movs	r3, #0
 800c37a:	e66e      	b.n	800c05a <_dtoa_r+0x962>
 800c37c:	4631      	mov	r1, r6
 800c37e:	2205      	movs	r2, #5
 800c380:	4658      	mov	r0, fp
 800c382:	f001 f8d7 	bl	800d534 <__multadd>
 800c386:	4601      	mov	r1, r0
 800c388:	4606      	mov	r6, r0
 800c38a:	4650      	mov	r0, sl
 800c38c:	f001 fab8 	bl	800d900 <__mcmp>
 800c390:	2800      	cmp	r0, #0
 800c392:	f73f aeb1 	bgt.w	800c0f8 <_dtoa_r+0xa00>
 800c396:	e725      	b.n	800c1e4 <_dtoa_r+0xaec>
 800c398:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800c39c:	2602      	movs	r6, #2
 800c39e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c3a2:	f7ff bb17 	b.w	800b9d4 <_dtoa_r+0x2dc>
 800c3a6:	bf00      	nop
 800c3a8:	40140000 	.word	0x40140000
 800c3ac:	0800ec00 	.word	0x0800ec00
 800c3b0:	0800ebd8 	.word	0x0800ebd8
 800c3b4:	401c0000 	.word	0x401c0000
 800c3b8:	40240000 	.word	0x40240000
 800c3bc:	3fe00000 	.word	0x3fe00000
 800c3c0:	9b06      	ldr	r3, [sp, #24]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	f43f af1f 	beq.w	800c206 <_dtoa_r+0xb0e>
 800c3c8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800c3ca:	2c00      	cmp	r4, #0
 800c3cc:	f77f abb8 	ble.w	800bb40 <_dtoa_r+0x448>
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	4b42      	ldr	r3, [pc, #264]	; (800c4dc <_dtoa_r+0xde4>)
 800c3d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3d8:	f7f4 fc2e 	bl	8000c38 <__aeabi_dmul>
 800c3dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3e0:	1c70      	adds	r0, r6, #1
 800c3e2:	f7f4 fbbf 	bl	8000b64 <__aeabi_i2d>
 800c3e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c3ea:	f7f4 fc25 	bl	8000c38 <__aeabi_dmul>
 800c3ee:	4b3c      	ldr	r3, [pc, #240]	; (800c4e0 <_dtoa_r+0xde8>)
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	f7f4 fa6b 	bl	80008cc <__adddf3>
 800c3f6:	9b05      	ldr	r3, [sp, #20]
 800c3f8:	940e      	str	r4, [sp, #56]	; 0x38
 800c3fa:	3b01      	subs	r3, #1
 800c3fc:	4606      	mov	r6, r0
 800c3fe:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 800c402:	9313      	str	r3, [sp, #76]	; 0x4c
 800c404:	f7ff bb07 	b.w	800ba16 <_dtoa_r+0x31e>
 800c408:	4651      	mov	r1, sl
 800c40a:	2201      	movs	r2, #1
 800c40c:	4658      	mov	r0, fp
 800c40e:	f001 fa21 	bl	800d854 <__lshift>
 800c412:	4631      	mov	r1, r6
 800c414:	4682      	mov	sl, r0
 800c416:	f001 fa73 	bl	800d900 <__mcmp>
 800c41a:	2800      	cmp	r0, #0
 800c41c:	dd32      	ble.n	800c484 <_dtoa_r+0xd8c>
 800c41e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c422:	d003      	beq.n	800c42c <_dtoa_r+0xd34>
 800c424:	9b08      	ldr	r3, [sp, #32]
 800c426:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c42a:	e731      	b.n	800c290 <_dtoa_r+0xb98>
 800c42c:	2239      	movs	r2, #57	; 0x39
 800c42e:	9502      	str	r5, [sp, #8]
 800c430:	703a      	strb	r2, [r7, #0]
 800c432:	4645      	mov	r5, r8
 800c434:	9904      	ldr	r1, [sp, #16]
 800c436:	e581      	b.n	800bf3c <_dtoa_r+0x844>
 800c438:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c43c:	2000      	movs	r0, #0
 800c43e:	4929      	ldr	r1, [pc, #164]	; (800c4e4 <_dtoa_r+0xdec>)
 800c440:	f7f4 fa42 	bl	80008c8 <__aeabi_dsub>
 800c444:	4632      	mov	r2, r6
 800c446:	463b      	mov	r3, r7
 800c448:	f7f4 fe86 	bl	8001158 <__aeabi_dcmpgt>
 800c44c:	b910      	cbnz	r0, 800c454 <_dtoa_r+0xd5c>
 800c44e:	f7ff bb77 	b.w	800bb40 <_dtoa_r+0x448>
 800c452:	4614      	mov	r4, r2
 800c454:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800c458:	2b30      	cmp	r3, #48	; 0x30
 800c45a:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
 800c45e:	d0f8      	beq.n	800c452 <_dtoa_r+0xd5a>
 800c460:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c462:	9305      	str	r3, [sp, #20]
 800c464:	e580      	b.n	800bf68 <_dtoa_r+0x870>
 800c466:	f8dd a008 	ldr.w	sl, [sp, #8]
 800c46a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c46c:	9305      	str	r3, [sp, #20]
 800c46e:	9a04      	ldr	r2, [sp, #16]
 800c470:	e414      	b.n	800bc9c <_dtoa_r+0x5a4>
 800c472:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c476:	f107 0401 	add.w	r4, r7, #1
 800c47a:	d0d7      	beq.n	800c42c <_dtoa_r+0xd34>
 800c47c:	9b02      	ldr	r3, [sp, #8]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	dcd0      	bgt.n	800c424 <_dtoa_r+0xd2c>
 800c482:	e705      	b.n	800c290 <_dtoa_r+0xb98>
 800c484:	f47f af04 	bne.w	800c290 <_dtoa_r+0xb98>
 800c488:	f019 0f01 	tst.w	r9, #1
 800c48c:	f43f af00 	beq.w	800c290 <_dtoa_r+0xb98>
 800c490:	e7c5      	b.n	800c41e <_dtoa_r+0xd26>
 800c492:	4629      	mov	r1, r5
 800c494:	2300      	movs	r3, #0
 800c496:	220a      	movs	r2, #10
 800c498:	4658      	mov	r0, fp
 800c49a:	f001 f84b 	bl	800d534 <__multadd>
 800c49e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	4605      	mov	r5, r0
 800c4a4:	dd09      	ble.n	800c4ba <_dtoa_r+0xdc2>
 800c4a6:	9306      	str	r3, [sp, #24]
 800c4a8:	e48f      	b.n	800bdca <_dtoa_r+0x6d2>
 800c4aa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c4ac:	2b02      	cmp	r3, #2
 800c4ae:	dc09      	bgt.n	800c4c4 <_dtoa_r+0xdcc>
 800c4b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4b2:	e50e      	b.n	800bed2 <_dtoa_r+0x7da>
 800c4b4:	2602      	movs	r6, #2
 800c4b6:	f7ff ba8d 	b.w	800b9d4 <_dtoa_r+0x2dc>
 800c4ba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c4bc:	2b02      	cmp	r3, #2
 800c4be:	dc01      	bgt.n	800c4c4 <_dtoa_r+0xdcc>
 800c4c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4c2:	e7f0      	b.n	800c4a6 <_dtoa_r+0xdae>
 800c4c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4c6:	9306      	str	r3, [sp, #24]
 800c4c8:	e688      	b.n	800c1dc <_dtoa_r+0xae4>
 800c4ca:	4b07      	ldr	r3, [pc, #28]	; (800c4e8 <_dtoa_r+0xdf0>)
 800c4cc:	9304      	str	r3, [sp, #16]
 800c4ce:	f7ff b94b 	b.w	800b768 <_dtoa_r+0x70>
 800c4d2:	f43f ac5d 	beq.w	800bd90 <_dtoa_r+0x698>
 800c4d6:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 800c4da:	e559      	b.n	800bf90 <_dtoa_r+0x898>
 800c4dc:	40240000 	.word	0x40240000
 800c4e0:	401c0000 	.word	0x401c0000
 800c4e4:	3fe00000 	.word	0x3fe00000
 800c4e8:	0800ebb4 	.word	0x0800ebb4

0800c4ec <__sflush_r>:
 800c4ec:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 800c4f0:	b29a      	uxth	r2, r3
 800c4f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4f6:	460c      	mov	r4, r1
 800c4f8:	0711      	lsls	r1, r2, #28
 800c4fa:	4680      	mov	r8, r0
 800c4fc:	d444      	bmi.n	800c588 <__sflush_r+0x9c>
 800c4fe:	6862      	ldr	r2, [r4, #4]
 800c500:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c504:	2a00      	cmp	r2, #0
 800c506:	81a3      	strh	r3, [r4, #12]
 800c508:	dd59      	ble.n	800c5be <__sflush_r+0xd2>
 800c50a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800c50c:	2d00      	cmp	r5, #0
 800c50e:	d053      	beq.n	800c5b8 <__sflush_r+0xcc>
 800c510:	2200      	movs	r2, #0
 800c512:	b29b      	uxth	r3, r3
 800c514:	f8d8 6000 	ldr.w	r6, [r8]
 800c518:	69e1      	ldr	r1, [r4, #28]
 800c51a:	f8c8 2000 	str.w	r2, [r8]
 800c51e:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
 800c522:	f040 8083 	bne.w	800c62c <__sflush_r+0x140>
 800c526:	2301      	movs	r3, #1
 800c528:	4640      	mov	r0, r8
 800c52a:	47a8      	blx	r5
 800c52c:	1c42      	adds	r2, r0, #1
 800c52e:	d04a      	beq.n	800c5c6 <__sflush_r+0xda>
 800c530:	89a3      	ldrh	r3, [r4, #12]
 800c532:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800c534:	69e1      	ldr	r1, [r4, #28]
 800c536:	075b      	lsls	r3, r3, #29
 800c538:	d505      	bpl.n	800c546 <__sflush_r+0x5a>
 800c53a:	6862      	ldr	r2, [r4, #4]
 800c53c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c53e:	1a80      	subs	r0, r0, r2
 800c540:	b10b      	cbz	r3, 800c546 <__sflush_r+0x5a>
 800c542:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c544:	1ac0      	subs	r0, r0, r3
 800c546:	4602      	mov	r2, r0
 800c548:	2300      	movs	r3, #0
 800c54a:	4640      	mov	r0, r8
 800c54c:	47a8      	blx	r5
 800c54e:	1c47      	adds	r7, r0, #1
 800c550:	d045      	beq.n	800c5de <__sflush_r+0xf2>
 800c552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c556:	6922      	ldr	r2, [r4, #16]
 800c558:	6022      	str	r2, [r4, #0]
 800c55a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c55e:	2200      	movs	r2, #0
 800c560:	81a3      	strh	r3, [r4, #12]
 800c562:	04db      	lsls	r3, r3, #19
 800c564:	6062      	str	r2, [r4, #4]
 800c566:	d500      	bpl.n	800c56a <__sflush_r+0x7e>
 800c568:	6520      	str	r0, [r4, #80]	; 0x50
 800c56a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c56c:	f8c8 6000 	str.w	r6, [r8]
 800c570:	b311      	cbz	r1, 800c5b8 <__sflush_r+0xcc>
 800c572:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800c576:	4299      	cmp	r1, r3
 800c578:	d002      	beq.n	800c580 <__sflush_r+0x94>
 800c57a:	4640      	mov	r0, r8
 800c57c:	f000 f944 	bl	800c808 <_free_r>
 800c580:	2000      	movs	r0, #0
 800c582:	6320      	str	r0, [r4, #48]	; 0x30
 800c584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c588:	6926      	ldr	r6, [r4, #16]
 800c58a:	b1ae      	cbz	r6, 800c5b8 <__sflush_r+0xcc>
 800c58c:	6825      	ldr	r5, [r4, #0]
 800c58e:	6026      	str	r6, [r4, #0]
 800c590:	0792      	lsls	r2, r2, #30
 800c592:	bf0c      	ite	eq
 800c594:	6963      	ldreq	r3, [r4, #20]
 800c596:	2300      	movne	r3, #0
 800c598:	1bad      	subs	r5, r5, r6
 800c59a:	60a3      	str	r3, [r4, #8]
 800c59c:	e00a      	b.n	800c5b4 <__sflush_r+0xc8>
 800c59e:	462b      	mov	r3, r5
 800c5a0:	4632      	mov	r2, r6
 800c5a2:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800c5a4:	69e1      	ldr	r1, [r4, #28]
 800c5a6:	4640      	mov	r0, r8
 800c5a8:	47b8      	blx	r7
 800c5aa:	2800      	cmp	r0, #0
 800c5ac:	eba5 0500 	sub.w	r5, r5, r0
 800c5b0:	4406      	add	r6, r0
 800c5b2:	dd2b      	ble.n	800c60c <__sflush_r+0x120>
 800c5b4:	2d00      	cmp	r5, #0
 800c5b6:	dcf2      	bgt.n	800c59e <__sflush_r+0xb2>
 800c5b8:	2000      	movs	r0, #0
 800c5ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5be:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800c5c0:	2a00      	cmp	r2, #0
 800c5c2:	dca2      	bgt.n	800c50a <__sflush_r+0x1e>
 800c5c4:	e7f8      	b.n	800c5b8 <__sflush_r+0xcc>
 800c5c6:	f8d8 3000 	ldr.w	r3, [r8]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d0b0      	beq.n	800c530 <__sflush_r+0x44>
 800c5ce:	2b1d      	cmp	r3, #29
 800c5d0:	d001      	beq.n	800c5d6 <__sflush_r+0xea>
 800c5d2:	2b16      	cmp	r3, #22
 800c5d4:	d12c      	bne.n	800c630 <__sflush_r+0x144>
 800c5d6:	f8c8 6000 	str.w	r6, [r8]
 800c5da:	2000      	movs	r0, #0
 800c5dc:	e7ed      	b.n	800c5ba <__sflush_r+0xce>
 800c5de:	f8d8 1000 	ldr.w	r1, [r8]
 800c5e2:	291d      	cmp	r1, #29
 800c5e4:	d81a      	bhi.n	800c61c <__sflush_r+0x130>
 800c5e6:	4b15      	ldr	r3, [pc, #84]	; (800c63c <__sflush_r+0x150>)
 800c5e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c5ec:	40cb      	lsrs	r3, r1
 800c5ee:	43db      	mvns	r3, r3
 800c5f0:	f013 0301 	ands.w	r3, r3, #1
 800c5f4:	d114      	bne.n	800c620 <__sflush_r+0x134>
 800c5f6:	6925      	ldr	r5, [r4, #16]
 800c5f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c5fc:	e9c4 5300 	strd	r5, r3, [r4]
 800c600:	04d5      	lsls	r5, r2, #19
 800c602:	81a2      	strh	r2, [r4, #12]
 800c604:	d5b1      	bpl.n	800c56a <__sflush_r+0x7e>
 800c606:	2900      	cmp	r1, #0
 800c608:	d1af      	bne.n	800c56a <__sflush_r+0x7e>
 800c60a:	e7ad      	b.n	800c568 <__sflush_r+0x7c>
 800c60c:	89a3      	ldrh	r3, [r4, #12]
 800c60e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c612:	81a3      	strh	r3, [r4, #12]
 800c614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c61c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c620:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c624:	81a2      	strh	r2, [r4, #12]
 800c626:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c62a:	e7c6      	b.n	800c5ba <__sflush_r+0xce>
 800c62c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800c62e:	e782      	b.n	800c536 <__sflush_r+0x4a>
 800c630:	89a3      	ldrh	r3, [r4, #12]
 800c632:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c636:	81a3      	strh	r3, [r4, #12]
 800c638:	e7bf      	b.n	800c5ba <__sflush_r+0xce>
 800c63a:	bf00      	nop
 800c63c:	20400001 	.word	0x20400001

0800c640 <_fflush_r>:
 800c640:	b538      	push	{r3, r4, r5, lr}
 800c642:	460d      	mov	r5, r1
 800c644:	4604      	mov	r4, r0
 800c646:	b108      	cbz	r0, 800c64c <_fflush_r+0xc>
 800c648:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c64a:	b1a3      	cbz	r3, 800c676 <_fflush_r+0x36>
 800c64c:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
 800c650:	b1b8      	cbz	r0, 800c682 <_fflush_r+0x42>
 800c652:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c654:	07db      	lsls	r3, r3, #31
 800c656:	d401      	bmi.n	800c65c <_fflush_r+0x1c>
 800c658:	0581      	lsls	r1, r0, #22
 800c65a:	d51a      	bpl.n	800c692 <_fflush_r+0x52>
 800c65c:	4620      	mov	r0, r4
 800c65e:	4629      	mov	r1, r5
 800c660:	f7ff ff44 	bl	800c4ec <__sflush_r>
 800c664:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c666:	07da      	lsls	r2, r3, #31
 800c668:	4604      	mov	r4, r0
 800c66a:	d402      	bmi.n	800c672 <_fflush_r+0x32>
 800c66c:	89ab      	ldrh	r3, [r5, #12]
 800c66e:	059b      	lsls	r3, r3, #22
 800c670:	d50a      	bpl.n	800c688 <_fflush_r+0x48>
 800c672:	4620      	mov	r0, r4
 800c674:	bd38      	pop	{r3, r4, r5, pc}
 800c676:	f000 f83f 	bl	800c6f8 <__sinit>
 800c67a:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
 800c67e:	2800      	cmp	r0, #0
 800c680:	d1e7      	bne.n	800c652 <_fflush_r+0x12>
 800c682:	4604      	mov	r4, r0
 800c684:	4620      	mov	r0, r4
 800c686:	bd38      	pop	{r3, r4, r5, pc}
 800c688:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c68a:	f000 fb7f 	bl	800cd8c <__retarget_lock_release_recursive>
 800c68e:	4620      	mov	r0, r4
 800c690:	bd38      	pop	{r3, r4, r5, pc}
 800c692:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c694:	f000 fb78 	bl	800cd88 <__retarget_lock_acquire_recursive>
 800c698:	e7e0      	b.n	800c65c <_fflush_r+0x1c>
 800c69a:	bf00      	nop

0800c69c <std>:
 800c69c:	b510      	push	{r4, lr}
 800c69e:	2300      	movs	r3, #0
 800c6a0:	4604      	mov	r4, r0
 800c6a2:	8181      	strh	r1, [r0, #12]
 800c6a4:	81c2      	strh	r2, [r0, #14]
 800c6a6:	e9c0 3300 	strd	r3, r3, [r0]
 800c6aa:	6083      	str	r3, [r0, #8]
 800c6ac:	6643      	str	r3, [r0, #100]	; 0x64
 800c6ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c6b2:	6183      	str	r3, [r0, #24]
 800c6b4:	4619      	mov	r1, r3
 800c6b6:	2208      	movs	r2, #8
 800c6b8:	305c      	adds	r0, #92	; 0x5c
 800c6ba:	f7fc f80d 	bl	80086d8 <memset>
 800c6be:	4807      	ldr	r0, [pc, #28]	; (800c6dc <std+0x40>)
 800c6c0:	4907      	ldr	r1, [pc, #28]	; (800c6e0 <std+0x44>)
 800c6c2:	4a08      	ldr	r2, [pc, #32]	; (800c6e4 <std+0x48>)
 800c6c4:	4b08      	ldr	r3, [pc, #32]	; (800c6e8 <std+0x4c>)
 800c6c6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c6c8:	e9c4 4007 	strd	r4, r0, [r4, #28]
 800c6cc:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
 800c6d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c6d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6d8:	f000 bb52 	b.w	800cd80 <__retarget_lock_init_recursive>
 800c6dc:	0800de55 	.word	0x0800de55
 800c6e0:	0800de79 	.word	0x0800de79
 800c6e4:	0800deb5 	.word	0x0800deb5
 800c6e8:	0800ded5 	.word	0x0800ded5

0800c6ec <_cleanup_r>:
 800c6ec:	4901      	ldr	r1, [pc, #4]	; (800c6f4 <_cleanup_r+0x8>)
 800c6ee:	f000 bafd 	b.w	800ccec <_fwalk_reent>
 800c6f2:	bf00      	nop
 800c6f4:	0800e131 	.word	0x0800e131

0800c6f8 <__sinit>:
 800c6f8:	b510      	push	{r4, lr}
 800c6fa:	4604      	mov	r4, r0
 800c6fc:	4812      	ldr	r0, [pc, #72]	; (800c748 <__sinit+0x50>)
 800c6fe:	f000 fb43 	bl	800cd88 <__retarget_lock_acquire_recursive>
 800c702:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c704:	b9d2      	cbnz	r2, 800c73c <__sinit+0x44>
 800c706:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 800c70a:	4810      	ldr	r0, [pc, #64]	; (800c74c <__sinit+0x54>)
 800c70c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 800c710:	2103      	movs	r1, #3
 800c712:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 800c716:	63e0      	str	r0, [r4, #60]	; 0x3c
 800c718:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
 800c71c:	6860      	ldr	r0, [r4, #4]
 800c71e:	2104      	movs	r1, #4
 800c720:	f7ff ffbc 	bl	800c69c <std>
 800c724:	2201      	movs	r2, #1
 800c726:	2109      	movs	r1, #9
 800c728:	68a0      	ldr	r0, [r4, #8]
 800c72a:	f7ff ffb7 	bl	800c69c <std>
 800c72e:	2202      	movs	r2, #2
 800c730:	2112      	movs	r1, #18
 800c732:	68e0      	ldr	r0, [r4, #12]
 800c734:	f7ff ffb2 	bl	800c69c <std>
 800c738:	2301      	movs	r3, #1
 800c73a:	63a3      	str	r3, [r4, #56]	; 0x38
 800c73c:	4802      	ldr	r0, [pc, #8]	; (800c748 <__sinit+0x50>)
 800c73e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c742:	f000 bb23 	b.w	800cd8c <__retarget_lock_release_recursive>
 800c746:	bf00      	nop
 800c748:	2000332c 	.word	0x2000332c
 800c74c:	0800c6ed 	.word	0x0800c6ed

0800c750 <__sfp_lock_acquire>:
 800c750:	4801      	ldr	r0, [pc, #4]	; (800c758 <__sfp_lock_acquire+0x8>)
 800c752:	f000 bb19 	b.w	800cd88 <__retarget_lock_acquire_recursive>
 800c756:	bf00      	nop
 800c758:	20003340 	.word	0x20003340

0800c75c <__sfp_lock_release>:
 800c75c:	4801      	ldr	r0, [pc, #4]	; (800c764 <__sfp_lock_release+0x8>)
 800c75e:	f000 bb15 	b.w	800cd8c <__retarget_lock_release_recursive>
 800c762:	bf00      	nop
 800c764:	20003340 	.word	0x20003340

0800c768 <_malloc_trim_r>:
 800c768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c76a:	4f24      	ldr	r7, [pc, #144]	; (800c7fc <_malloc_trim_r+0x94>)
 800c76c:	460c      	mov	r4, r1
 800c76e:	4606      	mov	r6, r0
 800c770:	f000 fea4 	bl	800d4bc <__malloc_lock>
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	685d      	ldr	r5, [r3, #4]
 800c778:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
 800c77c:	310f      	adds	r1, #15
 800c77e:	f025 0503 	bic.w	r5, r5, #3
 800c782:	4429      	add	r1, r5
 800c784:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 800c788:	f021 010f 	bic.w	r1, r1, #15
 800c78c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 800c790:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800c794:	db07      	blt.n	800c7a6 <_malloc_trim_r+0x3e>
 800c796:	2100      	movs	r1, #0
 800c798:	4630      	mov	r0, r6
 800c79a:	f001 fb49 	bl	800de30 <_sbrk_r>
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	442b      	add	r3, r5
 800c7a2:	4298      	cmp	r0, r3
 800c7a4:	d004      	beq.n	800c7b0 <_malloc_trim_r+0x48>
 800c7a6:	4630      	mov	r0, r6
 800c7a8:	f000 fe8e 	bl	800d4c8 <__malloc_unlock>
 800c7ac:	2000      	movs	r0, #0
 800c7ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7b0:	4261      	negs	r1, r4
 800c7b2:	4630      	mov	r0, r6
 800c7b4:	f001 fb3c 	bl	800de30 <_sbrk_r>
 800c7b8:	3001      	adds	r0, #1
 800c7ba:	d00d      	beq.n	800c7d8 <_malloc_trim_r+0x70>
 800c7bc:	4b10      	ldr	r3, [pc, #64]	; (800c800 <_malloc_trim_r+0x98>)
 800c7be:	68ba      	ldr	r2, [r7, #8]
 800c7c0:	6819      	ldr	r1, [r3, #0]
 800c7c2:	1b2d      	subs	r5, r5, r4
 800c7c4:	f045 0501 	orr.w	r5, r5, #1
 800c7c8:	4630      	mov	r0, r6
 800c7ca:	1b09      	subs	r1, r1, r4
 800c7cc:	6055      	str	r5, [r2, #4]
 800c7ce:	6019      	str	r1, [r3, #0]
 800c7d0:	f000 fe7a 	bl	800d4c8 <__malloc_unlock>
 800c7d4:	2001      	movs	r0, #1
 800c7d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7d8:	2100      	movs	r1, #0
 800c7da:	4630      	mov	r0, r6
 800c7dc:	f001 fb28 	bl	800de30 <_sbrk_r>
 800c7e0:	68ba      	ldr	r2, [r7, #8]
 800c7e2:	1a83      	subs	r3, r0, r2
 800c7e4:	2b0f      	cmp	r3, #15
 800c7e6:	ddde      	ble.n	800c7a6 <_malloc_trim_r+0x3e>
 800c7e8:	4c06      	ldr	r4, [pc, #24]	; (800c804 <_malloc_trim_r+0x9c>)
 800c7ea:	4905      	ldr	r1, [pc, #20]	; (800c800 <_malloc_trim_r+0x98>)
 800c7ec:	6824      	ldr	r4, [r4, #0]
 800c7ee:	f043 0301 	orr.w	r3, r3, #1
 800c7f2:	1b00      	subs	r0, r0, r4
 800c7f4:	6053      	str	r3, [r2, #4]
 800c7f6:	6008      	str	r0, [r1, #0]
 800c7f8:	e7d5      	b.n	800c7a6 <_malloc_trim_r+0x3e>
 800c7fa:	bf00      	nop
 800c7fc:	200005d4 	.word	0x200005d4
 800c800:	200019fc 	.word	0x200019fc
 800c804:	200009dc 	.word	0x200009dc

0800c808 <_free_r>:
 800c808:	2900      	cmp	r1, #0
 800c80a:	d053      	beq.n	800c8b4 <_free_r+0xac>
 800c80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c80e:	460c      	mov	r4, r1
 800c810:	4606      	mov	r6, r0
 800c812:	f000 fe53 	bl	800d4bc <__malloc_lock>
 800c816:	f854 cc04 	ldr.w	ip, [r4, #-4]
 800c81a:	4f71      	ldr	r7, [pc, #452]	; (800c9e0 <_free_r+0x1d8>)
 800c81c:	f02c 0101 	bic.w	r1, ip, #1
 800c820:	f1a4 0508 	sub.w	r5, r4, #8
 800c824:	186b      	adds	r3, r5, r1
 800c826:	68b8      	ldr	r0, [r7, #8]
 800c828:	685a      	ldr	r2, [r3, #4]
 800c82a:	4298      	cmp	r0, r3
 800c82c:	f022 0203 	bic.w	r2, r2, #3
 800c830:	d053      	beq.n	800c8da <_free_r+0xd2>
 800c832:	f01c 0f01 	tst.w	ip, #1
 800c836:	605a      	str	r2, [r3, #4]
 800c838:	eb03 0002 	add.w	r0, r3, r2
 800c83c:	d13b      	bne.n	800c8b6 <_free_r+0xae>
 800c83e:	f854 cc08 	ldr.w	ip, [r4, #-8]
 800c842:	6840      	ldr	r0, [r0, #4]
 800c844:	eba5 050c 	sub.w	r5, r5, ip
 800c848:	f107 0e08 	add.w	lr, r7, #8
 800c84c:	68ac      	ldr	r4, [r5, #8]
 800c84e:	4574      	cmp	r4, lr
 800c850:	4461      	add	r1, ip
 800c852:	f000 0001 	and.w	r0, r0, #1
 800c856:	d075      	beq.n	800c944 <_free_r+0x13c>
 800c858:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 800c85c:	f8c4 c00c 	str.w	ip, [r4, #12]
 800c860:	f8cc 4008 	str.w	r4, [ip, #8]
 800c864:	b360      	cbz	r0, 800c8c0 <_free_r+0xb8>
 800c866:	f041 0301 	orr.w	r3, r1, #1
 800c86a:	606b      	str	r3, [r5, #4]
 800c86c:	5069      	str	r1, [r5, r1]
 800c86e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c872:	d350      	bcc.n	800c916 <_free_r+0x10e>
 800c874:	0a4b      	lsrs	r3, r1, #9
 800c876:	2b04      	cmp	r3, #4
 800c878:	d870      	bhi.n	800c95c <_free_r+0x154>
 800c87a:	098b      	lsrs	r3, r1, #6
 800c87c:	f103 0439 	add.w	r4, r3, #57	; 0x39
 800c880:	00e4      	lsls	r4, r4, #3
 800c882:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c886:	1938      	adds	r0, r7, r4
 800c888:	593b      	ldr	r3, [r7, r4]
 800c88a:	3808      	subs	r0, #8
 800c88c:	4298      	cmp	r0, r3
 800c88e:	d078      	beq.n	800c982 <_free_r+0x17a>
 800c890:	685a      	ldr	r2, [r3, #4]
 800c892:	f022 0203 	bic.w	r2, r2, #3
 800c896:	428a      	cmp	r2, r1
 800c898:	d971      	bls.n	800c97e <_free_r+0x176>
 800c89a:	689b      	ldr	r3, [r3, #8]
 800c89c:	4298      	cmp	r0, r3
 800c89e:	d1f7      	bne.n	800c890 <_free_r+0x88>
 800c8a0:	68c3      	ldr	r3, [r0, #12]
 800c8a2:	e9c5 0302 	strd	r0, r3, [r5, #8]
 800c8a6:	609d      	str	r5, [r3, #8]
 800c8a8:	60c5      	str	r5, [r0, #12]
 800c8aa:	4630      	mov	r0, r6
 800c8ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c8b0:	f000 be0a 	b.w	800d4c8 <__malloc_unlock>
 800c8b4:	4770      	bx	lr
 800c8b6:	6840      	ldr	r0, [r0, #4]
 800c8b8:	f000 0001 	and.w	r0, r0, #1
 800c8bc:	2800      	cmp	r0, #0
 800c8be:	d1d2      	bne.n	800c866 <_free_r+0x5e>
 800c8c0:	6898      	ldr	r0, [r3, #8]
 800c8c2:	4c48      	ldr	r4, [pc, #288]	; (800c9e4 <_free_r+0x1dc>)
 800c8c4:	4411      	add	r1, r2
 800c8c6:	42a0      	cmp	r0, r4
 800c8c8:	f041 0201 	orr.w	r2, r1, #1
 800c8cc:	d062      	beq.n	800c994 <_free_r+0x18c>
 800c8ce:	68db      	ldr	r3, [r3, #12]
 800c8d0:	60c3      	str	r3, [r0, #12]
 800c8d2:	6098      	str	r0, [r3, #8]
 800c8d4:	606a      	str	r2, [r5, #4]
 800c8d6:	5069      	str	r1, [r5, r1]
 800c8d8:	e7c9      	b.n	800c86e <_free_r+0x66>
 800c8da:	f01c 0f01 	tst.w	ip, #1
 800c8de:	440a      	add	r2, r1
 800c8e0:	d107      	bne.n	800c8f2 <_free_r+0xea>
 800c8e2:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800c8e6:	1aed      	subs	r5, r5, r3
 800c8e8:	441a      	add	r2, r3
 800c8ea:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 800c8ee:	60cb      	str	r3, [r1, #12]
 800c8f0:	6099      	str	r1, [r3, #8]
 800c8f2:	4b3d      	ldr	r3, [pc, #244]	; (800c9e8 <_free_r+0x1e0>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	f042 0101 	orr.w	r1, r2, #1
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	6069      	str	r1, [r5, #4]
 800c8fe:	60bd      	str	r5, [r7, #8]
 800c900:	d804      	bhi.n	800c90c <_free_r+0x104>
 800c902:	4b3a      	ldr	r3, [pc, #232]	; (800c9ec <_free_r+0x1e4>)
 800c904:	4630      	mov	r0, r6
 800c906:	6819      	ldr	r1, [r3, #0]
 800c908:	f7ff ff2e 	bl	800c768 <_malloc_trim_r>
 800c90c:	4630      	mov	r0, r6
 800c90e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c912:	f000 bdd9 	b.w	800d4c8 <__malloc_unlock>
 800c916:	08c9      	lsrs	r1, r1, #3
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	1c4a      	adds	r2, r1, #1
 800c91c:	2301      	movs	r3, #1
 800c91e:	1089      	asrs	r1, r1, #2
 800c920:	408b      	lsls	r3, r1
 800c922:	4303      	orrs	r3, r0
 800c924:	eb07 01c2 	add.w	r1, r7, r2, lsl #3
 800c928:	f857 0032 	ldr.w	r0, [r7, r2, lsl #3]
 800c92c:	607b      	str	r3, [r7, #4]
 800c92e:	3908      	subs	r1, #8
 800c930:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800c934:	f847 5032 	str.w	r5, [r7, r2, lsl #3]
 800c938:	60c5      	str	r5, [r0, #12]
 800c93a:	4630      	mov	r0, r6
 800c93c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c940:	f000 bdc2 	b.w	800d4c8 <__malloc_unlock>
 800c944:	2800      	cmp	r0, #0
 800c946:	d145      	bne.n	800c9d4 <_free_r+0x1cc>
 800c948:	440a      	add	r2, r1
 800c94a:	e9d3 1302 	ldrd	r1, r3, [r3, #8]
 800c94e:	f042 0001 	orr.w	r0, r2, #1
 800c952:	60cb      	str	r3, [r1, #12]
 800c954:	6099      	str	r1, [r3, #8]
 800c956:	6068      	str	r0, [r5, #4]
 800c958:	50aa      	str	r2, [r5, r2]
 800c95a:	e7d7      	b.n	800c90c <_free_r+0x104>
 800c95c:	2b14      	cmp	r3, #20
 800c95e:	d908      	bls.n	800c972 <_free_r+0x16a>
 800c960:	2b54      	cmp	r3, #84	; 0x54
 800c962:	d81e      	bhi.n	800c9a2 <_free_r+0x19a>
 800c964:	0b0b      	lsrs	r3, r1, #12
 800c966:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 800c96a:	00e4      	lsls	r4, r4, #3
 800c96c:	f103 026e 	add.w	r2, r3, #110	; 0x6e
 800c970:	e789      	b.n	800c886 <_free_r+0x7e>
 800c972:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 800c976:	00e4      	lsls	r4, r4, #3
 800c978:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 800c97c:	e783      	b.n	800c886 <_free_r+0x7e>
 800c97e:	4618      	mov	r0, r3
 800c980:	e78e      	b.n	800c8a0 <_free_r+0x98>
 800c982:	1093      	asrs	r3, r2, #2
 800c984:	6879      	ldr	r1, [r7, #4]
 800c986:	2201      	movs	r2, #1
 800c988:	fa02 f303 	lsl.w	r3, r2, r3
 800c98c:	430b      	orrs	r3, r1
 800c98e:	607b      	str	r3, [r7, #4]
 800c990:	4603      	mov	r3, r0
 800c992:	e786      	b.n	800c8a2 <_free_r+0x9a>
 800c994:	e9c7 5504 	strd	r5, r5, [r7, #16]
 800c998:	e9c5 0002 	strd	r0, r0, [r5, #8]
 800c99c:	606a      	str	r2, [r5, #4]
 800c99e:	5069      	str	r1, [r5, r1]
 800c9a0:	e7b4      	b.n	800c90c <_free_r+0x104>
 800c9a2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800c9a6:	d806      	bhi.n	800c9b6 <_free_r+0x1ae>
 800c9a8:	0bcb      	lsrs	r3, r1, #15
 800c9aa:	f103 0478 	add.w	r4, r3, #120	; 0x78
 800c9ae:	00e4      	lsls	r4, r4, #3
 800c9b0:	f103 0277 	add.w	r2, r3, #119	; 0x77
 800c9b4:	e767      	b.n	800c886 <_free_r+0x7e>
 800c9b6:	f240 5254 	movw	r2, #1364	; 0x554
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d806      	bhi.n	800c9cc <_free_r+0x1c4>
 800c9be:	0c8b      	lsrs	r3, r1, #18
 800c9c0:	f103 047d 	add.w	r4, r3, #125	; 0x7d
 800c9c4:	00e4      	lsls	r4, r4, #3
 800c9c6:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 800c9ca:	e75c      	b.n	800c886 <_free_r+0x7e>
 800c9cc:	f44f 747e 	mov.w	r4, #1016	; 0x3f8
 800c9d0:	227e      	movs	r2, #126	; 0x7e
 800c9d2:	e758      	b.n	800c886 <_free_r+0x7e>
 800c9d4:	f041 0201 	orr.w	r2, r1, #1
 800c9d8:	606a      	str	r2, [r5, #4]
 800c9da:	6019      	str	r1, [r3, #0]
 800c9dc:	e796      	b.n	800c90c <_free_r+0x104>
 800c9de:	bf00      	nop
 800c9e0:	200005d4 	.word	0x200005d4
 800c9e4:	200005dc 	.word	0x200005dc
 800c9e8:	200009e0 	.word	0x200009e0
 800c9ec:	20001a2c 	.word	0x20001a2c

0800c9f0 <__sfvwrite_r>:
 800c9f0:	6893      	ldr	r3, [r2, #8]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	f000 80e4 	beq.w	800cbc0 <__sfvwrite_r+0x1d0>
 800c9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9fc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 800ca00:	b29b      	uxth	r3, r3
 800ca02:	460c      	mov	r4, r1
 800ca04:	0719      	lsls	r1, r3, #28
 800ca06:	b083      	sub	sp, #12
 800ca08:	4682      	mov	sl, r0
 800ca0a:	4690      	mov	r8, r2
 800ca0c:	d535      	bpl.n	800ca7a <__sfvwrite_r+0x8a>
 800ca0e:	6922      	ldr	r2, [r4, #16]
 800ca10:	b39a      	cbz	r2, 800ca7a <__sfvwrite_r+0x8a>
 800ca12:	f013 0202 	ands.w	r2, r3, #2
 800ca16:	f8d8 6000 	ldr.w	r6, [r8]
 800ca1a:	d03d      	beq.n	800ca98 <__sfvwrite_r+0xa8>
 800ca1c:	2700      	movs	r7, #0
 800ca1e:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800ca22:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 800ca26:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 800cce8 <__sfvwrite_r+0x2f8>
 800ca2a:	463d      	mov	r5, r7
 800ca2c:	454d      	cmp	r5, r9
 800ca2e:	462b      	mov	r3, r5
 800ca30:	463a      	mov	r2, r7
 800ca32:	bf28      	it	cs
 800ca34:	464b      	movcs	r3, r9
 800ca36:	4661      	mov	r1, ip
 800ca38:	4650      	mov	r0, sl
 800ca3a:	b1d5      	cbz	r5, 800ca72 <__sfvwrite_r+0x82>
 800ca3c:	47d8      	blx	fp
 800ca3e:	2800      	cmp	r0, #0
 800ca40:	f340 80c6 	ble.w	800cbd0 <__sfvwrite_r+0x1e0>
 800ca44:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ca48:	1a1b      	subs	r3, r3, r0
 800ca4a:	4407      	add	r7, r0
 800ca4c:	1a2d      	subs	r5, r5, r0
 800ca4e:	f8c8 3008 	str.w	r3, [r8, #8]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	f000 80b0 	beq.w	800cbb8 <__sfvwrite_r+0x1c8>
 800ca58:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 800ca5c:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800ca60:	454d      	cmp	r5, r9
 800ca62:	462b      	mov	r3, r5
 800ca64:	463a      	mov	r2, r7
 800ca66:	bf28      	it	cs
 800ca68:	464b      	movcs	r3, r9
 800ca6a:	4661      	mov	r1, ip
 800ca6c:	4650      	mov	r0, sl
 800ca6e:	2d00      	cmp	r5, #0
 800ca70:	d1e4      	bne.n	800ca3c <__sfvwrite_r+0x4c>
 800ca72:	e9d6 7500 	ldrd	r7, r5, [r6]
 800ca76:	3608      	adds	r6, #8
 800ca78:	e7d8      	b.n	800ca2c <__sfvwrite_r+0x3c>
 800ca7a:	4621      	mov	r1, r4
 800ca7c:	4650      	mov	r0, sl
 800ca7e:	f7fe fd43 	bl	800b508 <__swsetup_r>
 800ca82:	2800      	cmp	r0, #0
 800ca84:	f040 812a 	bne.w	800ccdc <__sfvwrite_r+0x2ec>
 800ca88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca8c:	f8d8 6000 	ldr.w	r6, [r8]
 800ca90:	b29b      	uxth	r3, r3
 800ca92:	f013 0202 	ands.w	r2, r3, #2
 800ca96:	d1c1      	bne.n	800ca1c <__sfvwrite_r+0x2c>
 800ca98:	f013 0901 	ands.w	r9, r3, #1
 800ca9c:	d15d      	bne.n	800cb5a <__sfvwrite_r+0x16a>
 800ca9e:	68a7      	ldr	r7, [r4, #8]
 800caa0:	6820      	ldr	r0, [r4, #0]
 800caa2:	464d      	mov	r5, r9
 800caa4:	2d00      	cmp	r5, #0
 800caa6:	d054      	beq.n	800cb52 <__sfvwrite_r+0x162>
 800caa8:	059a      	lsls	r2, r3, #22
 800caaa:	f140 809b 	bpl.w	800cbe4 <__sfvwrite_r+0x1f4>
 800caae:	42af      	cmp	r7, r5
 800cab0:	46bb      	mov	fp, r7
 800cab2:	f200 80d8 	bhi.w	800cc66 <__sfvwrite_r+0x276>
 800cab6:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800caba:	d02f      	beq.n	800cb1c <__sfvwrite_r+0x12c>
 800cabc:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
 800cac0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800cac4:	eba0 0b01 	sub.w	fp, r0, r1
 800cac8:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 800cacc:	1c68      	adds	r0, r5, #1
 800cace:	107f      	asrs	r7, r7, #1
 800cad0:	4458      	add	r0, fp
 800cad2:	42b8      	cmp	r0, r7
 800cad4:	463a      	mov	r2, r7
 800cad6:	bf84      	itt	hi
 800cad8:	4607      	movhi	r7, r0
 800cada:	463a      	movhi	r2, r7
 800cadc:	055b      	lsls	r3, r3, #21
 800cade:	f140 80d3 	bpl.w	800cc88 <__sfvwrite_r+0x298>
 800cae2:	4611      	mov	r1, r2
 800cae4:	4650      	mov	r0, sl
 800cae6:	f000 f9cb 	bl	800ce80 <_malloc_r>
 800caea:	2800      	cmp	r0, #0
 800caec:	f000 80f0 	beq.w	800ccd0 <__sfvwrite_r+0x2e0>
 800caf0:	465a      	mov	r2, fp
 800caf2:	6921      	ldr	r1, [r4, #16]
 800caf4:	9001      	str	r0, [sp, #4]
 800caf6:	f7f3 fd89 	bl	800060c <memcpy>
 800cafa:	89a2      	ldrh	r2, [r4, #12]
 800cafc:	9b01      	ldr	r3, [sp, #4]
 800cafe:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800cb02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cb06:	81a2      	strh	r2, [r4, #12]
 800cb08:	eba7 020b 	sub.w	r2, r7, fp
 800cb0c:	eb03 000b 	add.w	r0, r3, fp
 800cb10:	6167      	str	r7, [r4, #20]
 800cb12:	6123      	str	r3, [r4, #16]
 800cb14:	6020      	str	r0, [r4, #0]
 800cb16:	60a2      	str	r2, [r4, #8]
 800cb18:	462f      	mov	r7, r5
 800cb1a:	46ab      	mov	fp, r5
 800cb1c:	465a      	mov	r2, fp
 800cb1e:	4649      	mov	r1, r9
 800cb20:	f000 fc68 	bl	800d3f4 <memmove>
 800cb24:	68a2      	ldr	r2, [r4, #8]
 800cb26:	6823      	ldr	r3, [r4, #0]
 800cb28:	1bd2      	subs	r2, r2, r7
 800cb2a:	445b      	add	r3, fp
 800cb2c:	462f      	mov	r7, r5
 800cb2e:	60a2      	str	r2, [r4, #8]
 800cb30:	6023      	str	r3, [r4, #0]
 800cb32:	2500      	movs	r5, #0
 800cb34:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cb38:	1bdb      	subs	r3, r3, r7
 800cb3a:	44b9      	add	r9, r7
 800cb3c:	f8c8 3008 	str.w	r3, [r8, #8]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d039      	beq.n	800cbb8 <__sfvwrite_r+0x1c8>
 800cb44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb48:	68a7      	ldr	r7, [r4, #8]
 800cb4a:	6820      	ldr	r0, [r4, #0]
 800cb4c:	b29b      	uxth	r3, r3
 800cb4e:	2d00      	cmp	r5, #0
 800cb50:	d1aa      	bne.n	800caa8 <__sfvwrite_r+0xb8>
 800cb52:	e9d6 9500 	ldrd	r9, r5, [r6]
 800cb56:	3608      	adds	r6, #8
 800cb58:	e7a4      	b.n	800caa4 <__sfvwrite_r+0xb4>
 800cb5a:	4633      	mov	r3, r6
 800cb5c:	4691      	mov	r9, r2
 800cb5e:	4610      	mov	r0, r2
 800cb60:	4617      	mov	r7, r2
 800cb62:	464e      	mov	r6, r9
 800cb64:	469b      	mov	fp, r3
 800cb66:	2f00      	cmp	r7, #0
 800cb68:	d06b      	beq.n	800cc42 <__sfvwrite_r+0x252>
 800cb6a:	2800      	cmp	r0, #0
 800cb6c:	d071      	beq.n	800cc52 <__sfvwrite_r+0x262>
 800cb6e:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 800cb72:	6820      	ldr	r0, [r4, #0]
 800cb74:	45b9      	cmp	r9, r7
 800cb76:	464b      	mov	r3, r9
 800cb78:	bf28      	it	cs
 800cb7a:	463b      	movcs	r3, r7
 800cb7c:	4288      	cmp	r0, r1
 800cb7e:	d903      	bls.n	800cb88 <__sfvwrite_r+0x198>
 800cb80:	68a5      	ldr	r5, [r4, #8]
 800cb82:	4415      	add	r5, r2
 800cb84:	42ab      	cmp	r3, r5
 800cb86:	dc71      	bgt.n	800cc6c <__sfvwrite_r+0x27c>
 800cb88:	429a      	cmp	r2, r3
 800cb8a:	f300 8093 	bgt.w	800ccb4 <__sfvwrite_r+0x2c4>
 800cb8e:	4613      	mov	r3, r2
 800cb90:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800cb92:	69e1      	ldr	r1, [r4, #28]
 800cb94:	4632      	mov	r2, r6
 800cb96:	4650      	mov	r0, sl
 800cb98:	47a8      	blx	r5
 800cb9a:	1e05      	subs	r5, r0, #0
 800cb9c:	dd18      	ble.n	800cbd0 <__sfvwrite_r+0x1e0>
 800cb9e:	ebb9 0905 	subs.w	r9, r9, r5
 800cba2:	d00f      	beq.n	800cbc4 <__sfvwrite_r+0x1d4>
 800cba4:	2001      	movs	r0, #1
 800cba6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cbaa:	1b5b      	subs	r3, r3, r5
 800cbac:	442e      	add	r6, r5
 800cbae:	1b7f      	subs	r7, r7, r5
 800cbb0:	f8c8 3008 	str.w	r3, [r8, #8]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d1d6      	bne.n	800cb66 <__sfvwrite_r+0x176>
 800cbb8:	2000      	movs	r0, #0
 800cbba:	b003      	add	sp, #12
 800cbbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbc0:	2000      	movs	r0, #0
 800cbc2:	4770      	bx	lr
 800cbc4:	4621      	mov	r1, r4
 800cbc6:	4650      	mov	r0, sl
 800cbc8:	f7ff fd3a 	bl	800c640 <_fflush_r>
 800cbcc:	2800      	cmp	r0, #0
 800cbce:	d0ea      	beq.n	800cba6 <__sfvwrite_r+0x1b6>
 800cbd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cbdc:	81a3      	strh	r3, [r4, #12]
 800cbde:	b003      	add	sp, #12
 800cbe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbe4:	6923      	ldr	r3, [r4, #16]
 800cbe6:	4283      	cmp	r3, r0
 800cbe8:	d315      	bcc.n	800cc16 <__sfvwrite_r+0x226>
 800cbea:	6961      	ldr	r1, [r4, #20]
 800cbec:	42a9      	cmp	r1, r5
 800cbee:	d812      	bhi.n	800cc16 <__sfvwrite_r+0x226>
 800cbf0:	4b3c      	ldr	r3, [pc, #240]	; (800cce4 <__sfvwrite_r+0x2f4>)
 800cbf2:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800cbf4:	429d      	cmp	r5, r3
 800cbf6:	bf94      	ite	ls
 800cbf8:	462b      	movls	r3, r5
 800cbfa:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
 800cbfe:	464a      	mov	r2, r9
 800cc00:	fb93 f3f1 	sdiv	r3, r3, r1
 800cc04:	4650      	mov	r0, sl
 800cc06:	fb01 f303 	mul.w	r3, r1, r3
 800cc0a:	69e1      	ldr	r1, [r4, #28]
 800cc0c:	47b8      	blx	r7
 800cc0e:	1e07      	subs	r7, r0, #0
 800cc10:	ddde      	ble.n	800cbd0 <__sfvwrite_r+0x1e0>
 800cc12:	1bed      	subs	r5, r5, r7
 800cc14:	e78e      	b.n	800cb34 <__sfvwrite_r+0x144>
 800cc16:	42af      	cmp	r7, r5
 800cc18:	bf28      	it	cs
 800cc1a:	462f      	movcs	r7, r5
 800cc1c:	463a      	mov	r2, r7
 800cc1e:	4649      	mov	r1, r9
 800cc20:	f000 fbe8 	bl	800d3f4 <memmove>
 800cc24:	68a3      	ldr	r3, [r4, #8]
 800cc26:	6822      	ldr	r2, [r4, #0]
 800cc28:	1bdb      	subs	r3, r3, r7
 800cc2a:	443a      	add	r2, r7
 800cc2c:	60a3      	str	r3, [r4, #8]
 800cc2e:	6022      	str	r2, [r4, #0]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d1ee      	bne.n	800cc12 <__sfvwrite_r+0x222>
 800cc34:	4621      	mov	r1, r4
 800cc36:	4650      	mov	r0, sl
 800cc38:	f7ff fd02 	bl	800c640 <_fflush_r>
 800cc3c:	2800      	cmp	r0, #0
 800cc3e:	d0e8      	beq.n	800cc12 <__sfvwrite_r+0x222>
 800cc40:	e7c6      	b.n	800cbd0 <__sfvwrite_r+0x1e0>
 800cc42:	f10b 0308 	add.w	r3, fp, #8
 800cc46:	e953 6702 	ldrd	r6, r7, [r3, #-8]
 800cc4a:	469b      	mov	fp, r3
 800cc4c:	3308      	adds	r3, #8
 800cc4e:	2f00      	cmp	r7, #0
 800cc50:	d0f9      	beq.n	800cc46 <__sfvwrite_r+0x256>
 800cc52:	463a      	mov	r2, r7
 800cc54:	210a      	movs	r1, #10
 800cc56:	4630      	mov	r0, r6
 800cc58:	f7f3 fde2 	bl	8000820 <memchr>
 800cc5c:	b338      	cbz	r0, 800ccae <__sfvwrite_r+0x2be>
 800cc5e:	3001      	adds	r0, #1
 800cc60:	eba0 0906 	sub.w	r9, r0, r6
 800cc64:	e783      	b.n	800cb6e <__sfvwrite_r+0x17e>
 800cc66:	462f      	mov	r7, r5
 800cc68:	46ab      	mov	fp, r5
 800cc6a:	e757      	b.n	800cb1c <__sfvwrite_r+0x12c>
 800cc6c:	4631      	mov	r1, r6
 800cc6e:	462a      	mov	r2, r5
 800cc70:	f000 fbc0 	bl	800d3f4 <memmove>
 800cc74:	6823      	ldr	r3, [r4, #0]
 800cc76:	442b      	add	r3, r5
 800cc78:	6023      	str	r3, [r4, #0]
 800cc7a:	4621      	mov	r1, r4
 800cc7c:	4650      	mov	r0, sl
 800cc7e:	f7ff fcdf 	bl	800c640 <_fflush_r>
 800cc82:	2800      	cmp	r0, #0
 800cc84:	d08b      	beq.n	800cb9e <__sfvwrite_r+0x1ae>
 800cc86:	e7a3      	b.n	800cbd0 <__sfvwrite_r+0x1e0>
 800cc88:	4650      	mov	r0, sl
 800cc8a:	f000 ff23 	bl	800dad4 <_realloc_r>
 800cc8e:	4603      	mov	r3, r0
 800cc90:	2800      	cmp	r0, #0
 800cc92:	f47f af39 	bne.w	800cb08 <__sfvwrite_r+0x118>
 800cc96:	6921      	ldr	r1, [r4, #16]
 800cc98:	4650      	mov	r0, sl
 800cc9a:	f7ff fdb5 	bl	800c808 <_free_r>
 800cc9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cca2:	220c      	movs	r2, #12
 800cca4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cca8:	f8ca 2000 	str.w	r2, [sl]
 800ccac:	e792      	b.n	800cbd4 <__sfvwrite_r+0x1e4>
 800ccae:	f107 0901 	add.w	r9, r7, #1
 800ccb2:	e75c      	b.n	800cb6e <__sfvwrite_r+0x17e>
 800ccb4:	461a      	mov	r2, r3
 800ccb6:	4631      	mov	r1, r6
 800ccb8:	9301      	str	r3, [sp, #4]
 800ccba:	f000 fb9b 	bl	800d3f4 <memmove>
 800ccbe:	9b01      	ldr	r3, [sp, #4]
 800ccc0:	68a1      	ldr	r1, [r4, #8]
 800ccc2:	6822      	ldr	r2, [r4, #0]
 800ccc4:	1ac9      	subs	r1, r1, r3
 800ccc6:	441a      	add	r2, r3
 800ccc8:	60a1      	str	r1, [r4, #8]
 800ccca:	6022      	str	r2, [r4, #0]
 800cccc:	461d      	mov	r5, r3
 800ccce:	e766      	b.n	800cb9e <__sfvwrite_r+0x1ae>
 800ccd0:	230c      	movs	r3, #12
 800ccd2:	f8ca 3000 	str.w	r3, [sl]
 800ccd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccda:	e77b      	b.n	800cbd4 <__sfvwrite_r+0x1e4>
 800ccdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cce0:	e76b      	b.n	800cbba <__sfvwrite_r+0x1ca>
 800cce2:	bf00      	nop
 800cce4:	7ffffffe 	.word	0x7ffffffe
 800cce8:	7ffffc00 	.word	0x7ffffc00

0800ccec <_fwalk_reent>:
 800ccec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccf0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 800ccf4:	d01f      	beq.n	800cd36 <_fwalk_reent+0x4a>
 800ccf6:	4688      	mov	r8, r1
 800ccf8:	4606      	mov	r6, r0
 800ccfa:	f04f 0900 	mov.w	r9, #0
 800ccfe:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
 800cd02:	3d01      	subs	r5, #1
 800cd04:	d411      	bmi.n	800cd2a <_fwalk_reent+0x3e>
 800cd06:	89a3      	ldrh	r3, [r4, #12]
 800cd08:	2b01      	cmp	r3, #1
 800cd0a:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800cd0e:	4621      	mov	r1, r4
 800cd10:	4630      	mov	r0, r6
 800cd12:	d906      	bls.n	800cd22 <_fwalk_reent+0x36>
 800cd14:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800cd18:	3301      	adds	r3, #1
 800cd1a:	d002      	beq.n	800cd22 <_fwalk_reent+0x36>
 800cd1c:	47c0      	blx	r8
 800cd1e:	ea49 0900 	orr.w	r9, r9, r0
 800cd22:	1c6b      	adds	r3, r5, #1
 800cd24:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800cd28:	d1ed      	bne.n	800cd06 <_fwalk_reent+0x1a>
 800cd2a:	683f      	ldr	r7, [r7, #0]
 800cd2c:	2f00      	cmp	r7, #0
 800cd2e:	d1e6      	bne.n	800ccfe <_fwalk_reent+0x12>
 800cd30:	4648      	mov	r0, r9
 800cd32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd36:	46b9      	mov	r9, r7
 800cd38:	4648      	mov	r0, r9
 800cd3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd3e:	bf00      	nop

0800cd40 <__locale_mb_cur_max>:
 800cd40:	4b04      	ldr	r3, [pc, #16]	; (800cd54 <__locale_mb_cur_max+0x14>)
 800cd42:	4a05      	ldr	r2, [pc, #20]	; (800cd58 <__locale_mb_cur_max+0x18>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	bf08      	it	eq
 800cd4c:	4613      	moveq	r3, r2
 800cd4e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800cd52:	4770      	bx	lr
 800cd54:	20000038 	.word	0x20000038
 800cd58:	20000468 	.word	0x20000468

0800cd5c <__locale_ctype_ptr_l>:
 800cd5c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800cd60:	4770      	bx	lr
 800cd62:	bf00      	nop

0800cd64 <_localeconv_r>:
 800cd64:	4a04      	ldr	r2, [pc, #16]	; (800cd78 <_localeconv_r+0x14>)
 800cd66:	4b05      	ldr	r3, [pc, #20]	; (800cd7c <_localeconv_r+0x18>)
 800cd68:	6812      	ldr	r2, [r2, #0]
 800cd6a:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800cd6c:	2800      	cmp	r0, #0
 800cd6e:	bf08      	it	eq
 800cd70:	4618      	moveq	r0, r3
 800cd72:	30f0      	adds	r0, #240	; 0xf0
 800cd74:	4770      	bx	lr
 800cd76:	bf00      	nop
 800cd78:	20000038 	.word	0x20000038
 800cd7c:	20000468 	.word	0x20000468

0800cd80 <__retarget_lock_init_recursive>:
 800cd80:	4770      	bx	lr
 800cd82:	bf00      	nop

0800cd84 <__retarget_lock_close_recursive>:
 800cd84:	4770      	bx	lr
 800cd86:	bf00      	nop

0800cd88 <__retarget_lock_acquire_recursive>:
 800cd88:	4770      	bx	lr
 800cd8a:	bf00      	nop

0800cd8c <__retarget_lock_release_recursive>:
 800cd8c:	4770      	bx	lr
 800cd8e:	bf00      	nop

0800cd90 <__swhatbuf_r>:
 800cd90:	b570      	push	{r4, r5, r6, lr}
 800cd92:	460c      	mov	r4, r1
 800cd94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd98:	2900      	cmp	r1, #0
 800cd9a:	b096      	sub	sp, #88	; 0x58
 800cd9c:	4615      	mov	r5, r2
 800cd9e:	461e      	mov	r6, r3
 800cda0:	da0f      	bge.n	800cdc2 <__swhatbuf_r+0x32>
 800cda2:	89a2      	ldrh	r2, [r4, #12]
 800cda4:	2300      	movs	r3, #0
 800cda6:	f012 0080 	ands.w	r0, r2, #128	; 0x80
 800cdaa:	6033      	str	r3, [r6, #0]
 800cdac:	d104      	bne.n	800cdb8 <__swhatbuf_r+0x28>
 800cdae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cdb2:	602b      	str	r3, [r5, #0]
 800cdb4:	b016      	add	sp, #88	; 0x58
 800cdb6:	bd70      	pop	{r4, r5, r6, pc}
 800cdb8:	2240      	movs	r2, #64	; 0x40
 800cdba:	4618      	mov	r0, r3
 800cdbc:	602a      	str	r2, [r5, #0]
 800cdbe:	b016      	add	sp, #88	; 0x58
 800cdc0:	bd70      	pop	{r4, r5, r6, pc}
 800cdc2:	466a      	mov	r2, sp
 800cdc4:	f001 fa9e 	bl	800e304 <_fstat_r>
 800cdc8:	2800      	cmp	r0, #0
 800cdca:	dbea      	blt.n	800cda2 <__swhatbuf_r+0x12>
 800cdcc:	9b01      	ldr	r3, [sp, #4]
 800cdce:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800cdd2:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 800cdd6:	fab3 f383 	clz	r3, r3
 800cdda:	095b      	lsrs	r3, r3, #5
 800cddc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cde0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800cde4:	6033      	str	r3, [r6, #0]
 800cde6:	602a      	str	r2, [r5, #0]
 800cde8:	b016      	add	sp, #88	; 0x58
 800cdea:	bd70      	pop	{r4, r5, r6, pc}

0800cdec <__smakebuf_r>:
 800cdec:	898a      	ldrh	r2, [r1, #12]
 800cdee:	0792      	lsls	r2, r2, #30
 800cdf0:	460b      	mov	r3, r1
 800cdf2:	d506      	bpl.n	800ce02 <__smakebuf_r+0x16>
 800cdf4:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cdf8:	2101      	movs	r1, #1
 800cdfa:	601a      	str	r2, [r3, #0]
 800cdfc:	e9c3 2104 	strd	r2, r1, [r3, #16]
 800ce00:	4770      	bx	lr
 800ce02:	b570      	push	{r4, r5, r6, lr}
 800ce04:	b082      	sub	sp, #8
 800ce06:	ab01      	add	r3, sp, #4
 800ce08:	466a      	mov	r2, sp
 800ce0a:	460c      	mov	r4, r1
 800ce0c:	4605      	mov	r5, r0
 800ce0e:	f7ff ffbf 	bl	800cd90 <__swhatbuf_r>
 800ce12:	9900      	ldr	r1, [sp, #0]
 800ce14:	4606      	mov	r6, r0
 800ce16:	4628      	mov	r0, r5
 800ce18:	f000 f832 	bl	800ce80 <_malloc_r>
 800ce1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce20:	b1d8      	cbz	r0, 800ce5a <__smakebuf_r+0x6e>
 800ce22:	4916      	ldr	r1, [pc, #88]	; (800ce7c <__smakebuf_r+0x90>)
 800ce24:	63e9      	str	r1, [r5, #60]	; 0x3c
 800ce26:	9a01      	ldr	r2, [sp, #4]
 800ce28:	9900      	ldr	r1, [sp, #0]
 800ce2a:	6020      	str	r0, [r4, #0]
 800ce2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce30:	81a3      	strh	r3, [r4, #12]
 800ce32:	e9c4 0104 	strd	r0, r1, [r4, #16]
 800ce36:	b91a      	cbnz	r2, 800ce40 <__smakebuf_r+0x54>
 800ce38:	4333      	orrs	r3, r6
 800ce3a:	81a3      	strh	r3, [r4, #12]
 800ce3c:	b002      	add	sp, #8
 800ce3e:	bd70      	pop	{r4, r5, r6, pc}
 800ce40:	4628      	mov	r0, r5
 800ce42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce46:	f001 fa71 	bl	800e32c <_isatty_r>
 800ce4a:	b1a0      	cbz	r0, 800ce76 <__smakebuf_r+0x8a>
 800ce4c:	89a3      	ldrh	r3, [r4, #12]
 800ce4e:	f023 0303 	bic.w	r3, r3, #3
 800ce52:	f043 0301 	orr.w	r3, r3, #1
 800ce56:	b21b      	sxth	r3, r3
 800ce58:	e7ee      	b.n	800ce38 <__smakebuf_r+0x4c>
 800ce5a:	059a      	lsls	r2, r3, #22
 800ce5c:	d4ee      	bmi.n	800ce3c <__smakebuf_r+0x50>
 800ce5e:	f023 0303 	bic.w	r3, r3, #3
 800ce62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ce66:	f043 0302 	orr.w	r3, r3, #2
 800ce6a:	2101      	movs	r1, #1
 800ce6c:	81a3      	strh	r3, [r4, #12]
 800ce6e:	6022      	str	r2, [r4, #0]
 800ce70:	e9c4 2104 	strd	r2, r1, [r4, #16]
 800ce74:	e7e2      	b.n	800ce3c <__smakebuf_r+0x50>
 800ce76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce7a:	e7dd      	b.n	800ce38 <__smakebuf_r+0x4c>
 800ce7c:	0800c6ed 	.word	0x0800c6ed

0800ce80 <_malloc_r>:
 800ce80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce84:	f101 050b 	add.w	r5, r1, #11
 800ce88:	2d16      	cmp	r5, #22
 800ce8a:	b083      	sub	sp, #12
 800ce8c:	4606      	mov	r6, r0
 800ce8e:	d823      	bhi.n	800ced8 <_malloc_r+0x58>
 800ce90:	2910      	cmp	r1, #16
 800ce92:	f200 80b9 	bhi.w	800d008 <_malloc_r+0x188>
 800ce96:	f000 fb11 	bl	800d4bc <__malloc_lock>
 800ce9a:	2510      	movs	r5, #16
 800ce9c:	2318      	movs	r3, #24
 800ce9e:	2002      	movs	r0, #2
 800cea0:	4fc5      	ldr	r7, [pc, #788]	; (800d1b8 <_malloc_r+0x338>)
 800cea2:	443b      	add	r3, r7
 800cea4:	f1a3 0208 	sub.w	r2, r3, #8
 800cea8:	685c      	ldr	r4, [r3, #4]
 800ceaa:	4294      	cmp	r4, r2
 800ceac:	f000 8166 	beq.w	800d17c <_malloc_r+0x2fc>
 800ceb0:	6863      	ldr	r3, [r4, #4]
 800ceb2:	f023 0303 	bic.w	r3, r3, #3
 800ceb6:	4423      	add	r3, r4
 800ceb8:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
 800cebc:	685a      	ldr	r2, [r3, #4]
 800cebe:	60e9      	str	r1, [r5, #12]
 800cec0:	f042 0201 	orr.w	r2, r2, #1
 800cec4:	608d      	str	r5, [r1, #8]
 800cec6:	4630      	mov	r0, r6
 800cec8:	605a      	str	r2, [r3, #4]
 800ceca:	f000 fafd 	bl	800d4c8 <__malloc_unlock>
 800cece:	3408      	adds	r4, #8
 800ced0:	4620      	mov	r0, r4
 800ced2:	b003      	add	sp, #12
 800ced4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ced8:	f035 0507 	bics.w	r5, r5, #7
 800cedc:	f100 8094 	bmi.w	800d008 <_malloc_r+0x188>
 800cee0:	42a9      	cmp	r1, r5
 800cee2:	f200 8091 	bhi.w	800d008 <_malloc_r+0x188>
 800cee6:	f000 fae9 	bl	800d4bc <__malloc_lock>
 800ceea:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 800ceee:	f0c0 8183 	bcc.w	800d1f8 <_malloc_r+0x378>
 800cef2:	0a6b      	lsrs	r3, r5, #9
 800cef4:	f000 808f 	beq.w	800d016 <_malloc_r+0x196>
 800cef8:	2b04      	cmp	r3, #4
 800cefa:	f200 8146 	bhi.w	800d18a <_malloc_r+0x30a>
 800cefe:	09ab      	lsrs	r3, r5, #6
 800cf00:	f103 0039 	add.w	r0, r3, #57	; 0x39
 800cf04:	f103 0c38 	add.w	ip, r3, #56	; 0x38
 800cf08:	00c3      	lsls	r3, r0, #3
 800cf0a:	4fab      	ldr	r7, [pc, #684]	; (800d1b8 <_malloc_r+0x338>)
 800cf0c:	443b      	add	r3, r7
 800cf0e:	f1a3 0108 	sub.w	r1, r3, #8
 800cf12:	685c      	ldr	r4, [r3, #4]
 800cf14:	42a1      	cmp	r1, r4
 800cf16:	d106      	bne.n	800cf26 <_malloc_r+0xa6>
 800cf18:	e00c      	b.n	800cf34 <_malloc_r+0xb4>
 800cf1a:	2a00      	cmp	r2, #0
 800cf1c:	f280 811d 	bge.w	800d15a <_malloc_r+0x2da>
 800cf20:	68e4      	ldr	r4, [r4, #12]
 800cf22:	42a1      	cmp	r1, r4
 800cf24:	d006      	beq.n	800cf34 <_malloc_r+0xb4>
 800cf26:	6863      	ldr	r3, [r4, #4]
 800cf28:	f023 0303 	bic.w	r3, r3, #3
 800cf2c:	1b5a      	subs	r2, r3, r5
 800cf2e:	2a0f      	cmp	r2, #15
 800cf30:	ddf3      	ble.n	800cf1a <_malloc_r+0x9a>
 800cf32:	4660      	mov	r0, ip
 800cf34:	693c      	ldr	r4, [r7, #16]
 800cf36:	f8df c294 	ldr.w	ip, [pc, #660]	; 800d1cc <_malloc_r+0x34c>
 800cf3a:	4564      	cmp	r4, ip
 800cf3c:	d071      	beq.n	800d022 <_malloc_r+0x1a2>
 800cf3e:	6863      	ldr	r3, [r4, #4]
 800cf40:	f023 0303 	bic.w	r3, r3, #3
 800cf44:	1b5a      	subs	r2, r3, r5
 800cf46:	2a0f      	cmp	r2, #15
 800cf48:	f300 8144 	bgt.w	800d1d4 <_malloc_r+0x354>
 800cf4c:	2a00      	cmp	r2, #0
 800cf4e:	e9c7 cc04 	strd	ip, ip, [r7, #16]
 800cf52:	f280 8126 	bge.w	800d1a2 <_malloc_r+0x322>
 800cf56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf5a:	f080 8169 	bcs.w	800d230 <_malloc_r+0x3b0>
 800cf5e:	08db      	lsrs	r3, r3, #3
 800cf60:	1c59      	adds	r1, r3, #1
 800cf62:	687a      	ldr	r2, [r7, #4]
 800cf64:	f857 8031 	ldr.w	r8, [r7, r1, lsl #3]
 800cf68:	f8c4 8008 	str.w	r8, [r4, #8]
 800cf6c:	f04f 0e01 	mov.w	lr, #1
 800cf70:	109b      	asrs	r3, r3, #2
 800cf72:	fa0e f303 	lsl.w	r3, lr, r3
 800cf76:	eb07 0ec1 	add.w	lr, r7, r1, lsl #3
 800cf7a:	4313      	orrs	r3, r2
 800cf7c:	f1ae 0208 	sub.w	r2, lr, #8
 800cf80:	60e2      	str	r2, [r4, #12]
 800cf82:	607b      	str	r3, [r7, #4]
 800cf84:	f847 4031 	str.w	r4, [r7, r1, lsl #3]
 800cf88:	f8c8 400c 	str.w	r4, [r8, #12]
 800cf8c:	1082      	asrs	r2, r0, #2
 800cf8e:	2401      	movs	r4, #1
 800cf90:	4094      	lsls	r4, r2
 800cf92:	429c      	cmp	r4, r3
 800cf94:	d84b      	bhi.n	800d02e <_malloc_r+0x1ae>
 800cf96:	421c      	tst	r4, r3
 800cf98:	d106      	bne.n	800cfa8 <_malloc_r+0x128>
 800cf9a:	f020 0003 	bic.w	r0, r0, #3
 800cf9e:	0064      	lsls	r4, r4, #1
 800cfa0:	421c      	tst	r4, r3
 800cfa2:	f100 0004 	add.w	r0, r0, #4
 800cfa6:	d0fa      	beq.n	800cf9e <_malloc_r+0x11e>
 800cfa8:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 800cfac:	46ce      	mov	lr, r9
 800cfae:	4680      	mov	r8, r0
 800cfb0:	f8de 300c 	ldr.w	r3, [lr, #12]
 800cfb4:	459e      	cmp	lr, r3
 800cfb6:	d107      	bne.n	800cfc8 <_malloc_r+0x148>
 800cfb8:	e122      	b.n	800d200 <_malloc_r+0x380>
 800cfba:	2a00      	cmp	r2, #0
 800cfbc:	f280 8129 	bge.w	800d212 <_malloc_r+0x392>
 800cfc0:	68db      	ldr	r3, [r3, #12]
 800cfc2:	459e      	cmp	lr, r3
 800cfc4:	f000 811c 	beq.w	800d200 <_malloc_r+0x380>
 800cfc8:	6859      	ldr	r1, [r3, #4]
 800cfca:	f021 0103 	bic.w	r1, r1, #3
 800cfce:	1b4a      	subs	r2, r1, r5
 800cfd0:	2a0f      	cmp	r2, #15
 800cfd2:	ddf2      	ble.n	800cfba <_malloc_r+0x13a>
 800cfd4:	e9d3 8e02 	ldrd	r8, lr, [r3, #8]
 800cfd8:	195c      	adds	r4, r3, r5
 800cfda:	f045 0501 	orr.w	r5, r5, #1
 800cfde:	605d      	str	r5, [r3, #4]
 800cfe0:	f042 0501 	orr.w	r5, r2, #1
 800cfe4:	f8c8 e00c 	str.w	lr, [r8, #12]
 800cfe8:	4630      	mov	r0, r6
 800cfea:	f8ce 8008 	str.w	r8, [lr, #8]
 800cfee:	e9c7 4404 	strd	r4, r4, [r7, #16]
 800cff2:	e9c4 cc02 	strd	ip, ip, [r4, #8]
 800cff6:	6065      	str	r5, [r4, #4]
 800cff8:	505a      	str	r2, [r3, r1]
 800cffa:	9301      	str	r3, [sp, #4]
 800cffc:	f000 fa64 	bl	800d4c8 <__malloc_unlock>
 800d000:	9b01      	ldr	r3, [sp, #4]
 800d002:	f103 0408 	add.w	r4, r3, #8
 800d006:	e763      	b.n	800ced0 <_malloc_r+0x50>
 800d008:	2400      	movs	r4, #0
 800d00a:	230c      	movs	r3, #12
 800d00c:	4620      	mov	r0, r4
 800d00e:	6033      	str	r3, [r6, #0]
 800d010:	b003      	add	sp, #12
 800d012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d016:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d01a:	2040      	movs	r0, #64	; 0x40
 800d01c:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 800d020:	e773      	b.n	800cf0a <_malloc_r+0x8a>
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	1082      	asrs	r2, r0, #2
 800d026:	2401      	movs	r4, #1
 800d028:	4094      	lsls	r4, r2
 800d02a:	429c      	cmp	r4, r3
 800d02c:	d9b3      	bls.n	800cf96 <_malloc_r+0x116>
 800d02e:	68bc      	ldr	r4, [r7, #8]
 800d030:	6863      	ldr	r3, [r4, #4]
 800d032:	f023 0903 	bic.w	r9, r3, #3
 800d036:	45a9      	cmp	r9, r5
 800d038:	d303      	bcc.n	800d042 <_malloc_r+0x1c2>
 800d03a:	eba9 0305 	sub.w	r3, r9, r5
 800d03e:	2b0f      	cmp	r3, #15
 800d040:	dc7b      	bgt.n	800d13a <_malloc_r+0x2ba>
 800d042:	4b5e      	ldr	r3, [pc, #376]	; (800d1bc <_malloc_r+0x33c>)
 800d044:	f8df a188 	ldr.w	sl, [pc, #392]	; 800d1d0 <_malloc_r+0x350>
 800d048:	681a      	ldr	r2, [r3, #0]
 800d04a:	f8da 3000 	ldr.w	r3, [sl]
 800d04e:	3301      	adds	r3, #1
 800d050:	eb05 0802 	add.w	r8, r5, r2
 800d054:	f000 8148 	beq.w	800d2e8 <_malloc_r+0x468>
 800d058:	f508 5880 	add.w	r8, r8, #4096	; 0x1000
 800d05c:	f108 080f 	add.w	r8, r8, #15
 800d060:	f428 687f 	bic.w	r8, r8, #4080	; 0xff0
 800d064:	f028 080f 	bic.w	r8, r8, #15
 800d068:	4641      	mov	r1, r8
 800d06a:	4630      	mov	r0, r6
 800d06c:	f000 fee0 	bl	800de30 <_sbrk_r>
 800d070:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800d074:	4683      	mov	fp, r0
 800d076:	f000 8104 	beq.w	800d282 <_malloc_r+0x402>
 800d07a:	eb04 0009 	add.w	r0, r4, r9
 800d07e:	4558      	cmp	r0, fp
 800d080:	f200 80fd 	bhi.w	800d27e <_malloc_r+0x3fe>
 800d084:	4a4e      	ldr	r2, [pc, #312]	; (800d1c0 <_malloc_r+0x340>)
 800d086:	6813      	ldr	r3, [r2, #0]
 800d088:	4443      	add	r3, r8
 800d08a:	6013      	str	r3, [r2, #0]
 800d08c:	f000 814d 	beq.w	800d32a <_malloc_r+0x4aa>
 800d090:	f8da 1000 	ldr.w	r1, [sl]
 800d094:	3101      	adds	r1, #1
 800d096:	bf1b      	ittet	ne
 800d098:	ebab 0000 	subne.w	r0, fp, r0
 800d09c:	181b      	addne	r3, r3, r0
 800d09e:	f8ca b000 	streq.w	fp, [sl]
 800d0a2:	6013      	strne	r3, [r2, #0]
 800d0a4:	f01b 0307 	ands.w	r3, fp, #7
 800d0a8:	f000 8134 	beq.w	800d314 <_malloc_r+0x494>
 800d0ac:	f1c3 0108 	rsb	r1, r3, #8
 800d0b0:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800d0b4:	448b      	add	fp, r1
 800d0b6:	3308      	adds	r3, #8
 800d0b8:	44d8      	add	r8, fp
 800d0ba:	f3c8 080b 	ubfx	r8, r8, #0, #12
 800d0be:	eba3 0808 	sub.w	r8, r3, r8
 800d0c2:	4641      	mov	r1, r8
 800d0c4:	4630      	mov	r0, r6
 800d0c6:	9201      	str	r2, [sp, #4]
 800d0c8:	f000 feb2 	bl	800de30 <_sbrk_r>
 800d0cc:	1c43      	adds	r3, r0, #1
 800d0ce:	9a01      	ldr	r2, [sp, #4]
 800d0d0:	f000 8146 	beq.w	800d360 <_malloc_r+0x4e0>
 800d0d4:	eba0 010b 	sub.w	r1, r0, fp
 800d0d8:	4441      	add	r1, r8
 800d0da:	f041 0101 	orr.w	r1, r1, #1
 800d0de:	6813      	ldr	r3, [r2, #0]
 800d0e0:	f8c7 b008 	str.w	fp, [r7, #8]
 800d0e4:	4443      	add	r3, r8
 800d0e6:	42bc      	cmp	r4, r7
 800d0e8:	f8cb 1004 	str.w	r1, [fp, #4]
 800d0ec:	6013      	str	r3, [r2, #0]
 800d0ee:	d015      	beq.n	800d11c <_malloc_r+0x29c>
 800d0f0:	f1b9 0f0f 	cmp.w	r9, #15
 800d0f4:	f240 8130 	bls.w	800d358 <_malloc_r+0x4d8>
 800d0f8:	6860      	ldr	r0, [r4, #4]
 800d0fa:	f1a9 010c 	sub.w	r1, r9, #12
 800d0fe:	f021 0107 	bic.w	r1, r1, #7
 800d102:	f000 0001 	and.w	r0, r0, #1
 800d106:	eb04 0c01 	add.w	ip, r4, r1
 800d10a:	4308      	orrs	r0, r1
 800d10c:	f04f 0e05 	mov.w	lr, #5
 800d110:	290f      	cmp	r1, #15
 800d112:	6060      	str	r0, [r4, #4]
 800d114:	e9cc ee01 	strd	lr, lr, [ip, #4]
 800d118:	f200 813a 	bhi.w	800d390 <_malloc_r+0x510>
 800d11c:	4a29      	ldr	r2, [pc, #164]	; (800d1c4 <_malloc_r+0x344>)
 800d11e:	482a      	ldr	r0, [pc, #168]	; (800d1c8 <_malloc_r+0x348>)
 800d120:	6811      	ldr	r1, [r2, #0]
 800d122:	68bc      	ldr	r4, [r7, #8]
 800d124:	428b      	cmp	r3, r1
 800d126:	6801      	ldr	r1, [r0, #0]
 800d128:	bf88      	it	hi
 800d12a:	6013      	strhi	r3, [r2, #0]
 800d12c:	6862      	ldr	r2, [r4, #4]
 800d12e:	428b      	cmp	r3, r1
 800d130:	f022 0203 	bic.w	r2, r2, #3
 800d134:	bf88      	it	hi
 800d136:	6003      	strhi	r3, [r0, #0]
 800d138:	e0a7      	b.n	800d28a <_malloc_r+0x40a>
 800d13a:	1962      	adds	r2, r4, r5
 800d13c:	f043 0301 	orr.w	r3, r3, #1
 800d140:	f045 0501 	orr.w	r5, r5, #1
 800d144:	6065      	str	r5, [r4, #4]
 800d146:	4630      	mov	r0, r6
 800d148:	60ba      	str	r2, [r7, #8]
 800d14a:	6053      	str	r3, [r2, #4]
 800d14c:	f000 f9bc 	bl	800d4c8 <__malloc_unlock>
 800d150:	3408      	adds	r4, #8
 800d152:	4620      	mov	r0, r4
 800d154:	b003      	add	sp, #12
 800d156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d15a:	4423      	add	r3, r4
 800d15c:	68e1      	ldr	r1, [r4, #12]
 800d15e:	685a      	ldr	r2, [r3, #4]
 800d160:	68a5      	ldr	r5, [r4, #8]
 800d162:	f042 0201 	orr.w	r2, r2, #1
 800d166:	60e9      	str	r1, [r5, #12]
 800d168:	4630      	mov	r0, r6
 800d16a:	608d      	str	r5, [r1, #8]
 800d16c:	605a      	str	r2, [r3, #4]
 800d16e:	f000 f9ab 	bl	800d4c8 <__malloc_unlock>
 800d172:	3408      	adds	r4, #8
 800d174:	4620      	mov	r0, r4
 800d176:	b003      	add	sp, #12
 800d178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d17c:	68dc      	ldr	r4, [r3, #12]
 800d17e:	42a3      	cmp	r3, r4
 800d180:	bf08      	it	eq
 800d182:	3002      	addeq	r0, #2
 800d184:	f43f aed6 	beq.w	800cf34 <_malloc_r+0xb4>
 800d188:	e692      	b.n	800ceb0 <_malloc_r+0x30>
 800d18a:	2b14      	cmp	r3, #20
 800d18c:	d971      	bls.n	800d272 <_malloc_r+0x3f2>
 800d18e:	2b54      	cmp	r3, #84	; 0x54
 800d190:	f200 80ad 	bhi.w	800d2ee <_malloc_r+0x46e>
 800d194:	0b2b      	lsrs	r3, r5, #12
 800d196:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 800d19a:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
 800d19e:	00c3      	lsls	r3, r0, #3
 800d1a0:	e6b3      	b.n	800cf0a <_malloc_r+0x8a>
 800d1a2:	4423      	add	r3, r4
 800d1a4:	4630      	mov	r0, r6
 800d1a6:	685a      	ldr	r2, [r3, #4]
 800d1a8:	f042 0201 	orr.w	r2, r2, #1
 800d1ac:	605a      	str	r2, [r3, #4]
 800d1ae:	3408      	adds	r4, #8
 800d1b0:	f000 f98a 	bl	800d4c8 <__malloc_unlock>
 800d1b4:	e68c      	b.n	800ced0 <_malloc_r+0x50>
 800d1b6:	bf00      	nop
 800d1b8:	200005d4 	.word	0x200005d4
 800d1bc:	20001a2c 	.word	0x20001a2c
 800d1c0:	200019fc 	.word	0x200019fc
 800d1c4:	20001a24 	.word	0x20001a24
 800d1c8:	20001a28 	.word	0x20001a28
 800d1cc:	200005dc 	.word	0x200005dc
 800d1d0:	200009dc 	.word	0x200009dc
 800d1d4:	1961      	adds	r1, r4, r5
 800d1d6:	f045 0e01 	orr.w	lr, r5, #1
 800d1da:	f042 0501 	orr.w	r5, r2, #1
 800d1de:	f8c4 e004 	str.w	lr, [r4, #4]
 800d1e2:	4630      	mov	r0, r6
 800d1e4:	e9c7 1104 	strd	r1, r1, [r7, #16]
 800d1e8:	e9c1 cc02 	strd	ip, ip, [r1, #8]
 800d1ec:	604d      	str	r5, [r1, #4]
 800d1ee:	50e2      	str	r2, [r4, r3]
 800d1f0:	f000 f96a 	bl	800d4c8 <__malloc_unlock>
 800d1f4:	3408      	adds	r4, #8
 800d1f6:	e66b      	b.n	800ced0 <_malloc_r+0x50>
 800d1f8:	08e8      	lsrs	r0, r5, #3
 800d1fa:	f105 0308 	add.w	r3, r5, #8
 800d1fe:	e64f      	b.n	800cea0 <_malloc_r+0x20>
 800d200:	f108 0801 	add.w	r8, r8, #1
 800d204:	f018 0f03 	tst.w	r8, #3
 800d208:	f10e 0e08 	add.w	lr, lr, #8
 800d20c:	f47f aed0 	bne.w	800cfb0 <_malloc_r+0x130>
 800d210:	e052      	b.n	800d2b8 <_malloc_r+0x438>
 800d212:	4419      	add	r1, r3
 800d214:	461c      	mov	r4, r3
 800d216:	684a      	ldr	r2, [r1, #4]
 800d218:	68db      	ldr	r3, [r3, #12]
 800d21a:	f854 5f08 	ldr.w	r5, [r4, #8]!
 800d21e:	f042 0201 	orr.w	r2, r2, #1
 800d222:	604a      	str	r2, [r1, #4]
 800d224:	4630      	mov	r0, r6
 800d226:	60eb      	str	r3, [r5, #12]
 800d228:	609d      	str	r5, [r3, #8]
 800d22a:	f000 f94d 	bl	800d4c8 <__malloc_unlock>
 800d22e:	e64f      	b.n	800ced0 <_malloc_r+0x50>
 800d230:	0a5a      	lsrs	r2, r3, #9
 800d232:	2a04      	cmp	r2, #4
 800d234:	d935      	bls.n	800d2a2 <_malloc_r+0x422>
 800d236:	2a14      	cmp	r2, #20
 800d238:	d86f      	bhi.n	800d31a <_malloc_r+0x49a>
 800d23a:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 800d23e:	00c9      	lsls	r1, r1, #3
 800d240:	325b      	adds	r2, #91	; 0x5b
 800d242:	eb07 0e01 	add.w	lr, r7, r1
 800d246:	5879      	ldr	r1, [r7, r1]
 800d248:	f1ae 0e08 	sub.w	lr, lr, #8
 800d24c:	458e      	cmp	lr, r1
 800d24e:	d058      	beq.n	800d302 <_malloc_r+0x482>
 800d250:	684a      	ldr	r2, [r1, #4]
 800d252:	f022 0203 	bic.w	r2, r2, #3
 800d256:	429a      	cmp	r2, r3
 800d258:	d902      	bls.n	800d260 <_malloc_r+0x3e0>
 800d25a:	6889      	ldr	r1, [r1, #8]
 800d25c:	458e      	cmp	lr, r1
 800d25e:	d1f7      	bne.n	800d250 <_malloc_r+0x3d0>
 800d260:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	e9c4 1e02 	strd	r1, lr, [r4, #8]
 800d26a:	f8ce 4008 	str.w	r4, [lr, #8]
 800d26e:	60cc      	str	r4, [r1, #12]
 800d270:	e68c      	b.n	800cf8c <_malloc_r+0x10c>
 800d272:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 800d276:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
 800d27a:	00c3      	lsls	r3, r0, #3
 800d27c:	e645      	b.n	800cf0a <_malloc_r+0x8a>
 800d27e:	42bc      	cmp	r4, r7
 800d280:	d072      	beq.n	800d368 <_malloc_r+0x4e8>
 800d282:	68bc      	ldr	r4, [r7, #8]
 800d284:	6862      	ldr	r2, [r4, #4]
 800d286:	f022 0203 	bic.w	r2, r2, #3
 800d28a:	4295      	cmp	r5, r2
 800d28c:	eba2 0305 	sub.w	r3, r2, r5
 800d290:	d802      	bhi.n	800d298 <_malloc_r+0x418>
 800d292:	2b0f      	cmp	r3, #15
 800d294:	f73f af51 	bgt.w	800d13a <_malloc_r+0x2ba>
 800d298:	4630      	mov	r0, r6
 800d29a:	f000 f915 	bl	800d4c8 <__malloc_unlock>
 800d29e:	2400      	movs	r4, #0
 800d2a0:	e616      	b.n	800ced0 <_malloc_r+0x50>
 800d2a2:	099a      	lsrs	r2, r3, #6
 800d2a4:	f102 0139 	add.w	r1, r2, #57	; 0x39
 800d2a8:	00c9      	lsls	r1, r1, #3
 800d2aa:	3238      	adds	r2, #56	; 0x38
 800d2ac:	e7c9      	b.n	800d242 <_malloc_r+0x3c2>
 800d2ae:	f8d9 9000 	ldr.w	r9, [r9]
 800d2b2:	4599      	cmp	r9, r3
 800d2b4:	f040 8083 	bne.w	800d3be <_malloc_r+0x53e>
 800d2b8:	f010 0f03 	tst.w	r0, #3
 800d2bc:	f1a9 0308 	sub.w	r3, r9, #8
 800d2c0:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 800d2c4:	d1f3      	bne.n	800d2ae <_malloc_r+0x42e>
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	ea23 0304 	bic.w	r3, r3, r4
 800d2cc:	607b      	str	r3, [r7, #4]
 800d2ce:	0064      	lsls	r4, r4, #1
 800d2d0:	429c      	cmp	r4, r3
 800d2d2:	f63f aeac 	bhi.w	800d02e <_malloc_r+0x1ae>
 800d2d6:	b91c      	cbnz	r4, 800d2e0 <_malloc_r+0x460>
 800d2d8:	e6a9      	b.n	800d02e <_malloc_r+0x1ae>
 800d2da:	0064      	lsls	r4, r4, #1
 800d2dc:	f108 0804 	add.w	r8, r8, #4
 800d2e0:	421c      	tst	r4, r3
 800d2e2:	d0fa      	beq.n	800d2da <_malloc_r+0x45a>
 800d2e4:	4640      	mov	r0, r8
 800d2e6:	e65f      	b.n	800cfa8 <_malloc_r+0x128>
 800d2e8:	f108 0810 	add.w	r8, r8, #16
 800d2ec:	e6bc      	b.n	800d068 <_malloc_r+0x1e8>
 800d2ee:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800d2f2:	d826      	bhi.n	800d342 <_malloc_r+0x4c2>
 800d2f4:	0beb      	lsrs	r3, r5, #15
 800d2f6:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800d2fa:	f103 0c77 	add.w	ip, r3, #119	; 0x77
 800d2fe:	00c3      	lsls	r3, r0, #3
 800d300:	e603      	b.n	800cf0a <_malloc_r+0x8a>
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	1092      	asrs	r2, r2, #2
 800d306:	f04f 0801 	mov.w	r8, #1
 800d30a:	fa08 f202 	lsl.w	r2, r8, r2
 800d30e:	4313      	orrs	r3, r2
 800d310:	607b      	str	r3, [r7, #4]
 800d312:	e7a8      	b.n	800d266 <_malloc_r+0x3e6>
 800d314:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d318:	e6ce      	b.n	800d0b8 <_malloc_r+0x238>
 800d31a:	2a54      	cmp	r2, #84	; 0x54
 800d31c:	d829      	bhi.n	800d372 <_malloc_r+0x4f2>
 800d31e:	0b1a      	lsrs	r2, r3, #12
 800d320:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 800d324:	00c9      	lsls	r1, r1, #3
 800d326:	326e      	adds	r2, #110	; 0x6e
 800d328:	e78b      	b.n	800d242 <_malloc_r+0x3c2>
 800d32a:	f3c0 010b 	ubfx	r1, r0, #0, #12
 800d32e:	2900      	cmp	r1, #0
 800d330:	f47f aeae 	bne.w	800d090 <_malloc_r+0x210>
 800d334:	eb09 0208 	add.w	r2, r9, r8
 800d338:	68b9      	ldr	r1, [r7, #8]
 800d33a:	f042 0201 	orr.w	r2, r2, #1
 800d33e:	604a      	str	r2, [r1, #4]
 800d340:	e6ec      	b.n	800d11c <_malloc_r+0x29c>
 800d342:	f240 5254 	movw	r2, #1364	; 0x554
 800d346:	4293      	cmp	r3, r2
 800d348:	d81c      	bhi.n	800d384 <_malloc_r+0x504>
 800d34a:	0cab      	lsrs	r3, r5, #18
 800d34c:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 800d350:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
 800d354:	00c3      	lsls	r3, r0, #3
 800d356:	e5d8      	b.n	800cf0a <_malloc_r+0x8a>
 800d358:	2301      	movs	r3, #1
 800d35a:	f8cb 3004 	str.w	r3, [fp, #4]
 800d35e:	e79b      	b.n	800d298 <_malloc_r+0x418>
 800d360:	2101      	movs	r1, #1
 800d362:	f04f 0800 	mov.w	r8, #0
 800d366:	e6ba      	b.n	800d0de <_malloc_r+0x25e>
 800d368:	4a16      	ldr	r2, [pc, #88]	; (800d3c4 <_malloc_r+0x544>)
 800d36a:	6813      	ldr	r3, [r2, #0]
 800d36c:	4443      	add	r3, r8
 800d36e:	6013      	str	r3, [r2, #0]
 800d370:	e68e      	b.n	800d090 <_malloc_r+0x210>
 800d372:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800d376:	d814      	bhi.n	800d3a2 <_malloc_r+0x522>
 800d378:	0bda      	lsrs	r2, r3, #15
 800d37a:	f102 0178 	add.w	r1, r2, #120	; 0x78
 800d37e:	00c9      	lsls	r1, r1, #3
 800d380:	3277      	adds	r2, #119	; 0x77
 800d382:	e75e      	b.n	800d242 <_malloc_r+0x3c2>
 800d384:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 800d388:	207f      	movs	r0, #127	; 0x7f
 800d38a:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 800d38e:	e5bc      	b.n	800cf0a <_malloc_r+0x8a>
 800d390:	f104 0108 	add.w	r1, r4, #8
 800d394:	4630      	mov	r0, r6
 800d396:	9201      	str	r2, [sp, #4]
 800d398:	f7ff fa36 	bl	800c808 <_free_r>
 800d39c:	9a01      	ldr	r2, [sp, #4]
 800d39e:	6813      	ldr	r3, [r2, #0]
 800d3a0:	e6bc      	b.n	800d11c <_malloc_r+0x29c>
 800d3a2:	f240 5154 	movw	r1, #1364	; 0x554
 800d3a6:	428a      	cmp	r2, r1
 800d3a8:	d805      	bhi.n	800d3b6 <_malloc_r+0x536>
 800d3aa:	0c9a      	lsrs	r2, r3, #18
 800d3ac:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 800d3b0:	00c9      	lsls	r1, r1, #3
 800d3b2:	327c      	adds	r2, #124	; 0x7c
 800d3b4:	e745      	b.n	800d242 <_malloc_r+0x3c2>
 800d3b6:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800d3ba:	227e      	movs	r2, #126	; 0x7e
 800d3bc:	e741      	b.n	800d242 <_malloc_r+0x3c2>
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	e785      	b.n	800d2ce <_malloc_r+0x44e>
 800d3c2:	bf00      	nop
 800d3c4:	200019fc 	.word	0x200019fc

0800d3c8 <__ascii_mbtowc>:
 800d3c8:	b082      	sub	sp, #8
 800d3ca:	b149      	cbz	r1, 800d3e0 <__ascii_mbtowc+0x18>
 800d3cc:	b15a      	cbz	r2, 800d3e6 <__ascii_mbtowc+0x1e>
 800d3ce:	b16b      	cbz	r3, 800d3ec <__ascii_mbtowc+0x24>
 800d3d0:	7813      	ldrb	r3, [r2, #0]
 800d3d2:	600b      	str	r3, [r1, #0]
 800d3d4:	7812      	ldrb	r2, [r2, #0]
 800d3d6:	1c10      	adds	r0, r2, #0
 800d3d8:	bf18      	it	ne
 800d3da:	2001      	movne	r0, #1
 800d3dc:	b002      	add	sp, #8
 800d3de:	4770      	bx	lr
 800d3e0:	a901      	add	r1, sp, #4
 800d3e2:	2a00      	cmp	r2, #0
 800d3e4:	d1f3      	bne.n	800d3ce <__ascii_mbtowc+0x6>
 800d3e6:	4610      	mov	r0, r2
 800d3e8:	b002      	add	sp, #8
 800d3ea:	4770      	bx	lr
 800d3ec:	f06f 0001 	mvn.w	r0, #1
 800d3f0:	e7f4      	b.n	800d3dc <__ascii_mbtowc+0x14>
 800d3f2:	bf00      	nop

0800d3f4 <memmove>:
 800d3f4:	4288      	cmp	r0, r1
 800d3f6:	b4f0      	push	{r4, r5, r6, r7}
 800d3f8:	d90d      	bls.n	800d416 <memmove+0x22>
 800d3fa:	188b      	adds	r3, r1, r2
 800d3fc:	4283      	cmp	r3, r0
 800d3fe:	d90a      	bls.n	800d416 <memmove+0x22>
 800d400:	1884      	adds	r4, r0, r2
 800d402:	b132      	cbz	r2, 800d412 <memmove+0x1e>
 800d404:	4622      	mov	r2, r4
 800d406:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d40a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d40e:	4299      	cmp	r1, r3
 800d410:	d1f9      	bne.n	800d406 <memmove+0x12>
 800d412:	bcf0      	pop	{r4, r5, r6, r7}
 800d414:	4770      	bx	lr
 800d416:	2a0f      	cmp	r2, #15
 800d418:	d949      	bls.n	800d4ae <memmove+0xba>
 800d41a:	ea40 0301 	orr.w	r3, r0, r1
 800d41e:	079b      	lsls	r3, r3, #30
 800d420:	d147      	bne.n	800d4b2 <memmove+0xbe>
 800d422:	f1a2 0310 	sub.w	r3, r2, #16
 800d426:	091b      	lsrs	r3, r3, #4
 800d428:	f101 0720 	add.w	r7, r1, #32
 800d42c:	eb07 1703 	add.w	r7, r7, r3, lsl #4
 800d430:	f101 0410 	add.w	r4, r1, #16
 800d434:	f100 0510 	add.w	r5, r0, #16
 800d438:	f854 6c10 	ldr.w	r6, [r4, #-16]
 800d43c:	f845 6c10 	str.w	r6, [r5, #-16]
 800d440:	f854 6c0c 	ldr.w	r6, [r4, #-12]
 800d444:	f845 6c0c 	str.w	r6, [r5, #-12]
 800d448:	f854 6c08 	ldr.w	r6, [r4, #-8]
 800d44c:	f845 6c08 	str.w	r6, [r5, #-8]
 800d450:	f854 6c04 	ldr.w	r6, [r4, #-4]
 800d454:	f845 6c04 	str.w	r6, [r5, #-4]
 800d458:	3410      	adds	r4, #16
 800d45a:	42bc      	cmp	r4, r7
 800d45c:	f105 0510 	add.w	r5, r5, #16
 800d460:	d1ea      	bne.n	800d438 <memmove+0x44>
 800d462:	3301      	adds	r3, #1
 800d464:	f002 050f 	and.w	r5, r2, #15
 800d468:	011b      	lsls	r3, r3, #4
 800d46a:	2d03      	cmp	r5, #3
 800d46c:	4419      	add	r1, r3
 800d46e:	4403      	add	r3, r0
 800d470:	d921      	bls.n	800d4b6 <memmove+0xc2>
 800d472:	1f1f      	subs	r7, r3, #4
 800d474:	460e      	mov	r6, r1
 800d476:	462c      	mov	r4, r5
 800d478:	3c04      	subs	r4, #4
 800d47a:	f856 cb04 	ldr.w	ip, [r6], #4
 800d47e:	f847 cf04 	str.w	ip, [r7, #4]!
 800d482:	2c03      	cmp	r4, #3
 800d484:	d8f8      	bhi.n	800d478 <memmove+0x84>
 800d486:	1f2c      	subs	r4, r5, #4
 800d488:	f024 0403 	bic.w	r4, r4, #3
 800d48c:	3404      	adds	r4, #4
 800d48e:	4423      	add	r3, r4
 800d490:	4421      	add	r1, r4
 800d492:	f002 0203 	and.w	r2, r2, #3
 800d496:	2a00      	cmp	r2, #0
 800d498:	d0bb      	beq.n	800d412 <memmove+0x1e>
 800d49a:	3b01      	subs	r3, #1
 800d49c:	440a      	add	r2, r1
 800d49e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d4a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d4a6:	4291      	cmp	r1, r2
 800d4a8:	d1f9      	bne.n	800d49e <memmove+0xaa>
 800d4aa:	bcf0      	pop	{r4, r5, r6, r7}
 800d4ac:	4770      	bx	lr
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	e7f1      	b.n	800d496 <memmove+0xa2>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	e7f1      	b.n	800d49a <memmove+0xa6>
 800d4b6:	462a      	mov	r2, r5
 800d4b8:	e7ed      	b.n	800d496 <memmove+0xa2>
 800d4ba:	bf00      	nop

0800d4bc <__malloc_lock>:
 800d4bc:	4801      	ldr	r0, [pc, #4]	; (800d4c4 <__malloc_lock+0x8>)
 800d4be:	f7ff bc63 	b.w	800cd88 <__retarget_lock_acquire_recursive>
 800d4c2:	bf00      	nop
 800d4c4:	20003330 	.word	0x20003330

0800d4c8 <__malloc_unlock>:
 800d4c8:	4801      	ldr	r0, [pc, #4]	; (800d4d0 <__malloc_unlock+0x8>)
 800d4ca:	f7ff bc5f 	b.w	800cd8c <__retarget_lock_release_recursive>
 800d4ce:	bf00      	nop
 800d4d0:	20003330 	.word	0x20003330

0800d4d4 <_Balloc>:
 800d4d4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800d4d6:	b570      	push	{r4, r5, r6, lr}
 800d4d8:	4605      	mov	r5, r0
 800d4da:	460c      	mov	r4, r1
 800d4dc:	b14b      	cbz	r3, 800d4f2 <_Balloc+0x1e>
 800d4de:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d4e2:	b180      	cbz	r0, 800d506 <_Balloc+0x32>
 800d4e4:	6802      	ldr	r2, [r0, #0]
 800d4e6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d4f0:	bd70      	pop	{r4, r5, r6, pc}
 800d4f2:	2221      	movs	r2, #33	; 0x21
 800d4f4:	2104      	movs	r1, #4
 800d4f6:	f000 fdd5 	bl	800e0a4 <_calloc_r>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	64e8      	str	r0, [r5, #76]	; 0x4c
 800d4fe:	2800      	cmp	r0, #0
 800d500:	d1ed      	bne.n	800d4de <_Balloc+0xa>
 800d502:	2000      	movs	r0, #0
 800d504:	bd70      	pop	{r4, r5, r6, pc}
 800d506:	2101      	movs	r1, #1
 800d508:	fa01 f604 	lsl.w	r6, r1, r4
 800d50c:	1d72      	adds	r2, r6, #5
 800d50e:	4628      	mov	r0, r5
 800d510:	0092      	lsls	r2, r2, #2
 800d512:	f000 fdc7 	bl	800e0a4 <_calloc_r>
 800d516:	2800      	cmp	r0, #0
 800d518:	d0f3      	beq.n	800d502 <_Balloc+0x2e>
 800d51a:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800d51e:	e7e4      	b.n	800d4ea <_Balloc+0x16>

0800d520 <_Bfree>:
 800d520:	b131      	cbz	r1, 800d530 <_Bfree+0x10>
 800d522:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800d524:	684a      	ldr	r2, [r1, #4]
 800d526:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d52a:	6008      	str	r0, [r1, #0]
 800d52c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800d530:	4770      	bx	lr
 800d532:	bf00      	nop

0800d534 <__multadd>:
 800d534:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d536:	690c      	ldr	r4, [r1, #16]
 800d538:	b083      	sub	sp, #12
 800d53a:	460d      	mov	r5, r1
 800d53c:	4606      	mov	r6, r0
 800d53e:	f101 0c14 	add.w	ip, r1, #20
 800d542:	2700      	movs	r7, #0
 800d544:	f8dc 0000 	ldr.w	r0, [ip]
 800d548:	b281      	uxth	r1, r0
 800d54a:	fb02 3301 	mla	r3, r2, r1, r3
 800d54e:	0c01      	lsrs	r1, r0, #16
 800d550:	0c18      	lsrs	r0, r3, #16
 800d552:	fb02 0101 	mla	r1, r2, r1, r0
 800d556:	b29b      	uxth	r3, r3
 800d558:	3701      	adds	r7, #1
 800d55a:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 800d55e:	42bc      	cmp	r4, r7
 800d560:	f84c 3b04 	str.w	r3, [ip], #4
 800d564:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800d568:	dcec      	bgt.n	800d544 <__multadd+0x10>
 800d56a:	b13b      	cbz	r3, 800d57c <__multadd+0x48>
 800d56c:	68aa      	ldr	r2, [r5, #8]
 800d56e:	42a2      	cmp	r2, r4
 800d570:	dd07      	ble.n	800d582 <__multadd+0x4e>
 800d572:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 800d576:	3401      	adds	r4, #1
 800d578:	6153      	str	r3, [r2, #20]
 800d57a:	612c      	str	r4, [r5, #16]
 800d57c:	4628      	mov	r0, r5
 800d57e:	b003      	add	sp, #12
 800d580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d582:	6869      	ldr	r1, [r5, #4]
 800d584:	9301      	str	r3, [sp, #4]
 800d586:	3101      	adds	r1, #1
 800d588:	4630      	mov	r0, r6
 800d58a:	f7ff ffa3 	bl	800d4d4 <_Balloc>
 800d58e:	692a      	ldr	r2, [r5, #16]
 800d590:	3202      	adds	r2, #2
 800d592:	f105 010c 	add.w	r1, r5, #12
 800d596:	4607      	mov	r7, r0
 800d598:	0092      	lsls	r2, r2, #2
 800d59a:	300c      	adds	r0, #12
 800d59c:	f7f3 f836 	bl	800060c <memcpy>
 800d5a0:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 800d5a2:	6869      	ldr	r1, [r5, #4]
 800d5a4:	9b01      	ldr	r3, [sp, #4]
 800d5a6:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800d5aa:	6028      	str	r0, [r5, #0]
 800d5ac:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 800d5b0:	463d      	mov	r5, r7
 800d5b2:	e7de      	b.n	800d572 <__multadd+0x3e>

0800d5b4 <__hi0bits>:
 800d5b4:	0c02      	lsrs	r2, r0, #16
 800d5b6:	0412      	lsls	r2, r2, #16
 800d5b8:	4603      	mov	r3, r0
 800d5ba:	b9c2      	cbnz	r2, 800d5ee <__hi0bits+0x3a>
 800d5bc:	0403      	lsls	r3, r0, #16
 800d5be:	2010      	movs	r0, #16
 800d5c0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d5c4:	bf04      	itt	eq
 800d5c6:	021b      	lsleq	r3, r3, #8
 800d5c8:	3008      	addeq	r0, #8
 800d5ca:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d5ce:	bf04      	itt	eq
 800d5d0:	011b      	lsleq	r3, r3, #4
 800d5d2:	3004      	addeq	r0, #4
 800d5d4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d5d8:	bf04      	itt	eq
 800d5da:	009b      	lsleq	r3, r3, #2
 800d5dc:	3002      	addeq	r0, #2
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	db04      	blt.n	800d5ec <__hi0bits+0x38>
 800d5e2:	005b      	lsls	r3, r3, #1
 800d5e4:	d501      	bpl.n	800d5ea <__hi0bits+0x36>
 800d5e6:	3001      	adds	r0, #1
 800d5e8:	4770      	bx	lr
 800d5ea:	2020      	movs	r0, #32
 800d5ec:	4770      	bx	lr
 800d5ee:	2000      	movs	r0, #0
 800d5f0:	e7e6      	b.n	800d5c0 <__hi0bits+0xc>
 800d5f2:	bf00      	nop

0800d5f4 <__lo0bits>:
 800d5f4:	6803      	ldr	r3, [r0, #0]
 800d5f6:	f013 0207 	ands.w	r2, r3, #7
 800d5fa:	4601      	mov	r1, r0
 800d5fc:	d007      	beq.n	800d60e <__lo0bits+0x1a>
 800d5fe:	07da      	lsls	r2, r3, #31
 800d600:	d41f      	bmi.n	800d642 <__lo0bits+0x4e>
 800d602:	0798      	lsls	r0, r3, #30
 800d604:	d51f      	bpl.n	800d646 <__lo0bits+0x52>
 800d606:	085b      	lsrs	r3, r3, #1
 800d608:	600b      	str	r3, [r1, #0]
 800d60a:	2001      	movs	r0, #1
 800d60c:	4770      	bx	lr
 800d60e:	b298      	uxth	r0, r3
 800d610:	b1a0      	cbz	r0, 800d63c <__lo0bits+0x48>
 800d612:	4610      	mov	r0, r2
 800d614:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d618:	bf04      	itt	eq
 800d61a:	0a1b      	lsreq	r3, r3, #8
 800d61c:	3008      	addeq	r0, #8
 800d61e:	071a      	lsls	r2, r3, #28
 800d620:	bf04      	itt	eq
 800d622:	091b      	lsreq	r3, r3, #4
 800d624:	3004      	addeq	r0, #4
 800d626:	079a      	lsls	r2, r3, #30
 800d628:	bf04      	itt	eq
 800d62a:	089b      	lsreq	r3, r3, #2
 800d62c:	3002      	addeq	r0, #2
 800d62e:	07da      	lsls	r2, r3, #31
 800d630:	d402      	bmi.n	800d638 <__lo0bits+0x44>
 800d632:	085b      	lsrs	r3, r3, #1
 800d634:	d00b      	beq.n	800d64e <__lo0bits+0x5a>
 800d636:	3001      	adds	r0, #1
 800d638:	600b      	str	r3, [r1, #0]
 800d63a:	4770      	bx	lr
 800d63c:	0c1b      	lsrs	r3, r3, #16
 800d63e:	2010      	movs	r0, #16
 800d640:	e7e8      	b.n	800d614 <__lo0bits+0x20>
 800d642:	2000      	movs	r0, #0
 800d644:	4770      	bx	lr
 800d646:	089b      	lsrs	r3, r3, #2
 800d648:	600b      	str	r3, [r1, #0]
 800d64a:	2002      	movs	r0, #2
 800d64c:	4770      	bx	lr
 800d64e:	2020      	movs	r0, #32
 800d650:	4770      	bx	lr
 800d652:	bf00      	nop

0800d654 <__i2b>:
 800d654:	b510      	push	{r4, lr}
 800d656:	460c      	mov	r4, r1
 800d658:	2101      	movs	r1, #1
 800d65a:	f7ff ff3b 	bl	800d4d4 <_Balloc>
 800d65e:	2201      	movs	r2, #1
 800d660:	e9c0 2404 	strd	r2, r4, [r0, #16]
 800d664:	bd10      	pop	{r4, pc}
 800d666:	bf00      	nop

0800d668 <__multiply>:
 800d668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d66c:	690e      	ldr	r6, [r1, #16]
 800d66e:	6914      	ldr	r4, [r2, #16]
 800d670:	42a6      	cmp	r6, r4
 800d672:	b083      	sub	sp, #12
 800d674:	460f      	mov	r7, r1
 800d676:	4615      	mov	r5, r2
 800d678:	da04      	bge.n	800d684 <__multiply+0x1c>
 800d67a:	4632      	mov	r2, r6
 800d67c:	462f      	mov	r7, r5
 800d67e:	4626      	mov	r6, r4
 800d680:	460d      	mov	r5, r1
 800d682:	4614      	mov	r4, r2
 800d684:	e9d7 1301 	ldrd	r1, r3, [r7, #4]
 800d688:	eb06 0804 	add.w	r8, r6, r4
 800d68c:	4543      	cmp	r3, r8
 800d68e:	bfb8      	it	lt
 800d690:	3101      	addlt	r1, #1
 800d692:	f7ff ff1f 	bl	800d4d4 <_Balloc>
 800d696:	f100 0914 	add.w	r9, r0, #20
 800d69a:	eb09 0e88 	add.w	lr, r9, r8, lsl #2
 800d69e:	45f1      	cmp	r9, lr
 800d6a0:	9000      	str	r0, [sp, #0]
 800d6a2:	d205      	bcs.n	800d6b0 <__multiply+0x48>
 800d6a4:	464b      	mov	r3, r9
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	f843 2b04 	str.w	r2, [r3], #4
 800d6ac:	459e      	cmp	lr, r3
 800d6ae:	d8fb      	bhi.n	800d6a8 <__multiply+0x40>
 800d6b0:	f105 0a14 	add.w	sl, r5, #20
 800d6b4:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
 800d6b8:	f107 0314 	add.w	r3, r7, #20
 800d6bc:	45a2      	cmp	sl, r4
 800d6be:	eb03 0c86 	add.w	ip, r3, r6, lsl #2
 800d6c2:	d261      	bcs.n	800d788 <__multiply+0x120>
 800d6c4:	1b64      	subs	r4, r4, r5
 800d6c6:	3c15      	subs	r4, #21
 800d6c8:	f024 0403 	bic.w	r4, r4, #3
 800d6cc:	f8cd e004 	str.w	lr, [sp, #4]
 800d6d0:	44a2      	add	sl, r4
 800d6d2:	f105 0210 	add.w	r2, r5, #16
 800d6d6:	469e      	mov	lr, r3
 800d6d8:	e005      	b.n	800d6e6 <__multiply+0x7e>
 800d6da:	0c2d      	lsrs	r5, r5, #16
 800d6dc:	d12b      	bne.n	800d736 <__multiply+0xce>
 800d6de:	4592      	cmp	sl, r2
 800d6e0:	f109 0904 	add.w	r9, r9, #4
 800d6e4:	d04e      	beq.n	800d784 <__multiply+0x11c>
 800d6e6:	f852 5f04 	ldr.w	r5, [r2, #4]!
 800d6ea:	fa1f fb85 	uxth.w	fp, r5
 800d6ee:	f1bb 0f00 	cmp.w	fp, #0
 800d6f2:	d0f2      	beq.n	800d6da <__multiply+0x72>
 800d6f4:	4677      	mov	r7, lr
 800d6f6:	464e      	mov	r6, r9
 800d6f8:	2000      	movs	r0, #0
 800d6fa:	e000      	b.n	800d6fe <__multiply+0x96>
 800d6fc:	4626      	mov	r6, r4
 800d6fe:	f857 1b04 	ldr.w	r1, [r7], #4
 800d702:	6834      	ldr	r4, [r6, #0]
 800d704:	b28b      	uxth	r3, r1
 800d706:	b2a5      	uxth	r5, r4
 800d708:	0c09      	lsrs	r1, r1, #16
 800d70a:	0c24      	lsrs	r4, r4, #16
 800d70c:	fb0b 5303 	mla	r3, fp, r3, r5
 800d710:	4403      	add	r3, r0
 800d712:	fb0b 4001 	mla	r0, fp, r1, r4
 800d716:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 800d71a:	4634      	mov	r4, r6
 800d71c:	b29b      	uxth	r3, r3
 800d71e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d722:	45bc      	cmp	ip, r7
 800d724:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800d728:	f844 3b04 	str.w	r3, [r4], #4
 800d72c:	d8e6      	bhi.n	800d6fc <__multiply+0x94>
 800d72e:	6070      	str	r0, [r6, #4]
 800d730:	6815      	ldr	r5, [r2, #0]
 800d732:	0c2d      	lsrs	r5, r5, #16
 800d734:	d0d3      	beq.n	800d6de <__multiply+0x76>
 800d736:	f8d9 3000 	ldr.w	r3, [r9]
 800d73a:	4676      	mov	r6, lr
 800d73c:	4618      	mov	r0, r3
 800d73e:	46cb      	mov	fp, r9
 800d740:	2100      	movs	r1, #0
 800d742:	e000      	b.n	800d746 <__multiply+0xde>
 800d744:	46a3      	mov	fp, r4
 800d746:	8834      	ldrh	r4, [r6, #0]
 800d748:	0c00      	lsrs	r0, r0, #16
 800d74a:	fb05 0004 	mla	r0, r5, r4, r0
 800d74e:	4401      	add	r1, r0
 800d750:	b29b      	uxth	r3, r3
 800d752:	465c      	mov	r4, fp
 800d754:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800d758:	f844 3b04 	str.w	r3, [r4], #4
 800d75c:	f856 3b04 	ldr.w	r3, [r6], #4
 800d760:	f8db 0004 	ldr.w	r0, [fp, #4]
 800d764:	0c1b      	lsrs	r3, r3, #16
 800d766:	b287      	uxth	r7, r0
 800d768:	fb05 7303 	mla	r3, r5, r3, r7
 800d76c:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 800d770:	45b4      	cmp	ip, r6
 800d772:	ea4f 4113 	mov.w	r1, r3, lsr #16
 800d776:	d8e5      	bhi.n	800d744 <__multiply+0xdc>
 800d778:	4592      	cmp	sl, r2
 800d77a:	f8cb 3004 	str.w	r3, [fp, #4]
 800d77e:	f109 0904 	add.w	r9, r9, #4
 800d782:	d1b0      	bne.n	800d6e6 <__multiply+0x7e>
 800d784:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d788:	f1b8 0f00 	cmp.w	r8, #0
 800d78c:	dd0b      	ble.n	800d7a6 <__multiply+0x13e>
 800d78e:	f85e 3c04 	ldr.w	r3, [lr, #-4]
 800d792:	f1ae 0e04 	sub.w	lr, lr, #4
 800d796:	b11b      	cbz	r3, 800d7a0 <__multiply+0x138>
 800d798:	e005      	b.n	800d7a6 <__multiply+0x13e>
 800d79a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d79e:	b913      	cbnz	r3, 800d7a6 <__multiply+0x13e>
 800d7a0:	f1b8 0801 	subs.w	r8, r8, #1
 800d7a4:	d1f9      	bne.n	800d79a <__multiply+0x132>
 800d7a6:	9800      	ldr	r0, [sp, #0]
 800d7a8:	f8c0 8010 	str.w	r8, [r0, #16]
 800d7ac:	b003      	add	sp, #12
 800d7ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7b2:	bf00      	nop

0800d7b4 <__pow5mult>:
 800d7b4:	f012 0303 	ands.w	r3, r2, #3
 800d7b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7bc:	4614      	mov	r4, r2
 800d7be:	4607      	mov	r7, r0
 800d7c0:	d12e      	bne.n	800d820 <__pow5mult+0x6c>
 800d7c2:	460d      	mov	r5, r1
 800d7c4:	10a4      	asrs	r4, r4, #2
 800d7c6:	d01c      	beq.n	800d802 <__pow5mult+0x4e>
 800d7c8:	6cbe      	ldr	r6, [r7, #72]	; 0x48
 800d7ca:	b396      	cbz	r6, 800d832 <__pow5mult+0x7e>
 800d7cc:	07e3      	lsls	r3, r4, #31
 800d7ce:	f04f 0800 	mov.w	r8, #0
 800d7d2:	d406      	bmi.n	800d7e2 <__pow5mult+0x2e>
 800d7d4:	1064      	asrs	r4, r4, #1
 800d7d6:	d014      	beq.n	800d802 <__pow5mult+0x4e>
 800d7d8:	6830      	ldr	r0, [r6, #0]
 800d7da:	b1a8      	cbz	r0, 800d808 <__pow5mult+0x54>
 800d7dc:	4606      	mov	r6, r0
 800d7de:	07e3      	lsls	r3, r4, #31
 800d7e0:	d5f8      	bpl.n	800d7d4 <__pow5mult+0x20>
 800d7e2:	4632      	mov	r2, r6
 800d7e4:	4629      	mov	r1, r5
 800d7e6:	4638      	mov	r0, r7
 800d7e8:	f7ff ff3e 	bl	800d668 <__multiply>
 800d7ec:	b1b5      	cbz	r5, 800d81c <__pow5mult+0x68>
 800d7ee:	686a      	ldr	r2, [r5, #4]
 800d7f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7f2:	1064      	asrs	r4, r4, #1
 800d7f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d7f8:	6029      	str	r1, [r5, #0]
 800d7fa:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800d7fe:	4605      	mov	r5, r0
 800d800:	d1ea      	bne.n	800d7d8 <__pow5mult+0x24>
 800d802:	4628      	mov	r0, r5
 800d804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d808:	4632      	mov	r2, r6
 800d80a:	4631      	mov	r1, r6
 800d80c:	4638      	mov	r0, r7
 800d80e:	f7ff ff2b 	bl	800d668 <__multiply>
 800d812:	6030      	str	r0, [r6, #0]
 800d814:	f8c0 8000 	str.w	r8, [r0]
 800d818:	4606      	mov	r6, r0
 800d81a:	e7e0      	b.n	800d7de <__pow5mult+0x2a>
 800d81c:	4605      	mov	r5, r0
 800d81e:	e7d9      	b.n	800d7d4 <__pow5mult+0x20>
 800d820:	3b01      	subs	r3, #1
 800d822:	4a0b      	ldr	r2, [pc, #44]	; (800d850 <__pow5mult+0x9c>)
 800d824:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d828:	2300      	movs	r3, #0
 800d82a:	f7ff fe83 	bl	800d534 <__multadd>
 800d82e:	4605      	mov	r5, r0
 800d830:	e7c8      	b.n	800d7c4 <__pow5mult+0x10>
 800d832:	2101      	movs	r1, #1
 800d834:	4638      	mov	r0, r7
 800d836:	f7ff fe4d 	bl	800d4d4 <_Balloc>
 800d83a:	f240 2371 	movw	r3, #625	; 0x271
 800d83e:	6143      	str	r3, [r0, #20]
 800d840:	2201      	movs	r2, #1
 800d842:	2300      	movs	r3, #0
 800d844:	6102      	str	r2, [r0, #16]
 800d846:	4606      	mov	r6, r0
 800d848:	64b8      	str	r0, [r7, #72]	; 0x48
 800d84a:	6003      	str	r3, [r0, #0]
 800d84c:	e7be      	b.n	800d7cc <__pow5mult+0x18>
 800d84e:	bf00      	nop
 800d850:	0800ecc8 	.word	0x0800ecc8

0800d854 <__lshift>:
 800d854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d858:	4691      	mov	r9, r2
 800d85a:	690a      	ldr	r2, [r1, #16]
 800d85c:	460e      	mov	r6, r1
 800d85e:	ea4f 1469 	mov.w	r4, r9, asr #5
 800d862:	e9d1 1301 	ldrd	r1, r3, [r1, #4]
 800d866:	eb04 0802 	add.w	r8, r4, r2
 800d86a:	f108 0501 	add.w	r5, r8, #1
 800d86e:	429d      	cmp	r5, r3
 800d870:	4607      	mov	r7, r0
 800d872:	dd04      	ble.n	800d87e <__lshift+0x2a>
 800d874:	005b      	lsls	r3, r3, #1
 800d876:	429d      	cmp	r5, r3
 800d878:	f101 0101 	add.w	r1, r1, #1
 800d87c:	dcfa      	bgt.n	800d874 <__lshift+0x20>
 800d87e:	4638      	mov	r0, r7
 800d880:	f7ff fe28 	bl	800d4d4 <_Balloc>
 800d884:	2c00      	cmp	r4, #0
 800d886:	f100 0314 	add.w	r3, r0, #20
 800d88a:	dd37      	ble.n	800d8fc <__lshift+0xa8>
 800d88c:	eb03 0184 	add.w	r1, r3, r4, lsl #2
 800d890:	2200      	movs	r2, #0
 800d892:	f843 2b04 	str.w	r2, [r3], #4
 800d896:	428b      	cmp	r3, r1
 800d898:	d1fb      	bne.n	800d892 <__lshift+0x3e>
 800d89a:	6934      	ldr	r4, [r6, #16]
 800d89c:	f106 0314 	add.w	r3, r6, #20
 800d8a0:	f019 091f 	ands.w	r9, r9, #31
 800d8a4:	eb03 0c84 	add.w	ip, r3, r4, lsl #2
 800d8a8:	d020      	beq.n	800d8ec <__lshift+0x98>
 800d8aa:	f1c9 0e20 	rsb	lr, r9, #32
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	e000      	b.n	800d8b4 <__lshift+0x60>
 800d8b2:	4651      	mov	r1, sl
 800d8b4:	681c      	ldr	r4, [r3, #0]
 800d8b6:	468a      	mov	sl, r1
 800d8b8:	fa04 f409 	lsl.w	r4, r4, r9
 800d8bc:	4314      	orrs	r4, r2
 800d8be:	f84a 4b04 	str.w	r4, [sl], #4
 800d8c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8c6:	4563      	cmp	r3, ip
 800d8c8:	fa22 f20e 	lsr.w	r2, r2, lr
 800d8cc:	d3f1      	bcc.n	800d8b2 <__lshift+0x5e>
 800d8ce:	604a      	str	r2, [r1, #4]
 800d8d0:	b10a      	cbz	r2, 800d8d6 <__lshift+0x82>
 800d8d2:	f108 0502 	add.w	r5, r8, #2
 800d8d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8d8:	6872      	ldr	r2, [r6, #4]
 800d8da:	3d01      	subs	r5, #1
 800d8dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d8e0:	6105      	str	r5, [r0, #16]
 800d8e2:	6031      	str	r1, [r6, #0]
 800d8e4:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 800d8e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8ec:	3904      	subs	r1, #4
 800d8ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8f2:	f841 2f04 	str.w	r2, [r1, #4]!
 800d8f6:	459c      	cmp	ip, r3
 800d8f8:	d8f9      	bhi.n	800d8ee <__lshift+0x9a>
 800d8fa:	e7ec      	b.n	800d8d6 <__lshift+0x82>
 800d8fc:	4619      	mov	r1, r3
 800d8fe:	e7cc      	b.n	800d89a <__lshift+0x46>

0800d900 <__mcmp>:
 800d900:	b430      	push	{r4, r5}
 800d902:	690b      	ldr	r3, [r1, #16]
 800d904:	4605      	mov	r5, r0
 800d906:	6900      	ldr	r0, [r0, #16]
 800d908:	1ac0      	subs	r0, r0, r3
 800d90a:	d10f      	bne.n	800d92c <__mcmp+0x2c>
 800d90c:	009b      	lsls	r3, r3, #2
 800d90e:	3514      	adds	r5, #20
 800d910:	3114      	adds	r1, #20
 800d912:	4419      	add	r1, r3
 800d914:	442b      	add	r3, r5
 800d916:	e001      	b.n	800d91c <__mcmp+0x1c>
 800d918:	429d      	cmp	r5, r3
 800d91a:	d207      	bcs.n	800d92c <__mcmp+0x2c>
 800d91c:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800d920:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d924:	4294      	cmp	r4, r2
 800d926:	d0f7      	beq.n	800d918 <__mcmp+0x18>
 800d928:	d302      	bcc.n	800d930 <__mcmp+0x30>
 800d92a:	2001      	movs	r0, #1
 800d92c:	bc30      	pop	{r4, r5}
 800d92e:	4770      	bx	lr
 800d930:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d934:	e7fa      	b.n	800d92c <__mcmp+0x2c>
 800d936:	bf00      	nop

0800d938 <__mdiff>:
 800d938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d93c:	6913      	ldr	r3, [r2, #16]
 800d93e:	690d      	ldr	r5, [r1, #16]
 800d940:	1aed      	subs	r5, r5, r3
 800d942:	2d00      	cmp	r5, #0
 800d944:	460e      	mov	r6, r1
 800d946:	4690      	mov	r8, r2
 800d948:	f101 0414 	add.w	r4, r1, #20
 800d94c:	f102 0714 	add.w	r7, r2, #20
 800d950:	d114      	bne.n	800d97c <__mdiff+0x44>
 800d952:	009b      	lsls	r3, r3, #2
 800d954:	18e2      	adds	r2, r4, r3
 800d956:	443b      	add	r3, r7
 800d958:	e001      	b.n	800d95e <__mdiff+0x26>
 800d95a:	42a2      	cmp	r2, r4
 800d95c:	d959      	bls.n	800da12 <__mdiff+0xda>
 800d95e:	f852 cd04 	ldr.w	ip, [r2, #-4]!
 800d962:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d966:	458c      	cmp	ip, r1
 800d968:	d0f7      	beq.n	800d95a <__mdiff+0x22>
 800d96a:	d209      	bcs.n	800d980 <__mdiff+0x48>
 800d96c:	4622      	mov	r2, r4
 800d96e:	4633      	mov	r3, r6
 800d970:	463c      	mov	r4, r7
 800d972:	4646      	mov	r6, r8
 800d974:	4617      	mov	r7, r2
 800d976:	4698      	mov	r8, r3
 800d978:	2501      	movs	r5, #1
 800d97a:	e001      	b.n	800d980 <__mdiff+0x48>
 800d97c:	dbf6      	blt.n	800d96c <__mdiff+0x34>
 800d97e:	2500      	movs	r5, #0
 800d980:	6871      	ldr	r1, [r6, #4]
 800d982:	f7ff fda7 	bl	800d4d4 <_Balloc>
 800d986:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800d98a:	6936      	ldr	r6, [r6, #16]
 800d98c:	60c5      	str	r5, [r0, #12]
 800d98e:	eb07 0e83 	add.w	lr, r7, r3, lsl #2
 800d992:	46bc      	mov	ip, r7
 800d994:	f100 0514 	add.w	r5, r0, #20
 800d998:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 800d99c:	2300      	movs	r3, #0
 800d99e:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d9a2:	f854 8b04 	ldr.w	r8, [r4], #4
 800d9a6:	b28a      	uxth	r2, r1
 800d9a8:	fa13 f388 	uxtah	r3, r3, r8
 800d9ac:	0c09      	lsrs	r1, r1, #16
 800d9ae:	1a9a      	subs	r2, r3, r2
 800d9b0:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
 800d9b4:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800d9b8:	b292      	uxth	r2, r2
 800d9ba:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d9be:	45e6      	cmp	lr, ip
 800d9c0:	f845 2b04 	str.w	r2, [r5], #4
 800d9c4:	ea4f 4323 	mov.w	r3, r3, asr #16
 800d9c8:	d8e9      	bhi.n	800d99e <__mdiff+0x66>
 800d9ca:	42a7      	cmp	r7, r4
 800d9cc:	d917      	bls.n	800d9fe <__mdiff+0xc6>
 800d9ce:	46ae      	mov	lr, r5
 800d9d0:	46a4      	mov	ip, r4
 800d9d2:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d9d6:	fa13 f382 	uxtah	r3, r3, r2
 800d9da:	1419      	asrs	r1, r3, #16
 800d9dc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d9e0:	b29b      	uxth	r3, r3
 800d9e2:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
 800d9e6:	4567      	cmp	r7, ip
 800d9e8:	f84e 2b04 	str.w	r2, [lr], #4
 800d9ec:	ea4f 4321 	mov.w	r3, r1, asr #16
 800d9f0:	d8ef      	bhi.n	800d9d2 <__mdiff+0x9a>
 800d9f2:	43e4      	mvns	r4, r4
 800d9f4:	4427      	add	r7, r4
 800d9f6:	f027 0703 	bic.w	r7, r7, #3
 800d9fa:	3704      	adds	r7, #4
 800d9fc:	443d      	add	r5, r7
 800d9fe:	3d04      	subs	r5, #4
 800da00:	b922      	cbnz	r2, 800da0c <__mdiff+0xd4>
 800da02:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800da06:	3e01      	subs	r6, #1
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d0fa      	beq.n	800da02 <__mdiff+0xca>
 800da0c:	6106      	str	r6, [r0, #16]
 800da0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da12:	2100      	movs	r1, #0
 800da14:	f7ff fd5e 	bl	800d4d4 <_Balloc>
 800da18:	2201      	movs	r2, #1
 800da1a:	2300      	movs	r3, #0
 800da1c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800da20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800da24 <__d2b>:
 800da24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da28:	2101      	movs	r1, #1
 800da2a:	b082      	sub	sp, #8
 800da2c:	461c      	mov	r4, r3
 800da2e:	4690      	mov	r8, r2
 800da30:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800da34:	f7ff fd4e 	bl	800d4d4 <_Balloc>
 800da38:	4623      	mov	r3, r4
 800da3a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800da3e:	4607      	mov	r7, r0
 800da40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800da44:	b10c      	cbz	r4, 800da4a <__d2b+0x26>
 800da46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800da4a:	f1b8 0200 	subs.w	r2, r8, #0
 800da4e:	9301      	str	r3, [sp, #4]
 800da50:	d01f      	beq.n	800da92 <__d2b+0x6e>
 800da52:	a802      	add	r0, sp, #8
 800da54:	f840 2d08 	str.w	r2, [r0, #-8]!
 800da58:	f7ff fdcc 	bl	800d5f4 <__lo0bits>
 800da5c:	2800      	cmp	r0, #0
 800da5e:	d12d      	bne.n	800dabc <__d2b+0x98>
 800da60:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da64:	617a      	str	r2, [r7, #20]
 800da66:	2b00      	cmp	r3, #0
 800da68:	bf0c      	ite	eq
 800da6a:	2101      	moveq	r1, #1
 800da6c:	2102      	movne	r1, #2
 800da6e:	61bb      	str	r3, [r7, #24]
 800da70:	6139      	str	r1, [r7, #16]
 800da72:	b9c4      	cbnz	r4, 800daa6 <__d2b+0x82>
 800da74:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800da78:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800da7c:	6030      	str	r0, [r6, #0]
 800da7e:	6918      	ldr	r0, [r3, #16]
 800da80:	f7ff fd98 	bl	800d5b4 <__hi0bits>
 800da84:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800da88:	6028      	str	r0, [r5, #0]
 800da8a:	4638      	mov	r0, r7
 800da8c:	b002      	add	sp, #8
 800da8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da92:	a801      	add	r0, sp, #4
 800da94:	f7ff fdae 	bl	800d5f4 <__lo0bits>
 800da98:	9b01      	ldr	r3, [sp, #4]
 800da9a:	617b      	str	r3, [r7, #20]
 800da9c:	2101      	movs	r1, #1
 800da9e:	3020      	adds	r0, #32
 800daa0:	6139      	str	r1, [r7, #16]
 800daa2:	2c00      	cmp	r4, #0
 800daa4:	d0e6      	beq.n	800da74 <__d2b+0x50>
 800daa6:	f2a4 4333 	subw	r3, r4, #1075	; 0x433
 800daaa:	4403      	add	r3, r0
 800daac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dab0:	6033      	str	r3, [r6, #0]
 800dab2:	6028      	str	r0, [r5, #0]
 800dab4:	4638      	mov	r0, r7
 800dab6:	b002      	add	sp, #8
 800dab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dabc:	e9dd 1300 	ldrd	r1, r3, [sp]
 800dac0:	f1c0 0220 	rsb	r2, r0, #32
 800dac4:	fa03 f202 	lsl.w	r2, r3, r2
 800dac8:	430a      	orrs	r2, r1
 800daca:	40c3      	lsrs	r3, r0
 800dacc:	9301      	str	r3, [sp, #4]
 800dace:	617a      	str	r2, [r7, #20]
 800dad0:	e7c9      	b.n	800da66 <__d2b+0x42>
 800dad2:	bf00      	nop

0800dad4 <_realloc_r>:
 800dad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dad8:	4692      	mov	sl, r2
 800dada:	b083      	sub	sp, #12
 800dadc:	2900      	cmp	r1, #0
 800dade:	f000 80a1 	beq.w	800dc24 <_realloc_r+0x150>
 800dae2:	460d      	mov	r5, r1
 800dae4:	4680      	mov	r8, r0
 800dae6:	f10a 040b 	add.w	r4, sl, #11
 800daea:	f7ff fce7 	bl	800d4bc <__malloc_lock>
 800daee:	f855 2c04 	ldr.w	r2, [r5, #-4]
 800daf2:	2c16      	cmp	r4, #22
 800daf4:	f022 0603 	bic.w	r6, r2, #3
 800daf8:	f1a5 0708 	sub.w	r7, r5, #8
 800dafc:	d83e      	bhi.n	800db7c <_realloc_r+0xa8>
 800dafe:	2410      	movs	r4, #16
 800db00:	4621      	mov	r1, r4
 800db02:	45a2      	cmp	sl, r4
 800db04:	d83f      	bhi.n	800db86 <_realloc_r+0xb2>
 800db06:	428e      	cmp	r6, r1
 800db08:	eb07 0906 	add.w	r9, r7, r6
 800db0c:	da74      	bge.n	800dbf8 <_realloc_r+0x124>
 800db0e:	4bc7      	ldr	r3, [pc, #796]	; (800de2c <_realloc_r+0x358>)
 800db10:	6898      	ldr	r0, [r3, #8]
 800db12:	4548      	cmp	r0, r9
 800db14:	f000 80aa 	beq.w	800dc6c <_realloc_r+0x198>
 800db18:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800db1c:	f020 0301 	bic.w	r3, r0, #1
 800db20:	444b      	add	r3, r9
 800db22:	685b      	ldr	r3, [r3, #4]
 800db24:	07db      	lsls	r3, r3, #31
 800db26:	f140 8083 	bpl.w	800dc30 <_realloc_r+0x15c>
 800db2a:	07d2      	lsls	r2, r2, #31
 800db2c:	d534      	bpl.n	800db98 <_realloc_r+0xc4>
 800db2e:	4651      	mov	r1, sl
 800db30:	4640      	mov	r0, r8
 800db32:	f7ff f9a5 	bl	800ce80 <_malloc_r>
 800db36:	4682      	mov	sl, r0
 800db38:	b1e0      	cbz	r0, 800db74 <_realloc_r+0xa0>
 800db3a:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800db3e:	f023 0301 	bic.w	r3, r3, #1
 800db42:	443b      	add	r3, r7
 800db44:	f1a0 0208 	sub.w	r2, r0, #8
 800db48:	4293      	cmp	r3, r2
 800db4a:	f000 80f9 	beq.w	800dd40 <_realloc_r+0x26c>
 800db4e:	1f32      	subs	r2, r6, #4
 800db50:	2a24      	cmp	r2, #36	; 0x24
 800db52:	f200 8107 	bhi.w	800dd64 <_realloc_r+0x290>
 800db56:	2a13      	cmp	r2, #19
 800db58:	6829      	ldr	r1, [r5, #0]
 800db5a:	f200 80e6 	bhi.w	800dd2a <_realloc_r+0x256>
 800db5e:	4603      	mov	r3, r0
 800db60:	462a      	mov	r2, r5
 800db62:	6019      	str	r1, [r3, #0]
 800db64:	6851      	ldr	r1, [r2, #4]
 800db66:	6059      	str	r1, [r3, #4]
 800db68:	6892      	ldr	r2, [r2, #8]
 800db6a:	609a      	str	r2, [r3, #8]
 800db6c:	4629      	mov	r1, r5
 800db6e:	4640      	mov	r0, r8
 800db70:	f7fe fe4a 	bl	800c808 <_free_r>
 800db74:	4640      	mov	r0, r8
 800db76:	f7ff fca7 	bl	800d4c8 <__malloc_unlock>
 800db7a:	e04f      	b.n	800dc1c <_realloc_r+0x148>
 800db7c:	f024 0407 	bic.w	r4, r4, #7
 800db80:	2c00      	cmp	r4, #0
 800db82:	4621      	mov	r1, r4
 800db84:	dabd      	bge.n	800db02 <_realloc_r+0x2e>
 800db86:	f04f 0a00 	mov.w	sl, #0
 800db8a:	230c      	movs	r3, #12
 800db8c:	4650      	mov	r0, sl
 800db8e:	f8c8 3000 	str.w	r3, [r8]
 800db92:	b003      	add	sp, #12
 800db94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db98:	f855 3c08 	ldr.w	r3, [r5, #-8]
 800db9c:	eba7 0b03 	sub.w	fp, r7, r3
 800dba0:	f8db 2004 	ldr.w	r2, [fp, #4]
 800dba4:	f022 0203 	bic.w	r2, r2, #3
 800dba8:	18b3      	adds	r3, r6, r2
 800dbaa:	428b      	cmp	r3, r1
 800dbac:	dbbf      	blt.n	800db2e <_realloc_r+0x5a>
 800dbae:	46da      	mov	sl, fp
 800dbb0:	f8db 100c 	ldr.w	r1, [fp, #12]
 800dbb4:	f85a 0f08 	ldr.w	r0, [sl, #8]!
 800dbb8:	1f32      	subs	r2, r6, #4
 800dbba:	2a24      	cmp	r2, #36	; 0x24
 800dbbc:	60c1      	str	r1, [r0, #12]
 800dbbe:	eb0b 0903 	add.w	r9, fp, r3
 800dbc2:	6088      	str	r0, [r1, #8]
 800dbc4:	f200 80c6 	bhi.w	800dd54 <_realloc_r+0x280>
 800dbc8:	2a13      	cmp	r2, #19
 800dbca:	6829      	ldr	r1, [r5, #0]
 800dbcc:	f240 80c0 	bls.w	800dd50 <_realloc_r+0x27c>
 800dbd0:	f8cb 1008 	str.w	r1, [fp, #8]
 800dbd4:	6869      	ldr	r1, [r5, #4]
 800dbd6:	f8cb 100c 	str.w	r1, [fp, #12]
 800dbda:	2a1b      	cmp	r2, #27
 800dbdc:	68a9      	ldr	r1, [r5, #8]
 800dbde:	f200 80d8 	bhi.w	800dd92 <_realloc_r+0x2be>
 800dbe2:	f10b 0210 	add.w	r2, fp, #16
 800dbe6:	3508      	adds	r5, #8
 800dbe8:	6011      	str	r1, [r2, #0]
 800dbea:	6869      	ldr	r1, [r5, #4]
 800dbec:	6051      	str	r1, [r2, #4]
 800dbee:	68a9      	ldr	r1, [r5, #8]
 800dbf0:	6091      	str	r1, [r2, #8]
 800dbf2:	461e      	mov	r6, r3
 800dbf4:	465f      	mov	r7, fp
 800dbf6:	4655      	mov	r5, sl
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	1b32      	subs	r2, r6, r4
 800dbfc:	2a0f      	cmp	r2, #15
 800dbfe:	f003 0301 	and.w	r3, r3, #1
 800dc02:	d822      	bhi.n	800dc4a <_realloc_r+0x176>
 800dc04:	4333      	orrs	r3, r6
 800dc06:	607b      	str	r3, [r7, #4]
 800dc08:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800dc0c:	f043 0301 	orr.w	r3, r3, #1
 800dc10:	f8c9 3004 	str.w	r3, [r9, #4]
 800dc14:	4640      	mov	r0, r8
 800dc16:	f7ff fc57 	bl	800d4c8 <__malloc_unlock>
 800dc1a:	46aa      	mov	sl, r5
 800dc1c:	4650      	mov	r0, sl
 800dc1e:	b003      	add	sp, #12
 800dc20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc24:	4611      	mov	r1, r2
 800dc26:	b003      	add	sp, #12
 800dc28:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc2c:	f7ff b928 	b.w	800ce80 <_malloc_r>
 800dc30:	f020 0003 	bic.w	r0, r0, #3
 800dc34:	1833      	adds	r3, r6, r0
 800dc36:	428b      	cmp	r3, r1
 800dc38:	db61      	blt.n	800dcfe <_realloc_r+0x22a>
 800dc3a:	e9d9 1202 	ldrd	r1, r2, [r9, #8]
 800dc3e:	461e      	mov	r6, r3
 800dc40:	60ca      	str	r2, [r1, #12]
 800dc42:	eb07 0903 	add.w	r9, r7, r3
 800dc46:	6091      	str	r1, [r2, #8]
 800dc48:	e7d6      	b.n	800dbf8 <_realloc_r+0x124>
 800dc4a:	1939      	adds	r1, r7, r4
 800dc4c:	4323      	orrs	r3, r4
 800dc4e:	f042 0201 	orr.w	r2, r2, #1
 800dc52:	607b      	str	r3, [r7, #4]
 800dc54:	604a      	str	r2, [r1, #4]
 800dc56:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800dc5a:	f043 0301 	orr.w	r3, r3, #1
 800dc5e:	3108      	adds	r1, #8
 800dc60:	f8c9 3004 	str.w	r3, [r9, #4]
 800dc64:	4640      	mov	r0, r8
 800dc66:	f7fe fdcf 	bl	800c808 <_free_r>
 800dc6a:	e7d3      	b.n	800dc14 <_realloc_r+0x140>
 800dc6c:	6840      	ldr	r0, [r0, #4]
 800dc6e:	f020 0903 	bic.w	r9, r0, #3
 800dc72:	44b1      	add	r9, r6
 800dc74:	f104 0010 	add.w	r0, r4, #16
 800dc78:	4581      	cmp	r9, r0
 800dc7a:	da77      	bge.n	800dd6c <_realloc_r+0x298>
 800dc7c:	07d2      	lsls	r2, r2, #31
 800dc7e:	f53f af56 	bmi.w	800db2e <_realloc_r+0x5a>
 800dc82:	f855 2c08 	ldr.w	r2, [r5, #-8]
 800dc86:	eba7 0b02 	sub.w	fp, r7, r2
 800dc8a:	f8db 2004 	ldr.w	r2, [fp, #4]
 800dc8e:	f022 0203 	bic.w	r2, r2, #3
 800dc92:	4491      	add	r9, r2
 800dc94:	4548      	cmp	r0, r9
 800dc96:	dc87      	bgt.n	800dba8 <_realloc_r+0xd4>
 800dc98:	46da      	mov	sl, fp
 800dc9a:	f8db 100c 	ldr.w	r1, [fp, #12]
 800dc9e:	f85a 0f08 	ldr.w	r0, [sl, #8]!
 800dca2:	1f32      	subs	r2, r6, #4
 800dca4:	2a24      	cmp	r2, #36	; 0x24
 800dca6:	60c1      	str	r1, [r0, #12]
 800dca8:	6088      	str	r0, [r1, #8]
 800dcaa:	f200 80a1 	bhi.w	800ddf0 <_realloc_r+0x31c>
 800dcae:	2a13      	cmp	r2, #19
 800dcb0:	6829      	ldr	r1, [r5, #0]
 800dcb2:	f240 809b 	bls.w	800ddec <_realloc_r+0x318>
 800dcb6:	f8cb 1008 	str.w	r1, [fp, #8]
 800dcba:	6869      	ldr	r1, [r5, #4]
 800dcbc:	f8cb 100c 	str.w	r1, [fp, #12]
 800dcc0:	2a1b      	cmp	r2, #27
 800dcc2:	68a9      	ldr	r1, [r5, #8]
 800dcc4:	f200 809b 	bhi.w	800ddfe <_realloc_r+0x32a>
 800dcc8:	f10b 0210 	add.w	r2, fp, #16
 800dccc:	3508      	adds	r5, #8
 800dcce:	6011      	str	r1, [r2, #0]
 800dcd0:	6869      	ldr	r1, [r5, #4]
 800dcd2:	6051      	str	r1, [r2, #4]
 800dcd4:	68a9      	ldr	r1, [r5, #8]
 800dcd6:	6091      	str	r1, [r2, #8]
 800dcd8:	eb0b 0104 	add.w	r1, fp, r4
 800dcdc:	eba9 0204 	sub.w	r2, r9, r4
 800dce0:	f042 0201 	orr.w	r2, r2, #1
 800dce4:	6099      	str	r1, [r3, #8]
 800dce6:	604a      	str	r2, [r1, #4]
 800dce8:	f8db 3004 	ldr.w	r3, [fp, #4]
 800dcec:	f003 0301 	and.w	r3, r3, #1
 800dcf0:	431c      	orrs	r4, r3
 800dcf2:	4640      	mov	r0, r8
 800dcf4:	f8cb 4004 	str.w	r4, [fp, #4]
 800dcf8:	f7ff fbe6 	bl	800d4c8 <__malloc_unlock>
 800dcfc:	e78e      	b.n	800dc1c <_realloc_r+0x148>
 800dcfe:	07d3      	lsls	r3, r2, #31
 800dd00:	f53f af15 	bmi.w	800db2e <_realloc_r+0x5a>
 800dd04:	f855 3c08 	ldr.w	r3, [r5, #-8]
 800dd08:	eba7 0b03 	sub.w	fp, r7, r3
 800dd0c:	f8db 2004 	ldr.w	r2, [fp, #4]
 800dd10:	f022 0203 	bic.w	r2, r2, #3
 800dd14:	4410      	add	r0, r2
 800dd16:	1983      	adds	r3, r0, r6
 800dd18:	428b      	cmp	r3, r1
 800dd1a:	f6ff af45 	blt.w	800dba8 <_realloc_r+0xd4>
 800dd1e:	e9d9 1202 	ldrd	r1, r2, [r9, #8]
 800dd22:	46da      	mov	sl, fp
 800dd24:	60ca      	str	r2, [r1, #12]
 800dd26:	6091      	str	r1, [r2, #8]
 800dd28:	e742      	b.n	800dbb0 <_realloc_r+0xdc>
 800dd2a:	6001      	str	r1, [r0, #0]
 800dd2c:	686b      	ldr	r3, [r5, #4]
 800dd2e:	6043      	str	r3, [r0, #4]
 800dd30:	2a1b      	cmp	r2, #27
 800dd32:	d83a      	bhi.n	800ddaa <_realloc_r+0x2d6>
 800dd34:	f105 0208 	add.w	r2, r5, #8
 800dd38:	f100 0308 	add.w	r3, r0, #8
 800dd3c:	68a9      	ldr	r1, [r5, #8]
 800dd3e:	e710      	b.n	800db62 <_realloc_r+0x8e>
 800dd40:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800dd44:	f023 0303 	bic.w	r3, r3, #3
 800dd48:	441e      	add	r6, r3
 800dd4a:	eb07 0906 	add.w	r9, r7, r6
 800dd4e:	e753      	b.n	800dbf8 <_realloc_r+0x124>
 800dd50:	4652      	mov	r2, sl
 800dd52:	e749      	b.n	800dbe8 <_realloc_r+0x114>
 800dd54:	4629      	mov	r1, r5
 800dd56:	4650      	mov	r0, sl
 800dd58:	461e      	mov	r6, r3
 800dd5a:	465f      	mov	r7, fp
 800dd5c:	f7ff fb4a 	bl	800d3f4 <memmove>
 800dd60:	4655      	mov	r5, sl
 800dd62:	e749      	b.n	800dbf8 <_realloc_r+0x124>
 800dd64:	4629      	mov	r1, r5
 800dd66:	f7ff fb45 	bl	800d3f4 <memmove>
 800dd6a:	e6ff      	b.n	800db6c <_realloc_r+0x98>
 800dd6c:	4427      	add	r7, r4
 800dd6e:	eba9 0904 	sub.w	r9, r9, r4
 800dd72:	f049 0201 	orr.w	r2, r9, #1
 800dd76:	609f      	str	r7, [r3, #8]
 800dd78:	607a      	str	r2, [r7, #4]
 800dd7a:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800dd7e:	f003 0301 	and.w	r3, r3, #1
 800dd82:	431c      	orrs	r4, r3
 800dd84:	4640      	mov	r0, r8
 800dd86:	f845 4c04 	str.w	r4, [r5, #-4]
 800dd8a:	f7ff fb9d 	bl	800d4c8 <__malloc_unlock>
 800dd8e:	46aa      	mov	sl, r5
 800dd90:	e744      	b.n	800dc1c <_realloc_r+0x148>
 800dd92:	f8cb 1010 	str.w	r1, [fp, #16]
 800dd96:	68e9      	ldr	r1, [r5, #12]
 800dd98:	f8cb 1014 	str.w	r1, [fp, #20]
 800dd9c:	2a24      	cmp	r2, #36	; 0x24
 800dd9e:	d010      	beq.n	800ddc2 <_realloc_r+0x2ee>
 800dda0:	6929      	ldr	r1, [r5, #16]
 800dda2:	f10b 0218 	add.w	r2, fp, #24
 800dda6:	3510      	adds	r5, #16
 800dda8:	e71e      	b.n	800dbe8 <_realloc_r+0x114>
 800ddaa:	68ab      	ldr	r3, [r5, #8]
 800ddac:	6083      	str	r3, [r0, #8]
 800ddae:	68eb      	ldr	r3, [r5, #12]
 800ddb0:	60c3      	str	r3, [r0, #12]
 800ddb2:	2a24      	cmp	r2, #36	; 0x24
 800ddb4:	d010      	beq.n	800ddd8 <_realloc_r+0x304>
 800ddb6:	f105 0210 	add.w	r2, r5, #16
 800ddba:	f100 0310 	add.w	r3, r0, #16
 800ddbe:	6929      	ldr	r1, [r5, #16]
 800ddc0:	e6cf      	b.n	800db62 <_realloc_r+0x8e>
 800ddc2:	692a      	ldr	r2, [r5, #16]
 800ddc4:	f8cb 2018 	str.w	r2, [fp, #24]
 800ddc8:	696a      	ldr	r2, [r5, #20]
 800ddca:	f8cb 201c 	str.w	r2, [fp, #28]
 800ddce:	69a9      	ldr	r1, [r5, #24]
 800ddd0:	f10b 0220 	add.w	r2, fp, #32
 800ddd4:	3518      	adds	r5, #24
 800ddd6:	e707      	b.n	800dbe8 <_realloc_r+0x114>
 800ddd8:	692b      	ldr	r3, [r5, #16]
 800ddda:	6103      	str	r3, [r0, #16]
 800dddc:	696b      	ldr	r3, [r5, #20]
 800ddde:	6143      	str	r3, [r0, #20]
 800dde0:	69a9      	ldr	r1, [r5, #24]
 800dde2:	f105 0218 	add.w	r2, r5, #24
 800dde6:	f100 0318 	add.w	r3, r0, #24
 800ddea:	e6ba      	b.n	800db62 <_realloc_r+0x8e>
 800ddec:	4652      	mov	r2, sl
 800ddee:	e76e      	b.n	800dcce <_realloc_r+0x1fa>
 800ddf0:	4629      	mov	r1, r5
 800ddf2:	4650      	mov	r0, sl
 800ddf4:	9301      	str	r3, [sp, #4]
 800ddf6:	f7ff fafd 	bl	800d3f4 <memmove>
 800ddfa:	9b01      	ldr	r3, [sp, #4]
 800ddfc:	e76c      	b.n	800dcd8 <_realloc_r+0x204>
 800ddfe:	f8cb 1010 	str.w	r1, [fp, #16]
 800de02:	68e9      	ldr	r1, [r5, #12]
 800de04:	f8cb 1014 	str.w	r1, [fp, #20]
 800de08:	2a24      	cmp	r2, #36	; 0x24
 800de0a:	d004      	beq.n	800de16 <_realloc_r+0x342>
 800de0c:	6929      	ldr	r1, [r5, #16]
 800de0e:	f10b 0218 	add.w	r2, fp, #24
 800de12:	3510      	adds	r5, #16
 800de14:	e75b      	b.n	800dcce <_realloc_r+0x1fa>
 800de16:	692a      	ldr	r2, [r5, #16]
 800de18:	f8cb 2018 	str.w	r2, [fp, #24]
 800de1c:	696a      	ldr	r2, [r5, #20]
 800de1e:	f8cb 201c 	str.w	r2, [fp, #28]
 800de22:	69a9      	ldr	r1, [r5, #24]
 800de24:	f10b 0220 	add.w	r2, fp, #32
 800de28:	3518      	adds	r5, #24
 800de2a:	e750      	b.n	800dcce <_realloc_r+0x1fa>
 800de2c:	200005d4 	.word	0x200005d4

0800de30 <_sbrk_r>:
 800de30:	b538      	push	{r3, r4, r5, lr}
 800de32:	4c07      	ldr	r4, [pc, #28]	; (800de50 <_sbrk_r+0x20>)
 800de34:	2300      	movs	r3, #0
 800de36:	4605      	mov	r5, r0
 800de38:	4608      	mov	r0, r1
 800de3a:	6023      	str	r3, [r4, #0]
 800de3c:	f7f9 fcd4 	bl	80077e8 <_sbrk>
 800de40:	1c43      	adds	r3, r0, #1
 800de42:	d000      	beq.n	800de46 <_sbrk_r+0x16>
 800de44:	bd38      	pop	{r3, r4, r5, pc}
 800de46:	6823      	ldr	r3, [r4, #0]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d0fb      	beq.n	800de44 <_sbrk_r+0x14>
 800de4c:	602b      	str	r3, [r5, #0]
 800de4e:	bd38      	pop	{r3, r4, r5, pc}
 800de50:	20003344 	.word	0x20003344

0800de54 <__sread>:
 800de54:	b510      	push	{r4, lr}
 800de56:	460c      	mov	r4, r1
 800de58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de5c:	f000 fa8e 	bl	800e37c <_read_r>
 800de60:	2800      	cmp	r0, #0
 800de62:	db03      	blt.n	800de6c <__sread+0x18>
 800de64:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800de66:	4403      	add	r3, r0
 800de68:	6523      	str	r3, [r4, #80]	; 0x50
 800de6a:	bd10      	pop	{r4, pc}
 800de6c:	89a3      	ldrh	r3, [r4, #12]
 800de6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800de72:	81a3      	strh	r3, [r4, #12]
 800de74:	bd10      	pop	{r4, pc}
 800de76:	bf00      	nop

0800de78 <__swrite>:
 800de78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de7c:	4616      	mov	r6, r2
 800de7e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800de82:	461f      	mov	r7, r3
 800de84:	05d3      	lsls	r3, r2, #23
 800de86:	460c      	mov	r4, r1
 800de88:	4605      	mov	r5, r0
 800de8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de8e:	d507      	bpl.n	800dea0 <__swrite+0x28>
 800de90:	2200      	movs	r2, #0
 800de92:	2302      	movs	r3, #2
 800de94:	f000 fa5c 	bl	800e350 <_lseek_r>
 800de98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800de9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dea0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800dea4:	81a2      	strh	r2, [r4, #12]
 800dea6:	463b      	mov	r3, r7
 800dea8:	4632      	mov	r2, r6
 800deaa:	4628      	mov	r0, r5
 800deac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800deb0:	f000 b8e2 	b.w	800e078 <_write_r>

0800deb4 <__sseek>:
 800deb4:	b510      	push	{r4, lr}
 800deb6:	460c      	mov	r4, r1
 800deb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800debc:	f000 fa48 	bl	800e350 <_lseek_r>
 800dec0:	89a3      	ldrh	r3, [r4, #12]
 800dec2:	1c42      	adds	r2, r0, #1
 800dec4:	bf0e      	itee	eq
 800dec6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800deca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dece:	6520      	strne	r0, [r4, #80]	; 0x50
 800ded0:	81a3      	strh	r3, [r4, #12]
 800ded2:	bd10      	pop	{r4, pc}

0800ded4 <__sclose>:
 800ded4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ded8:	f000 b918 	b.w	800e10c <_close_r>

0800dedc <__ssprint_r>:
 800dedc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dee0:	6893      	ldr	r3, [r2, #8]
 800dee2:	b083      	sub	sp, #12
 800dee4:	4690      	mov	r8, r2
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d06c      	beq.n	800dfc4 <__ssprint_r+0xe8>
 800deea:	6817      	ldr	r7, [r2, #0]
 800deec:	688d      	ldr	r5, [r1, #8]
 800deee:	4682      	mov	sl, r0
 800def0:	460c      	mov	r4, r1
 800def2:	6808      	ldr	r0, [r1, #0]
 800def4:	3708      	adds	r7, #8
 800def6:	e042      	b.n	800df7e <__ssprint_r+0xa2>
 800def8:	89a3      	ldrh	r3, [r4, #12]
 800defa:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800defe:	d02d      	beq.n	800df5c <__ssprint_r+0x80>
 800df00:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
 800df04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800df08:	eba0 0b01 	sub.w	fp, r0, r1
 800df0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800df10:	1c70      	adds	r0, r6, #1
 800df12:	106d      	asrs	r5, r5, #1
 800df14:	4458      	add	r0, fp
 800df16:	42a8      	cmp	r0, r5
 800df18:	462a      	mov	r2, r5
 800df1a:	bf84      	itt	hi
 800df1c:	4605      	movhi	r5, r0
 800df1e:	462a      	movhi	r2, r5
 800df20:	055b      	lsls	r3, r3, #21
 800df22:	d536      	bpl.n	800df92 <__ssprint_r+0xb6>
 800df24:	4611      	mov	r1, r2
 800df26:	4650      	mov	r0, sl
 800df28:	f7fe ffaa 	bl	800ce80 <_malloc_r>
 800df2c:	2800      	cmp	r0, #0
 800df2e:	d03a      	beq.n	800dfa6 <__ssprint_r+0xca>
 800df30:	465a      	mov	r2, fp
 800df32:	6921      	ldr	r1, [r4, #16]
 800df34:	9001      	str	r0, [sp, #4]
 800df36:	f7f2 fb69 	bl	800060c <memcpy>
 800df3a:	89a2      	ldrh	r2, [r4, #12]
 800df3c:	9b01      	ldr	r3, [sp, #4]
 800df3e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800df42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800df46:	81a2      	strh	r2, [r4, #12]
 800df48:	eba5 020b 	sub.w	r2, r5, fp
 800df4c:	eb03 000b 	add.w	r0, r3, fp
 800df50:	6165      	str	r5, [r4, #20]
 800df52:	6123      	str	r3, [r4, #16]
 800df54:	6020      	str	r0, [r4, #0]
 800df56:	60a2      	str	r2, [r4, #8]
 800df58:	4635      	mov	r5, r6
 800df5a:	46b3      	mov	fp, r6
 800df5c:	465a      	mov	r2, fp
 800df5e:	4649      	mov	r1, r9
 800df60:	f7ff fa48 	bl	800d3f4 <memmove>
 800df64:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800df68:	68a2      	ldr	r2, [r4, #8]
 800df6a:	6820      	ldr	r0, [r4, #0]
 800df6c:	1b55      	subs	r5, r2, r5
 800df6e:	4458      	add	r0, fp
 800df70:	1b9e      	subs	r6, r3, r6
 800df72:	60a5      	str	r5, [r4, #8]
 800df74:	6020      	str	r0, [r4, #0]
 800df76:	f8c8 6008 	str.w	r6, [r8, #8]
 800df7a:	b31e      	cbz	r6, 800dfc4 <__ssprint_r+0xe8>
 800df7c:	3708      	adds	r7, #8
 800df7e:	e957 9602 	ldrd	r9, r6, [r7, #-8]
 800df82:	46ab      	mov	fp, r5
 800df84:	2e00      	cmp	r6, #0
 800df86:	d0f9      	beq.n	800df7c <__ssprint_r+0xa0>
 800df88:	42ae      	cmp	r6, r5
 800df8a:	d2b5      	bcs.n	800def8 <__ssprint_r+0x1c>
 800df8c:	4635      	mov	r5, r6
 800df8e:	46b3      	mov	fp, r6
 800df90:	e7e4      	b.n	800df5c <__ssprint_r+0x80>
 800df92:	4650      	mov	r0, sl
 800df94:	f7ff fd9e 	bl	800dad4 <_realloc_r>
 800df98:	4603      	mov	r3, r0
 800df9a:	2800      	cmp	r0, #0
 800df9c:	d1d4      	bne.n	800df48 <__ssprint_r+0x6c>
 800df9e:	6921      	ldr	r1, [r4, #16]
 800dfa0:	4650      	mov	r0, sl
 800dfa2:	f7fe fc31 	bl	800c808 <_free_r>
 800dfa6:	230c      	movs	r3, #12
 800dfa8:	f8ca 3000 	str.w	r3, [sl]
 800dfac:	89a3      	ldrh	r3, [r4, #12]
 800dfae:	2200      	movs	r2, #0
 800dfb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dfb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dfb8:	81a3      	strh	r3, [r4, #12]
 800dfba:	e9c8 2201 	strd	r2, r2, [r8, #4]
 800dfbe:	b003      	add	sp, #12
 800dfc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfc4:	2000      	movs	r0, #0
 800dfc6:	f8c8 0004 	str.w	r0, [r8, #4]
 800dfca:	b003      	add	sp, #12
 800dfcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dfd0 <__sprint_r.part.0>:
 800dfd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfd4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800dfd6:	049c      	lsls	r4, r3, #18
 800dfd8:	4692      	mov	sl, r2
 800dfda:	d52d      	bpl.n	800e038 <__sprint_r.part.0+0x68>
 800dfdc:	6893      	ldr	r3, [r2, #8]
 800dfde:	6812      	ldr	r2, [r2, #0]
 800dfe0:	b343      	cbz	r3, 800e034 <__sprint_r.part.0+0x64>
 800dfe2:	460e      	mov	r6, r1
 800dfe4:	4607      	mov	r7, r0
 800dfe6:	f102 0908 	add.w	r9, r2, #8
 800dfea:	e959 5b02 	ldrd	r5, fp, [r9, #-8]
 800dfee:	ea5f 089b 	movs.w	r8, fp, lsr #2
 800dff2:	d015      	beq.n	800e020 <__sprint_r.part.0+0x50>
 800dff4:	3d04      	subs	r5, #4
 800dff6:	2400      	movs	r4, #0
 800dff8:	e001      	b.n	800dffe <__sprint_r.part.0+0x2e>
 800dffa:	45a0      	cmp	r8, r4
 800dffc:	d00e      	beq.n	800e01c <__sprint_r.part.0+0x4c>
 800dffe:	4632      	mov	r2, r6
 800e000:	f855 1f04 	ldr.w	r1, [r5, #4]!
 800e004:	4638      	mov	r0, r7
 800e006:	f000 f94b 	bl	800e2a0 <_fputwc_r>
 800e00a:	1c43      	adds	r3, r0, #1
 800e00c:	f104 0401 	add.w	r4, r4, #1
 800e010:	d1f3      	bne.n	800dffa <__sprint_r.part.0+0x2a>
 800e012:	2300      	movs	r3, #0
 800e014:	e9ca 3301 	strd	r3, r3, [sl, #4]
 800e018:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e01c:	f8da 3008 	ldr.w	r3, [sl, #8]
 800e020:	f02b 0b03 	bic.w	fp, fp, #3
 800e024:	eba3 030b 	sub.w	r3, r3, fp
 800e028:	f8ca 3008 	str.w	r3, [sl, #8]
 800e02c:	f109 0908 	add.w	r9, r9, #8
 800e030:	2b00      	cmp	r3, #0
 800e032:	d1da      	bne.n	800dfea <__sprint_r.part.0+0x1a>
 800e034:	2000      	movs	r0, #0
 800e036:	e7ec      	b.n	800e012 <__sprint_r.part.0+0x42>
 800e038:	f7fe fcda 	bl	800c9f0 <__sfvwrite_r>
 800e03c:	2300      	movs	r3, #0
 800e03e:	e9ca 3301 	strd	r3, r3, [sl, #4]
 800e042:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e046:	bf00      	nop

0800e048 <__sprint_r>:
 800e048:	6893      	ldr	r3, [r2, #8]
 800e04a:	b10b      	cbz	r3, 800e050 <__sprint_r+0x8>
 800e04c:	f7ff bfc0 	b.w	800dfd0 <__sprint_r.part.0>
 800e050:	b410      	push	{r4}
 800e052:	4618      	mov	r0, r3
 800e054:	6053      	str	r3, [r2, #4]
 800e056:	bc10      	pop	{r4}
 800e058:	4770      	bx	lr
 800e05a:	bf00      	nop

0800e05c <__ascii_wctomb>:
 800e05c:	b121      	cbz	r1, 800e068 <__ascii_wctomb+0xc>
 800e05e:	2aff      	cmp	r2, #255	; 0xff
 800e060:	d804      	bhi.n	800e06c <__ascii_wctomb+0x10>
 800e062:	700a      	strb	r2, [r1, #0]
 800e064:	2001      	movs	r0, #1
 800e066:	4770      	bx	lr
 800e068:	4608      	mov	r0, r1
 800e06a:	4770      	bx	lr
 800e06c:	238a      	movs	r3, #138	; 0x8a
 800e06e:	6003      	str	r3, [r0, #0]
 800e070:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e074:	4770      	bx	lr
 800e076:	bf00      	nop

0800e078 <_write_r>:
 800e078:	b570      	push	{r4, r5, r6, lr}
 800e07a:	460d      	mov	r5, r1
 800e07c:	4c08      	ldr	r4, [pc, #32]	; (800e0a0 <_write_r+0x28>)
 800e07e:	4611      	mov	r1, r2
 800e080:	4606      	mov	r6, r0
 800e082:	461a      	mov	r2, r3
 800e084:	4628      	mov	r0, r5
 800e086:	2300      	movs	r3, #0
 800e088:	6023      	str	r3, [r4, #0]
 800e08a:	f7f8 fe61 	bl	8006d50 <_write>
 800e08e:	1c43      	adds	r3, r0, #1
 800e090:	d000      	beq.n	800e094 <_write_r+0x1c>
 800e092:	bd70      	pop	{r4, r5, r6, pc}
 800e094:	6823      	ldr	r3, [r4, #0]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d0fb      	beq.n	800e092 <_write_r+0x1a>
 800e09a:	6033      	str	r3, [r6, #0]
 800e09c:	bd70      	pop	{r4, r5, r6, pc}
 800e09e:	bf00      	nop
 800e0a0:	20003344 	.word	0x20003344

0800e0a4 <_calloc_r>:
 800e0a4:	b510      	push	{r4, lr}
 800e0a6:	fb02 f101 	mul.w	r1, r2, r1
 800e0aa:	f7fe fee9 	bl	800ce80 <_malloc_r>
 800e0ae:	4604      	mov	r4, r0
 800e0b0:	b1d8      	cbz	r0, 800e0ea <_calloc_r+0x46>
 800e0b2:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800e0b6:	f022 0203 	bic.w	r2, r2, #3
 800e0ba:	3a04      	subs	r2, #4
 800e0bc:	2a24      	cmp	r2, #36	; 0x24
 800e0be:	d81d      	bhi.n	800e0fc <_calloc_r+0x58>
 800e0c0:	2a13      	cmp	r2, #19
 800e0c2:	d914      	bls.n	800e0ee <_calloc_r+0x4a>
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	2a1b      	cmp	r2, #27
 800e0c8:	e9c0 3300 	strd	r3, r3, [r0]
 800e0cc:	d91b      	bls.n	800e106 <_calloc_r+0x62>
 800e0ce:	2a24      	cmp	r2, #36	; 0x24
 800e0d0:	e9c0 3302 	strd	r3, r3, [r0, #8]
 800e0d4:	bf0a      	itet	eq
 800e0d6:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
 800e0da:	f100 0210 	addne.w	r2, r0, #16
 800e0de:	f100 0218 	addeq.w	r2, r0, #24
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	e9c2 3300 	strd	r3, r3, [r2]
 800e0e8:	6093      	str	r3, [r2, #8]
 800e0ea:	4620      	mov	r0, r4
 800e0ec:	bd10      	pop	{r4, pc}
 800e0ee:	4602      	mov	r2, r0
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	e9c2 3300 	strd	r3, r3, [r2]
 800e0f6:	6093      	str	r3, [r2, #8]
 800e0f8:	4620      	mov	r0, r4
 800e0fa:	bd10      	pop	{r4, pc}
 800e0fc:	2100      	movs	r1, #0
 800e0fe:	f7fa faeb 	bl	80086d8 <memset>
 800e102:	4620      	mov	r0, r4
 800e104:	bd10      	pop	{r4, pc}
 800e106:	f100 0208 	add.w	r2, r0, #8
 800e10a:	e7f1      	b.n	800e0f0 <_calloc_r+0x4c>

0800e10c <_close_r>:
 800e10c:	b538      	push	{r3, r4, r5, lr}
 800e10e:	4c07      	ldr	r4, [pc, #28]	; (800e12c <_close_r+0x20>)
 800e110:	2300      	movs	r3, #0
 800e112:	4605      	mov	r5, r0
 800e114:	4608      	mov	r0, r1
 800e116:	6023      	str	r3, [r4, #0]
 800e118:	f7f9 fb4b 	bl	80077b2 <_close>
 800e11c:	1c43      	adds	r3, r0, #1
 800e11e:	d000      	beq.n	800e122 <_close_r+0x16>
 800e120:	bd38      	pop	{r3, r4, r5, pc}
 800e122:	6823      	ldr	r3, [r4, #0]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d0fb      	beq.n	800e120 <_close_r+0x14>
 800e128:	602b      	str	r3, [r5, #0]
 800e12a:	bd38      	pop	{r3, r4, r5, pc}
 800e12c:	20003344 	.word	0x20003344

0800e130 <_fclose_r>:
 800e130:	b570      	push	{r4, r5, r6, lr}
 800e132:	2900      	cmp	r1, #0
 800e134:	d048      	beq.n	800e1c8 <_fclose_r+0x98>
 800e136:	4605      	mov	r5, r0
 800e138:	460c      	mov	r4, r1
 800e13a:	b110      	cbz	r0, 800e142 <_fclose_r+0x12>
 800e13c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d048      	beq.n	800e1d4 <_fclose_r+0xa4>
 800e142:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e144:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e148:	07d0      	lsls	r0, r2, #31
 800e14a:	d440      	bmi.n	800e1ce <_fclose_r+0x9e>
 800e14c:	0599      	lsls	r1, r3, #22
 800e14e:	d530      	bpl.n	800e1b2 <_fclose_r+0x82>
 800e150:	4621      	mov	r1, r4
 800e152:	4628      	mov	r0, r5
 800e154:	f7fe f9ca 	bl	800c4ec <__sflush_r>
 800e158:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e15a:	4606      	mov	r6, r0
 800e15c:	b133      	cbz	r3, 800e16c <_fclose_r+0x3c>
 800e15e:	69e1      	ldr	r1, [r4, #28]
 800e160:	4628      	mov	r0, r5
 800e162:	4798      	blx	r3
 800e164:	2800      	cmp	r0, #0
 800e166:	bfb8      	it	lt
 800e168:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 800e16c:	89a3      	ldrh	r3, [r4, #12]
 800e16e:	061a      	lsls	r2, r3, #24
 800e170:	d43c      	bmi.n	800e1ec <_fclose_r+0xbc>
 800e172:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e174:	b141      	cbz	r1, 800e188 <_fclose_r+0x58>
 800e176:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800e17a:	4299      	cmp	r1, r3
 800e17c:	d002      	beq.n	800e184 <_fclose_r+0x54>
 800e17e:	4628      	mov	r0, r5
 800e180:	f7fe fb42 	bl	800c808 <_free_r>
 800e184:	2300      	movs	r3, #0
 800e186:	6323      	str	r3, [r4, #48]	; 0x30
 800e188:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e18a:	b121      	cbz	r1, 800e196 <_fclose_r+0x66>
 800e18c:	4628      	mov	r0, r5
 800e18e:	f7fe fb3b 	bl	800c808 <_free_r>
 800e192:	2300      	movs	r3, #0
 800e194:	6463      	str	r3, [r4, #68]	; 0x44
 800e196:	f7fe fadb 	bl	800c750 <__sfp_lock_acquire>
 800e19a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e19c:	2200      	movs	r2, #0
 800e19e:	07db      	lsls	r3, r3, #31
 800e1a0:	81a2      	strh	r2, [r4, #12]
 800e1a2:	d51f      	bpl.n	800e1e4 <_fclose_r+0xb4>
 800e1a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e1a6:	f7fe fded 	bl	800cd84 <__retarget_lock_close_recursive>
 800e1aa:	f7fe fad7 	bl	800c75c <__sfp_lock_release>
 800e1ae:	4630      	mov	r0, r6
 800e1b0:	bd70      	pop	{r4, r5, r6, pc}
 800e1b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e1b4:	f7fe fde8 	bl	800cd88 <__retarget_lock_acquire_recursive>
 800e1b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d1c7      	bne.n	800e150 <_fclose_r+0x20>
 800e1c0:	6e66      	ldr	r6, [r4, #100]	; 0x64
 800e1c2:	f016 0601 	ands.w	r6, r6, #1
 800e1c6:	d016      	beq.n	800e1f6 <_fclose_r+0xc6>
 800e1c8:	2600      	movs	r6, #0
 800e1ca:	4630      	mov	r0, r6
 800e1cc:	bd70      	pop	{r4, r5, r6, pc}
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d0fa      	beq.n	800e1c8 <_fclose_r+0x98>
 800e1d2:	e7bd      	b.n	800e150 <_fclose_r+0x20>
 800e1d4:	f7fe fa90 	bl	800c6f8 <__sinit>
 800e1d8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e1da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1de:	07d0      	lsls	r0, r2, #31
 800e1e0:	d4f5      	bmi.n	800e1ce <_fclose_r+0x9e>
 800e1e2:	e7b3      	b.n	800e14c <_fclose_r+0x1c>
 800e1e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e1e6:	f7fe fdd1 	bl	800cd8c <__retarget_lock_release_recursive>
 800e1ea:	e7db      	b.n	800e1a4 <_fclose_r+0x74>
 800e1ec:	6921      	ldr	r1, [r4, #16]
 800e1ee:	4628      	mov	r0, r5
 800e1f0:	f7fe fb0a 	bl	800c808 <_free_r>
 800e1f4:	e7bd      	b.n	800e172 <_fclose_r+0x42>
 800e1f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e1f8:	f7fe fdc8 	bl	800cd8c <__retarget_lock_release_recursive>
 800e1fc:	4630      	mov	r0, r6
 800e1fe:	bd70      	pop	{r4, r5, r6, pc}

0800e200 <__fputwc>:
 800e200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e204:	b082      	sub	sp, #8
 800e206:	4681      	mov	r9, r0
 800e208:	4688      	mov	r8, r1
 800e20a:	4614      	mov	r4, r2
 800e20c:	f7fe fd98 	bl	800cd40 <__locale_mb_cur_max>
 800e210:	2801      	cmp	r0, #1
 800e212:	d103      	bne.n	800e21c <__fputwc+0x1c>
 800e214:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800e218:	2bfe      	cmp	r3, #254	; 0xfe
 800e21a:	d933      	bls.n	800e284 <__fputwc+0x84>
 800e21c:	4642      	mov	r2, r8
 800e21e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800e222:	a901      	add	r1, sp, #4
 800e224:	4648      	mov	r0, r9
 800e226:	f000 f917 	bl	800e458 <_wcrtomb_r>
 800e22a:	1c42      	adds	r2, r0, #1
 800e22c:	4606      	mov	r6, r0
 800e22e:	d02f      	beq.n	800e290 <__fputwc+0x90>
 800e230:	b320      	cbz	r0, 800e27c <__fputwc+0x7c>
 800e232:	f89d c004 	ldrb.w	ip, [sp, #4]
 800e236:	2500      	movs	r5, #0
 800e238:	f10d 0a04 	add.w	sl, sp, #4
 800e23c:	e009      	b.n	800e252 <__fputwc+0x52>
 800e23e:	6823      	ldr	r3, [r4, #0]
 800e240:	1c5a      	adds	r2, r3, #1
 800e242:	6022      	str	r2, [r4, #0]
 800e244:	f883 c000 	strb.w	ip, [r3]
 800e248:	3501      	adds	r5, #1
 800e24a:	42b5      	cmp	r5, r6
 800e24c:	d216      	bcs.n	800e27c <__fputwc+0x7c>
 800e24e:	f815 c00a 	ldrb.w	ip, [r5, sl]
 800e252:	68a3      	ldr	r3, [r4, #8]
 800e254:	3b01      	subs	r3, #1
 800e256:	2b00      	cmp	r3, #0
 800e258:	60a3      	str	r3, [r4, #8]
 800e25a:	daf0      	bge.n	800e23e <__fputwc+0x3e>
 800e25c:	69a7      	ldr	r7, [r4, #24]
 800e25e:	42bb      	cmp	r3, r7
 800e260:	4661      	mov	r1, ip
 800e262:	4622      	mov	r2, r4
 800e264:	4648      	mov	r0, r9
 800e266:	db02      	blt.n	800e26e <__fputwc+0x6e>
 800e268:	f1bc 0f0a 	cmp.w	ip, #10
 800e26c:	d1e7      	bne.n	800e23e <__fputwc+0x3e>
 800e26e:	f000 f89b 	bl	800e3a8 <__swbuf_r>
 800e272:	1c43      	adds	r3, r0, #1
 800e274:	d1e8      	bne.n	800e248 <__fputwc+0x48>
 800e276:	b002      	add	sp, #8
 800e278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e27c:	4640      	mov	r0, r8
 800e27e:	b002      	add	sp, #8
 800e280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e284:	fa5f fc88 	uxtb.w	ip, r8
 800e288:	4606      	mov	r6, r0
 800e28a:	f88d c004 	strb.w	ip, [sp, #4]
 800e28e:	e7d2      	b.n	800e236 <__fputwc+0x36>
 800e290:	89a3      	ldrh	r3, [r4, #12]
 800e292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e296:	81a3      	strh	r3, [r4, #12]
 800e298:	b002      	add	sp, #8
 800e29a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e29e:	bf00      	nop

0800e2a0 <_fputwc_r>:
 800e2a0:	b530      	push	{r4, r5, lr}
 800e2a2:	4605      	mov	r5, r0
 800e2a4:	6e50      	ldr	r0, [r2, #100]	; 0x64
 800e2a6:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 800e2aa:	07c0      	lsls	r0, r0, #31
 800e2ac:	4614      	mov	r4, r2
 800e2ae:	b083      	sub	sp, #12
 800e2b0:	b29a      	uxth	r2, r3
 800e2b2:	d401      	bmi.n	800e2b8 <_fputwc_r+0x18>
 800e2b4:	0590      	lsls	r0, r2, #22
 800e2b6:	d51c      	bpl.n	800e2f2 <_fputwc_r+0x52>
 800e2b8:	0490      	lsls	r0, r2, #18
 800e2ba:	d406      	bmi.n	800e2ca <_fputwc_r+0x2a>
 800e2bc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e2be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e2c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e2c6:	81a3      	strh	r3, [r4, #12]
 800e2c8:	6662      	str	r2, [r4, #100]	; 0x64
 800e2ca:	4628      	mov	r0, r5
 800e2cc:	4622      	mov	r2, r4
 800e2ce:	f7ff ff97 	bl	800e200 <__fputwc>
 800e2d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e2d4:	07da      	lsls	r2, r3, #31
 800e2d6:	4605      	mov	r5, r0
 800e2d8:	d402      	bmi.n	800e2e0 <_fputwc_r+0x40>
 800e2da:	89a3      	ldrh	r3, [r4, #12]
 800e2dc:	059b      	lsls	r3, r3, #22
 800e2de:	d502      	bpl.n	800e2e6 <_fputwc_r+0x46>
 800e2e0:	4628      	mov	r0, r5
 800e2e2:	b003      	add	sp, #12
 800e2e4:	bd30      	pop	{r4, r5, pc}
 800e2e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e2e8:	f7fe fd50 	bl	800cd8c <__retarget_lock_release_recursive>
 800e2ec:	4628      	mov	r0, r5
 800e2ee:	b003      	add	sp, #12
 800e2f0:	bd30      	pop	{r4, r5, pc}
 800e2f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e2f4:	9101      	str	r1, [sp, #4]
 800e2f6:	f7fe fd47 	bl	800cd88 <__retarget_lock_acquire_recursive>
 800e2fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2fe:	9901      	ldr	r1, [sp, #4]
 800e300:	b29a      	uxth	r2, r3
 800e302:	e7d9      	b.n	800e2b8 <_fputwc_r+0x18>

0800e304 <_fstat_r>:
 800e304:	b538      	push	{r3, r4, r5, lr}
 800e306:	460b      	mov	r3, r1
 800e308:	4c07      	ldr	r4, [pc, #28]	; (800e328 <_fstat_r+0x24>)
 800e30a:	4605      	mov	r5, r0
 800e30c:	4611      	mov	r1, r2
 800e30e:	4618      	mov	r0, r3
 800e310:	2300      	movs	r3, #0
 800e312:	6023      	str	r3, [r4, #0]
 800e314:	f7f9 fa55 	bl	80077c2 <_fstat>
 800e318:	1c43      	adds	r3, r0, #1
 800e31a:	d000      	beq.n	800e31e <_fstat_r+0x1a>
 800e31c:	bd38      	pop	{r3, r4, r5, pc}
 800e31e:	6823      	ldr	r3, [r4, #0]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d0fb      	beq.n	800e31c <_fstat_r+0x18>
 800e324:	602b      	str	r3, [r5, #0]
 800e326:	bd38      	pop	{r3, r4, r5, pc}
 800e328:	20003344 	.word	0x20003344

0800e32c <_isatty_r>:
 800e32c:	b538      	push	{r3, r4, r5, lr}
 800e32e:	4c07      	ldr	r4, [pc, #28]	; (800e34c <_isatty_r+0x20>)
 800e330:	2300      	movs	r3, #0
 800e332:	4605      	mov	r5, r0
 800e334:	4608      	mov	r0, r1
 800e336:	6023      	str	r3, [r4, #0]
 800e338:	f7f9 fa94 	bl	8007864 <_isatty>
 800e33c:	1c43      	adds	r3, r0, #1
 800e33e:	d000      	beq.n	800e342 <_isatty_r+0x16>
 800e340:	bd38      	pop	{r3, r4, r5, pc}
 800e342:	6823      	ldr	r3, [r4, #0]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d0fb      	beq.n	800e340 <_isatty_r+0x14>
 800e348:	602b      	str	r3, [r5, #0]
 800e34a:	bd38      	pop	{r3, r4, r5, pc}
 800e34c:	20003344 	.word	0x20003344

0800e350 <_lseek_r>:
 800e350:	b570      	push	{r4, r5, r6, lr}
 800e352:	460d      	mov	r5, r1
 800e354:	4c08      	ldr	r4, [pc, #32]	; (800e378 <_lseek_r+0x28>)
 800e356:	4611      	mov	r1, r2
 800e358:	4606      	mov	r6, r0
 800e35a:	461a      	mov	r2, r3
 800e35c:	4628      	mov	r0, r5
 800e35e:	2300      	movs	r3, #0
 800e360:	6023      	str	r3, [r4, #0]
 800e362:	f7f9 fa0d 	bl	8007780 <_lseek>
 800e366:	1c43      	adds	r3, r0, #1
 800e368:	d000      	beq.n	800e36c <_lseek_r+0x1c>
 800e36a:	bd70      	pop	{r4, r5, r6, pc}
 800e36c:	6823      	ldr	r3, [r4, #0]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d0fb      	beq.n	800e36a <_lseek_r+0x1a>
 800e372:	6033      	str	r3, [r6, #0]
 800e374:	bd70      	pop	{r4, r5, r6, pc}
 800e376:	bf00      	nop
 800e378:	20003344 	.word	0x20003344

0800e37c <_read_r>:
 800e37c:	b570      	push	{r4, r5, r6, lr}
 800e37e:	460d      	mov	r5, r1
 800e380:	4c08      	ldr	r4, [pc, #32]	; (800e3a4 <_read_r+0x28>)
 800e382:	4611      	mov	r1, r2
 800e384:	4606      	mov	r6, r0
 800e386:	461a      	mov	r2, r3
 800e388:	4628      	mov	r0, r5
 800e38a:	2300      	movs	r3, #0
 800e38c:	6023      	str	r3, [r4, #0]
 800e38e:	f7f9 fa04 	bl	800779a <_read>
 800e392:	1c43      	adds	r3, r0, #1
 800e394:	d000      	beq.n	800e398 <_read_r+0x1c>
 800e396:	bd70      	pop	{r4, r5, r6, pc}
 800e398:	6823      	ldr	r3, [r4, #0]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d0fb      	beq.n	800e396 <_read_r+0x1a>
 800e39e:	6033      	str	r3, [r6, #0]
 800e3a0:	bd70      	pop	{r4, r5, r6, pc}
 800e3a2:	bf00      	nop
 800e3a4:	20003344 	.word	0x20003344

0800e3a8 <__swbuf_r>:
 800e3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3aa:	460d      	mov	r5, r1
 800e3ac:	4614      	mov	r4, r2
 800e3ae:	4606      	mov	r6, r0
 800e3b0:	b110      	cbz	r0, 800e3b8 <__swbuf_r+0x10>
 800e3b2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d043      	beq.n	800e440 <__swbuf_r+0x98>
 800e3b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e3bc:	69a3      	ldr	r3, [r4, #24]
 800e3be:	60a3      	str	r3, [r4, #8]
 800e3c0:	b291      	uxth	r1, r2
 800e3c2:	0708      	lsls	r0, r1, #28
 800e3c4:	d51b      	bpl.n	800e3fe <__swbuf_r+0x56>
 800e3c6:	6923      	ldr	r3, [r4, #16]
 800e3c8:	b1cb      	cbz	r3, 800e3fe <__swbuf_r+0x56>
 800e3ca:	b2ed      	uxtb	r5, r5
 800e3cc:	0489      	lsls	r1, r1, #18
 800e3ce:	462f      	mov	r7, r5
 800e3d0:	d522      	bpl.n	800e418 <__swbuf_r+0x70>
 800e3d2:	6822      	ldr	r2, [r4, #0]
 800e3d4:	6961      	ldr	r1, [r4, #20]
 800e3d6:	1ad3      	subs	r3, r2, r3
 800e3d8:	4299      	cmp	r1, r3
 800e3da:	dd29      	ble.n	800e430 <__swbuf_r+0x88>
 800e3dc:	3301      	adds	r3, #1
 800e3de:	68a1      	ldr	r1, [r4, #8]
 800e3e0:	1c50      	adds	r0, r2, #1
 800e3e2:	3901      	subs	r1, #1
 800e3e4:	60a1      	str	r1, [r4, #8]
 800e3e6:	6020      	str	r0, [r4, #0]
 800e3e8:	7015      	strb	r5, [r2, #0]
 800e3ea:	6962      	ldr	r2, [r4, #20]
 800e3ec:	429a      	cmp	r2, r3
 800e3ee:	d02a      	beq.n	800e446 <__swbuf_r+0x9e>
 800e3f0:	89a3      	ldrh	r3, [r4, #12]
 800e3f2:	07db      	lsls	r3, r3, #31
 800e3f4:	d501      	bpl.n	800e3fa <__swbuf_r+0x52>
 800e3f6:	2d0a      	cmp	r5, #10
 800e3f8:	d025      	beq.n	800e446 <__swbuf_r+0x9e>
 800e3fa:	4638      	mov	r0, r7
 800e3fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3fe:	4621      	mov	r1, r4
 800e400:	4630      	mov	r0, r6
 800e402:	f7fd f881 	bl	800b508 <__swsetup_r>
 800e406:	bb20      	cbnz	r0, 800e452 <__swbuf_r+0xaa>
 800e408:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e40c:	6923      	ldr	r3, [r4, #16]
 800e40e:	b291      	uxth	r1, r2
 800e410:	b2ed      	uxtb	r5, r5
 800e412:	0489      	lsls	r1, r1, #18
 800e414:	462f      	mov	r7, r5
 800e416:	d4dc      	bmi.n	800e3d2 <__swbuf_r+0x2a>
 800e418:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800e41a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e41e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800e422:	81a2      	strh	r2, [r4, #12]
 800e424:	6822      	ldr	r2, [r4, #0]
 800e426:	6661      	str	r1, [r4, #100]	; 0x64
 800e428:	6961      	ldr	r1, [r4, #20]
 800e42a:	1ad3      	subs	r3, r2, r3
 800e42c:	4299      	cmp	r1, r3
 800e42e:	dcd5      	bgt.n	800e3dc <__swbuf_r+0x34>
 800e430:	4621      	mov	r1, r4
 800e432:	4630      	mov	r0, r6
 800e434:	f7fe f904 	bl	800c640 <_fflush_r>
 800e438:	b958      	cbnz	r0, 800e452 <__swbuf_r+0xaa>
 800e43a:	6822      	ldr	r2, [r4, #0]
 800e43c:	2301      	movs	r3, #1
 800e43e:	e7ce      	b.n	800e3de <__swbuf_r+0x36>
 800e440:	f7fe f95a 	bl	800c6f8 <__sinit>
 800e444:	e7b8      	b.n	800e3b8 <__swbuf_r+0x10>
 800e446:	4621      	mov	r1, r4
 800e448:	4630      	mov	r0, r6
 800e44a:	f7fe f8f9 	bl	800c640 <_fflush_r>
 800e44e:	2800      	cmp	r0, #0
 800e450:	d0d3      	beq.n	800e3fa <__swbuf_r+0x52>
 800e452:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e456:	e7d0      	b.n	800e3fa <__swbuf_r+0x52>

0800e458 <_wcrtomb_r>:
 800e458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e45a:	4c11      	ldr	r4, [pc, #68]	; (800e4a0 <_wcrtomb_r+0x48>)
 800e45c:	6824      	ldr	r4, [r4, #0]
 800e45e:	b085      	sub	sp, #20
 800e460:	4606      	mov	r6, r0
 800e462:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800e464:	461f      	mov	r7, r3
 800e466:	b151      	cbz	r1, 800e47e <_wcrtomb_r+0x26>
 800e468:	4d0e      	ldr	r5, [pc, #56]	; (800e4a4 <_wcrtomb_r+0x4c>)
 800e46a:	2c00      	cmp	r4, #0
 800e46c:	bf08      	it	eq
 800e46e:	462c      	moveq	r4, r5
 800e470:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 800e474:	47a0      	blx	r4
 800e476:	1c43      	adds	r3, r0, #1
 800e478:	d00c      	beq.n	800e494 <_wcrtomb_r+0x3c>
 800e47a:	b005      	add	sp, #20
 800e47c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e47e:	4a09      	ldr	r2, [pc, #36]	; (800e4a4 <_wcrtomb_r+0x4c>)
 800e480:	2c00      	cmp	r4, #0
 800e482:	bf08      	it	eq
 800e484:	4614      	moveq	r4, r2
 800e486:	460a      	mov	r2, r1
 800e488:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 800e48c:	a901      	add	r1, sp, #4
 800e48e:	47a0      	blx	r4
 800e490:	1c43      	adds	r3, r0, #1
 800e492:	d1f2      	bne.n	800e47a <_wcrtomb_r+0x22>
 800e494:	2200      	movs	r2, #0
 800e496:	238a      	movs	r3, #138	; 0x8a
 800e498:	603a      	str	r2, [r7, #0]
 800e49a:	6033      	str	r3, [r6, #0]
 800e49c:	b005      	add	sp, #20
 800e49e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4a0:	20000038 	.word	0x20000038
 800e4a4:	20000468 	.word	0x20000468
